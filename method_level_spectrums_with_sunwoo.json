{
    "Chart-1": {
        "org.jfree.chart$ChartColor#<clinit>()": -0.23227122923431398,
        "org.jfree.chart$ChartColor#ChartColor(int,int,int)": 0.0,
        "org.jfree.chart$ChartColor#createDefaultPaintArray()": 1.1135152083925908,
        "org.jfree.chart$LegendItem#<clinit>()": -0.2359269615426085,
        "org.jfree.chart$LegendItem#LegendItem(java.lang.String)": -0.050084884339720345,
        "org.jfree.chart$LegendItem#LegendItem(java.lang.String,java.awt.Paint)": -0.07216915325367687,
        "org.jfree.chart$LegendItem#LegendItem(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)": -0.23322357921277923,
        "org.jfree.chart$LegendItem#LegendItem(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint)": -0.13865146625410296,
        "org.jfree.chart$LegendItem#LegendItem(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)": -0.07834707025401137,
        "org.jfree.chart$LegendItem#LegendItem(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Stroke,java.awt.Paint)": -0.028358980856044845,
        "org.jfree.chart$LegendItem#LegendItem(java.text.AttributedString,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)": -0.028358980856044845,
        "org.jfree.chart$LegendItem#LegendItem(java.text.AttributedString,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint)": -0.028358980856044845,
        "org.jfree.chart$LegendItem#LegendItem(java.text.AttributedString,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)": 0.0,
        "org.jfree.chart$LegendItem#LegendItem(java.text.AttributedString,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Stroke,java.awt.Paint)": 0.0,
        "org.jfree.chart$LegendItem#characterIteratorToString(java.text.CharacterIterator)": -0.028358980856044713,
        "org.jfree.chart$LegendItem#clone()": -0.04055179885854976,
        "org.jfree.chart$LegendItem#equals(java.lang.Object)": -0.08415005620910243,
        "org.jfree.chart$LegendItem#getAttributedLabel()": 0.0,
        "org.jfree.chart$LegendItem#getDataset()": -0.15347768198336298,
        "org.jfree.chart$LegendItem#getDatasetIndex()": -0.12257529890018848,
        "org.jfree.chart$LegendItem#getDescription()": 0.0,
        "org.jfree.chart$LegendItem#getFillPaint()": -0.14619864321510567,
        "org.jfree.chart$LegendItem#getFillPaintTransformer()": -0.14619864321510567,
        "org.jfree.chart$LegendItem#getLabel()": -0.19906294652606915,
        "org.jfree.chart$LegendItem#getLabelFont()": -0.14619864321510567,
        "org.jfree.chart$LegendItem#getLabelPaint()": -0.14619864321510567,
        "org.jfree.chart$LegendItem#getLine()": -0.14619864321510567,
        "org.jfree.chart$LegendItem#getLinePaint()": -0.14619864321510567,
        "org.jfree.chart$LegendItem#getLineStroke()": -0.14619864321510567,
        "org.jfree.chart$LegendItem#getOutlinePaint()": -0.14619864321510567,
        "org.jfree.chart$LegendItem#getOutlineStroke()": -0.14619864321510567,
        "org.jfree.chart$LegendItem#getSeriesIndex()": -0.12257529890018848,
        "org.jfree.chart$LegendItem#getSeriesKey()": -0.1498694552698563,
        "org.jfree.chart$LegendItem#getShape()": -0.1498694552698563,
        "org.jfree.chart$LegendItem#getToolTipText()": -0.14619864321510567,
        "org.jfree.chart$LegendItem#getURLText()": -0.14619864321510567,
        "org.jfree.chart$LegendItem#isLineVisible()": -0.14619864321510567,
        "org.jfree.chart$LegendItem#isShapeFilled()": -0.14619864321510567,
        "org.jfree.chart$LegendItem#isShapeOutlineVisible()": -0.14619864321510567,
        "org.jfree.chart$LegendItem#isShapeVisible()": -0.14619864321510567,
        "org.jfree.chart$LegendItem#readObject(java.io.ObjectInputStream)": -0.05008488433972014,
        "org.jfree.chart$LegendItem#setDataset(org.jfree.data.general.Dataset)": -0.2108391886813874,
        "org.jfree.chart$LegendItem#setDatasetIndex(int)": -0.19604796630830612,
        "org.jfree.chart$LegendItem#setDescription(java.lang.String)": 0.0,
        "org.jfree.chart$LegendItem#setFillPaint(java.awt.Paint)": -0.028358980856044713,
        "org.jfree.chart$LegendItem#setFillPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)": -0.06551766001204773,
        "org.jfree.chart$LegendItem#setLabelFont(java.awt.Font)": -0.19906294652606915,
        "org.jfree.chart$LegendItem#setLabelPaint(java.awt.Paint)": -0.04055179885854976,
        "org.jfree.chart$LegendItem#setLine(java.awt.Shape)": 0.0,
        "org.jfree.chart$LegendItem#setLinePaint(java.awt.Paint)": -0.04055179885854976,
        "org.jfree.chart$LegendItem#setLineVisible(boolean)": 0.0,
        "org.jfree.chart$LegendItem#setOutlinePaint(java.awt.Paint)": -0.06551766001204773,
        "org.jfree.chart$LegendItem#setOutlineStroke(java.awt.Stroke)": -0.05008488433972014,
        "org.jfree.chart$LegendItem#setSeriesIndex(int)": -0.2079355641591465,
        "org.jfree.chart$LegendItem#setSeriesKey(java.lang.Comparable)": -0.2079355641591465,
        "org.jfree.chart$LegendItem#setShape(java.awt.Shape)": 0.0,
        "org.jfree.chart$LegendItem#setShapeVisible(boolean)": 0.0,
        "org.jfree.chart$LegendItem#setToolTipText(java.lang.String)": -0.05008488433972014,
        "org.jfree.chart$LegendItem#setURLText(java.lang.String)": -0.05008488433972014,
        "org.jfree.chart$LegendItem#writeObject(java.io.ObjectOutputStream)": -0.05008488433972014,
        "org.jfree.chart$LegendItemCollection#LegendItemCollection()": 0.17107428266831948,
        "org.jfree.chart$LegendItemCollection#add(org.jfree.chart.LegendItem)": -0.17400543882571906,
        "org.jfree.chart$LegendItemCollection#addAll(org.jfree.chart.LegendItemCollection)": -0.20204846718345748,
        "org.jfree.chart$LegendItemCollection#clone()": -0.05008488433972014,
        "org.jfree.chart$LegendItemCollection#equals(java.lang.Object)": -0.07834707025401144,
        "org.jfree.chart$LegendItemCollection#get(int)": -0.1498694552698563,
        "org.jfree.chart$LegendItemCollection#getItemCount()": 0.18759938291521172,
        "org.jfree.chart$LegendItemCollection#iterator()": 0.0,
        "org.jfree.chart.axis$Axis#<clinit>()": -0.7235470024109886,
        "org.jfree.chart.axis$Axis#Axis(java.lang.String)": -0.6892618520089695,
        "org.jfree.chart.axis$Axis#addChangeListener(org.jfree.chart.event.AxisChangeListener)": -0.5615755854570905,
        "org.jfree.chart.axis$Axis#clone()": -0.16052148914407827,
        "org.jfree.chart.axis$Axis#createAndAddEntity(double,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": -0.23861139843803736,
        "org.jfree.chart.axis$Axis#drawAxisLine(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.1930023238262919,
        "org.jfree.chart.axis$Axis#drawLabel(java.lang.String,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)": -0.24392558618905805,
        "org.jfree.chart.axis$Axis#equals(java.lang.Object)": -0.3391581673734103,
        "org.jfree.chart.axis$Axis#fireChangeEvent()": -0.3794264795037842,
        "org.jfree.chart.axis$Axis#getAxisLinePaint()": -0.24392558618905813,
        "org.jfree.chart.axis$Axis#getAxisLineStroke()": -0.24392558618905813,
        "org.jfree.chart.axis$Axis#getFixedDimension()": -0.2720020302400419,
        "org.jfree.chart.axis$Axis#getLabel()": -0.2937610029524005,
        "org.jfree.chart.axis$Axis#getLabelAngle()": -0.2720020302400419,
        "org.jfree.chart.axis$Axis#getLabelEnclosure(java.awt.Graphics2D,org.jfree.chart.util.RectangleEdge)": -0.2720020302400419,
        "org.jfree.chart.axis$Axis#getLabelFont()": -0.2720020302400419,
        "org.jfree.chart.axis$Axis#getLabelInsets()": -0.2720020302400419,
        "org.jfree.chart.axis$Axis#getLabelPaint()": -0.24392558618905813,
        "org.jfree.chart.axis$Axis#getLabelToolTip()": 0.0,
        "org.jfree.chart.axis$Axis#getLabelURL()": 0.0,
        "org.jfree.chart.axis$Axis#getMinorTickMarkInsideLength()": 0.0,
        "org.jfree.chart.axis$Axis#getMinorTickMarkOutsideLength()": 0.0,
        "org.jfree.chart.axis$Axis#getPlot()": -0.6119754587016273,
        "org.jfree.chart.axis$Axis#getTickLabelFont()": -0.27446862826210405,
        "org.jfree.chart.axis$Axis#getTickLabelInsets()": -0.2720020302400419,
        "org.jfree.chart.axis$Axis#getTickLabelPaint()": -0.251767579420058,
        "org.jfree.chart.axis$Axis#getTickMarkInsideLength()": -0.24392558618905813,
        "org.jfree.chart.axis$Axis#getTickMarkOutsideLength()": -0.24392558618905813,
        "org.jfree.chart.axis$Axis#getTickMarkPaint()": -0.24392558618905813,
        "org.jfree.chart.axis$Axis#getTickMarkStroke()": -0.24392558618905813,
        "org.jfree.chart.axis$Axis#hasListener(java.util.EventListener)": -0.04055179885854976,
        "org.jfree.chart.axis$Axis#isAxisLineVisible()": -0.24392558618905813,
        "org.jfree.chart.axis$Axis#isMinorTickMarksVisible()": -0.22220871711569878,
        "org.jfree.chart.axis$Axis#isTickLabelsVisible()": -0.2720020302400419,
        "org.jfree.chart.axis$Axis#isTickMarksVisible()": -0.2491701973307927,
        "org.jfree.chart.axis$Axis#isVisible()": -0.2720020302400419,
        "org.jfree.chart.axis$Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)": -0.5198102418201986,
        "org.jfree.chart.axis$Axis#readObject(java.io.ObjectInputStream)": -0.18366808176420002,
        "org.jfree.chart.axis$Axis#removeChangeListener(org.jfree.chart.event.AxisChangeListener)": -0.1424609268273588,
        "org.jfree.chart.axis$Axis#setAxisLinePaint(java.awt.Paint)": -0.050084884339720345,
        "org.jfree.chart.axis$Axis#setAxisLineStroke(java.awt.Stroke)": -0.04055179885854976,
        "org.jfree.chart.axis$Axis#setAxisLineVisible(boolean)": -0.07216915325367687,
        "org.jfree.chart.axis$Axis#setFixedDimension(double)": -0.028358980856044713,
        "org.jfree.chart.axis$Axis#setLabel(java.lang.String)": -0.05824119095809121,
        "org.jfree.chart.axis$Axis#setLabelAngle(double)": -0.028358980856044845,
        "org.jfree.chart.axis$Axis#setLabelFont(java.awt.Font)": -0.36064693868419595,
        "org.jfree.chart.axis$Axis#setLabelInsets(org.jfree.chart.util.RectangleInsets)": -0.028358980856044845,
        "org.jfree.chart.axis$Axis#setLabelInsets(org.jfree.chart.util.RectangleInsets,boolean)": -0.028358980856044845,
        "org.jfree.chart.axis$Axis#setLabelPaint(java.awt.Paint)": -0.36064693868419595,
        "org.jfree.chart.axis$Axis#setLabelToolTip(java.lang.String)": -0.028358980856044845,
        "org.jfree.chart.axis$Axis#setLabelURL(java.lang.String)": -0.028358980856044845,
        "org.jfree.chart.axis$Axis#setMinorTickMarkInsideLength(float)": -0.028358980856044845,
        "org.jfree.chart.axis$Axis#setMinorTickMarkOutsideLength(float)": -0.028358980856044845,
        "org.jfree.chart.axis$Axis#setMinorTickMarksVisible(boolean)": -0.028358980856044845,
        "org.jfree.chart.axis$Axis#setPlot(org.jfree.chart.plot.Plot)": -0.5529893332765622,
        "org.jfree.chart.axis$Axis#setTickLabelFont(java.awt.Font)": -0.36064693868419595,
        "org.jfree.chart.axis$Axis#setTickLabelInsets(org.jfree.chart.util.RectangleInsets)": -0.028358980856044845,
        "org.jfree.chart.axis$Axis#setTickLabelPaint(java.awt.Paint)": -0.36064693868419595,
        "org.jfree.chart.axis$Axis#setTickLabelsVisible(boolean)": -0.028358980856044845,
        "org.jfree.chart.axis$Axis#setTickMarkInsideLength(float)": -0.028358980856044845,
        "org.jfree.chart.axis$Axis#setTickMarkOutsideLength(float)": -0.028358980856044845,
        "org.jfree.chart.axis$Axis#setTickMarkPaint(java.awt.Paint)": -0.028358980856044845,
        "org.jfree.chart.axis$Axis#setTickMarkStroke(java.awt.Stroke)": -0.028358980856044845,
        "org.jfree.chart.axis$Axis#setTickMarksVisible(boolean)": -0.028358980856044845,
        "org.jfree.chart.axis$Axis#setVisible(boolean)": -0.028358980856044845,
        "org.jfree.chart.axis$Axis#writeObject(java.io.ObjectOutputStream)": -0.18366808176420002,
        "org.jfree.chart.axis$AxisLocation#<clinit>()": 1.2229548483632355,
        "org.jfree.chart.axis$AxisLocation#AxisLocation(java.lang.String)": -0.12283158926366944,
        "org.jfree.chart.axis$AxisLocation#equals(java.lang.Object)": -0.16396371623317477,
        "org.jfree.chart.axis$AxisLocation#getOpposite()": 0.0,
        "org.jfree.chart.axis$AxisLocation#getOpposite(org.jfree.chart.axis.AxisLocation)": 0.0,
        "org.jfree.chart.axis$AxisLocation#readResolve()": -0.13476480835473537,
        "org.jfree.chart.axis$AxisLocation#toString()": -0.1498694552698563,
        "org.jfree.chart.axis$CategoryAnchor#<clinit>()": 1.4043621905011805,
        "org.jfree.chart.axis$CategoryAnchor#CategoryAnchor(java.lang.String)": 0.058575752874275744,
        "org.jfree.chart.axis$CategoryAnchor#equals(java.lang.Object)": -0.14986945526985632,
        "org.jfree.chart.axis$CategoryAnchor#readResolve()": -0.09990786985003938,
        "org.jfree.chart.axis$CategoryAnchor#toString()": -0.10940470912000877,
        "org.jfree.chart.axis$CategoryAxis#CategoryAxis()": -0.028358980856044845,
        "org.jfree.chart.axis$CategoryAxis#CategoryAxis(java.lang.String)": -0.39773985717359805,
        "org.jfree.chart.axis$CategoryAxis#addCategoryLabelToolTip(java.lang.Comparable,java.lang.String)": -0.050084884339720345,
        "org.jfree.chart.axis$CategoryAxis#calculateCategoryGapSize(int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.17726568553333502,
        "org.jfree.chart.axis$CategoryAxis#calculateCategorySize(int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.19906294652606907,
        "org.jfree.chart.axis$CategoryAxis#calculateTextBlockHeight(org.jfree.chart.text.TextBlock,org.jfree.chart.axis.CategoryLabelPosition,java.awt.Graphics2D)": -0.174005438825719,
        "org.jfree.chart.axis$CategoryAxis#calculateTextBlockWidth(org.jfree.chart.text.TextBlock,org.jfree.chart.axis.CategoryLabelPosition,java.awt.Graphics2D)": -0.05824119095809121,
        "org.jfree.chart.axis$CategoryAxis#clearCategoryLabelToolTips()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#clone()": -0.08964663030613909,
        "org.jfree.chart.axis$CategoryAxis#configure()": -0.35852898355038043,
        "org.jfree.chart.axis$CategoryAxis#createLabel(java.lang.Comparable,float,org.jfree.chart.util.RectangleEdge,java.awt.Graphics2D)": -0.186813812111334,
        "org.jfree.chart.axis$CategoryAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": -0.18366808176420008,
        "org.jfree.chart.axis$CategoryAxis#drawCategoryLabels(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)": -0.19300232382629187,
        "org.jfree.chart.axis$CategoryAxis#drawTickMarks(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState)": -0.18992473224313475,
        "org.jfree.chart.axis$CategoryAxis#equalPaintMaps(java.util.Map,java.util.Map)": -0.17726568553333522,
        "org.jfree.chart.axis$CategoryAxis#equals(java.lang.Object)": -0.18048594638621732,
        "org.jfree.chart.axis$CategoryAxis#getCategoryEnd(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.17726568553333502,
        "org.jfree.chart.axis$CategoryAxis#getCategoryJava2DCoordinate(org.jfree.chart.axis.CategoryAnchor,int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.04055179885854976,
        "org.jfree.chart.axis$CategoryAxis#getCategoryLabelPositionOffset()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryLabelPositions()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryLabelToolTip(java.lang.Comparable)": -0.09488668094824826,
        "org.jfree.chart.axis$CategoryAxis#getCategoryMargin()": -0.13865146625410296,
        "org.jfree.chart.axis$CategoryAxis#getCategoryMiddle(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.17726568553333502,
        "org.jfree.chart.axis$CategoryAxis#getCategoryMiddle(java.lang.Comparable,java.util.List,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.17726568553333502,
        "org.jfree.chart.axis$CategoryAxis#getCategorySeriesMiddle(int,int,int,int,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getCategorySeriesMiddle(java.lang.Comparable,java.lang.Comparable,org.jfree.data.category.CategoryDataset,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.04055179885854976,
        "org.jfree.chart.axis$CategoryAxis#getCategoryStart(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.17726568553333502,
        "org.jfree.chart.axis$CategoryAxis#getLowerMargin()": -0.19906294652606915,
        "org.jfree.chart.axis$CategoryAxis#getMaximumCategoryLabelLines()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getMaximumCategoryLabelWidthRatio()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getTickLabelFont(java.lang.Comparable)": -0.186813812111334,
        "org.jfree.chart.axis$CategoryAxis#getTickLabelPaint(java.lang.Comparable)": -0.186813812111334,
        "org.jfree.chart.axis$CategoryAxis#getUpperMargin()": -0.19906294652606915,
        "org.jfree.chart.axis$CategoryAxis#hashCode()": -0.2050056543565114,
        "org.jfree.chart.axis$CategoryAxis#readObject(java.io.ObjectInputStream)": -0.10473945641744527,
        "org.jfree.chart.axis$CategoryAxis#readPaintMap(java.io.ObjectInputStream)": -0.10473945641744531,
        "org.jfree.chart.axis$CategoryAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.2020484671834575,
        "org.jfree.chart.axis$CategoryAxis#removeCategoryLabelToolTip(java.lang.Comparable)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)": -0.2020484671834575,
        "org.jfree.chart.axis$CategoryAxis#setCategoryLabelPositionOffset(int)": -0.028358980856044845,
        "org.jfree.chart.axis$CategoryAxis#setCategoryLabelPositions(org.jfree.chart.axis.CategoryLabelPositions)": -0.028358980856044845,
        "org.jfree.chart.axis$CategoryAxis#setCategoryMargin(double)": -0.10473945641744527,
        "org.jfree.chart.axis$CategoryAxis#setLowerMargin(double)": -0.028358980856044845,
        "org.jfree.chart.axis$CategoryAxis#setMaximumCategoryLabelLines(int)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#setMaximumCategoryLabelWidthRatio(float)": -0.028358980856044845,
        "org.jfree.chart.axis$CategoryAxis#setTickLabelFont(java.lang.Comparable,java.awt.Font)": -0.050084884339720345,
        "org.jfree.chart.axis$CategoryAxis#setTickLabelPaint(java.lang.Comparable,java.awt.Paint)": -0.05824119095809121,
        "org.jfree.chart.axis$CategoryAxis#setUpperMargin(double)": -0.028358980856044845,
        "org.jfree.chart.axis$CategoryAxis#writeObject(java.io.ObjectOutputStream)": -0.10473945641744527,
        "org.jfree.chart.axis$CategoryAxis#writePaintMap(java.util.Map,java.io.ObjectOutputStream)": -0.10473945641744531,
        "org.jfree.chart.axis$ValueAxis#<clinit>()": -0.6924056568094228,
        "org.jfree.chart.axis$ValueAxis#ValueAxis(java.lang.String,org.jfree.chart.axis.TickUnitSource)": -0.6575047938825819,
        "org.jfree.chart.axis$ValueAxis#calculateAnchorPoint(org.jfree.chart.axis.ValueTick,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.24392558618905805,
        "org.jfree.chart.axis$ValueAxis#centerRange(double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#clone()": -0.13476480835473537,
        "org.jfree.chart.axis$ValueAxis#drawAxisLine(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.24392558618905805,
        "org.jfree.chart.axis$ValueAxis#drawTickMarksAndLabels(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": -0.24392558618905805,
        "org.jfree.chart.axis$ValueAxis#equals(java.lang.Object)": -0.2961212990786474,
        "org.jfree.chart.axis$ValueAxis#findMaximumTickLabelHeight(java.util.List,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)": -0.17726568553333502,
        "org.jfree.chart.axis$ValueAxis#findMaximumTickLabelWidth(java.util.List,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)": -0.259465157019579,
        "org.jfree.chart.axis$ValueAxis#getAutoRangeMinimumSize()": -0.5512651492575862,
        "org.jfree.chart.axis$ValueAxis#getAutoTickIndex()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getDefaultAutoRange()": -0.28179234989214597,
        "org.jfree.chart.axis$ValueAxis#getDownArrow()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getFixedAutoRange()": -0.5512651492575862,
        "org.jfree.chart.axis$ValueAxis#getLeftArrow()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getLowerBound()": -0.2305006801583458,
        "org.jfree.chart.axis$ValueAxis#getLowerMargin()": -0.5512651492575862,
        "org.jfree.chart.axis$ValueAxis#getMinorTickCount()": -0.27446862826210405,
        "org.jfree.chart.axis$ValueAxis#getRange()": -0.43316248809632274,
        "org.jfree.chart.axis$ValueAxis#getRightArrow()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getStandardTickUnits()": -0.2720020302400419,
        "org.jfree.chart.axis$ValueAxis#getUpArrow()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getUpperBound()": -0.2305006801583458,
        "org.jfree.chart.axis$ValueAxis#getUpperMargin()": -0.5512651492575862,
        "org.jfree.chart.axis$ValueAxis#isAutoRange()": -0.5751973272453115,
        "org.jfree.chart.axis$ValueAxis#isAutoTickUnitSelection()": -0.27446862826210405,
        "org.jfree.chart.axis$ValueAxis#isInverted()": -0.28661417945788337,
        "org.jfree.chart.axis$ValueAxis#isNegativeArrowVisible()": 0.0,
        "org.jfree.chart.axis$ValueAxis#isPositiveArrowVisible()": 0.0,
        "org.jfree.chart.axis$ValueAxis#isVerticalTickLabels()": -0.27446862826210405,
        "org.jfree.chart.axis$ValueAxis#lengthToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.26702902492806624,
        "org.jfree.chart.axis$ValueAxis#pan(double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#readObject(java.io.ObjectInputStream)": -0.17070318947481322,
        "org.jfree.chart.axis$ValueAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)": -0.2720020302400419,
        "org.jfree.chart.axis$ValueAxis#resizeRange(double)": -0.08964663030613909,
        "org.jfree.chart.axis$ValueAxis#resizeRange(double,double)": -0.08964663030613909,
        "org.jfree.chart.axis$ValueAxis#resizeRange2(double,double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setAutoRange(boolean)": -0.09488668094824809,
        "org.jfree.chart.axis$ValueAxis#setAutoRange(boolean,boolean)": -0.09488668094824809,
        "org.jfree.chart.axis$ValueAxis#setAutoRangeMinimumSize(double)": -0.19300232382629187,
        "org.jfree.chart.axis$ValueAxis#setAutoRangeMinimumSize(double,boolean)": -0.19300232382629187,
        "org.jfree.chart.axis$ValueAxis#setAutoTickIndex(int)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setAutoTickUnitSelection(boolean)": -0.028358980856044845,
        "org.jfree.chart.axis$ValueAxis#setAutoTickUnitSelection(boolean,boolean)": -0.13476480835473537,
        "org.jfree.chart.axis$ValueAxis#setDefaultAutoRange(org.jfree.data.Range)": -0.10473945641744527,
        "org.jfree.chart.axis$ValueAxis#setDownArrow(java.awt.Shape)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setFixedAutoRange(double)": -0.06551766001204767,
        "org.jfree.chart.axis$ValueAxis#setInverted(boolean)": -0.05824119095809121,
        "org.jfree.chart.axis$ValueAxis#setLeftArrow(java.awt.Shape)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setLowerBound(double)": -0.07834707025401137,
        "org.jfree.chart.axis$ValueAxis#setLowerMargin(double)": -0.12257529890018852,
        "org.jfree.chart.axis$ValueAxis#setMinorTickCount(int)": -0.028358980856044845,
        "org.jfree.chart.axis$ValueAxis#setNegativeArrowVisible(boolean)": -0.028358980856044845,
        "org.jfree.chart.axis$ValueAxis#setPositiveArrowVisible(boolean)": -0.028358980856044845,
        "org.jfree.chart.axis$ValueAxis#setRange(double,double)": -0.12257529890018852,
        "org.jfree.chart.axis$ValueAxis#setRange(org.jfree.data.Range)": -0.1673567452300334,
        "org.jfree.chart.axis$ValueAxis#setRange(org.jfree.data.Range,boolean,boolean)": -0.6152727176256476,
        "org.jfree.chart.axis$ValueAxis#setRangeAboutValue(double,double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setRangeWithMargins(double,double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setRangeWithMargins(org.jfree.data.Range)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setRangeWithMargins(org.jfree.data.Range,boolean,boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setRightArrow(java.awt.Shape)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setStandardTickUnits(org.jfree.chart.axis.TickUnitSource)": -0.10473945641744527,
        "org.jfree.chart.axis$ValueAxis#setUpArrow(java.awt.Shape)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setUpperBound(double)": -0.06551766001204767,
        "org.jfree.chart.axis$ValueAxis#setUpperMargin(double)": -0.12257529890018852,
        "org.jfree.chart.axis$ValueAxis#setVerticalTickLabels(boolean)": -0.028358980856044845,
        "org.jfree.chart.axis$ValueAxis#writeObject(java.io.ObjectOutputStream)": -0.17070318947481322,
        "org.jfree.chart.axis$ValueAxis#zoomRange(double,double)": -0.028358980856044845,
        "org.jfree.chart.entity$CategoryItemEntity#CategoryItemEntity(java.awt.Shape,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,java.lang.Comparable,java.lang.Comparable)": -0.07216915325367687,
        "org.jfree.chart.entity$CategoryItemEntity#equals(java.lang.Object)": -0.050084884339720345,
        "org.jfree.chart.entity$CategoryItemEntity#getColumnKey()": 0.0,
        "org.jfree.chart.entity$CategoryItemEntity#getDataset()": 0.0,
        "org.jfree.chart.entity$CategoryItemEntity#getRowKey()": 0.0,
        "org.jfree.chart.entity$CategoryItemEntity#setColumnKey(java.lang.Comparable)": -0.028358980856044713,
        "org.jfree.chart.entity$CategoryItemEntity#setDataset(org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.chart.entity$CategoryItemEntity#setRowKey(java.lang.Comparable)": -0.028358980856044713,
        "org.jfree.chart.entity$CategoryItemEntity#toString()": 0.0,
        "org.jfree.chart.entity$ChartEntity#ChartEntity(java.awt.Shape)": -0.06551766001204767,
        "org.jfree.chart.entity$ChartEntity#ChartEntity(java.awt.Shape,java.lang.String)": -0.06551766001204767,
        "org.jfree.chart.entity$ChartEntity#ChartEntity(java.awt.Shape,java.lang.String,java.lang.String)": -0.18681381211133408,
        "org.jfree.chart.entity$ChartEntity#clone()": -0.07834707025401144,
        "org.jfree.chart.entity$ChartEntity#equals(java.lang.Object)": -0.14619864321510567,
        "org.jfree.chart.entity$ChartEntity#getArea()": 0.0,
        "org.jfree.chart.entity$ChartEntity#getImageMapAreaTag(org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)": 0.0,
        "org.jfree.chart.entity$ChartEntity#getPolyCoords(java.awt.Shape)": 0.0,
        "org.jfree.chart.entity$ChartEntity#getRectCoords(java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.entity$ChartEntity#getShapeCoords()": 0.0,
        "org.jfree.chart.entity$ChartEntity#getShapeType()": 0.0,
        "org.jfree.chart.entity$ChartEntity#getToolTipText()": 0.0,
        "org.jfree.chart.entity$ChartEntity#getURLText()": 0.0,
        "org.jfree.chart.entity$ChartEntity#hashCode()": 0.0,
        "org.jfree.chart.entity$ChartEntity#readObject(java.io.ObjectInputStream)": -0.07834707025401144,
        "org.jfree.chart.entity$ChartEntity#setArea(java.awt.Shape)": -0.07216915325367701,
        "org.jfree.chart.entity$ChartEntity#setToolTipText(java.lang.String)": -0.07216915325367701,
        "org.jfree.chart.entity$ChartEntity#setURLText(java.lang.String)": -0.07216915325367701,
        "org.jfree.chart.entity$ChartEntity#toString()": 0.0,
        "org.jfree.chart.entity$ChartEntity#writeObject(java.io.ObjectOutputStream)": -0.07834707025401144,
        "org.jfree.chart.entity$PlotEntity#PlotEntity(java.awt.Shape,org.jfree.chart.plot.Plot)": 0.0,
        "org.jfree.chart.entity$PlotEntity#PlotEntity(java.awt.Shape,org.jfree.chart.plot.Plot,java.lang.String)": 0.0,
        "org.jfree.chart.entity$PlotEntity#PlotEntity(java.awt.Shape,org.jfree.chart.plot.Plot,java.lang.String,java.lang.String)": -0.09990786985003938,
        "org.jfree.chart.entity$PlotEntity#clone()": 0.0,
        "org.jfree.chart.entity$PlotEntity#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.entity$PlotEntity#getPlot()": 0.0,
        "org.jfree.chart.entity$PlotEntity#hashCode()": 0.0,
        "org.jfree.chart.entity$PlotEntity#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.entity$PlotEntity#toString()": 0.0,
        "org.jfree.chart.entity$PlotEntity#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.event$ChartChangeEvent#ChartChangeEvent(java.lang.Object)": 0.6501180012112394,
        "org.jfree.chart.event$ChartChangeEvent#ChartChangeEvent(java.lang.Object,org.jfree.chart.JFreeChart)": 0.0,
        "org.jfree.chart.event$ChartChangeEvent#ChartChangeEvent(java.lang.Object,org.jfree.chart.JFreeChart,org.jfree.chart.event.ChartChangeEventType)": -0.6956684364156652,
        "org.jfree.chart.event$ChartChangeEvent#getChart()": 0.0,
        "org.jfree.chart.event$ChartChangeEvent#getType()": 0.0,
        "org.jfree.chart.event$ChartChangeEvent#setChart(org.jfree.chart.JFreeChart)": -0.40374976236031457,
        "org.jfree.chart.event$ChartChangeEvent#setType(org.jfree.chart.event.ChartChangeEventType)": -0.1344572608862814,
        "org.jfree.chart.event$ChartChangeEventType#<clinit>()": 0.6501180012112394,
        "org.jfree.chart.event$ChartChangeEventType#ChartChangeEventType(java.lang.String)": -0.6956684364156652,
        "org.jfree.chart.event$ChartChangeEventType#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.event$ChartChangeEventType#hashCode()": 0.0,
        "org.jfree.chart.event$ChartChangeEventType#readResolve()": 0.0,
        "org.jfree.chart.event$ChartChangeEventType#toString()": 0.0,
        "org.jfree.chart.event$DatasetChangeInfo#DatasetChangeInfo()": -0.6534463244782066,
        "org.jfree.chart.event$PlotChangeEvent#PlotChangeEvent(org.jfree.chart.plot.Plot)": 1.140203502490098,
        "org.jfree.chart.event$PlotChangeEvent#getPlot()": 0.0,
        "org.jfree.chart.labels$ItemLabelAnchor#<clinit>()": 0.8345304338338583,
        "org.jfree.chart.labels$ItemLabelAnchor#ItemLabelAnchor(java.lang.String)": -0.5112560037930466,
        "org.jfree.chart.labels$ItemLabelAnchor#equals(java.lang.Object)": -0.49111849208629293,
        "org.jfree.chart.labels$ItemLabelAnchor#readResolve()": -0.281792349892146,
        "org.jfree.chart.labels$ItemLabelAnchor#toString()": -0.28661417945788337,
        "org.jfree.chart.labels$ItemLabelPosition#ItemLabelPosition()": -0.07216915325367687,
        "org.jfree.chart.labels$ItemLabelPosition#ItemLabelPosition(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.chart.text.TextAnchor)": 0.840072889625567,
        "org.jfree.chart.labels$ItemLabelPosition#ItemLabelPosition(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)": -0.5084860519734339,
        "org.jfree.chart.labels$ItemLabelPosition#equals(java.lang.Object)": -0.48199521856225663,
        "org.jfree.chart.labels$ItemLabelPosition#getAngle()": 0.0,
        "org.jfree.chart.labels$ItemLabelPosition#getItemLabelAnchor()": 0.0,
        "org.jfree.chart.labels$ItemLabelPosition#getRotationAnchor()": 0.0,
        "org.jfree.chart.labels$ItemLabelPosition#getTextAnchor()": 0.0,
        "org.jfree.chart.labels$StandardCategorySeriesLabelGenerator#StandardCategorySeriesLabelGenerator()": 1.1981545323998115,
        "org.jfree.chart.labels$StandardCategorySeriesLabelGenerator#StandardCategorySeriesLabelGenerator(java.lang.String)": -0.15417621597419318,
        "org.jfree.chart.labels$StandardCategorySeriesLabelGenerator#clone()": -0.1804859463862174,
        "org.jfree.chart.labels$StandardCategorySeriesLabelGenerator#createItemArray(org.jfree.data.category.CategoryDataset,int)": -0.08964663030613909,
        "org.jfree.chart.labels$StandardCategorySeriesLabelGenerator#equals(java.lang.Object)": -0.37114095621872134,
        "org.jfree.chart.labels$StandardCategorySeriesLabelGenerator#generateLabel(org.jfree.data.category.CategoryDataset,int)": -0.08964663030613909,
        "org.jfree.chart.labels$StandardCategorySeriesLabelGenerator#hashCode()": -0.028358980856044713,
        "org.jfree.chart.plot$CategoryPlot#<clinit>()": 1.436465536223464,
        "org.jfree.chart.plot$CategoryPlot#CategoryPlot()": 1.706077506056614,
        "org.jfree.chart.plot$CategoryPlot#CategoryPlot(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)": 1.436465536223464,
        "org.jfree.chart.plot$CategoryPlot#addAnnotation(org.jfree.chart.annotations.CategoryAnnotation)": -0.04055179885854976,
        "org.jfree.chart.plot$CategoryPlot#addAnnotation(org.jfree.chart.annotations.CategoryAnnotation,boolean)": -0.04055179885854976,
        "org.jfree.chart.plot$CategoryPlot#addDomainMarker(int,org.jfree.chart.plot.CategoryMarker,org.jfree.chart.util.Layer)": -0.05824119095809121,
        "org.jfree.chart.plot$CategoryPlot#addDomainMarker(int,org.jfree.chart.plot.CategoryMarker,org.jfree.chart.util.Layer,boolean)": -0.05824119095809121,
        "org.jfree.chart.plot$CategoryPlot#addDomainMarker(org.jfree.chart.plot.CategoryMarker)": -0.04055179885854976,
        "org.jfree.chart.plot$CategoryPlot#addDomainMarker(org.jfree.chart.plot.CategoryMarker,org.jfree.chart.util.Layer)": -0.05824119095809121,
        "org.jfree.chart.plot$CategoryPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": -0.08415005620910256,
        "org.jfree.chart.plot$CategoryPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)": -0.08415005620910256,
        "org.jfree.chart.plot$CategoryPlot#addRangeMarker(org.jfree.chart.plot.Marker)": -0.04055179885854976,
        "org.jfree.chart.plot$CategoryPlot#addRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": -0.08415005620910256,
        "org.jfree.chart.plot$CategoryPlot#annotationChanged(org.jfree.chart.event.AnnotationChangeEvent)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.2020484671834575,
        "org.jfree.chart.plot$CategoryPlot#calculateDomainAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)": -0.2020484671834575,
        "org.jfree.chart.plot$CategoryPlot#calculateRangeAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)": -0.2020484671834575,
        "org.jfree.chart.plot$CategoryPlot#canSelectByPoint()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#canSelectByRegion()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#checkAxisIndices(java.util.List)": 0.09067909859655898,
        "org.jfree.chart.plot$CategoryPlot#clearAnnotations()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#clearDomainAxes()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#clearDomainMarkers()": -0.04055179885854976,
        "org.jfree.chart.plot$CategoryPlot#clearDomainMarkers(int)": -0.04055179885854976,
        "org.jfree.chart.plot$CategoryPlot#clearRangeAxes()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#clearRangeMarkers()": -0.06551766001204767,
        "org.jfree.chart.plot$CategoryPlot#clearRangeMarkers(int)": -0.04055179885854976,
        "org.jfree.chart.plot$CategoryPlot#clearSelection()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#clone()": -0.07216915325367687,
        "org.jfree.chart.plot$CategoryPlot#cloneMarkerMap(java.util.Map)": -0.07216915325367701,
        "org.jfree.chart.plot$CategoryPlot#configureDomainAxes()": 1.436465536223464,
        "org.jfree.chart.plot$CategoryPlot#configureRangeAxes()": 1.436465536223464,
        "org.jfree.chart.plot$CategoryPlot#datasetChanged(org.jfree.data.event.DatasetChangeEvent)": 1.436465536223464,
        "org.jfree.chart.plot$CategoryPlot#datasetsMappedToDomainAxis(int)": -0.19906294652606907,
        "org.jfree.chart.plot$CategoryPlot#datasetsMappedToRangeAxis(int)": -0.3585289835503804,
        "org.jfree.chart.plot$CategoryPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)": -0.2020484671834575,
        "org.jfree.chart.plot$CategoryPlot#drawAnnotations(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)": -0.19300232382629187,
        "org.jfree.chart.plot$CategoryPlot#drawAxes(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)": -0.19300232382629187,
        "org.jfree.chart.plot$CategoryPlot#drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.186813812111334,
        "org.jfree.chart.plot$CategoryPlot#drawDomainCrosshair(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation,int,java.lang.Comparable,java.lang.Comparable,java.awt.Stroke,java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#drawDomainGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.19300232382629187,
        "org.jfree.chart.plot$CategoryPlot#drawDomainMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.util.Layer)": -0.19300232382629187,
        "org.jfree.chart.plot$CategoryPlot#drawRangeCrosshair(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation,double,org.jfree.chart.axis.ValueAxis,java.awt.Stroke,java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#drawRangeGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)": -0.19300232382629187,
        "org.jfree.chart.plot$CategoryPlot#drawRangeLine(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,java.awt.Stroke,java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#drawRangeMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.util.Layer)": -0.19300232382629187,
        "org.jfree.chart.plot$CategoryPlot#drawZeroRangeBaseline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.19300232382629187,
        "org.jfree.chart.plot$CategoryPlot#equals(java.lang.Object)": -0.18048594638621732,
        "org.jfree.chart.plot$CategoryPlot#findSelectionStateForDataset(org.jfree.data.category.CategoryDataset,java.lang.Object)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getAnchorValue()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getAnnotations()": -0.1930023238262919,
        "org.jfree.chart.plot$CategoryPlot#getAxisOffset()": -0.028358980856044713,
        "org.jfree.chart.plot$CategoryPlot#getCategories()": -0.028358980856044845,
        "org.jfree.chart.plot$CategoryPlot#getCategoriesForAxis(org.jfree.chart.axis.CategoryAxis)": -0.19906294652606907,
        "org.jfree.chart.plot$CategoryPlot#getColumnRenderingOrder()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getCrosshairDatasetIndex()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDataRange(org.jfree.chart.axis.ValueAxis)": -0.3585289835503804,
        "org.jfree.chart.plot$CategoryPlot#getDataset()": -0.050084884339720345,
        "org.jfree.chart.plot$CategoryPlot#getDataset(int)": 1.436465536223464,
        "org.jfree.chart.plot$CategoryPlot#getDatasetCount()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDatasetRenderingOrder()": -0.1930023238262919,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxis()": -0.07216915325367687,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxis(int)": -0.3100670805604584,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisCount()": -0.23592696154260834,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisEdge()": -0.1707031894748132,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisEdge(int)": -0.2020484671834575,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisForDataset(int)": -0.19604796630830604,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisIndex(org.jfree.chart.axis.CategoryAxis)": -0.028358980856044845,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisLocation()": -0.2020484671834575,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisLocation(int)": -0.2020484671834575,
        "org.jfree.chart.plot$CategoryPlot#getDomainCrosshairColumnKey()": -0.1930023238262919,
        "org.jfree.chart.plot$CategoryPlot#getDomainCrosshairPaint()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainCrosshairRowKey()": -0.1930023238262919,
        "org.jfree.chart.plot$CategoryPlot#getDomainCrosshairStroke()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainGridlinePaint()": -0.04055179885854976,
        "org.jfree.chart.plot$CategoryPlot#getDomainGridlinePosition()": -0.04055179885854976,
        "org.jfree.chart.plot$CategoryPlot#getDomainGridlineStroke()": -0.04055179885854976,
        "org.jfree.chart.plot$CategoryPlot#getDomainMarkers(int,org.jfree.chart.util.Layer)": -0.1930023238262919,
        "org.jfree.chart.plot$CategoryPlot#getDomainMarkers(org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDrawSharedDomainAxis()": -0.028358980856044713,
        "org.jfree.chart.plot$CategoryPlot#getFixedDomainAxisSpace()": -0.04055179885854976,
        "org.jfree.chart.plot$CategoryPlot#getFixedLegendItems()": -0.05008488433972014,
        "org.jfree.chart.plot$CategoryPlot#getFixedRangeAxisSpace()": -0.04055179885854976,
        "org.jfree.chart.plot$CategoryPlot#getIndexOf(org.jfree.chart.renderer.category.CategoryItemRenderer)": 1.623952033691694,
        "org.jfree.chart.plot$CategoryPlot#getLegendItems()": -0.2020484671834575,
        "org.jfree.chart.plot$CategoryPlot#getOrientation()": -0.2165712614060955,
        "org.jfree.chart.plot$CategoryPlot#getPlotType()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxis()": -0.26200081268055625,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxis(int)": 1.436465536223464,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisCount()": -0.23592696154260834,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisEdge()": -0.19300232382629187,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisEdge(int)": -0.2020484671834575,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisForDataset(int)": -0.19604796630830604,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisIndex(org.jfree.chart.axis.ValueAxis)": -0.028358980856044845,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisLocation()": -0.028358980856044845,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisLocation(int)": -0.2020484671834575,
        "org.jfree.chart.plot$CategoryPlot#getRangeCrosshairPaint()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeCrosshairStroke()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeCrosshairValue()": -0.1930023238262919,
        "org.jfree.chart.plot$CategoryPlot#getRangeGridlinePaint()": -0.1930023238262919,
        "org.jfree.chart.plot$CategoryPlot#getRangeGridlineStroke()": -0.1930023238262919,
        "org.jfree.chart.plot$CategoryPlot#getRangeMarkers(int,org.jfree.chart.util.Layer)": -0.1930023238262919,
        "org.jfree.chart.plot$CategoryPlot#getRangeMarkers(org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeMinorGridlinePaint()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeMinorGridlineStroke()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeZeroBaselinePaint()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeZeroBaselineStroke()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRenderer()": -0.25434892768433803,
        "org.jfree.chart.plot$CategoryPlot#getRenderer(int)": -0.3008102318518383,
        "org.jfree.chart.plot$CategoryPlot#getRendererCount()": -0.23592696154260834,
        "org.jfree.chart.plot$CategoryPlot#getRendererForDataset(org.jfree.data.category.CategoryDataset)": -0.3585289835503804,
        "org.jfree.chart.plot$CategoryPlot#getRowRenderingOrder()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getShadowGenerator()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getWeight()": -0.04055179885854976,
        "org.jfree.chart.plot$CategoryPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#indexOf(org.jfree.data.category.CategoryDataset)": -0.16396371623317477,
        "org.jfree.chart.plot$CategoryPlot#integerise(java.awt.geom.Rectangle2D)": -0.20204846718345748,
        "org.jfree.chart.plot$CategoryPlot#isDomainCrosshairVisible()": -0.1930023238262919,
        "org.jfree.chart.plot$CategoryPlot#isDomainGridlinesVisible()": -0.1930023238262919,
        "org.jfree.chart.plot$CategoryPlot#isDomainPannable()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#isDomainZoomable()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#isRangeCrosshairLockedOnData()": -0.07834707025401144,
        "org.jfree.chart.plot$CategoryPlot#isRangeCrosshairVisible()": -0.19604796630830612,
        "org.jfree.chart.plot$CategoryPlot#isRangeGridlinesVisible()": -0.1930023238262919,
        "org.jfree.chart.plot$CategoryPlot#isRangeMinorGridlinesVisible()": -0.1673567452300333,
        "org.jfree.chart.plot$CategoryPlot#isRangePannable()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#isRangeZeroBaselineVisible()": -0.19604796630830612,
        "org.jfree.chart.plot$CategoryPlot#isRangeZoomable()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#mapDatasetToDomainAxes(int,java.util.List)": 1.436465536223464,
        "org.jfree.chart.plot$CategoryPlot#mapDatasetToDomainAxis(int,int)": 1.436465536223464,
        "org.jfree.chart.plot$CategoryPlot#mapDatasetToRangeAxes(int,java.util.List)": 1.436465536223464,
        "org.jfree.chart.plot$CategoryPlot#mapDatasetToRangeAxis(int,int)": 1.436465536223464,
        "org.jfree.chart.plot$CategoryPlot#panDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#panRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#readObject(java.io.ObjectInputStream)": -0.08415005620910256,
        "org.jfree.chart.plot$CategoryPlot#removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": -0.028358980856044845,
        "org.jfree.chart.plot$CategoryPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)": -0.028358980856044845,
        "org.jfree.chart.plot$CategoryPlot#removeDomainMarker(org.jfree.chart.plot.Marker)": -0.028358980856044845,
        "org.jfree.chart.plot$CategoryPlot#removeDomainMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": -0.028358980856044845,
        "org.jfree.chart.plot$CategoryPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": -0.028358980856044845,
        "org.jfree.chart.plot$CategoryPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)": -0.028358980856044845,
        "org.jfree.chart.plot$CategoryPlot#removeRangeMarker(org.jfree.chart.plot.Marker)": -0.028358980856044845,
        "org.jfree.chart.plot$CategoryPlot#removeRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": -0.028358980856044845,
        "org.jfree.chart.plot$CategoryPlot#render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.CategoryCrosshairState)": -0.19300232382629187,
        "org.jfree.chart.plot$CategoryPlot#rendererChanged(org.jfree.chart.event.RendererChangeEvent)": -0.24392558618905805,
        "org.jfree.chart.plot$CategoryPlot#select(double,double,java.awt.geom.Rectangle2D,org.jfree.chart.RenderingSource)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#select(java.awt.geom.GeneralPath,java.awt.geom.Rectangle2D,org.jfree.chart.RenderingSource)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setAnchorValue(double)": -0.028358980856044845,
        "org.jfree.chart.plot$CategoryPlot#setAnchorValue(double,boolean)": -0.028358980856044845,
        "org.jfree.chart.plot$CategoryPlot#setAxisOffset(org.jfree.chart.util.RectangleInsets)": -0.23861139843803744,
        "org.jfree.chart.plot$CategoryPlot#setColumnRenderingOrder(org.jfree.chart.util.SortOrder)": -0.028358980856044845,
        "org.jfree.chart.plot$CategoryPlot#setCrosshairDatasetIndex(int)": -0.028358980856044845,
        "org.jfree.chart.plot$CategoryPlot#setCrosshairDatasetIndex(int,boolean)": -0.19604796630830604,
        "org.jfree.chart.plot$CategoryPlot#setDataset(int,org.jfree.data.category.CategoryDataset)": 1.6738013567848942,
        "org.jfree.chart.plot$CategoryPlot#setDataset(org.jfree.data.category.CategoryDataset)": 1.706077506056614,
        "org.jfree.chart.plot$CategoryPlot#setDatasetRenderingOrder(org.jfree.chart.plot.DatasetRenderingOrder)": -0.028358980856044845,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxes(org.jfree.chart.axis.CategoryAxis[])": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxis(int,org.jfree.chart.axis.CategoryAxis)": -0.10473945641744527,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxis(int,org.jfree.chart.axis.CategoryAxis,boolean)": -0.10473945641744527,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxis(org.jfree.chart.axis.CategoryAxis)": -0.08415005620910256,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation)": -0.028358980856044845,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)": 1.436465536223464,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxisLocation(org.jfree.chart.axis.AxisLocation)": -0.028358980856044845,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)": 1.436465536223464,
        "org.jfree.chart.plot$CategoryPlot#setDomainCrosshairColumnKey(java.lang.Comparable)": -0.028358980856044845,
        "org.jfree.chart.plot$CategoryPlot#setDomainCrosshairColumnKey(java.lang.Comparable,boolean)": -0.19604796630830604,
        "org.jfree.chart.plot$CategoryPlot#setDomainCrosshairPaint(java.awt.Paint)": -0.028358980856044845,
        "org.jfree.chart.plot$CategoryPlot#setDomainCrosshairRowKey(java.lang.Comparable)": -0.028358980856044845,
        "org.jfree.chart.plot$CategoryPlot#setDomainCrosshairRowKey(java.lang.Comparable,boolean)": -0.19604796630830604,
        "org.jfree.chart.plot$CategoryPlot#setDomainCrosshairStroke(java.awt.Stroke)": -0.028358980856044713,
        "org.jfree.chart.plot$CategoryPlot#setDomainCrosshairVisible(boolean)": -0.028358980856044845,
        "org.jfree.chart.plot$CategoryPlot#setDomainGridlinePaint(java.awt.Paint)": -0.23861139843803744,
        "org.jfree.chart.plot$CategoryPlot#setDomainGridlinePosition(org.jfree.chart.axis.CategoryAnchor)": -0.028358980856044845,
        "org.jfree.chart.plot$CategoryPlot#setDomainGridlineStroke(java.awt.Stroke)": -0.028358980856044845,
        "org.jfree.chart.plot$CategoryPlot#setDomainGridlinesVisible(boolean)": -0.08964663030613909,
        "org.jfree.chart.plot$CategoryPlot#setDrawSharedDomainAxis(boolean)": -0.028358980856044845,
        "org.jfree.chart.plot$CategoryPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace)": -0.04055179885854976,
        "org.jfree.chart.plot$CategoryPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)": -0.050084884339720345,
        "org.jfree.chart.plot$CategoryPlot#setFixedLegendItems(org.jfree.chart.LegendItemCollection)": -0.04055179885854976,
        "org.jfree.chart.plot$CategoryPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace)": -0.04055179885854976,
        "org.jfree.chart.plot$CategoryPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)": -0.050084884339720345,
        "org.jfree.chart.plot$CategoryPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)": -0.1424609268273588,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxes(org.jfree.chart.axis.ValueAxis[])": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis)": -0.10940470912000881,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis,boolean)": -0.10940470912000881,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxis(org.jfree.chart.axis.ValueAxis)": -0.08964663030613909,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation)": -0.028358980856044845,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)": 1.436465536223464,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxisLocation(org.jfree.chart.axis.AxisLocation)": -0.028358980856044845,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)": 1.436465536223464,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairLockedOnData(boolean)": -0.028358980856044845,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairPaint(java.awt.Paint)": -0.04055179885854976,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairStroke(java.awt.Stroke)": -0.028358980856044845,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairValue(double)": -0.028358980856044845,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairValue(double,boolean)": -0.19604796630830604,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairVisible(boolean)": -0.028358980856044845,
        "org.jfree.chart.plot$CategoryPlot#setRangeGridlinePaint(java.awt.Paint)": -0.23861139843803744,
        "org.jfree.chart.plot$CategoryPlot#setRangeGridlineStroke(java.awt.Stroke)": -0.028358980856044845,
        "org.jfree.chart.plot$CategoryPlot#setRangeGridlinesVisible(boolean)": -0.028358980856044845,
        "org.jfree.chart.plot$CategoryPlot#setRangeMinorGridlinePaint(java.awt.Paint)": -0.04055179885854976,
        "org.jfree.chart.plot$CategoryPlot#setRangeMinorGridlineStroke(java.awt.Stroke)": -0.028358980856044845,
        "org.jfree.chart.plot$CategoryPlot#setRangeMinorGridlinesVisible(boolean)": -0.028358980856044845,
        "org.jfree.chart.plot$CategoryPlot#setRangePannable(boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeZeroBaselinePaint(java.awt.Paint)": -0.24127743385032083,
        "org.jfree.chart.plot$CategoryPlot#setRangeZeroBaselineStroke(java.awt.Stroke)": -0.028358980856044845,
        "org.jfree.chart.plot$CategoryPlot#setRangeZeroBaselineVisible(boolean)": -0.028358980856044845,
        "org.jfree.chart.plot$CategoryPlot#setRenderer(int,org.jfree.chart.renderer.category.CategoryItemRenderer)": -0.05824119095809121,
        "org.jfree.chart.plot$CategoryPlot#setRenderer(int,org.jfree.chart.renderer.category.CategoryItemRenderer,boolean)": 1.7416529297459886,
        "org.jfree.chart.plot$CategoryPlot#setRenderer(org.jfree.chart.renderer.category.CategoryItemRenderer)": 1.7617588090419087,
        "org.jfree.chart.plot$CategoryPlot#setRenderer(org.jfree.chart.renderer.category.CategoryItemRenderer,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRenderers(org.jfree.chart.renderer.category.CategoryItemRenderer[])": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRowRenderingOrder(org.jfree.chart.util.SortOrder)": -0.028358980856044845,
        "org.jfree.chart.plot$CategoryPlot#setShadowGenerator(org.jfree.chart.util.ShadowGenerator)": -0.028358980856044845,
        "org.jfree.chart.plot$CategoryPlot#setWeight(int)": -0.09990786985003938,
        "org.jfree.chart.plot$CategoryPlot#writeObject(java.io.ObjectOutputStream)": -0.08415005620910243,
        "org.jfree.chart.plot$CategoryPlot#zoom(double)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#zoomDomainAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)": 0.0,
        "org.jfree.chart.plot$DatasetRenderingOrder#<clinit>()": 1.2346762163291674,
        "org.jfree.chart.plot$DatasetRenderingOrder#DatasetRenderingOrder(java.lang.String)": -0.1111102212977374,
        "org.jfree.chart.plot$DatasetRenderingOrder#equals(java.lang.Object)": -0.12673430455870788,
        "org.jfree.chart.plot$DatasetRenderingOrder#hashCode()": 0.0,
        "org.jfree.chart.plot$DatasetRenderingOrder#readResolve()": -0.12673430455870788,
        "org.jfree.chart.plot$DatasetRenderingOrder#toString()": -0.12673430455870793,
        "org.jfree.chart.plot$DefaultDrawingSupplier#<clinit>()": 1.1135152083925908,
        "org.jfree.chart.plot$DefaultDrawingSupplier#DefaultDrawingSupplier()": 1.1135152083925908,
        "org.jfree.chart.plot$DefaultDrawingSupplier#DefaultDrawingSupplier(java.awt.Paint[],java.awt.Paint[],java.awt.Paint[],java.awt.Stroke[],java.awt.Stroke[],java.awt.Shape[])": 1.1135152083925908,
        "org.jfree.chart.plot$DefaultDrawingSupplier#DefaultDrawingSupplier(java.awt.Paint[],java.awt.Paint[],java.awt.Stroke[],java.awt.Stroke[],java.awt.Shape[])": -0.050084884339720345,
        "org.jfree.chart.plot$DefaultDrawingSupplier#clone()": -0.454125921880391,
        "org.jfree.chart.plot$DefaultDrawingSupplier#createStandardSeriesShapes()": 1.1135152083925908,
        "org.jfree.chart.plot$DefaultDrawingSupplier#equalShapes(java.awt.Shape[],java.awt.Shape[])": -0.3259083298422448,
        "org.jfree.chart.plot$DefaultDrawingSupplier#equals(java.lang.Object)": -0.3281367337840617,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextFillPaint()": -0.028358980856044713,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextOutlinePaint()": -0.04055179885854976,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextOutlineStroke()": -0.028358980856044713,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextPaint()": -0.2937610029524005,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextShape()": -0.15347768198336298,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextStroke()": -0.20500565435651152,
        "org.jfree.chart.plot$DefaultDrawingSupplier#intArray(double,double,double)": -0.23227122923431398,
        "org.jfree.chart.plot$DefaultDrawingSupplier#intArray(double,double,double,double)": -0.23227122923431398,
        "org.jfree.chart.plot$DefaultDrawingSupplier#readObject(java.io.ObjectInputStream)": -0.18681381211133408,
        "org.jfree.chart.plot$DefaultDrawingSupplier#writeObject(java.io.ObjectOutputStream)": -0.18681381211133408,
        "org.jfree.chart.plot$Plot#<clinit>()": 1.1228890422280697,
        "org.jfree.chart.plot$Plot#Plot()": 1.1228890422280697,
        "org.jfree.chart.plot$Plot#addChangeListener(org.jfree.chart.event.PlotChangeListener)": -0.5460784241225219,
        "org.jfree.chart.plot$Plot#annotationChanged(org.jfree.chart.event.AnnotationChangeEvent)": 0.0,
        "org.jfree.chart.plot$Plot#axisChanged(org.jfree.chart.event.AxisChangeEvent)": -0.3794264795037842,
        "org.jfree.chart.plot$Plot#clone()": -0.17726568553333522,
        "org.jfree.chart.plot$Plot#createAndAddEntity(java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,java.lang.String,java.lang.String)": -0.23861139843803744,
        "org.jfree.chart.plot$Plot#datasetChanged(org.jfree.data.event.DatasetChangeEvent)": -0.11392249394338579,
        "org.jfree.chart.plot$Plot#drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.06551766001204767,
        "org.jfree.chart.plot$Plot#drawBackgroundImage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.24655634997036824,
        "org.jfree.chart.plot$Plot#drawNoDataMessage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.10473945641744531,
        "org.jfree.chart.plot$Plot#drawOutline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.24655634997036824,
        "org.jfree.chart.plot$Plot#equals(java.lang.Object)": -0.314637985734531,
        "org.jfree.chart.plot$Plot#fillBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.06551766001204767,
        "org.jfree.chart.plot$Plot#fillBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation)": -0.24655634997036832,
        "org.jfree.chart.plot$Plot#fireChangeEvent()": 1.2431096915291795,
        "org.jfree.chart.plot$Plot#getBackgroundAlpha()": -0.04055179885854976,
        "org.jfree.chart.plot$Plot#getBackgroundImage()": -0.04055179885854976,
        "org.jfree.chart.plot$Plot#getBackgroundImageAlignment()": 0.0,
        "org.jfree.chart.plot$Plot#getBackgroundImageAlpha()": 0.0,
        "org.jfree.chart.plot$Plot#getBackgroundPaint()": -0.3916838634955373,
        "org.jfree.chart.plot$Plot#getDatasetGroup()": 0.0,
        "org.jfree.chart.plot$Plot#getDrawingSupplier()": -0.5019648658807383,
        "org.jfree.chart.plot$Plot#getForegroundAlpha()": -0.251767579420058,
        "org.jfree.chart.plot$Plot#getInsets()": -0.28420915525814605,
        "org.jfree.chart.plot$Plot#getLegendItems()": -0.028358980856044713,
        "org.jfree.chart.plot$Plot#getNoDataMessage()": 0.0,
        "org.jfree.chart.plot$Plot#getNoDataMessageFont()": 0.0,
        "org.jfree.chart.plot$Plot#getNoDataMessagePaint()": 0.0,
        "org.jfree.chart.plot$Plot#getOutlinePaint()": -0.04055179885854976,
        "org.jfree.chart.plot$Plot#getOutlineStroke()": -0.04055179885854976,
        "org.jfree.chart.plot$Plot#getParent()": -0.14270504699411035,
        "org.jfree.chart.plot$Plot#getRectX(double,double,double,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.plot$Plot#getRectY(double,double,double,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.plot$Plot#getRootPlot()": 0.0,
        "org.jfree.chart.plot$Plot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$Plot#isNotify()": -0.09488668094824826,
        "org.jfree.chart.plot$Plot#isOutlineVisible()": -0.1930023238262919,
        "org.jfree.chart.plot$Plot#isSubplot()": 0.0,
        "org.jfree.chart.plot$Plot#markerChanged(org.jfree.chart.event.MarkerChangeEvent)": 0.0,
        "org.jfree.chart.plot$Plot#notifyListeners(org.jfree.chart.event.PlotChangeEvent)": 1.140203502490098,
        "org.jfree.chart.plot$Plot#readObject(java.io.ObjectInputStream)": -0.1804859463862174,
        "org.jfree.chart.plot$Plot#removeChangeListener(org.jfree.chart.event.PlotChangeListener)": -0.05824119095809121,
        "org.jfree.chart.plot$Plot#resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)": -0.2695222657364014,
        "org.jfree.chart.plot$Plot#resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)": -0.2695222657364014,
        "org.jfree.chart.plot$Plot#setBackgroundAlpha(float)": -0.028358980856044845,
        "org.jfree.chart.plot$Plot#setBackgroundImage(java.awt.Image)": -0.028358980856044845,
        "org.jfree.chart.plot$Plot#setBackgroundImageAlignment(int)": -0.028358980856044845,
        "org.jfree.chart.plot$Plot#setBackgroundImageAlpha(float)": -0.028358980856044845,
        "org.jfree.chart.plot$Plot#setBackgroundPaint(java.awt.Paint)": -0.4017514776927173,
        "org.jfree.chart.plot$Plot#setDatasetGroup(org.jfree.data.general.DatasetGroup)": -0.05824119095809133,
        "org.jfree.chart.plot$Plot#setDrawingSupplier(org.jfree.chart.plot.DrawingSupplier)": -0.3937077550314837,
        "org.jfree.chart.plot$Plot#setDrawingSupplier(org.jfree.chart.plot.DrawingSupplier,boolean)": 0.0,
        "org.jfree.chart.plot$Plot#setForegroundAlpha(float)": -0.08415005620910256,
        "org.jfree.chart.plot$Plot#setInsets(org.jfree.chart.util.RectangleInsets)": -0.186813812111334,
        "org.jfree.chart.plot$Plot#setInsets(org.jfree.chart.util.RectangleInsets,boolean)": -0.2020484671834575,
        "org.jfree.chart.plot$Plot#setNoDataMessage(java.lang.String)": -0.028358980856044845,
        "org.jfree.chart.plot$Plot#setNoDataMessageFont(java.awt.Font)": -0.028358980856044845,
        "org.jfree.chart.plot$Plot#setNoDataMessagePaint(java.awt.Paint)": -0.028358980856044845,
        "org.jfree.chart.plot$Plot#setNotify(boolean)": -0.09488668094824809,
        "org.jfree.chart.plot$Plot#setOutlinePaint(java.awt.Paint)": -0.3937077550314837,
        "org.jfree.chart.plot$Plot#setOutlineStroke(java.awt.Stroke)": -0.028358980856044845,
        "org.jfree.chart.plot$Plot#setOutlineVisible(boolean)": -0.028358980856044845,
        "org.jfree.chart.plot$Plot#setParent(org.jfree.chart.plot.Plot)": -0.13865146625410296,
        "org.jfree.chart.plot$Plot#writeObject(java.io.ObjectOutputStream)": -0.1804859463862174,
        "org.jfree.chart.plot$Plot#zoom(double)": 0.0,
        "org.jfree.chart.plot$PlotOrientation#<clinit>()": 1.2196236513796466,
        "org.jfree.chart.plot$PlotOrientation#PlotOrientation(java.lang.String)": -0.12616278624725819,
        "org.jfree.chart.plot$PlotOrientation#equals(java.lang.Object)": -0.13476480835473537,
        "org.jfree.chart.plot$PlotOrientation#hashCode()": 0.0,
        "org.jfree.chart.plot$PlotOrientation#readResolve()": -0.1307947720516584,
        "org.jfree.chart.plot$PlotOrientation#toString()": -0.13476480835473548,
        "org.jfree.chart.renderer$AbstractRenderer#<clinit>()": -0.5319508394745774,
        "org.jfree.chart.renderer$AbstractRenderer#AbstractRenderer()": 0.840072889625567,
        "org.jfree.chart.renderer$AbstractRenderer#addChangeListener(org.jfree.chart.event.RendererChangeListener)": 1.2808709401185823,
        "org.jfree.chart.renderer$AbstractRenderer#calculateLabelAnchorPoint(org.jfree.chart.labels.ItemLabelAnchor,double,double,org.jfree.chart.plot.PlotOrientation)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#clearSeriesPaints(boolean)": -0.3585289835503804,
        "org.jfree.chart.renderer$AbstractRenderer#clearSeriesStrokes(boolean)": -0.3585289835503804,
        "org.jfree.chart.renderer$AbstractRenderer#clone()": -0.28420915525814594,
        "org.jfree.chart.renderer$AbstractRenderer#equals(java.lang.Object)": -0.5953766307596291,
        "org.jfree.chart.renderer$AbstractRenderer#fireChangeEvent()": -0.8449529067919738,
        "org.jfree.chart.renderer$AbstractRenderer#getAutoPopulateSeriesFillPaint()": -0.028358980856044713,
        "org.jfree.chart.renderer$AbstractRenderer#getAutoPopulateSeriesOutlinePaint()": -0.028358980856044713,
        "org.jfree.chart.renderer$AbstractRenderer#getAutoPopulateSeriesOutlineStroke()": -0.028358980856044713,
        "org.jfree.chart.renderer$AbstractRenderer#getAutoPopulateSeriesPaint()": -0.36064693868419595,
        "org.jfree.chart.renderer$AbstractRenderer#getAutoPopulateSeriesShape()": -0.028358980856044713,
        "org.jfree.chart.renderer$AbstractRenderer#getAutoPopulateSeriesStroke()": -0.36064693868419595,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseCreateEntities()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseFillPaint()": -0.028358980856044713,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseItemLabelFont()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseItemLabelPaint()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseItemLabelsVisible()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseLegendShape()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseLegendTextFont()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseLegendTextPaint()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseNegativeItemLabelPosition()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseOutlinePaint()": -0.028358980856044713,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseOutlineStroke()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getBasePaint()": -0.028358980856044713,
        "org.jfree.chart.renderer$AbstractRenderer#getBasePositiveItemLabelPosition()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseSeriesVisible()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseSeriesVisibleInLegend()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseShape()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseStroke()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getDataBoundsIncludesVisibleSeriesOnly()": -0.4635028749609744,
        "org.jfree.chart.renderer$AbstractRenderer#getDefaultEntityRadius()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getItemCreateEntity(int,int,boolean)": -0.050084884339720345,
        "org.jfree.chart.renderer$AbstractRenderer#getItemFillPaint(int,int,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getItemLabelAnchorOffset()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getItemLabelFont(int,int,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getItemLabelPaint(int,int,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getItemOutlinePaint(int,int,boolean)": -0.06551766001204767,
        "org.jfree.chart.renderer$AbstractRenderer#getItemOutlineStroke(int,int,boolean)": -0.09488668094824809,
        "org.jfree.chart.renderer$AbstractRenderer#getItemPaint(int,int,boolean)": -0.20793556415914666,
        "org.jfree.chart.renderer$AbstractRenderer#getItemShape(int,int,boolean)": -0.07834707025401137,
        "org.jfree.chart.renderer$AbstractRenderer#getItemStroke(int,int,boolean)": -0.1707031894748132,
        "org.jfree.chart.renderer$AbstractRenderer#getItemVisible(int,int)": -0.19300232382629187,
        "org.jfree.chart.renderer$AbstractRenderer#getLegendShape(int)": -0.16052148914407816,
        "org.jfree.chart.renderer$AbstractRenderer#getLegendTextFont(int)": -0.19604796630830604,
        "org.jfree.chart.renderer$AbstractRenderer#getLegendTextPaint(int)": -0.19604796630830604,
        "org.jfree.chart.renderer$AbstractRenderer#getNegativeItemLabelPosition(int,int,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getPositiveItemLabelPosition(int,int,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getSelectedItemAttributes()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesCreateEntities(int)": -0.050084884339720345,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesFillPaint(int)": -0.028358980856044845,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesItemLabelFont(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesItemLabelPaint(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesItemLabelsVisible(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesNegativeItemLabelPosition(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesOutlinePaint(int)": -0.1307947720516584,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesOutlineStroke(int)": -0.18048594638621732,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesPaint(int)": -0.2793635062994416,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesPositiveItemLabelPosition(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesShape(int)": -0.14986945526985632,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesStroke(int)": -0.2020484671834575,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesVisible(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesVisibleInLegend(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getTreatLegendShapeAsLine()": -0.05008488433972014,
        "org.jfree.chart.renderer$AbstractRenderer#hasListener(java.util.EventListener)": -0.05824119095809133,
        "org.jfree.chart.renderer$AbstractRenderer#hashCode()": -0.22220871711569878,
        "org.jfree.chart.renderer$AbstractRenderer#isItemLabelVisible(int,int,boolean)": -0.10473945641744527,
        "org.jfree.chart.renderer$AbstractRenderer#isSeriesItemLabelsVisible(int)": -0.10473945641744527,
        "org.jfree.chart.renderer$AbstractRenderer#isSeriesVisible(int)": -0.41563780949881934,
        "org.jfree.chart.renderer$AbstractRenderer#isSeriesVisibleInLegend(int)": -0.1673567452300334,
        "org.jfree.chart.renderer$AbstractRenderer#lookupLegendShape(int)": -0.16052148914407816,
        "org.jfree.chart.renderer$AbstractRenderer#lookupLegendTextFont(int)": -0.19604796630830604,
        "org.jfree.chart.renderer$AbstractRenderer#lookupLegendTextPaint(int)": -0.19604796630830604,
        "org.jfree.chart.renderer$AbstractRenderer#lookupSeriesFillPaint(int)": -0.028358980856044845,
        "org.jfree.chart.renderer$AbstractRenderer#lookupSeriesOutlinePaint(int)": -0.1307947720516584,
        "org.jfree.chart.renderer$AbstractRenderer#lookupSeriesOutlineStroke(int)": -0.18048594638621732,
        "org.jfree.chart.renderer$AbstractRenderer#lookupSeriesPaint(int)": -0.2793635062994416,
        "org.jfree.chart.renderer$AbstractRenderer#lookupSeriesShape(int)": -0.14986945526985632,
        "org.jfree.chart.renderer$AbstractRenderer#lookupSeriesStroke(int)": -0.2020484671834575,
        "org.jfree.chart.renderer$AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)": -0.8449529067919738,
        "org.jfree.chart.renderer$AbstractRenderer#readObject(java.io.ObjectInputStream)": -0.2769223579330775,
        "org.jfree.chart.renderer$AbstractRenderer#removeChangeListener(org.jfree.chart.event.RendererChangeListener)": -0.07216915325367687,
        "org.jfree.chart.renderer$AbstractRenderer#setAutoPopulateSeriesFillPaint(boolean)": -0.028358980856044713,
        "org.jfree.chart.renderer$AbstractRenderer#setAutoPopulateSeriesOutlinePaint(boolean)": -0.028358980856044713,
        "org.jfree.chart.renderer$AbstractRenderer#setAutoPopulateSeriesOutlineStroke(boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setAutoPopulateSeriesPaint(boolean)": -0.028358980856044713,
        "org.jfree.chart.renderer$AbstractRenderer#setAutoPopulateSeriesShape(boolean)": -0.05008488433972014,
        "org.jfree.chart.renderer$AbstractRenderer#setAutoPopulateSeriesStroke(boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseCreateEntities(boolean)": -0.04055179885854976,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseCreateEntities(boolean,boolean)": -0.04055179885854976,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseFillPaint(java.awt.Paint)": -0.04055179885854976,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseFillPaint(java.awt.Paint,boolean)": -0.04055179885854976,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseItemLabelFont(java.awt.Font)": -0.36275838847523856,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseItemLabelFont(java.awt.Font,boolean)": -0.36275838847523856,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseItemLabelPaint(java.awt.Paint)": -0.36275838847523856,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseItemLabelPaint(java.awt.Paint,boolean)": -0.36275838847523856,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseItemLabelsVisible(boolean)": -0.050084884339720345,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseItemLabelsVisible(boolean,boolean)": -0.050084884339720345,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseLegendShape(java.awt.Shape)": -0.5408700691608508,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseLegendTextFont(java.awt.Font)": -0.050084884339720345,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseLegendTextPaint(java.awt.Paint)": -0.05824119095809121,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseNegativeItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition)": -0.2961212990786474,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseNegativeItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition,boolean)": -0.2961212990786474,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseOutlinePaint(java.awt.Paint)": -0.09990786985003938,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseOutlinePaint(java.awt.Paint,boolean)": -0.09990786985003938,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseOutlineStroke(java.awt.Stroke)": -0.050084884339720345,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseOutlineStroke(java.awt.Stroke,boolean)": -0.050084884339720345,
        "org.jfree.chart.renderer$AbstractRenderer#setBasePaint(java.awt.Paint)": -0.06551766001204767,
        "org.jfree.chart.renderer$AbstractRenderer#setBasePaint(java.awt.Paint,boolean)": -0.06551766001204767,
        "org.jfree.chart.renderer$AbstractRenderer#setBasePositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition)": -0.2961212990786474,
        "org.jfree.chart.renderer$AbstractRenderer#setBasePositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition,boolean)": -0.2961212990786474,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseSeriesVisible(boolean)": -0.04055179885854976,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseSeriesVisible(boolean,boolean)": -0.04055179885854976,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseSeriesVisibleInLegend(boolean)": -0.04055179885854976,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseSeriesVisibleInLegend(boolean,boolean)": -0.04055179885854976,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseShape(java.awt.Shape)": -0.07216915325367687,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseShape(java.awt.Shape,boolean)": -0.07216915325367687,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseStroke(java.awt.Stroke)": -0.050084884339720345,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseStroke(java.awt.Stroke,boolean)": -0.050084884339720345,
        "org.jfree.chart.renderer$AbstractRenderer#setDataBoundsIncludesVisibleSeriesOnly(boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setDefaultEntityRadius(int)": -0.04055179885854976,
        "org.jfree.chart.renderer$AbstractRenderer#setItemLabelAnchorOffset(double)": -0.028358980856044845,
        "org.jfree.chart.renderer$AbstractRenderer#setLegendShape(int,java.awt.Shape)": -0.04055179885854976,
        "org.jfree.chart.renderer$AbstractRenderer#setLegendTextFont(int,java.awt.Font)": -0.04055179885854976,
        "org.jfree.chart.renderer$AbstractRenderer#setLegendTextPaint(int,java.awt.Paint)": -0.04055179885854976,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesCreateEntities(int,java.lang.Boolean)": -0.04055179885854976,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesCreateEntities(int,java.lang.Boolean,boolean)": -0.04055179885854976,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesFillPaint(int,java.awt.Paint)": -0.05824119095809121,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesFillPaint(int,java.awt.Paint,boolean)": -0.06551766001204767,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesItemLabelFont(int,java.awt.Font)": -0.04055179885854976,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesItemLabelFont(int,java.awt.Font,boolean)": -0.04055179885854976,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesItemLabelPaint(int,java.awt.Paint)": -0.050084884339720345,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesItemLabelPaint(int,java.awt.Paint,boolean)": -0.050084884339720345,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesItemLabelsVisible(int,boolean)": -0.028358980856044845,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesItemLabelsVisible(int,java.lang.Boolean)": -0.05824119095809121,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesItemLabelsVisible(int,java.lang.Boolean,boolean)": -0.05824119095809121,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesNegativeItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition)": -0.050084884339720345,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesNegativeItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition,boolean)": -0.050084884339720345,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesOutlinePaint(int,java.awt.Paint)": -0.05824119095809121,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesOutlinePaint(int,java.awt.Paint,boolean)": -0.06551766001204767,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesOutlineStroke(int,java.awt.Stroke)": -0.05824119095809121,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesOutlineStroke(int,java.awt.Stroke,boolean)": -0.05824119095809121,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesPaint(int,java.awt.Paint)": -0.07834707025401137,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesPaint(int,java.awt.Paint,boolean)": -0.2961212990786474,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesPositiveItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition)": -0.050084884339720345,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesPositiveItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition,boolean)": -0.050084884339720345,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesShape(int,java.awt.Shape)": -0.050084884339720345,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesShape(int,java.awt.Shape,boolean)": -0.16052148914407816,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesStroke(int,java.awt.Stroke)": -0.05824119095809121,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesStroke(int,java.awt.Stroke,boolean)": -0.2137174612948672,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesVisible(int,java.lang.Boolean)": -0.050084884339720345,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesVisible(int,java.lang.Boolean,boolean)": -0.050084884339720345,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesVisibleInLegend(int,java.lang.Boolean)": -0.06551766001204767,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesVisibleInLegend(int,java.lang.Boolean,boolean)": -0.06551766001204767,
        "org.jfree.chart.renderer$AbstractRenderer#setTreatLegendShapeAsLine(boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#writeObject(java.io.ObjectOutputStream)": -0.2769223579330775,
        "org.jfree.chart.renderer$RenderAttributes#RenderAttributes()": 0.840072889625567,
        "org.jfree.chart.renderer$RenderAttributes#RenderAttributes(boolean)": 0.840072889625567,
        "org.jfree.chart.renderer$RenderAttributes#getAllowNull()": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#getCreateEntity(int,int)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#getDefaultCreateEntity()": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#getDefaultFillPaint()": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#getDefaultLabelFont()": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#getDefaultLabelPaint()": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#getDefaultLabelVisible()": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#getDefaultOutlinePaint()": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#getDefaultOutlineStroke()": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#getDefaultPaint()": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#getDefaultShape()": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#getDefaultStroke()": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#getItemFillPaint(int,int)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#getItemLabelFont(int,int)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#getItemLabelPaint(int,int)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#getItemOutlinePaint(int,int)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#getItemOutlineStroke(int,int)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#getItemPaint(int,int)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#getItemShape(int,int)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#getItemStroke(int,int)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#getSeriesCreateEntity(int)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#getSeriesFillPaint(int)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#getSeriesLabelFont(int)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#getSeriesLabelPaint(int)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#getSeriesLabelVisible(int)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#getSeriesOutlinePaint(int)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#getSeriesOutlineStroke(int)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#getSeriesPaint(int)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#getSeriesShape(int)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#getSeriesStroke(int)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#isLabelVisible(int,int)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#lookupSeriesCreateEntity(int)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#lookupSeriesFillPaint(int)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#lookupSeriesLabelFont(int)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#lookupSeriesLabelPaint(int)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#lookupSeriesLabelVisible(int)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#lookupSeriesOutlinePaint(int)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#lookupSeriesOutlineStroke(int)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#lookupSeriesPaint(int)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#lookupSeriesShape(int)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#lookupSeriesStroke(int)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#setDefaultCreateEntity(java.lang.Boolean)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#setDefaultFillPaint(java.awt.Paint)": -0.505713548001338,
        "org.jfree.chart.renderer$RenderAttributes#setDefaultLabelFont(java.awt.Font)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#setDefaultLabelPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#setDefaultLabelVisible(java.lang.Boolean)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#setDefaultOutlinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#setDefaultOutlineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#setDefaultPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#setDefaultShape(java.awt.Shape)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#setDefaultStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#setSeriesCreateEntity(int,java.lang.Boolean)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#setSeriesFillPaint(int,java.awt.Paint)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#setSeriesLabelFont(int,java.awt.Font)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#setSeriesLabelPaint(int,java.awt.Paint)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#setSeriesLabelVisible(int,java.lang.Boolean)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#setSeriesOutlinePaint(int,java.awt.Paint)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#setSeriesOutlineStroke(int,java.awt.Stroke)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#setSeriesPaint(int,java.awt.Paint)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#setSeriesShape(int,java.awt.Shape)": 0.0,
        "org.jfree.chart.renderer$RenderAttributes#setSeriesStroke(int,java.awt.Stroke)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#AbstractCategoryItemRenderer()": 1.2014373090855064,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#addAnnotation(org.jfree.chart.annotations.CategoryAnnotation)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#addAnnotation(org.jfree.chart.annotations.CategoryAnnotation,org.jfree.chart.util.Layer)": -0.028358980856044845,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#addEntity(org.jfree.chart.entity.EntityCollection,java.awt.Shape,org.jfree.data.category.CategoryDataset,int,int,boolean)": -0.050084884339720345,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#addEntity(org.jfree.chart.entity.EntityCollection,java.awt.Shape,org.jfree.data.category.CategoryDataset,int,int,boolean,double,double)": -0.050084884339720345,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#calculateDomainMarkerTextAnchorPoint(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleInsets,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.RectangleAnchor)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#calculateRangeMarkerTextAnchorPoint(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleInsets,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.RectangleAnchor)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#clone()": -0.17726568553333502,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#createHotSpotBounds(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,boolean,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#createHotSpotShape(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,boolean,org.jfree.chart.renderer.category.CategoryItemRendererState)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#createState(org.jfree.chart.plot.PlotRenderingInfo)": -0.174005438825719,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#drawAnnotations(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.util.Layer,org.jfree.chart.plot.PlotRenderingInfo)": -0.1930023238262919,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#drawBackground(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)": -0.186813812111334,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#drawDomainLine(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,double,java.awt.Paint,java.awt.Stroke)": -0.04055179885854976,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#drawDomainMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.plot.CategoryMarker,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#drawItemLabel(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,org.jfree.data.category.CategoryDataset,int,int,boolean,double,double,boolean)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#drawOutline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)": -0.186813812111334,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#drawRangeLine(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,java.awt.Paint,java.awt.Stroke)": -0.18992473224313475,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)": -0.04055179885854976,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#equals(java.lang.Object)": -0.36275838847523856,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#findRangeBounds(org.jfree.data.category.CategoryDataset)": -0.2913898679350838,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#findRangeBounds(org.jfree.data.category.CategoryDataset,boolean)": -0.30313927970477567,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getBaseItemLabelGenerator()": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getBaseToolTipGenerator()": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getBaseURLGenerator()": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getColumnCount()": -0.17070318947481322,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getDomainAxis(org.jfree.chart.plot.CategoryPlot,org.jfree.data.category.CategoryDataset)": -0.15702719674023943,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getDrawingSupplier()": -0.2050056543565114,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getItemLabelGenerator(int,int,boolean)": -0.11830835916477807,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getItemMiddle(java.lang.Comparable,java.lang.Comparable,org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getLegendItem(int,int)": -0.028358980856044845,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getLegendItemLabelGenerator()": -0.08415005620910243,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getLegendItemToolTipGenerator()": -0.08415005620910243,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getLegendItemURLGenerator()": -0.08415005620910243,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getLegendItems()": 1.623952033691694,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getPassCount()": -0.16052148914407827,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getPlot()": -0.2079355641591465,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getRangeAxis(org.jfree.chart.plot.CategoryPlot,int)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getRowCount()": -0.09990786985003952,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getSeriesItemLabelGenerator(int)": -0.028358980856044845,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getSeriesToolTipGenerator(int)": -0.10940470912000881,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getSeriesURLGenerator(int)": -0.028358980856044845,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getToolTipGenerator(int,int,boolean)": -0.10940470912000881,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getURLGenerator(int,int,boolean)": -0.10940470912000881,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#hashCode()": -0.13865146625410296,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#hitTest(double,double,java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,boolean,org.jfree.chart.renderer.category.CategoryItemRendererState)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotRenderingInfo)": -0.174005438825719,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#removeAnnotations()": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setBaseItemLabelGenerator(org.jfree.chart.labels.CategoryItemLabelGenerator)": -0.06551766001204767,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setBaseItemLabelGenerator(org.jfree.chart.labels.CategoryItemLabelGenerator,boolean)": -0.06551766001204767,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setBaseToolTipGenerator(org.jfree.chart.labels.CategoryToolTipGenerator)": -0.259465157019579,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setBaseToolTipGenerator(org.jfree.chart.labels.CategoryToolTipGenerator,boolean)": -0.259465157019579,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.CategoryURLGenerator)": -0.04055179885854976,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.CategoryURLGenerator,boolean)": -0.04055179885854976,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setLegendItemLabelGenerator(org.jfree.chart.labels.CategorySeriesLabelGenerator)": -0.04055179885854976,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setLegendItemToolTipGenerator(org.jfree.chart.labels.CategorySeriesLabelGenerator)": -0.04055179885854976,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setLegendItemURLGenerator(org.jfree.chart.labels.CategorySeriesLabelGenerator)": -0.04055179885854976,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setPlot(org.jfree.chart.plot.CategoryPlot)": 0.11780913427060191,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setSeriesItemLabelGenerator(int,org.jfree.chart.labels.CategoryItemLabelGenerator)": -0.05824119095809121,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setSeriesItemLabelGenerator(int,org.jfree.chart.labels.CategoryItemLabelGenerator,boolean)": -0.05824119095809121,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setSeriesToolTipGenerator(int,org.jfree.chart.labels.CategoryToolTipGenerator)": -0.09990786985003938,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setSeriesToolTipGenerator(int,org.jfree.chart.labels.CategoryToolTipGenerator,boolean)": -0.09990786985003938,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setSeriesURLGenerator(int,org.jfree.chart.urls.CategoryURLGenerator)": -0.10473945641744527,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setSeriesURLGenerator(int,org.jfree.chart.urls.CategoryURLGenerator,boolean)": -0.10473945641744527,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#updateCrosshairValues(org.jfree.chart.plot.CategoryCrosshairState,java.lang.Comparable,java.lang.Comparable,double,int,double,double,org.jfree.chart.plot.PlotOrientation)": -0.07834707025401137,
        "org.jfree.chart.renderer.category$BarRenderer#<clinit>()": -0.5987117200716822,
        "org.jfree.chart.renderer.category$BarRenderer#BarRenderer()": -0.4370098494542792,
        "org.jfree.chart.renderer.category$BarRenderer#calculateBarL0L1(double,double,double)": -0.05824119095809133,
        "org.jfree.chart.renderer.category$BarRenderer#calculateBarW0(org.jfree.chart.plot.CategoryPlot,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.renderer.category.CategoryItemRendererState,int,int)": -0.06551766001204767,
        "org.jfree.chart.renderer.category$BarRenderer#calculateBarWidth(org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,org.jfree.data.category.CategoryDataset,org.jfree.chart.renderer.category.CategoryItemRendererState)": -0.10940470912000881,
        "org.jfree.chart.renderer.category$BarRenderer#calculateLabelAnchorPoint(org.jfree.chart.labels.ItemLabelAnchor,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#calculateSeriesWidth(double,org.jfree.chart.axis.CategoryAxis,int,int)": -0.06551766001204767,
        "org.jfree.chart.renderer.category$BarRenderer#createHotSpotBounds(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,boolean,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,boolean,int)": -0.050084884339720345,
        "org.jfree.chart.renderer.category$BarRenderer#drawItemLabelForBar(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.data.category.CategoryDataset,int,int,boolean,org.jfree.chart.labels.CategoryItemLabelGenerator,java.awt.geom.Rectangle2D,boolean)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#equals(java.lang.Object)": -0.25434892768433803,
        "org.jfree.chart.renderer.category$BarRenderer#findRangeBounds(org.jfree.data.category.CategoryDataset,boolean)": -0.21940141872616586,
        "org.jfree.chart.renderer.category$BarRenderer#getBarPainter()": -0.05008488433972014,
        "org.jfree.chart.renderer.category$BarRenderer#getBase()": -0.06551766001204773,
        "org.jfree.chart.renderer.category$BarRenderer#getDefaultBarPainter()": -0.4370098494542792,
        "org.jfree.chart.renderer.category$BarRenderer#getDefaultShadowsVisible()": -0.4370098494542792,
        "org.jfree.chart.renderer.category$BarRenderer#getGradientPaintTransformer()": -0.07834707025401144,
        "org.jfree.chart.renderer.category$BarRenderer#getIncludeBaseInRange()": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#getItemMargin()": -0.08415005620910243,
        "org.jfree.chart.renderer.category$BarRenderer#getLegendItem(int,int)": -0.04055179885854976,
        "org.jfree.chart.renderer.category$BarRenderer#getMaximumBarWidth()": -0.11392249394338583,
        "org.jfree.chart.renderer.category$BarRenderer#getMinimumBarLength()": -0.06551766001204773,
        "org.jfree.chart.renderer.category$BarRenderer#getNegativeItemLabelPositionFallback()": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#getPositiveItemLabelPositionFallback()": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#getShadowPaint()": -0.06551766001204773,
        "org.jfree.chart.renderer.category$BarRenderer#getShadowXOffset()": -0.06551766001204773,
        "org.jfree.chart.renderer.category$BarRenderer#getShadowYOffset()": -0.06551766001204773,
        "org.jfree.chart.renderer.category$BarRenderer#getShadowsVisible()": -0.06551766001204773,
        "org.jfree.chart.renderer.category$BarRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotRenderingInfo)": -0.11392249394338579,
        "org.jfree.chart.renderer.category$BarRenderer#isDrawBarOutline()": -0.12673430455870793,
        "org.jfree.chart.renderer.category$BarRenderer#isInternalAnchor(org.jfree.chart.labels.ItemLabelAnchor)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#readObject(java.io.ObjectInputStream)": -0.13476480835473548,
        "org.jfree.chart.renderer.category$BarRenderer#setBarPainter(org.jfree.chart.renderer.category.BarPainter)": -0.18366808176420008,
        "org.jfree.chart.renderer.category$BarRenderer#setBase(double)": -0.028358980856044845,
        "org.jfree.chart.renderer.category$BarRenderer#setDefaultBarPainter(org.jfree.chart.renderer.category.BarPainter)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#setDefaultShadowsVisible(boolean)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#setDrawBarOutline(boolean)": -0.028358980856044845,
        "org.jfree.chart.renderer.category$BarRenderer#setGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)": -0.09488668094824809,
        "org.jfree.chart.renderer.category$BarRenderer#setIncludeBaseInRange(boolean)": -0.10473945641744527,
        "org.jfree.chart.renderer.category$BarRenderer#setItemMargin(double)": -0.028358980856044845,
        "org.jfree.chart.renderer.category$BarRenderer#setMaximumBarWidth(double)": -0.028358980856044845,
        "org.jfree.chart.renderer.category$BarRenderer#setMinimumBarLength(double)": -0.09488668094824809,
        "org.jfree.chart.renderer.category$BarRenderer#setNegativeItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)": -0.1307947720516584,
        "org.jfree.chart.renderer.category$BarRenderer#setPositiveItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)": -0.1307947720516584,
        "org.jfree.chart.renderer.category$BarRenderer#setShadowPaint(java.awt.Paint)": -0.18048594638621732,
        "org.jfree.chart.renderer.category$BarRenderer#setShadowVisible(boolean)": -0.18048594638621732,
        "org.jfree.chart.renderer.category$BarRenderer#setShadowXOffset(double)": -0.028358980856044845,
        "org.jfree.chart.renderer.category$BarRenderer#setShadowYOffset(double)": -0.028358980856044845,
        "org.jfree.chart.renderer.category$BarRenderer#writeObject(java.io.ObjectOutputStream)": -0.13476480835473548,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#LineAndShapeRenderer()": 1.6560362837668252,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#LineAndShapeRenderer(boolean,boolean)": 1.5867764207872206,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#clone()": -0.08964663030613909,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,boolean,int)": -0.050084884339720345,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#equals(java.lang.Object)": -0.15702719674023943,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#getBaseLinesVisible()": -0.05824119095809133,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#getBaseShapesFilled()": 0.0,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#getBaseShapesVisible()": -0.05824119095809133,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#getDrawOutlines()": -0.028358980856044713,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#getItemLineVisible(int,int)": -0.07216915325367687,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#getItemMargin()": 0.0,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#getItemShapeFilled(int,int)": -0.05824119095809121,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#getItemShapeVisible(int,int)": -0.06551766001204767,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#getLegendItem(int,int)": -0.028358980856044845,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#getPassCount()": -0.06551766001204773,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#getSeriesLinesVisible(int)": -0.07216915325367687,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#getSeriesShapesFilled(int)": -0.05824119095809121,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#getSeriesShapesVisible(int)": -0.06551766001204767,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#getUseFillPaint()": -0.028358980856044713,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#getUseOutlinePaint()": -0.028358980856044713,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#getUseSeriesOffset()": -0.028358980856044713,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#setBaseLinesVisible(boolean)": -0.050084884339720345,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#setBaseShapesFilled(boolean)": -0.050084884339720345,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#setBaseShapesVisible(boolean)": -0.050084884339720345,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#setDrawOutlines(boolean)": 0.0,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#setItemMargin(double)": -0.028358980856044845,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#setSeriesLinesVisible(int,boolean)": -0.050084884339720345,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#setSeriesLinesVisible(int,java.lang.Boolean)": -0.050084884339720345,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#setSeriesShapesFilled(int,boolean)": -0.050084884339720345,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#setSeriesShapesFilled(int,java.lang.Boolean)": -0.050084884339720345,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#setSeriesShapesVisible(int,boolean)": -0.050084884339720345,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#setSeriesShapesVisible(int,java.lang.Boolean)": -0.050084884339720345,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#setUseFillPaint(boolean)": 0.0,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#setUseOutlinePaint(boolean)": -0.028358980856044845,
        "org.jfree.chart.renderer.category$LineAndShapeRenderer#setUseSeriesOffset(boolean)": -0.028358980856044845,
        "org.jfree.chart.text$TextAnchor#<clinit>()": 0.6843876213581394,
        "org.jfree.chart.text$TextAnchor#TextAnchor(java.lang.String)": -0.6613988162687655,
        "org.jfree.chart.text$TextAnchor#equals(java.lang.Object)": -0.5615755854570905,
        "org.jfree.chart.text$TextAnchor#hashCode()": -0.07834707025401144,
        "org.jfree.chart.text$TextAnchor#readResolve()": -0.3214263035037917,
        "org.jfree.chart.text$TextAnchor#toString()": 0.0,
        "org.jfree.chart.util$AbstractObjectList#AbstractObjectList()": 0.7016396140983615,
        "org.jfree.chart.util$AbstractObjectList#AbstractObjectList(int)": 0.7016396140983615,
        "org.jfree.chart.util$AbstractObjectList#AbstractObjectList(int,int)": -0.6441468235285436,
        "org.jfree.chart.util$AbstractObjectList#clear()": -0.35852898355038043,
        "org.jfree.chart.util$AbstractObjectList#clone()": -0.3100670805604584,
        "org.jfree.chart.util$AbstractObjectList#equals(java.lang.Object)": -0.6607075482321698,
        "org.jfree.chart.util$AbstractObjectList#get(int)": -0.18809303895389184,
        "org.jfree.chart.util$AbstractObjectList#hashCode()": -0.22775766378690881,
        "org.jfree.chart.util$AbstractObjectList#indexOf(java.lang.Object)": -0.05792650681054068,
        "org.jfree.chart.util$AbstractObjectList#readObject(java.io.ObjectInputStream)": -0.3100670805604584,
        "org.jfree.chart.util$AbstractObjectList#set(int,java.lang.Object)": -0.18649398585907473,
        "org.jfree.chart.util$AbstractObjectList#size()": -0.4764441115305583,
        "org.jfree.chart.util$AbstractObjectList#writeObject(java.io.ObjectOutputStream)": -0.3100670805604584,
        "org.jfree.chart.util$BooleanList#BooleanList()": 0.8345304338338583,
        "org.jfree.chart.util$BooleanList#equals(java.lang.Object)": -0.6003763486203533,
        "org.jfree.chart.util$BooleanList#getBoolean(int)": -0.41563780949881934,
        "org.jfree.chart.util$BooleanList#hashCode()": -0.2249938980555569,
        "org.jfree.chart.util$BooleanList#setBoolean(int,java.lang.Boolean)": -0.1424609268273588,
        "org.jfree.chart.util$DefaultShadowGenerator#DefaultShadowGenerator()": 1.363991395599804,
        "org.jfree.chart.util$DefaultShadowGenerator#DefaultShadowGenerator(int,java.awt.Color,float,int,double)": 0.01632595715089391,
        "org.jfree.chart.util$DefaultShadowGenerator#applyShadow(java.awt.image.BufferedImage)": -0.19604796630830612,
        "org.jfree.chart.util$DefaultShadowGenerator#calculateOffsetX()": -0.19604796630830612,
        "org.jfree.chart.util$DefaultShadowGenerator#calculateOffsetY()": -0.19604796630830612,
        "org.jfree.chart.util$DefaultShadowGenerator#createDropShadow(java.awt.image.BufferedImage)": -0.19604796630830604,
        "org.jfree.chart.util$DefaultShadowGenerator#equals(java.lang.Object)": -0.1498694552698563,
        "org.jfree.chart.util$DefaultShadowGenerator#getAngle()": 0.0,
        "org.jfree.chart.util$DefaultShadowGenerator#getDistance()": 0.0,
        "org.jfree.chart.util$DefaultShadowGenerator#getShadowColor()": 0.0,
        "org.jfree.chart.util$DefaultShadowGenerator#getShadowOpacity()": 0.0,
        "org.jfree.chart.util$DefaultShadowGenerator#getShadowSize()": 0.0,
        "org.jfree.chart.util$DefaultShadowGenerator#hashCode()": 0.0,
        "org.jfree.chart.util$GradientPaintTransformType#<clinit>()": -0.6202049733390947,
        "org.jfree.chart.util$GradientPaintTransformType#GradientPaintTransformType(java.lang.String)": -0.6202049733390949,
        "org.jfree.chart.util$GradientPaintTransformType#equals(java.lang.Object)": -0.1804859463862174,
        "org.jfree.chart.util$GradientPaintTransformType#hashCode()": -0.028358980856044713,
        "org.jfree.chart.util$GradientPaintTransformType#readResolve()": -0.17726568553333502,
        "org.jfree.chart.util$GradientPaintTransformType#toString()": 0.0,
        "org.jfree.chart.util$ObjectList#ObjectList()": 0.7296817481592254,
        "org.jfree.chart.util$ObjectList#ObjectList(int)": 0.0,
        "org.jfree.chart.util$ObjectList#get(int)": 1.2163001643851818,
        "org.jfree.chart.util$ObjectList#indexOf(java.lang.Object)": 1.287859930816364,
        "org.jfree.chart.util$ObjectList#set(int,java.lang.Object)": 1.214641281489524,
        "org.jfree.chart.util$PaintList#PaintList()": 0.826235736298671,
        "org.jfree.chart.util$PaintList#equals(java.lang.Object)": -0.6086708232593765,
        "org.jfree.chart.util$PaintList#getPaint(int)": -0.31690966782074964,
        "org.jfree.chart.util$PaintList#hashCode()": -0.2249938980555569,
        "org.jfree.chart.util$PaintList#readObject(java.io.ObjectInputStream)": -0.281792349892146,
        "org.jfree.chart.util$PaintList#setPaint(int,java.awt.Paint)": -0.3236715679235822,
        "org.jfree.chart.util$PaintList#writeObject(java.io.ObjectOutputStream)": -0.281792349892146,
        "org.jfree.chart.util$RectangleInsets#<clinit>()": 0.8289981244986436,
        "org.jfree.chart.util$RectangleInsets#RectangleInsets()": 0.0,
        "org.jfree.chart.util$RectangleInsets#RectangleInsets(double,double,double,double)": 0.8749511416668817,
        "org.jfree.chart.util$RectangleInsets#RectangleInsets(org.jfree.chart.util.UnitType,double,double,double,double)": -0.5167883131282615,
        "org.jfree.chart.util$RectangleInsets#calculateBottomInset(double)": -0.2890076705313442,
        "org.jfree.chart.util$RectangleInsets#calculateBottomOutset(double)": -0.31690966782074964,
        "org.jfree.chart.util$RectangleInsets#calculateLeftInset(double)": -0.2890076705313442,
        "org.jfree.chart.util$RectangleInsets#calculateLeftOutset(double)": -0.31690966782074964,
        "org.jfree.chart.util$RectangleInsets#calculateRightInset(double)": -0.2890076705313442,
        "org.jfree.chart.util$RectangleInsets#calculateRightOutset(double)": -0.31690966782074964,
        "org.jfree.chart.util$RectangleInsets#calculateTopInset(double)": -0.2890076705313442,
        "org.jfree.chart.util$RectangleInsets#calculateTopOutset(double)": -0.31690966782074964,
        "org.jfree.chart.util$RectangleInsets#createAdjustedRectangle(java.awt.geom.Rectangle2D,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.LengthAdjustmentType)": 0.0,
        "org.jfree.chart.util$RectangleInsets#createInsetRectangle(java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.util$RectangleInsets#createInsetRectangle(java.awt.geom.Rectangle2D,boolean,boolean)": 0.0,
        "org.jfree.chart.util$RectangleInsets#createOutsetRectangle(java.awt.geom.Rectangle2D)": -0.2720020302400419,
        "org.jfree.chart.util$RectangleInsets#createOutsetRectangle(java.awt.geom.Rectangle2D,boolean,boolean)": -0.2720020302400419,
        "org.jfree.chart.util$RectangleInsets#equals(java.lang.Object)": -0.4893001185575683,
        "org.jfree.chart.util$RectangleInsets#extendHeight(double)": -0.2569146550503642,
        "org.jfree.chart.util$RectangleInsets#extendWidth(double)": -0.2569146550503642,
        "org.jfree.chart.util$RectangleInsets#getBottom()": -0.2720020302400419,
        "org.jfree.chart.util$RectangleInsets#getLeft()": -0.2720020302400419,
        "org.jfree.chart.util$RectangleInsets#getRight()": -0.2720020302400419,
        "org.jfree.chart.util$RectangleInsets#getTop()": -0.2720020302400419,
        "org.jfree.chart.util$RectangleInsets#getUnitType()": 0.0,
        "org.jfree.chart.util$RectangleInsets#hashCode()": 0.0,
        "org.jfree.chart.util$RectangleInsets#toString()": 0.0,
        "org.jfree.chart.util$RectangleInsets#trim(java.awt.geom.Rectangle2D)": -0.28420915525814594,
        "org.jfree.chart.util$RectangleInsets#trimHeight(double)": -0.2249938980555569,
        "org.jfree.chart.util$RectangleInsets#trimWidth(double)": -0.2249938980555569,
        "org.jfree.chart.util$ResourceBundleWrapper#ResourceBundleWrapper()": 0.0,
        "org.jfree.chart.util$ResourceBundleWrapper#getBundle(java.lang.String)": -0.2539600048278533,
        "org.jfree.chart.util$ResourceBundleWrapper#getBundle(java.lang.String,java.util.Locale)": 0.0,
        "org.jfree.chart.util$ResourceBundleWrapper#getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader)": 0.0,
        "org.jfree.chart.util$ResourceBundleWrapper#removeCodeBase(java.net.URL,java.net.URLClassLoader)": 0.0,
        "org.jfree.chart.util$ShapeList#ShapeList()": 0.8359150917019433,
        "org.jfree.chart.util$ShapeList#clone()": -0.28661417945788337,
        "org.jfree.chart.util$ShapeList#equals(java.lang.Object)": -0.6003763486203533,
        "org.jfree.chart.util$ShapeList#getShape(int)": -0.18048594638621732,
        "org.jfree.chart.util$ShapeList#hashCode()": 0.0,
        "org.jfree.chart.util$ShapeList#readObject(java.io.ObjectInputStream)": -0.2793635062994416,
        "org.jfree.chart.util$ShapeList#setShape(int,java.awt.Shape)": -0.1707031894748132,
        "org.jfree.chart.util$ShapeList#writeObject(java.io.ObjectOutputStream)": -0.2793635062994416,
        "org.jfree.chart.util$SortOrder#<clinit>()": 1.4202518036825804,
        "org.jfree.chart.util$SortOrder#SortOrder(java.lang.String)": 0.07446536605567544,
        "org.jfree.chart.util$SortOrder#equals(java.lang.Object)": -0.12257529890018852,
        "org.jfree.chart.util$SortOrder#hashCode()": 0.0,
        "org.jfree.chart.util$SortOrder#readResolve()": -0.08415005620910256,
        "org.jfree.chart.util$SortOrder#toString()": -0.10473945641744531,
        "org.jfree.chart.util$StandardGradientPaintTransformer#StandardGradientPaintTransformer()": -0.6185626909144937,
        "org.jfree.chart.util$StandardGradientPaintTransformer#StandardGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformType)": -0.6202049733390949,
        "org.jfree.chart.util$StandardGradientPaintTransformer#clone()": -0.09488668094824826,
        "org.jfree.chart.util$StandardGradientPaintTransformer#equals(java.lang.Object)": -0.32142630350379164,
        "org.jfree.chart.util$StandardGradientPaintTransformer#getType()": 0.0,
        "org.jfree.chart.util$StandardGradientPaintTransformer#hashCode()": -0.028358980856044845,
        "org.jfree.chart.util$StandardGradientPaintTransformer#transform(java.awt.GradientPaint,java.awt.Shape)": -0.028358980856044845,
        "org.jfree.chart.util$StrokeList#StrokeList()": 0.8289981244986436,
        "org.jfree.chart.util$StrokeList#clone()": -0.2890076705313442,
        "org.jfree.chart.util$StrokeList#equals(java.lang.Object)": -0.6053587185104761,
        "org.jfree.chart.util$StrokeList#getStroke(int)": -0.24127743385032083,
        "org.jfree.chart.util$StrokeList#hashCode()": -0.2249938980555569,
        "org.jfree.chart.util$StrokeList#readObject(java.io.ObjectInputStream)": -0.281792349892146,
        "org.jfree.chart.util$StrokeList#setStroke(int,java.awt.Stroke)": -0.23050068015834588,
        "org.jfree.chart.util$StrokeList#writeObject(java.io.ObjectOutputStream)": -0.281792349892146,
        "org.jfree.chart.util$UnitType#<clinit>()": 0.8193406302747462,
        "org.jfree.chart.util$UnitType#UnitType(java.lang.String)": -0.5264458073521586,
        "org.jfree.chart.util$UnitType#equals(java.lang.Object)": -0.2793635062994415,
        "org.jfree.chart.util$UnitType#hashCode()": 0.0,
        "org.jfree.chart.util$UnitType#readResolve()": -0.2793635062994416,
        "org.jfree.chart.util$UnitType#toString()": 0.0,
        "org.jfree.data$KeyedObject#KeyedObject(java.lang.Comparable,java.lang.Object)": -0.1344572608862814,
        "org.jfree.data$KeyedObject#clone()": -0.10940470912000881,
        "org.jfree.data$KeyedObject#equals(java.lang.Object)": -0.05824119095809133,
        "org.jfree.data$KeyedObject#getKey()": -0.5903592258622024,
        "org.jfree.data$KeyedObject#getObject()": -0.5303864868880452,
        "org.jfree.data$KeyedObject#setObject(java.lang.Object)": -0.14246092682735867,
        "org.jfree.data$KeyedObjects#KeyedObjects()": -0.13941144213111956,
        "org.jfree.data$KeyedObjects#addObject(java.lang.Comparable,java.lang.Object)": -0.09990786985003938,
        "org.jfree.data$KeyedObjects#clear()": -0.028358980856044713,
        "org.jfree.data$KeyedObjects#clone()": -0.10473945641744527,
        "org.jfree.data$KeyedObjects#equals(java.lang.Object)": -0.050084884339720345,
        "org.jfree.data$KeyedObjects#getIndex(java.lang.Comparable)": 1.2170032781226772,
        "org.jfree.data$KeyedObjects#getItemCount()": -0.1498694552698563,
        "org.jfree.data$KeyedObjects#getKey(int)": -0.1307947720516584,
        "org.jfree.data$KeyedObjects#getKeys()": -0.06551766001204767,
        "org.jfree.data$KeyedObjects#getObject(int)": -0.5286303313818908,
        "org.jfree.data$KeyedObjects#getObject(java.lang.Comparable)": -0.4690862723960047,
        "org.jfree.data$KeyedObjects#hashCode()": 0.0,
        "org.jfree.data$KeyedObjects#insertValue(int,java.lang.Comparable,java.lang.Object)": 0.0,
        "org.jfree.data$KeyedObjects#removeValue(int)": -0.07216915325367701,
        "org.jfree.data$KeyedObjects#removeValue(java.lang.Comparable)": -0.028358980856044845,
        "org.jfree.data$KeyedObjects#setObject(java.lang.Comparable,java.lang.Object)": 1.2179609502952542,
        "org.jfree.data$KeyedObjects#sortByKeys(org.jfree.chart.util.SortOrder)": -0.04055179885854976,
        "org.jfree.data$KeyedObjects#sortByObjects(org.jfree.chart.util.SortOrder)": -0.04055179885854976,
        "org.jfree.data$KeyedObjects2D#KeyedObjects2D()": -0.09419040400950596,
        "org.jfree.data$KeyedObjects2D#addObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable)": 1.3126518464775998,
        "org.jfree.data$KeyedObjects2D#clear()": -0.04055179885854976,
        "org.jfree.data$KeyedObjects2D#clone()": -0.07834707025401137,
        "org.jfree.data$KeyedObjects2D#equals(java.lang.Object)": -0.10940470912000881,
        "org.jfree.data$KeyedObjects2D#getColumnCount()": -0.4764827691042022,
        "org.jfree.data$KeyedObjects2D#getColumnIndex(java.lang.Comparable)": -0.2249938980555568,
        "org.jfree.data$KeyedObjects2D#getColumnKey(int)": -0.19906294652606915,
        "org.jfree.data$KeyedObjects2D#getColumnKeys()": -0.15702719674023946,
        "org.jfree.data$KeyedObjects2D#getObject(int,int)": -0.45034936459853736,
        "org.jfree.data$KeyedObjects2D#getObject(java.lang.Comparable,java.lang.Comparable)": -0.1673567452300334,
        "org.jfree.data$KeyedObjects2D#getRowCount()": -0.46908627239600476,
        "org.jfree.data$KeyedObjects2D#getRowIndex(java.lang.Comparable)": -0.3347731831977476,
        "org.jfree.data$KeyedObjects2D#getRowKey(int)": -0.3391581673734103,
        "org.jfree.data$KeyedObjects2D#getRowKeys()": -0.16052148914407827,
        "org.jfree.data$KeyedObjects2D#hashCode()": 0.0,
        "org.jfree.data$KeyedObjects2D#removeColumn(int)": -0.028358980856044845,
        "org.jfree.data$KeyedObjects2D#removeColumn(java.lang.Comparable)": -0.05824119095809121,
        "org.jfree.data$KeyedObjects2D#removeObject(java.lang.Comparable,java.lang.Comparable)": -0.05824119095809121,
        "org.jfree.data$KeyedObjects2D#removeRow(int)": -0.05008488433972014,
        "org.jfree.data$KeyedObjects2D#removeRow(java.lang.Comparable)": -0.04055179885854976,
        "org.jfree.data$KeyedObjects2D#setObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable)": 1.2861089018608205,
        "org.jfree.data$SelectableValue#SelectableValue(java.lang.Number)": 1.3361737893892331,
        "org.jfree.data$SelectableValue#SelectableValue(java.lang.Number,boolean)": -0.009612648237671606,
        "org.jfree.data$SelectableValue#getValue()": -0.41956309838973627,
        "org.jfree.data$SelectableValue#isSelected()": -0.10940470912000877,
        "org.jfree.data$SelectableValue#setSelected(boolean)": 0.0,
        "org.jfree.data$UnknownKeyException#UnknownKeyException(java.lang.String)": -0.13865146625410296,
        "org.jfree.data.category$AbstractCategoryDataset#AbstractCategoryDataset()": 1.3546324964167393,
        "org.jfree.data.category$AbstractCategoryDataset#getSelectionState()": -0.10473945641744531,
        "org.jfree.data.category$AbstractCategoryDataset#setSelectionState(org.jfree.data.category.CategoryDatasetSelectionState)": 1.3546324964167393,
        "org.jfree.data.category$DefaultCategoryDataset#DefaultCategoryDataset()": 1.3546324964167393,
        "org.jfree.data.category$DefaultCategoryDataset#addValue(double,java.lang.Comparable,java.lang.Comparable)": 1.4852268168022524,
        "org.jfree.data.category$DefaultCategoryDataset#addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)": 1.4023972713535495,
        "org.jfree.data.category$DefaultCategoryDataset#clear()": -0.04055179885854976,
        "org.jfree.data.category$DefaultCategoryDataset#clearSelection()": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#clone()": -0.050084884339720345,
        "org.jfree.data.category$DefaultCategoryDataset#equals(java.lang.Object)": -0.10473945641744527,
        "org.jfree.data.category$DefaultCategoryDataset#fireSelectionEvent()": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#getColumnCount()": -0.38965465703890867,
        "org.jfree.data.category$DefaultCategoryDataset#getColumnIndex(java.lang.Comparable)": -0.06551766001204767,
        "org.jfree.data.category$DefaultCategoryDataset#getColumnKey(int)": -0.13865146625410296,
        "org.jfree.data.category$DefaultCategoryDataset#getColumnKeys()": -0.10473945641744527,
        "org.jfree.data.category$DefaultCategoryDataset#getRowCount()": -0.38558002708367056,
        "org.jfree.data.category$DefaultCategoryDataset#getRowIndex(java.lang.Comparable)": -0.23592696154260834,
        "org.jfree.data.category$DefaultCategoryDataset#getRowKey(int)": -0.2984709723834997,
        "org.jfree.data.category$DefaultCategoryDataset#getRowKeys()": -0.10940470912000881,
        "org.jfree.data.category$DefaultCategoryDataset#getValue(int,int)": -0.36064693868419595,
        "org.jfree.data.category$DefaultCategoryDataset#getValue(java.lang.Comparable,java.lang.Comparable)": -0.1424609268273588,
        "org.jfree.data.category$DefaultCategoryDataset#hashCode()": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#incrementValue(double,java.lang.Comparable,java.lang.Comparable)": -0.028358980856044845,
        "org.jfree.data.category$DefaultCategoryDataset#isSelected(int,int)": -0.10473945641744527,
        "org.jfree.data.category$DefaultCategoryDataset#removeColumn(int)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#removeColumn(java.lang.Comparable)": -0.04055179885854976,
        "org.jfree.data.category$DefaultCategoryDataset#removeRow(int)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#removeRow(java.lang.Comparable)": -0.028358980856044845,
        "org.jfree.data.category$DefaultCategoryDataset#removeValue(java.lang.Comparable,java.lang.Comparable)": -0.028358980856044845,
        "org.jfree.data.category$DefaultCategoryDataset#setSelected(int,int,boolean)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#setSelected(int,int,boolean,boolean)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#setValue(double,java.lang.Comparable,java.lang.Comparable)": -0.08964663030613909,
        "org.jfree.data.category$DefaultCategoryDataset#setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)": -0.10473945641744527,
        "org.jfree.data.event$DatasetChangeEvent#DatasetChangeEvent(java.lang.Object,org.jfree.data.general.Dataset,org.jfree.chart.event.DatasetChangeInfo)": -0.6534463244782066,
        "org.jfree.data.event$DatasetChangeEvent#getDataset()": 0.0,
        "org.jfree.data.event$DatasetChangeEvent#getInfo()": 0.0,
        "org.jfree.data.general$AbstractDataset#AbstractDataset()": 0.6843876213581394,
        "org.jfree.data.general$AbstractDataset#addChangeListener(org.jfree.data.event.DatasetChangeListener)": -0.2008307953633034,
        "org.jfree.data.general$AbstractDataset#clone()": -0.21371746129486713,
        "org.jfree.data.general$AbstractDataset#fireDatasetChanged(org.jfree.chart.event.DatasetChangeInfo)": 0.7878172242028861,
        "org.jfree.data.general$AbstractDataset#getGroup()": -0.05824119095809133,
        "org.jfree.data.general$AbstractDataset#hasListener(java.util.EventListener)": -0.05008488433972014,
        "org.jfree.data.general$AbstractDataset#notifyListeners(org.jfree.data.event.DatasetChangeEvent)": 0.7878172242028861,
        "org.jfree.data.general$AbstractDataset#readObject(java.io.ObjectInputStream)": -0.2720020302400419,
        "org.jfree.data.general$AbstractDataset#removeChangeListener(org.jfree.data.event.DatasetChangeListener)": -0.13865146625410296,
        "org.jfree.data.general$AbstractDataset#setGroup(org.jfree.data.general.DatasetGroup)": 0.0,
        "org.jfree.data.general$AbstractDataset#validateObject()": -0.2720020302400419,
        "org.jfree.data.general$AbstractDataset#writeObject(java.io.ObjectOutputStream)": -0.2720020302400419,
        "org.jfree.data.general$DatasetGroup#DatasetGroup()": -0.6627225898724437,
        "org.jfree.data.general$DatasetGroup#DatasetGroup(java.lang.String)": 0.0,
        "org.jfree.data.general$DatasetGroup#clone()": 0.0,
        "org.jfree.data.general$DatasetGroup#equals(java.lang.Object)": -0.028358980856044713,
        "org.jfree.data.general$DatasetGroup#getID()": 0.0
    },
    "Chart-10": {},
    "Chart-11": {
        "org.jfree.chart.util$ShapeUtilities#<clinit>()": -1.525786437626905,
        "org.jfree.chart.util$ShapeUtilities#ShapeUtilities()": 0.0,
        "org.jfree.chart.util$ShapeUtilities#clone(java.awt.Shape)": -0.8773627542036935,
        "org.jfree.chart.util$ShapeUtilities#contains(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#createDiagonalCross(float,float)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#createDiamond(float)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#createDownTriangle(float)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#createLineRegion(java.awt.geom.Line2D,float)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#createRegularCross(float,float)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#createTranslatedShape(java.awt.Shape,double,double)": -0.18975998443288922,
        "org.jfree.chart.util$ShapeUtilities#createTranslatedShape(java.awt.Shape,org.jfree.chart.util.RectangleAnchor,double,double)": -0.6342756914956118,
        "org.jfree.chart.util$ShapeUtilities#createUpTriangle(float)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#drawRotatedShape(java.awt.Graphics2D,java.awt.Shape,double,float,float)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#equal(java.awt.Polygon,java.awt.Polygon)": -0.8557099426454371,
        "org.jfree.chart.util$ShapeUtilities#equal(java.awt.Shape,java.awt.Shape)": -1.3883425949784387,
        "org.jfree.chart.util$ShapeUtilities#equal(java.awt.geom.Arc2D,java.awt.geom.Arc2D)": -0.06546492296664197,
        "org.jfree.chart.util$ShapeUtilities#equal(java.awt.geom.Ellipse2D,java.awt.geom.Ellipse2D)": -0.8557099426454371,
        "org.jfree.chart.util$ShapeUtilities#equal(java.awt.geom.GeneralPath,java.awt.geom.GeneralPath)": 0.1783609578492592,
        "org.jfree.chart.util$ShapeUtilities#equal(java.awt.geom.Line2D,java.awt.geom.Line2D)": -0.6504317194429836,
        "org.jfree.chart.util$ShapeUtilities#getPointInRectangle(double,double,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#intersects(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)": -0.06546492296664197,
        "org.jfree.chart.util$ShapeUtilities#rotateShape(java.awt.Shape,double,float,float)": -0.4704895799598392
    },
    "Chart-12": {
        "org.jfree.chart$ChartColor#<clinit>()": -0.285790196488218,
        "org.jfree.chart$ChartColor#ChartColor(int,int,int)": 0.0,
        "org.jfree.chart$ChartColor#createDefaultPaintArray()": 1.0599962411386867,
        "org.jfree.chart$JFreeChart#<clinit>()": -0.08681754633295202,
        "org.jfree.chart$JFreeChart#JFreeChart(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)": 1.2762635417830301,
        "org.jfree.chart$JFreeChart#JFreeChart(java.lang.String,org.jfree.chart.plot.Plot)": 0.0,
        "org.jfree.chart$JFreeChart#JFreeChart(org.jfree.chart.plot.Plot)": 1.5413207195365688,
        "org.jfree.chart$JFreeChart#addChangeListener(org.jfree.chart.event.ChartChangeListener)": -0.1616811272923484,
        "org.jfree.chart$JFreeChart#addLegend(org.jfree.chart.title.LegendTitle)": 0.0,
        "org.jfree.chart$JFreeChart#addProgressListener(org.jfree.chart.event.ChartProgressListener)": -0.031859961198401975,
        "org.jfree.chart$JFreeChart#addSubtitle(int,org.jfree.chart.title.Title)": -0.031859961198401975,
        "org.jfree.chart$JFreeChart#addSubtitle(org.jfree.chart.title.Title)": -0.045616279612789114,
        "org.jfree.chart$JFreeChart#clearSubtitles()": 0.0,
        "org.jfree.chart$JFreeChart#clone()": 0.0,
        "org.jfree.chart$JFreeChart#createAlignedRectangle2D(org.jfree.chart.util.Size2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment)": -0.30836584049457016,
        "org.jfree.chart$JFreeChart#createBufferedImage(int,int)": -0.0656301420720666,
        "org.jfree.chart$JFreeChart#createBufferedImage(int,int,double,double,org.jfree.chart.ChartRenderingInfo)": 0.0,
        "org.jfree.chart$JFreeChart#createBufferedImage(int,int,int,org.jfree.chart.ChartRenderingInfo)": -0.21267843608146314,
        "org.jfree.chart$JFreeChart#createBufferedImage(int,int,org.jfree.chart.ChartRenderingInfo)": -0.21267843608146314,
        "org.jfree.chart$JFreeChart#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart$JFreeChart#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.ChartRenderingInfo)": -0.30836584049457016,
        "org.jfree.chart$JFreeChart#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.ChartRenderingInfo)": 0.0,
        "org.jfree.chart$JFreeChart#drawTitle(org.jfree.chart.title.Title,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)": -0.30836584049457016,
        "org.jfree.chart$JFreeChart#equals(java.lang.Object)": -0.11851886356601378,
        "org.jfree.chart$JFreeChart#fireChartChanged()": 1.7385682245637657,
        "org.jfree.chart$JFreeChart#getAntiAlias()": 0.0,
        "org.jfree.chart$JFreeChart#getBackgroundImage()": 0.0,
        "org.jfree.chart$JFreeChart#getBackgroundImageAlignment()": 0.0,
        "org.jfree.chart$JFreeChart#getBackgroundImageAlpha()": 0.0,
        "org.jfree.chart$JFreeChart#getBackgroundPaint()": 0.0,
        "org.jfree.chart$JFreeChart#getBorderPaint()": 0.0,
        "org.jfree.chart$JFreeChart#getBorderStroke()": 0.0,
        "org.jfree.chart$JFreeChart#getCategoryPlot()": 0.0,
        "org.jfree.chart$JFreeChart#getLegend()": 1.7461191023346334,
        "org.jfree.chart$JFreeChart#getLegend(int)": 0.4003326647077282,
        "org.jfree.chart$JFreeChart#getPadding()": 0.0,
        "org.jfree.chart$JFreeChart#getPlot()": -0.3392771016084444,
        "org.jfree.chart$JFreeChart#getRenderingHints()": 0.0,
        "org.jfree.chart$JFreeChart#getSubtitle(int)": -0.10728081942530265,
        "org.jfree.chart$JFreeChart#getSubtitleCount()": -0.12384545413105874,
        "org.jfree.chart$JFreeChart#getSubtitles()": -0.03185996119840184,
        "org.jfree.chart$JFreeChart#getTextAntiAlias()": 0.0,
        "org.jfree.chart$JFreeChart#getTitle()": -0.03185996119840184,
        "org.jfree.chart$JFreeChart#getXYPlot()": 0.0,
        "org.jfree.chart$JFreeChart#handleClick(int,int,org.jfree.chart.ChartRenderingInfo)": 0.0,
        "org.jfree.chart$JFreeChart#isBorderVisible()": -0.30836584049457016,
        "org.jfree.chart$JFreeChart#isNotify()": 0.0,
        "org.jfree.chart$JFreeChart#main(java.lang.String[])": 0.0,
        "org.jfree.chart$JFreeChart#notifyListeners(org.jfree.chart.event.ChartChangeEvent)": 1.4698579954943551,
        "org.jfree.chart$JFreeChart#notifyListeners(org.jfree.chart.event.ChartProgressEvent)": -0.30836584049457016,
        "org.jfree.chart$JFreeChart#plotChanged(org.jfree.chart.event.PlotChangeEvent)": -0.33100426793461435,
        "org.jfree.chart$JFreeChart#readObject(java.io.ObjectInputStream)": -0.1013105426209939,
        "org.jfree.chart$JFreeChart#removeChangeListener(org.jfree.chart.event.ChartChangeListener)": -0.031859961198401975,
        "org.jfree.chart$JFreeChart#removeLegend()": 1.763605897729887,
        "org.jfree.chart$JFreeChart#removeProgressListener(org.jfree.chart.event.ChartProgressListener)": -0.031859961198401975,
        "org.jfree.chart$JFreeChart#removeSubtitle(org.jfree.chart.title.Title)": 1.763605897729887,
        "org.jfree.chart$JFreeChart#setAntiAlias(boolean)": 0.0,
        "org.jfree.chart$JFreeChart#setBackgroundImage(java.awt.Image)": -0.031859961198401975,
        "org.jfree.chart$JFreeChart#setBackgroundImageAlignment(int)": -0.031859961198401975,
        "org.jfree.chart$JFreeChart#setBackgroundImageAlpha(float)": -0.031859961198401975,
        "org.jfree.chart$JFreeChart#setBackgroundPaint(java.awt.Paint)": 1.7543698579279332,
        "org.jfree.chart$JFreeChart#setBorderPaint(java.awt.Paint)": -0.031859961198401975,
        "org.jfree.chart$JFreeChart#setBorderStroke(java.awt.Stroke)": -0.031859961198401975,
        "org.jfree.chart$JFreeChart#setBorderVisible(boolean)": -0.031859961198401975,
        "org.jfree.chart$JFreeChart#setNotify(boolean)": 0.0,
        "org.jfree.chart$JFreeChart#setPadding(org.jfree.chart.util.RectangleInsets)": -0.031859961198401975,
        "org.jfree.chart$JFreeChart#setRenderingHints(java.awt.RenderingHints)": -0.031859961198401975,
        "org.jfree.chart$JFreeChart#setSubtitles(java.util.List)": 0.0,
        "org.jfree.chart$JFreeChart#setTextAntiAlias(boolean)": 0.0,
        "org.jfree.chart$JFreeChart#setTextAntiAlias(java.lang.Object)": 0.0,
        "org.jfree.chart$JFreeChart#setTitle(java.lang.String)": -0.031859961198401975,
        "org.jfree.chart$JFreeChart#setTitle(org.jfree.chart.title.TextTitle)": 1.7543698579279332,
        "org.jfree.chart$JFreeChart#titleChanged(org.jfree.chart.event.TitleChangeEvent)": -0.056394102270112906,
        "org.jfree.chart$JFreeChart#writeObject(java.io.ObjectOutputStream)": -0.10131054262099393,
        "org.jfree.chart$PaintMap#PaintMap()": 0.2304871764540034,
        "org.jfree.chart$PaintMap#clear()": 0.0,
        "org.jfree.chart$PaintMap#clone()": -0.03185996119840184,
        "org.jfree.chart$PaintMap#containsKey(java.lang.Comparable)": 0.0,
        "org.jfree.chart$PaintMap#equals(java.lang.Object)": -0.13890116284518383,
        "org.jfree.chart$PaintMap#getPaint(java.lang.Comparable)": -0.10728081942530254,
        "org.jfree.chart$PaintMap#put(java.lang.Comparable,java.awt.Paint)": -0.10728081942530254,
        "org.jfree.chart$PaintMap#readObject(java.io.ObjectInputStream)": -0.0950529985761035,
        "org.jfree.chart$PaintMap#writeObject(java.io.ObjectOutputStream)": -0.09505299857610354,
        "org.jfree.chart$StrokeMap#StrokeMap()": 0.23381262120058743,
        "org.jfree.chart$StrokeMap#clear()": 0.0,
        "org.jfree.chart$StrokeMap#clone()": -0.03185996119840184,
        "org.jfree.chart$StrokeMap#containsKey(java.lang.Comparable)": 0.0,
        "org.jfree.chart$StrokeMap#equals(java.lang.Object)": -0.13890116284518383,
        "org.jfree.chart$StrokeMap#getStroke(java.lang.Comparable)": -0.10131054262099393,
        "org.jfree.chart$StrokeMap#put(java.lang.Comparable,java.awt.Stroke)": -0.08143177543623437,
        "org.jfree.chart$StrokeMap#readObject(java.io.ObjectInputStream)": -0.0950529985761035,
        "org.jfree.chart$StrokeMap#writeObject(java.io.ObjectOutputStream)": -0.09505299857610354,
        "org.jfree.chart.block$AbstractBlock#AbstractBlock()": 1.1695529276423606,
        "org.jfree.chart.block$AbstractBlock#arrange(java.awt.Graphics2D)": -0.031859961198401975,
        "org.jfree.chart.block$AbstractBlock#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$AbstractBlock#calculateTotalHeight(double)": -0.3169594698714891,
        "org.jfree.chart.block$AbstractBlock#calculateTotalWidth(double)": -0.3169594698714891,
        "org.jfree.chart.block$AbstractBlock#clone()": -0.12384545413105888,
        "org.jfree.chart.block$AbstractBlock#drawBorder(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.30836584049457016,
        "org.jfree.chart.block$AbstractBlock#equals(java.lang.Object)": -0.28776777176545604,
        "org.jfree.chart.block$AbstractBlock#getBounds()": -0.27252376404053225,
        "org.jfree.chart.block$AbstractBlock#getContentXOffset()": 0.0,
        "org.jfree.chart.block$AbstractBlock#getContentYOffset()": 0.0,
        "org.jfree.chart.block$AbstractBlock#getFrame()": -0.30547157278881953,
        "org.jfree.chart.block$AbstractBlock#getHeight()": -0.07388089766536687,
        "org.jfree.chart.block$AbstractBlock#getID()": 0.0,
        "org.jfree.chart.block$AbstractBlock#getMargin()": 0.0,
        "org.jfree.chart.block$AbstractBlock#getPadding()": 0.0,
        "org.jfree.chart.block$AbstractBlock#getWidth()": -0.07388089766536687,
        "org.jfree.chart.block$AbstractBlock#readObject(java.io.ObjectInputStream)": -0.1573128937070467,
        "org.jfree.chart.block$AbstractBlock#setBounds(java.awt.geom.Rectangle2D)": -0.2937361480385432,
        "org.jfree.chart.block$AbstractBlock#setFrame(org.jfree.chart.block.BlockFrame)": -0.031935415207072215,
        "org.jfree.chart.block$AbstractBlock#setHeight(double)": -0.1616811272923484,
        "org.jfree.chart.block$AbstractBlock#setID(java.lang.String)": -0.03185996119840184,
        "org.jfree.chart.block$AbstractBlock#setMargin(double,double,double,double)": 0.0,
        "org.jfree.chart.block$AbstractBlock#setMargin(org.jfree.chart.util.RectangleInsets)": -0.031935415207072215,
        "org.jfree.chart.block$AbstractBlock#setPadding(double,double,double,double)": -0.28475688166971075,
        "org.jfree.chart.block$AbstractBlock#setPadding(org.jfree.chart.util.RectangleInsets)": -0.13739770850987132,
        "org.jfree.chart.block$AbstractBlock#setWidth(double)": -0.1616811272923484,
        "org.jfree.chart.block$AbstractBlock#toContentConstraint(org.jfree.chart.block.RectangleConstraint)": -0.31124501678942446,
        "org.jfree.chart.block$AbstractBlock#trimBorder(java.awt.geom.Rectangle2D)": -0.30836584049457016,
        "org.jfree.chart.block$AbstractBlock#trimMargin(java.awt.geom.Rectangle2D)": -0.30836584049457016,
        "org.jfree.chart.block$AbstractBlock#trimPadding(java.awt.geom.Rectangle2D)": -0.30836584049457016,
        "org.jfree.chart.block$AbstractBlock#trimToContentHeight(double)": -0.30836584049457016,
        "org.jfree.chart.block$AbstractBlock#trimToContentHeight(org.jfree.data.Range)": -0.30836584049457016,
        "org.jfree.chart.block$AbstractBlock#trimToContentWidth(double)": -0.30836584049457016,
        "org.jfree.chart.block$AbstractBlock#trimToContentWidth(org.jfree.data.Range)": -0.30836584049457016,
        "org.jfree.chart.block$AbstractBlock#writeObject(java.io.ObjectOutputStream)": -0.1573128937070467,
        "org.jfree.chart.block$BlockBorder#<clinit>()": 1.1635074953528428,
        "org.jfree.chart.block$BlockBorder#BlockBorder()": -0.031859961198401975,
        "org.jfree.chart.block$BlockBorder#BlockBorder(double,double,double,double)": 0.0,
        "org.jfree.chart.block$BlockBorder#BlockBorder(double,double,double,double,java.awt.Paint)": 0.0,
        "org.jfree.chart.block$BlockBorder#BlockBorder(java.awt.Paint)": -0.056394102270112906,
        "org.jfree.chart.block$BlockBorder#BlockBorder(org.jfree.chart.util.RectangleInsets,java.awt.Paint)": -0.18227894227406216,
        "org.jfree.chart.block$BlockBorder#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.30836584049457016,
        "org.jfree.chart.block$BlockBorder#equals(java.lang.Object)": -0.2937361480385432,
        "org.jfree.chart.block$BlockBorder#getInsets()": -0.3197954019678724,
        "org.jfree.chart.block$BlockBorder#getPaint()": 0.0,
        "org.jfree.chart.block$BlockBorder#readObject(java.io.ObjectInputStream)": -0.1616811272923484,
        "org.jfree.chart.block$BlockBorder#writeObject(java.io.ObjectOutputStream)": -0.1616811272923484,
        "org.jfree.chart.block$BlockContainer#BlockContainer()": -0.0738808976653667,
        "org.jfree.chart.block$BlockContainer#BlockContainer(org.jfree.chart.block.Arrangement)": 1.2850013955518875,
        "org.jfree.chart.block$BlockContainer#add(org.jfree.chart.block.Block)": -0.30256185289301507,
        "org.jfree.chart.block$BlockContainer#add(org.jfree.chart.block.Block,java.lang.Object)": -0.30256185289301507,
        "org.jfree.chart.block$BlockContainer#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": -0.28172755297538665,
        "org.jfree.chart.block$BlockContainer#clear()": -0.31124501678942446,
        "org.jfree.chart.block$BlockContainer#clone()": -0.031859961198401975,
        "org.jfree.chart.block$BlockContainer#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.block$BlockContainer#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)": -0.30547157278881937,
        "org.jfree.chart.block$BlockContainer#equals(java.lang.Object)": -0.08845231986943454,
        "org.jfree.chart.block$BlockContainer#getArrangement()": 0.0,
        "org.jfree.chart.block$BlockContainer#getBlocks()": -0.2756115354127513,
        "org.jfree.chart.block$BlockContainer#isEmpty()": -0.30547157278881953,
        "org.jfree.chart.block$BlockContainer#setArrangement(org.jfree.chart.block.Arrangement)": -0.30836584049457016,
        "org.jfree.chart.block$ColumnArrangement#ColumnArrangement()": -0.038657213720377226,
        "org.jfree.chart.block$ColumnArrangement#ColumnArrangement(org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,double,double)": -0.03185996119840184,
        "org.jfree.chart.block$ColumnArrangement#add(org.jfree.chart.block.Block,java.lang.Object)": -0.03185996119840184,
        "org.jfree.chart.block$ColumnArrangement#arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$ColumnArrangement#arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$ColumnArrangement#arrangeNF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$ColumnArrangement#arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)": 0.0,
        "org.jfree.chart.block$ColumnArrangement#arrangeRF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$ColumnArrangement#arrangeRR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$ColumnArrangement#clear()": 0.0,
        "org.jfree.chart.block$ColumnArrangement#equals(java.lang.Object)": -0.13402062220175015,
        "org.jfree.chart.block$FlowArrangement#FlowArrangement()": 1.3004468472617017,
        "org.jfree.chart.block$FlowArrangement#FlowArrangement(org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,double,double)": -0.05198372992288547,
        "org.jfree.chart.block$FlowArrangement#add(org.jfree.chart.block.Block,java.lang.Object)": -0.27252376404053225,
        "org.jfree.chart.block$FlowArrangement#arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": -0.26941538580689645,
        "org.jfree.chart.block$FlowArrangement#arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$FlowArrangement#arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": -0.031859961198401975,
        "org.jfree.chart.block$FlowArrangement#arrangeFR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": -0.031859961198401975,
        "org.jfree.chart.block$FlowArrangement#arrangeNF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$FlowArrangement#arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)": -0.26941538580689645,
        "org.jfree.chart.block$FlowArrangement#arrangeRF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$FlowArrangement#arrangeRN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$FlowArrangement#arrangeRR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": -0.26941538580689645,
        "org.jfree.chart.block$FlowArrangement#clear()": -0.30547157278881953,
        "org.jfree.chart.block$FlowArrangement#equals(java.lang.Object)": -0.1483101568899432,
        "org.jfree.chart.block$LineBorder#LineBorder()": 1.3161005960273306,
        "org.jfree.chart.block$LineBorder#LineBorder(java.awt.Paint,java.awt.Stroke,org.jfree.chart.util.RectangleInsets)": -0.03418047057506379,
        "org.jfree.chart.block$LineBorder#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.30547157278881937,
        "org.jfree.chart.block$LineBorder#equals(java.lang.Object)": -0.11300600437932536,
        "org.jfree.chart.block$LineBorder#getInsets()": -0.30547157278881953,
        "org.jfree.chart.block$LineBorder#getPaint()": -0.2694153858068964,
        "org.jfree.chart.block$LineBorder#getStroke()": -0.2694153858068964,
        "org.jfree.chart.block$LineBorder#readObject(java.io.ObjectInputStream)": -0.10131054262099393,
        "org.jfree.chart.block$LineBorder#writeObject(java.io.ObjectOutputStream)": -0.10131054262099393,
        "org.jfree.chart.entity$ChartEntity#ChartEntity(java.awt.Shape)": -0.1340206222017503,
        "org.jfree.chart.entity$ChartEntity#ChartEntity(java.awt.Shape,java.lang.String)": -0.1340206222017503,
        "org.jfree.chart.entity$ChartEntity#ChartEntity(java.awt.Shape,java.lang.String,java.lang.String)": -0.20167933501162905,
        "org.jfree.chart.entity$ChartEntity#clone()": -0.08143177543623437,
        "org.jfree.chart.entity$ChartEntity#equals(java.lang.Object)": -0.15285821086173979,
        "org.jfree.chart.entity$ChartEntity#getArea()": 0.0,
        "org.jfree.chart.entity$ChartEntity#getImageMapAreaTag(org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)": 0.0,
        "org.jfree.chart.entity$ChartEntity#getPolyCoords(java.awt.Shape)": 0.0,
        "org.jfree.chart.entity$ChartEntity#getRectCoords(java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.entity$ChartEntity#getShapeCoords()": 0.0,
        "org.jfree.chart.entity$ChartEntity#getShapeType()": 0.0,
        "org.jfree.chart.entity$ChartEntity#getToolTipText()": 0.0,
        "org.jfree.chart.entity$ChartEntity#getURLText()": 0.0,
        "org.jfree.chart.entity$ChartEntity#hashCode()": 0.0,
        "org.jfree.chart.entity$ChartEntity#readObject(java.io.ObjectInputStream)": -0.08143177543623437,
        "org.jfree.chart.entity$ChartEntity#setArea(java.awt.Shape)": -0.07388089766536687,
        "org.jfree.chart.entity$ChartEntity#setToolTipText(java.lang.String)": -0.13402062220175015,
        "org.jfree.chart.entity$ChartEntity#setURLText(java.lang.String)": -0.13402062220175015,
        "org.jfree.chart.entity$ChartEntity#toString()": 0.0,
        "org.jfree.chart.entity$ChartEntity#writeObject(java.io.ObjectOutputStream)": -0.08143177543623437,
        "org.jfree.chart.entity$PieSectionEntity#PieSectionEntity(java.awt.Shape,org.jfree.data.general.PieDataset,int,int,java.lang.Comparable,java.lang.String,java.lang.String)": -0.08143177543623442,
        "org.jfree.chart.entity$PieSectionEntity#getDataset()": 0.0,
        "org.jfree.chart.entity$PieSectionEntity#getPieIndex()": 0.0,
        "org.jfree.chart.entity$PieSectionEntity#getSectionIndex()": 0.0,
        "org.jfree.chart.entity$PieSectionEntity#getSectionKey()": 0.0,
        "org.jfree.chart.entity$PieSectionEntity#setDataset(org.jfree.data.general.PieDataset)": 0.0,
        "org.jfree.chart.entity$PieSectionEntity#setPieIndex(int)": 0.0,
        "org.jfree.chart.entity$PieSectionEntity#setSectionIndex(int)": 0.0,
        "org.jfree.chart.entity$PieSectionEntity#setSectionKey(java.lang.Comparable)": 0.0,
        "org.jfree.chart.entity$PieSectionEntity#toString()": 0.0,
        "org.jfree.chart.event$ChartChangeEvent#ChartChangeEvent(java.lang.Object)": 0.6251400505086454,
        "org.jfree.chart.event$ChartChangeEvent#ChartChangeEvent(java.lang.Object,org.jfree.chart.JFreeChart)": 0.0,
        "org.jfree.chart.event$ChartChangeEvent#ChartChangeEvent(java.lang.Object,org.jfree.chart.JFreeChart,org.jfree.chart.event.ChartChangeEventType)": -0.7206463871182595,
        "org.jfree.chart.event$ChartChangeEvent#getChart()": 0.0,
        "org.jfree.chart.event$ChartChangeEvent#getType()": 0.0,
        "org.jfree.chart.event$ChartChangeEvent#setChart(org.jfree.chart.JFreeChart)": -0.3392771016084444,
        "org.jfree.chart.event$ChartChangeEvent#setType(org.jfree.chart.event.ChartChangeEventType)": -0.6423511175275185,
        "org.jfree.chart.event$ChartChangeEventType#<clinit>()": 0.6251400505086454,
        "org.jfree.chart.event$ChartChangeEventType#ChartChangeEventType(java.lang.String)": -0.7206463871182595,
        "org.jfree.chart.event$ChartChangeEventType#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.event$ChartChangeEventType#hashCode()": 0.0,
        "org.jfree.chart.event$ChartChangeEventType#readResolve()": 0.0,
        "org.jfree.chart.event$ChartChangeEventType#toString()": 0.0,
        "org.jfree.chart.event$PlotChangeEvent#PlotChangeEvent(org.jfree.chart.plot.Plot)": -0.731286985119186,
        "org.jfree.chart.event$PlotChangeEvent#getPlot()": 0.0,
        "org.jfree.chart.event$TitleChangeEvent#TitleChangeEvent(org.jfree.chart.title.Title)": 1.3048974445676622,
        "org.jfree.chart.event$TitleChangeEvent#getTitle()": 0.0,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#AbstractPieItemLabelGenerator(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)": 0.23381262120058743,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#clone()": -0.10131054262099393,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#createItemArray(org.jfree.data.general.PieDataset,java.lang.Comparable)": -0.05639410227011288,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#equals(java.lang.Object)": -0.17840200274463647,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)": -0.056394102270112906,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#getLabelFormat()": 0.0,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#getNumberFormat()": -0.05639410227011288,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#getPercentFormat()": -0.03185996119840184,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#StandardPieSectionLabelGenerator()": 1.5897499814435654,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#StandardPieSectionLabelGenerator(java.lang.String)": -0.031859961198401975,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#StandardPieSectionLabelGenerator(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)": 1.5897499814435654,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#StandardPieSectionLabelGenerator(java.lang.String,java.util.Locale)": 0.0,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#StandardPieSectionLabelGenerator(java.util.Locale)": 0.0,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#clone()": -0.09505299857610354,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#equals(java.lang.Object)": -0.1659690183054484,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#generateAttributedSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)": 0.0,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)": -0.056394102270112906,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#getAttributedLabel(int)": 0.0,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#setAttributedLabel(int,java.text.AttributedString)": -0.031859961198401975,
        "org.jfree.chart.plot$AbstractPieLabelDistributor#AbstractPieLabelDistributor()": 0.2544005000537434,
        "org.jfree.chart.plot$AbstractPieLabelDistributor#addPieLabelRecord(org.jfree.chart.plot.PieLabelRecord)": -0.045616279612789246,
        "org.jfree.chart.plot$AbstractPieLabelDistributor#clear()": -0.045616279612789246,
        "org.jfree.chart.plot$AbstractPieLabelDistributor#getItemCount()": -0.045616279612789246,
        "org.jfree.chart.plot$AbstractPieLabelDistributor#getPieLabelRecord(int)": -0.045616279612789246,
        "org.jfree.chart.plot$DefaultDrawingSupplier#<clinit>()": 1.0599962411386867,
        "org.jfree.chart.plot$DefaultDrawingSupplier#DefaultDrawingSupplier()": 1.0599962411386867,
        "org.jfree.chart.plot$DefaultDrawingSupplier#DefaultDrawingSupplier(java.awt.Paint[],java.awt.Paint[],java.awt.Paint[],java.awt.Stroke[],java.awt.Stroke[],java.awt.Shape[])": 1.0599962411386867,
        "org.jfree.chart.plot$DefaultDrawingSupplier#DefaultDrawingSupplier(java.awt.Paint[],java.awt.Paint[],java.awt.Stroke[],java.awt.Stroke[],java.awt.Shape[])": -0.045616279612789114,
        "org.jfree.chart.plot$DefaultDrawingSupplier#clone()": -0.18241729593166855,
        "org.jfree.chart.plot$DefaultDrawingSupplier#createStandardSeriesShapes()": 1.0599962411386867,
        "org.jfree.chart.plot$DefaultDrawingSupplier#equalShapes(java.awt.Shape[],java.awt.Shape[])": -0.35014200450564464,
        "org.jfree.chart.plot$DefaultDrawingSupplier#equals(java.lang.Object)": -0.35014200450564464,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextFillPaint()": -0.03185996119840184,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextOutlinePaint()": -0.045616279612789246,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextOutlineStroke()": -0.03185996119840184,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextPaint()": -0.333774183921993,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextShape()": -0.16596901830544852,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextStroke()": -0.03185996119840184,
        "org.jfree.chart.plot$DefaultDrawingSupplier#intArray(double,double,double)": -0.285790196488218,
        "org.jfree.chart.plot$DefaultDrawingSupplier#intArray(double,double,double,double)": -0.285790196488218,
        "org.jfree.chart.plot$DefaultDrawingSupplier#readObject(java.io.ObjectInputStream)": -0.20905347936572682,
        "org.jfree.chart.plot$DefaultDrawingSupplier#writeObject(java.io.ObjectOutputStream)": -0.20905347936572682,
        "org.jfree.chart.plot$MultiplePiePlot#MultiplePiePlot()": 1.7743837203872108,
        "org.jfree.chart.plot$MultiplePiePlot#MultiplePiePlot(org.jfree.data.category.CategoryDataset)": 1.763605897729887,
        "org.jfree.chart.plot$MultiplePiePlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#equals(java.lang.Object)": -0.056394102270112906,
        "org.jfree.chart.plot$MultiplePiePlot#getAggregatedItemsKey()": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#getAggregatedItemsPaint()": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#getDataExtractOrder()": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#getDataset()": 0.4742135623730951,
        "org.jfree.chart.plot$MultiplePiePlot#getLegendItems()": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#getLimit()": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#getPieChart()": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#getPlotType()": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#prefetchSectionPaints()": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#readObject(java.io.ObjectInputStream)": -0.03185996119840184,
        "org.jfree.chart.plot$MultiplePiePlot#setAggregatedItemsKey(java.lang.Comparable)": -0.031859961198401975,
        "org.jfree.chart.plot$MultiplePiePlot#setAggregatedItemsPaint(java.awt.Paint)": -0.045616279612789114,
        "org.jfree.chart.plot$MultiplePiePlot#setDataExtractOrder(org.jfree.chart.util.TableOrder)": -0.031859961198401975,
        "org.jfree.chart.plot$MultiplePiePlot#setDataset(org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#setLimit(double)": -0.031859961198401975,
        "org.jfree.chart.plot$MultiplePiePlot#setPieChart(org.jfree.chart.JFreeChart)": -0.031859961198401975,
        "org.jfree.chart.plot$MultiplePiePlot#writeObject(java.io.ObjectOutputStream)": -0.03185996119840184,
        "org.jfree.chart.plot$PieLabelDistributor#PieLabelDistributor(int)": 1.6001869376806481,
        "org.jfree.chart.plot$PieLabelDistributor#adjustDownwards(double,double)": -0.031859961198401975,
        "org.jfree.chart.plot$PieLabelDistributor#adjustInwards()": 0.0,
        "org.jfree.chart.plot$PieLabelDistributor#adjustUpwards(double,double)": -0.031859961198401975,
        "org.jfree.chart.plot$PieLabelDistributor#distributeLabels(double,double)": -0.045616279612789114,
        "org.jfree.chart.plot$PieLabelDistributor#isOverlap()": -0.045616279612789114,
        "org.jfree.chart.plot$PieLabelDistributor#sort()": -0.045616279612789246,
        "org.jfree.chart.plot$PieLabelDistributor#spreadEvenly(double,double)": -0.031859961198401975,
        "org.jfree.chart.plot$PieLabelDistributor#toString()": 0.0,
        "org.jfree.chart.plot$PieLabelLinkStyle#<clinit>()": 1.6001869376806481,
        "org.jfree.chart.plot$PieLabelLinkStyle#PieLabelLinkStyle(java.lang.String)": 0.2544005000537434,
        "org.jfree.chart.plot$PieLabelLinkStyle#equals(java.lang.Object)": -0.1616811272923484,
        "org.jfree.chart.plot$PieLabelLinkStyle#hashCode()": 0.0,
        "org.jfree.chart.plot$PieLabelLinkStyle#readResolve()": -0.08143177543623442,
        "org.jfree.chart.plot$PieLabelLinkStyle#toString()": -0.08143177543623437,
        "org.jfree.chart.plot$PiePlot#<clinit>()": 1.6001869376806481,
        "org.jfree.chart.plot$PiePlot#PiePlot()": -0.11300600437932536,
        "org.jfree.chart.plot$PiePlot#PiePlot(org.jfree.data.general.PieDataset)": 1.6001869376806481,
        "org.jfree.chart.plot$PiePlot#clone()": -0.08845231986943454,
        "org.jfree.chart.plot$PiePlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)": -0.031859961198401975,
        "org.jfree.chart.plot$PiePlot#drawItem(java.awt.Graphics2D,int,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState,int)": -0.031859961198401975,
        "org.jfree.chart.plot$PiePlot#drawLabels(java.awt.Graphics2D,java.util.List,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState)": -0.045616279612789114,
        "org.jfree.chart.plot$PiePlot#drawLeftLabel(java.awt.Graphics2D,org.jfree.chart.plot.PiePlotState,org.jfree.chart.plot.PieLabelRecord)": -0.045616279612789114,
        "org.jfree.chart.plot$PiePlot#drawLeftLabels(org.jfree.data.KeyedValues,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,float,org.jfree.chart.plot.PiePlotState)": -0.045616279612789114,
        "org.jfree.chart.plot$PiePlot#drawPie(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)": -0.031859961198401975,
        "org.jfree.chart.plot$PiePlot#drawRightLabel(java.awt.Graphics2D,org.jfree.chart.plot.PiePlotState,org.jfree.chart.plot.PieLabelRecord)": -0.045616279612789114,
        "org.jfree.chart.plot$PiePlot#drawRightLabels(org.jfree.data.KeyedValues,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,float,org.jfree.chart.plot.PiePlotState)": -0.045616279612789114,
        "org.jfree.chart.plot$PiePlot#drawSimpleLabels(java.awt.Graphics2D,java.util.List,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState)": 0.0,
        "org.jfree.chart.plot$PiePlot#equals(java.lang.Object)": -0.15731289370704668,
        "org.jfree.chart.plot$PiePlot#getArcBounds(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,double,double,double)": -0.03185996119840184,
        "org.jfree.chart.plot$PiePlot#getBaseSectionOutlinePaint()": 0.0,
        "org.jfree.chart.plot$PiePlot#getBaseSectionOutlineStroke()": 0.0,
        "org.jfree.chart.plot$PiePlot#getBaseSectionPaint()": -0.03185996119840184,
        "org.jfree.chart.plot$PiePlot#getDataset()": -0.08143177543623437,
        "org.jfree.chart.plot$PiePlot#getDirection()": -0.03185996119840184,
        "org.jfree.chart.plot$PiePlot#getExplodePercent(java.lang.Comparable)": -0.045616279612789246,
        "org.jfree.chart.plot$PiePlot#getIgnoreNullValues()": 0.0,
        "org.jfree.chart.plot$PiePlot#getIgnoreZeroValues()": 0.0,
        "org.jfree.chart.plot$PiePlot#getInteriorGap()": -0.05639410227011288,
        "org.jfree.chart.plot$PiePlot#getLabelBackgroundPaint()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLabelDistributor()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLabelFont()": -0.045616279612789246,
        "org.jfree.chart.plot$PiePlot#getLabelGap()": -0.045616279612789246,
        "org.jfree.chart.plot$PiePlot#getLabelGenerator()": -0.045616279612789246,
        "org.jfree.chart.plot$PiePlot#getLabelLinkMargin()": -0.045616279612789246,
        "org.jfree.chart.plot$PiePlot#getLabelLinkPaint()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLabelLinkStroke()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLabelLinkStyle()": -0.045616279612789246,
        "org.jfree.chart.plot$PiePlot#getLabelLinksVisible()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLabelOutlinePaint()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLabelOutlineStroke()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLabelPadding()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLabelPaint()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLabelShadowPaint()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLegendItemShape()": -0.05639410227011288,
        "org.jfree.chart.plot$PiePlot#getLegendItems()": -0.0656301420720666,
        "org.jfree.chart.plot$PiePlot#getLegendLabelGenerator()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLegendLabelToolTipGenerator()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLegendLabelURLGenerator()": -0.03185996119840184,
        "org.jfree.chart.plot$PiePlot#getMaximumExplodePercent()": -0.05639410227011288,
        "org.jfree.chart.plot$PiePlot#getMaximumLabelWidth()": -0.045616279612789246,
        "org.jfree.chart.plot$PiePlot#getMinimumArcAngleToDraw()": -0.045616279612789246,
        "org.jfree.chart.plot$PiePlot#getPieIndex()": 0.0,
        "org.jfree.chart.plot$PiePlot#getPlotType()": 0.0,
        "org.jfree.chart.plot$PiePlot#getSectionKey(int)": -0.045616279612789246,
        "org.jfree.chart.plot$PiePlot#getSectionOutlinePaint(java.lang.Comparable)": 0.0,
        "org.jfree.chart.plot$PiePlot#getSectionOutlineStroke(java.lang.Comparable)": 0.0,
        "org.jfree.chart.plot$PiePlot#getSectionOutlinesVisible()": 0.0,
        "org.jfree.chart.plot$PiePlot#getSectionPaint(java.lang.Comparable)": 0.0,
        "org.jfree.chart.plot$PiePlot#getShadowPaint()": 0.0,
        "org.jfree.chart.plot$PiePlot#getShadowXOffset()": 0.0,
        "org.jfree.chart.plot$PiePlot#getShadowYOffset()": 0.0,
        "org.jfree.chart.plot$PiePlot#getSimpleLabelOffset()": 0.0,
        "org.jfree.chart.plot$PiePlot#getSimpleLabels()": -0.03185996119840184,
        "org.jfree.chart.plot$PiePlot#getStartAngle()": -0.05639410227011288,
        "org.jfree.chart.plot$PiePlot#getToolTipGenerator()": 0.0,
        "org.jfree.chart.plot$PiePlot#getURLGenerator()": -0.03185996119840184,
        "org.jfree.chart.plot$PiePlot#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlot,java.lang.Integer,org.jfree.chart.plot.PlotRenderingInfo)": -0.056394102270112906,
        "org.jfree.chart.plot$PiePlot#isCircular()": -0.05639410227011288,
        "org.jfree.chart.plot$PiePlot#lookupSectionOutlinePaint(java.lang.Comparable)": -0.056394102270112906,
        "org.jfree.chart.plot$PiePlot#lookupSectionOutlinePaint(java.lang.Comparable,boolean)": -0.056394102270112906,
        "org.jfree.chart.plot$PiePlot#lookupSectionOutlineStroke(java.lang.Comparable)": -0.056394102270112906,
        "org.jfree.chart.plot$PiePlot#lookupSectionOutlineStroke(java.lang.Comparable,boolean)": -0.056394102270112906,
        "org.jfree.chart.plot$PiePlot#lookupSectionPaint(java.lang.Comparable)": -0.031859961198401975,
        "org.jfree.chart.plot$PiePlot#lookupSectionPaint(java.lang.Comparable,boolean)": -0.056394102270112906,
        "org.jfree.chart.plot$PiePlot#readObject(java.io.ObjectInputStream)": -0.08143177543623437,
        "org.jfree.chart.plot$PiePlot#setBaseSectionOutlinePaint(java.awt.Paint)": -0.031859961198401975,
        "org.jfree.chart.plot$PiePlot#setBaseSectionOutlineStroke(java.awt.Stroke)": -0.031859961198401975,
        "org.jfree.chart.plot$PiePlot#setBaseSectionPaint(java.awt.Paint)": -0.045616279612789114,
        "org.jfree.chart.plot$PiePlot#setCircular(boolean)": -0.031859961198401975,
        "org.jfree.chart.plot$PiePlot#setCircular(boolean,boolean)": -0.08845231986943454,
        "org.jfree.chart.plot$PiePlot#setDataset(org.jfree.data.general.PieDataset)": -0.045616279612789114,
        "org.jfree.chart.plot$PiePlot#setDirection(org.jfree.chart.util.Rotation)": -0.031859961198401975,
        "org.jfree.chart.plot$PiePlot#setExplodePercent(java.lang.Comparable,double)": -0.031859961198401975,
        "org.jfree.chart.plot$PiePlot#setIgnoreNullValues(boolean)": -0.045616279612789114,
        "org.jfree.chart.plot$PiePlot#setIgnoreZeroValues(boolean)": -0.045616279612789114,
        "org.jfree.chart.plot$PiePlot#setInteriorGap(double)": -0.031859961198401975,
        "org.jfree.chart.plot$PiePlot#setLabelBackgroundPaint(java.awt.Paint)": -0.031859961198401975,
        "org.jfree.chart.plot$PiePlot#setLabelDistributor(org.jfree.chart.plot.AbstractPieLabelDistributor)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLabelFont(java.awt.Font)": -0.031859961198401975,
        "org.jfree.chart.plot$PiePlot#setLabelGap(double)": -0.031859961198401975,
        "org.jfree.chart.plot$PiePlot#setLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator)": -0.13890116284518383,
        "org.jfree.chart.plot$PiePlot#setLabelLinkMargin(double)": -0.031859961198401975,
        "org.jfree.chart.plot$PiePlot#setLabelLinkPaint(java.awt.Paint)": -0.031859961198401975,
        "org.jfree.chart.plot$PiePlot#setLabelLinkStroke(java.awt.Stroke)": -0.031859961198401975,
        "org.jfree.chart.plot$PiePlot#setLabelLinkStyle(org.jfree.chart.plot.PieLabelLinkStyle)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLabelLinksVisible(boolean)": -0.031859961198401975,
        "org.jfree.chart.plot$PiePlot#setLabelOutlinePaint(java.awt.Paint)": -0.031859961198401975,
        "org.jfree.chart.plot$PiePlot#setLabelOutlineStroke(java.awt.Stroke)": -0.031859961198401975,
        "org.jfree.chart.plot$PiePlot#setLabelPadding(org.jfree.chart.util.RectangleInsets)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLabelPaint(java.awt.Paint)": -0.031859961198401975,
        "org.jfree.chart.plot$PiePlot#setLabelShadowPaint(java.awt.Paint)": -0.031859961198401975,
        "org.jfree.chart.plot$PiePlot#setLegendItemShape(java.awt.Shape)": -0.045616279612789114,
        "org.jfree.chart.plot$PiePlot#setLegendLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator)": -0.056394102270112906,
        "org.jfree.chart.plot$PiePlot#setLegendLabelToolTipGenerator(org.jfree.chart.labels.PieSectionLabelGenerator)": -0.045616279612789114,
        "org.jfree.chart.plot$PiePlot#setLegendLabelURLGenerator(org.jfree.chart.urls.PieURLGenerator)": -0.045616279612789114,
        "org.jfree.chart.plot$PiePlot#setMaximumLabelWidth(double)": -0.031859961198401975,
        "org.jfree.chart.plot$PiePlot#setMinimumArcAngleToDraw(double)": -0.03185996119840184,
        "org.jfree.chart.plot$PiePlot#setPieIndex(int)": -0.03185996119840184,
        "org.jfree.chart.plot$PiePlot#setSectionOutlinePaint(java.lang.Comparable,java.awt.Paint)": -0.031859961198401975,
        "org.jfree.chart.plot$PiePlot#setSectionOutlineStroke(java.lang.Comparable,java.awt.Stroke)": -0.031859961198401975,
        "org.jfree.chart.plot$PiePlot#setSectionOutlinesVisible(boolean)": -0.031859961198401975,
        "org.jfree.chart.plot$PiePlot#setSectionPaint(java.lang.Comparable,java.awt.Paint)": -0.031859961198401975,
        "org.jfree.chart.plot$PiePlot#setShadowPaint(java.awt.Paint)": -0.031859961198401975,
        "org.jfree.chart.plot$PiePlot#setShadowXOffset(double)": -0.031859961198401975,
        "org.jfree.chart.plot$PiePlot#setShadowYOffset(double)": -0.031859961198401975,
        "org.jfree.chart.plot$PiePlot#setSimpleLabelOffset(org.jfree.chart.util.RectangleInsets)": 0.0,
        "org.jfree.chart.plot$PiePlot#setSimpleLabels(boolean)": 0.0,
        "org.jfree.chart.plot$PiePlot#setStartAngle(double)": -0.031859961198401975,
        "org.jfree.chart.plot$PiePlot#setToolTipGenerator(org.jfree.chart.labels.PieToolTipGenerator)": -0.14366083374420363,
        "org.jfree.chart.plot$PiePlot#setURLGenerator(org.jfree.chart.urls.PieURLGenerator)": -0.0738808976653667,
        "org.jfree.chart.plot$PiePlot#writeObject(java.io.ObjectOutputStream)": -0.08143177543623437,
        "org.jfree.chart.plot$Plot#<clinit>()": 1.065706604176396,
        "org.jfree.chart.plot$Plot#Plot()": 1.065706604176396,
        "org.jfree.chart.plot$Plot#addChangeListener(org.jfree.chart.event.PlotChangeListener)": 1.227141819634717,
        "org.jfree.chart.plot$Plot#axisChanged(org.jfree.chart.event.AxisChangeEvent)": -0.11851886356601378,
        "org.jfree.chart.plot$Plot#clone()": -0.17840200274463647,
        "org.jfree.chart.plot$Plot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)": -0.1013105426209939,
        "org.jfree.chart.plot$Plot#drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.0738808976653667,
        "org.jfree.chart.plot$Plot#drawBackgroundImage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.2966945395324405,
        "org.jfree.chart.plot$Plot#drawNoDataMessage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.11300600437932551,
        "org.jfree.chart.plot$Plot#drawOutline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.2966945395324405,
        "org.jfree.chart.plot$Plot#equals(java.lang.Object)": -0.3420105955534704,
        "org.jfree.chart.plot$Plot#fillBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.0738808976653667,
        "org.jfree.chart.plot$Plot#fillBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation)": -0.2966945395324405,
        "org.jfree.chart.plot$Plot#fireChangeEvent()": -0.6645186066482215,
        "org.jfree.chart.plot$Plot#getBackgroundAlpha()": -0.05639410227011288,
        "org.jfree.chart.plot$Plot#getBackgroundImage()": -0.05639410227011288,
        "org.jfree.chart.plot$Plot#getBackgroundImageAlignment()": 0.0,
        "org.jfree.chart.plot$Plot#getBackgroundImageAlpha()": 0.0,
        "org.jfree.chart.plot$Plot#getBackgroundPaint()": -0.05639410227011288,
        "org.jfree.chart.plot$Plot#getDatasetGroup()": 0.0,
        "org.jfree.chart.plot$Plot#getDrawingSupplier()": -0.33653171171967233,
        "org.jfree.chart.plot$Plot#getForegroundAlpha()": -0.30547157278881953,
        "org.jfree.chart.plot$Plot#getInsets()": -0.30836584049457016,
        "org.jfree.chart.plot$Plot#getLegendItems()": -0.03185996119840184,
        "org.jfree.chart.plot$Plot#getNoDataMessage()": 0.0,
        "org.jfree.chart.plot$Plot#getNoDataMessageFont()": 0.0,
        "org.jfree.chart.plot$Plot#getNoDataMessagePaint()": 0.0,
        "org.jfree.chart.plot$Plot#getOutlinePaint()": -0.05639410227011288,
        "org.jfree.chart.plot$Plot#getOutlineStroke()": -0.05639410227011288,
        "org.jfree.chart.plot$Plot#getParent()": -0.6321726534629237,
        "org.jfree.chart.plot$Plot#getRectX(double,double,double,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.plot$Plot#getRectY(double,double,double,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.plot$Plot#getRootPlot()": 0.0,
        "org.jfree.chart.plot$Plot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$Plot#isOutlineVisible()": 0.0,
        "org.jfree.chart.plot$Plot#isSubplot()": 0.0,
        "org.jfree.chart.plot$Plot#markerChanged(org.jfree.chart.event.MarkerChangeEvent)": 0.0,
        "org.jfree.chart.plot$Plot#notifyListeners(org.jfree.chart.event.PlotChangeEvent)": -0.731286985119186,
        "org.jfree.chart.plot$Plot#readObject(java.io.ObjectInputStream)": -0.20538775455430835,
        "org.jfree.chart.plot$Plot#removeChangeListener(org.jfree.chart.event.PlotChangeListener)": -0.0656301420720666,
        "org.jfree.chart.plot$Plot#resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)": -0.2907607064166957,
        "org.jfree.chart.plot$Plot#resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)": -0.2907607064166957,
        "org.jfree.chart.plot$Plot#setBackgroundAlpha(float)": -0.031859961198401975,
        "org.jfree.chart.plot$Plot#setBackgroundImage(java.awt.Image)": -0.031859961198401975,
        "org.jfree.chart.plot$Plot#setBackgroundImageAlignment(int)": -0.031859961198401975,
        "org.jfree.chart.plot$Plot#setBackgroundImageAlpha(float)": -0.031859961198401975,
        "org.jfree.chart.plot$Plot#setBackgroundPaint(java.awt.Paint)": -0.0738808976653667,
        "org.jfree.chart.plot$Plot#setDatasetGroup(org.jfree.data.general.DatasetGroup)": -0.045616279612789246,
        "org.jfree.chart.plot$Plot#setDrawingSupplier(org.jfree.chart.plot.DrawingSupplier)": -0.031859961198401975,
        "org.jfree.chart.plot$Plot#setForegroundAlpha(float)": -0.09505299857610354,
        "org.jfree.chart.plot$Plot#setInsets(org.jfree.chart.util.RectangleInsets)": -0.2016793350116289,
        "org.jfree.chart.plot$Plot#setInsets(org.jfree.chart.util.RectangleInsets,boolean)": -0.21626441065225038,
        "org.jfree.chart.plot$Plot#setNoDataMessage(java.lang.String)": -0.031859961198401975,
        "org.jfree.chart.plot$Plot#setNoDataMessageFont(java.awt.Font)": -0.031859961198401975,
        "org.jfree.chart.plot$Plot#setNoDataMessagePaint(java.awt.Paint)": -0.031859961198401975,
        "org.jfree.chart.plot$Plot#setOutlinePaint(java.awt.Paint)": -0.031859961198401975,
        "org.jfree.chart.plot$Plot#setOutlineStroke(java.awt.Stroke)": -0.031859961198401975,
        "org.jfree.chart.plot$Plot#setOutlineVisible(boolean)": -0.031859961198401975,
        "org.jfree.chart.plot$Plot#setParent(org.jfree.chart.plot.Plot)": -0.13890116284518372,
        "org.jfree.chart.plot$Plot#writeObject(java.io.ObjectOutputStream)": -0.20538775455430835,
        "org.jfree.chart.plot$Plot#zoom(double)": 0.0,
        "org.jfree.chart.resources$JFreeChartResources#<clinit>()": -0.08681754633295202,
        "org.jfree.chart.resources$JFreeChartResources#JFreeChartResources()": -0.08681754633295202,
        "org.jfree.chart.resources$JFreeChartResources#getContents()": 1.2589688912939532,
        "org.jfree.chart.title$LegendTitle#<clinit>()": 1.30936538293922,
        "org.jfree.chart.title$LegendTitle#LegendTitle(org.jfree.chart.LegendItemSource)": 1.30936538293922,
        "org.jfree.chart.title$LegendTitle#LegendTitle(org.jfree.chart.LegendItemSource,org.jfree.chart.block.Arrangement,org.jfree.chart.block.Arrangement)": 1.30936538293922,
        "org.jfree.chart.title$LegendTitle#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": -0.30547157278881937,
        "org.jfree.chart.title$LegendTitle#createLegendItemBlock(org.jfree.chart.LegendItem)": -0.26941538580689645,
        "org.jfree.chart.title$LegendTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.title$LegendTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)": -0.30547157278881937,
        "org.jfree.chart.title$LegendTitle#equals(java.lang.Object)": 1.6847696626535127,
        "org.jfree.chart.title$LegendTitle#fetchLegendItems()": -0.30547157278881937,
        "org.jfree.chart.title$LegendTitle#getBackgroundPaint()": 0.0,
        "org.jfree.chart.title$LegendTitle#getItemContainer()": 0.0,
        "org.jfree.chart.title$LegendTitle#getItemFont()": 0.0,
        "org.jfree.chart.title$LegendTitle#getItemLabelPadding()": 0.0,
        "org.jfree.chart.title$LegendTitle#getItemPaint()": 0.0,
        "org.jfree.chart.title$LegendTitle#getLegendItemGraphicAnchor()": -0.2694153858068964,
        "org.jfree.chart.title$LegendTitle#getLegendItemGraphicEdge()": 0.0,
        "org.jfree.chart.title$LegendTitle#getLegendItemGraphicLocation()": -0.2694153858068964,
        "org.jfree.chart.title$LegendTitle#getLegendItemGraphicPadding()": 0.0,
        "org.jfree.chart.title$LegendTitle#getSources()": -0.045616279612789246,
        "org.jfree.chart.title$LegendTitle#readObject(java.io.ObjectInputStream)": -0.10131054262099393,
        "org.jfree.chart.title$LegendTitle#setBackgroundPaint(java.awt.Paint)": 1.3138510224198328,
        "org.jfree.chart.title$LegendTitle#setItemFont(java.awt.Font)": -0.031859961198401975,
        "org.jfree.chart.title$LegendTitle#setItemLabelPadding(org.jfree.chart.util.RectangleInsets)": 0.0,
        "org.jfree.chart.title$LegendTitle#setItemPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.title$LegendTitle#setLegendItemGraphicAnchor(org.jfree.chart.util.RectangleAnchor)": -0.03185996119840184,
        "org.jfree.chart.title$LegendTitle#setLegendItemGraphicEdge(org.jfree.chart.util.RectangleEdge)": -0.031859961198401975,
        "org.jfree.chart.title$LegendTitle#setLegendItemGraphicLocation(org.jfree.chart.util.RectangleAnchor)": -0.03185996119840184,
        "org.jfree.chart.title$LegendTitle#setLegendItemGraphicPadding(org.jfree.chart.util.RectangleInsets)": 0.0,
        "org.jfree.chart.title$LegendTitle#setSources(org.jfree.chart.LegendItemSource[])": 0.0,
        "org.jfree.chart.title$LegendTitle#setWrapper(org.jfree.chart.block.BlockContainer)": 0.0,
        "org.jfree.chart.title$LegendTitle#writeObject(java.io.ObjectOutputStream)": -0.10131054262099393,
        "org.jfree.chart.title$TextTitle#<clinit>()": 1.3597701077295632,
        "org.jfree.chart.title$TextTitle#TextTitle()": -0.0738808976653667,
        "org.jfree.chart.title$TextTitle#TextTitle(java.lang.String)": -0.1290069031080168,
        "org.jfree.chart.title$TextTitle#TextTitle(java.lang.String,java.awt.Font)": 1.3932369068794184,
        "org.jfree.chart.title$TextTitle#TextTitle(java.lang.String,java.awt.Font,java.awt.Paint,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)": 1.3597701077295632,
        "org.jfree.chart.title$TextTitle#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": -0.2016793350116289,
        "org.jfree.chart.title$TextTitle#arrangeRR(java.awt.Graphics2D,org.jfree.data.Range,org.jfree.data.Range)": -0.2016793350116289,
        "org.jfree.chart.title$TextTitle#clone()": -0.045616279612789114,
        "org.jfree.chart.title$TextTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.title$TextTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)": -0.2016793350116289,
        "org.jfree.chart.title$TextTitle#drawHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.2016793350116289,
        "org.jfree.chart.title$TextTitle#drawVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.title$TextTitle#equals(java.lang.Object)": -0.17840200274463644,
        "org.jfree.chart.title$TextTitle#getBackgroundPaint()": 0.0,
        "org.jfree.chart.title$TextTitle#getExpandToFitSpace()": 0.0,
        "org.jfree.chart.title$TextTitle#getFont()": 0.0,
        "org.jfree.chart.title$TextTitle#getPaint()": 0.0,
        "org.jfree.chart.title$TextTitle#getText()": 0.0,
        "org.jfree.chart.title$TextTitle#getTextAlignment()": 0.0,
        "org.jfree.chart.title$TextTitle#getToolTipText()": 0.0,
        "org.jfree.chart.title$TextTitle#getURLText()": 0.0,
        "org.jfree.chart.title$TextTitle#hashCode()": -0.056394102270112906,
        "org.jfree.chart.title$TextTitle#readObject(java.io.ObjectInputStream)": -0.11851886356601371,
        "org.jfree.chart.title$TextTitle#setBackgroundPaint(java.awt.Paint)": -0.045616279612789114,
        "org.jfree.chart.title$TextTitle#setExpandToFitSpace(boolean)": 0.0,
        "org.jfree.chart.title$TextTitle#setFont(java.awt.Font)": -0.056394102270112906,
        "org.jfree.chart.title$TextTitle#setPaint(java.awt.Paint)": -0.045616279612789114,
        "org.jfree.chart.title$TextTitle#setText(java.lang.String)": -0.056394102270112906,
        "org.jfree.chart.title$TextTitle#setTextAlignment(org.jfree.chart.util.HorizontalAlignment)": -0.031859961198401975,
        "org.jfree.chart.title$TextTitle#setToolTipText(java.lang.String)": 0.0,
        "org.jfree.chart.title$TextTitle#setURLText(java.lang.String)": 0.0,
        "org.jfree.chart.title$TextTitle#writeObject(java.io.ObjectOutputStream)": -0.11851886356601371,
        "org.jfree.chart.title$Title#<clinit>()": 1.2208635920240423,
        "org.jfree.chart.title$Title#Title()": 1.2915962953289934,
        "org.jfree.chart.title$Title#Title(org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment)": 0.0,
        "org.jfree.chart.title$Title#Title(org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)": 1.2208635920240423,
        "org.jfree.chart.title$Title#addChangeListener(org.jfree.chart.event.TitleChangeListener)": 1.2762635417830301,
        "org.jfree.chart.title$Title#clone()": -0.08143177543623442,
        "org.jfree.chart.title$Title#equals(java.lang.Object)": -0.21981306231935172,
        "org.jfree.chart.title$Title#getHorizontalAlignment()": -0.30836584049457016,
        "org.jfree.chart.title$Title#getNotify()": 0.0,
        "org.jfree.chart.title$Title#getPosition()": -0.30836584049457016,
        "org.jfree.chart.title$Title#getVerticalAlignment()": 0.0,
        "org.jfree.chart.title$Title#hashCode()": -0.08845231986943447,
        "org.jfree.chart.title$Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)": 1.3048974445676622,
        "org.jfree.chart.title$Title#readObject(java.io.ObjectInputStream)": -0.12900690310801677,
        "org.jfree.chart.title$Title#removeChangeListener(org.jfree.chart.event.TitleChangeListener)": -0.031859961198401975,
        "org.jfree.chart.title$Title#setHorizontalAlignment(org.jfree.chart.util.HorizontalAlignment)": -0.031859961198401975,
        "org.jfree.chart.title$Title#setNotify(boolean)": 0.0,
        "org.jfree.chart.title$Title#setPosition(org.jfree.chart.util.RectangleEdge)": 1.3161005960273306,
        "org.jfree.chart.title$Title#setVerticalAlignment(org.jfree.chart.util.VerticalAlignment)": -0.031859961198401975,
        "org.jfree.chart.title$Title#writeObject(java.io.ObjectOutputStream)": -0.12900690310801677,
        "org.jfree.chart.ui$BasicProjectInfo#BasicProjectInfo()": 1.2589688912939532,
        "org.jfree.chart.ui$BasicProjectInfo#BasicProjectInfo(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.jfree.chart.ui$BasicProjectInfo#BasicProjectInfo(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.jfree.chart.ui$BasicProjectInfo#addLibrary(org.jfree.chart.ui.Library)": 0.0,
        "org.jfree.chart.ui$BasicProjectInfo#addOptionalLibrary(java.lang.String)": 0.0,
        "org.jfree.chart.ui$BasicProjectInfo#addOptionalLibrary(org.jfree.chart.ui.Library)": 0.0,
        "org.jfree.chart.ui$BasicProjectInfo#getCopyright()": 0.0,
        "org.jfree.chart.ui$BasicProjectInfo#getLibraries()": 0.0,
        "org.jfree.chart.ui$BasicProjectInfo#getOptionalLibraries()": 0.0,
        "org.jfree.chart.ui$BasicProjectInfo#setCopyright(java.lang.String)": -0.08681754633295202,
        "org.jfree.chart.ui$BasicProjectInfo#setInfo(java.lang.String)": 1.2589688912939532,
        "org.jfree.chart.ui$BasicProjectInfo#setLicenceName(java.lang.String)": 1.2589688912939532,
        "org.jfree.chart.ui$BasicProjectInfo#setName(java.lang.String)": 1.2589688912939532,
        "org.jfree.chart.ui$BasicProjectInfo#setVersion(java.lang.String)": 1.2589688912939532,
        "org.jfree.chart.ui$Contributor#Contributor(java.lang.String,java.lang.String)": -0.08681754633295202,
        "org.jfree.chart.ui$Contributor#getEmail()": 0.0,
        "org.jfree.chart.ui$Contributor#getName()": 0.0,
        "org.jfree.chart.ui$Library#Library()": -0.08681754633295202,
        "org.jfree.chart.ui$Library#Library(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.jfree.chart.ui$Library#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.ui$Library#getInfo()": 0.0,
        "org.jfree.chart.ui$Library#getLicenceName()": 0.0,
        "org.jfree.chart.ui$Library#getName()": 0.0,
        "org.jfree.chart.ui$Library#getVersion()": 0.0,
        "org.jfree.chart.ui$Library#hashCode()": 0.0,
        "org.jfree.chart.ui$Library#setInfo(java.lang.String)": -0.08681754633295202,
        "org.jfree.chart.ui$Library#setLicenceName(java.lang.String)": -0.08681754633295202,
        "org.jfree.chart.ui$Library#setName(java.lang.String)": -0.08681754633295202,
        "org.jfree.chart.ui$Library#setVersion(java.lang.String)": -0.08681754633295202,
        "org.jfree.chart.ui$Licences#Licences()": -0.08681754633295202,
        "org.jfree.chart.ui$Licences#getGPL()": 0.0,
        "org.jfree.chart.ui$Licences#getInstance()": 1.2589688912939532,
        "org.jfree.chart.ui$Licences#getLGPL()": -0.08681754633295202,
        "org.jfree.chart.ui$ProjectInfo#ProjectInfo()": 1.2589688912939532,
        "org.jfree.chart.ui$ProjectInfo#ProjectInfo(java.lang.String,java.lang.String,java.lang.String,java.awt.Image,java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.jfree.chart.ui$ProjectInfo#getContributors()": 0.0,
        "org.jfree.chart.ui$ProjectInfo#getLicenceText()": 0.0,
        "org.jfree.chart.ui$ProjectInfo#getLogo()": -0.10131054262099393,
        "org.jfree.chart.ui$ProjectInfo#setContributors(java.util.List)": -0.08681754633295202,
        "org.jfree.chart.ui$ProjectInfo#setLicenceText(java.lang.String)": -0.08681754633295202,
        "org.jfree.chart.ui$ProjectInfo#setLogo(java.awt.Image)": -0.08681754633295202,
        "org.jfree.chart.ui$ProjectInfo#toString()": 0.0,
        "org.jfree.chart.util$AbstractObjectList#AbstractObjectList()": 0.6612810905076564,
        "org.jfree.chart.util$AbstractObjectList#AbstractObjectList(int)": 0.6612810905076564,
        "org.jfree.chart.util$AbstractObjectList#AbstractObjectList(int,int)": -0.6845053471192485,
        "org.jfree.chart.util$AbstractObjectList#clear()": 0.0,
        "org.jfree.chart.util$AbstractObjectList#clone()": -0.33100426793461435,
        "org.jfree.chart.util$AbstractObjectList#equals(java.lang.Object)": -0.7428237551914145,
        "org.jfree.chart.util$AbstractObjectList#get(int)": -0.700175256917583,
        "org.jfree.chart.util$AbstractObjectList#hashCode()": -0.2567631487748502,
        "org.jfree.chart.util$AbstractObjectList#indexOf(java.lang.Object)": -0.5674571540751912,
        "org.jfree.chart.util$AbstractObjectList#readObject(java.io.ObjectInputStream)": -0.3474428241629767,
        "org.jfree.chart.util$AbstractObjectList#set(int,java.lang.Object)": -0.7060486587739103,
        "org.jfree.chart.util$AbstractObjectList#size()": -1.0481515469845837,
        "org.jfree.chart.util$AbstractObjectList#writeObject(java.io.ObjectOutputStream)": -0.3474428241629767,
        "org.jfree.chart.util$HorizontalAlignment#<clinit>()": 1.1837480249478118,
        "org.jfree.chart.util$HorizontalAlignment#HorizontalAlignment(java.lang.String)": -0.16203841267909336,
        "org.jfree.chart.util$HorizontalAlignment#equals(java.lang.Object)": -0.15285821086173979,
        "org.jfree.chart.util$HorizontalAlignment#hashCode()": -0.08845231986943447,
        "org.jfree.chart.util$HorizontalAlignment#readResolve()": -0.15285821086173998,
        "org.jfree.chart.util$HorizontalAlignment#toString()": 0.0,
        "org.jfree.chart.util$ObjectList#ObjectList()": 0.689440465394984,
        "org.jfree.chart.util$ObjectList#ObjectList(int)": 0.0,
        "org.jfree.chart.util$ObjectList#get(int)": -0.6464042092833601,
        "org.jfree.chart.util$ObjectList#indexOf(java.lang.Object)": -0.5674571540751913,
        "org.jfree.chart.util$ObjectList#set(int,java.lang.Object)": -0.6484269102564917,
        "org.jfree.chart.util$RectangleAnchor#<clinit>()": 1.0810142597940495,
        "org.jfree.chart.util$RectangleAnchor#RectangleAnchor(java.lang.String)": -0.2647721778328552,
        "org.jfree.chart.util$RectangleAnchor#coordinates(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleAnchor)": -0.26941538580689645,
        "org.jfree.chart.util$RectangleAnchor#createRectangle(org.jfree.chart.util.Size2D,double,double,org.jfree.chart.util.RectangleAnchor)": -0.045616279612789114,
        "org.jfree.chart.util$RectangleAnchor#equals(java.lang.Object)": -0.2502959881250397,
        "org.jfree.chart.util$RectangleAnchor#hashCode()": -0.045616279612789246,
        "org.jfree.chart.util$RectangleAnchor#readResolve()": -0.18637428388770264,
        "org.jfree.chart.util$RectangleAnchor#toString()": 0.0,
        "org.jfree.chart.util$RectangleEdge#<clinit>()": 1.2042539220980468,
        "org.jfree.chart.util$RectangleEdge#RectangleEdge(java.lang.String)": -0.14153251552885793,
        "org.jfree.chart.util$RectangleEdge#coordinate(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.util$RectangleEdge#equals(java.lang.Object)": -0.25996036323517924,
        "org.jfree.chart.util$RectangleEdge#hashCode()": -0.08845231986943447,
        "org.jfree.chart.util$RectangleEdge#isLeftOrRight(org.jfree.chart.util.RectangleEdge)": -0.30256185289301507,
        "org.jfree.chart.util$RectangleEdge#isTopOrBottom(org.jfree.chart.util.RectangleEdge)": -0.3226175545898752,
        "org.jfree.chart.util$RectangleEdge#opposite(org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.util$RectangleEdge#readResolve()": -0.1290069031080168,
        "org.jfree.chart.util$RectangleEdge#toString()": 0.0,
        "org.jfree.chart.util$RectangleInsets#<clinit>()": 0.7667462728104039,
        "org.jfree.chart.util$RectangleInsets#RectangleInsets()": 0.0,
        "org.jfree.chart.util$RectangleInsets#RectangleInsets(double,double,double,double)": 0.7991947763043848,
        "org.jfree.chart.util$RectangleInsets#RectangleInsets(org.jfree.chart.util.UnitType,double,double,double,double)": -0.5790401648165012,
        "org.jfree.chart.util$RectangleInsets#calculateBottomInset(double)": -0.31124501678942446,
        "org.jfree.chart.util$RectangleInsets#calculateBottomOutset(double)": -0.31979540196787243,
        "org.jfree.chart.util$RectangleInsets#calculateLeftInset(double)": -0.31124501678942446,
        "org.jfree.chart.util$RectangleInsets#calculateLeftOutset(double)": -0.31979540196787243,
        "org.jfree.chart.util$RectangleInsets#calculateRightInset(double)": -0.31124501678942446,
        "org.jfree.chart.util$RectangleInsets#calculateRightOutset(double)": -0.31979540196787243,
        "org.jfree.chart.util$RectangleInsets#calculateTopInset(double)": -0.31124501678942446,
        "org.jfree.chart.util$RectangleInsets#calculateTopOutset(double)": -0.31979540196787243,
        "org.jfree.chart.util$RectangleInsets#createAdjustedRectangle(java.awt.geom.Rectangle2D,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.LengthAdjustmentType)": 0.0,
        "org.jfree.chart.util$RectangleInsets#createInsetRectangle(java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.util$RectangleInsets#createInsetRectangle(java.awt.geom.Rectangle2D,boolean,boolean)": 0.0,
        "org.jfree.chart.util$RectangleInsets#createOutsetRectangle(java.awt.geom.Rectangle2D)": -0.2937361480385432,
        "org.jfree.chart.util$RectangleInsets#createOutsetRectangle(java.awt.geom.Rectangle2D,boolean,boolean)": -0.2937361480385432,
        "org.jfree.chart.util$RectangleInsets#equals(java.lang.Object)": -0.5306060344602448,
        "org.jfree.chart.util$RectangleInsets#extendHeight(double)": -0.3169594698714891,
        "org.jfree.chart.util$RectangleInsets#extendWidth(double)": -0.3169594698714891,
        "org.jfree.chart.util$RectangleInsets#getBottom()": -0.2937361480385432,
        "org.jfree.chart.util$RectangleInsets#getLeft()": -0.2937361480385432,
        "org.jfree.chart.util$RectangleInsets#getRight()": -0.2937361480385432,
        "org.jfree.chart.util$RectangleInsets#getTop()": -0.2937361480385432,
        "org.jfree.chart.util$RectangleInsets#getUnitType()": 0.0,
        "org.jfree.chart.util$RectangleInsets#hashCode()": 0.0,
        "org.jfree.chart.util$RectangleInsets#toString()": 0.0,
        "org.jfree.chart.util$RectangleInsets#trim(java.awt.geom.Rectangle2D)": -0.30836584049457016,
        "org.jfree.chart.util$RectangleInsets#trimHeight(double)": -0.30836584049457016,
        "org.jfree.chart.util$RectangleInsets#trimWidth(double)": -0.30836584049457016,
        "org.jfree.chart.util$Rotation#<clinit>()": 1.586336164396768,
        "org.jfree.chart.util$Rotation#Rotation(java.lang.String,double)": 0.2405497267698632,
        "org.jfree.chart.util$Rotation#equals(java.lang.Object)": -0.10131054262099393,
        "org.jfree.chart.util$Rotation#getFactor()": -0.05639410227011288,
        "org.jfree.chart.util$Rotation#hashCode()": 0.0,
        "org.jfree.chart.util$Rotation#readResolve()": -0.08845231986943454,
        "org.jfree.chart.util$Rotation#toString()": 0.0,
        "org.jfree.chart.util$TableOrder#<clinit>()": 1.696154545868941,
        "org.jfree.chart.util$TableOrder#TableOrder(java.lang.String)": 0.35036810824203635,
        "org.jfree.chart.util$TableOrder#equals(java.lang.Object)": -0.07388089766536687,
        "org.jfree.chart.util$TableOrder#hashCode()": 0.0,
        "org.jfree.chart.util$TableOrder#readResolve()": -0.056394102270112906,
        "org.jfree.chart.util$TableOrder#toString()": 0.0,
        "org.jfree.chart.util$UnitType#<clinit>()": 0.7565651461904245,
        "org.jfree.chart.util$UnitType#UnitType(java.lang.String)": -0.5892212914364808,
        "org.jfree.chart.util$UnitType#equals(java.lang.Object)": -0.30836584049457016,
        "org.jfree.chart.util$UnitType#hashCode()": 0.0,
        "org.jfree.chart.util$UnitType#readResolve()": -0.30836584049457016,
        "org.jfree.chart.util$UnitType#toString()": 0.0,
        "org.jfree.chart.util$VerticalAlignment#<clinit>()": 1.2042539220980468,
        "org.jfree.chart.util$VerticalAlignment#VerticalAlignment(java.lang.String)": -0.14153251552885793,
        "org.jfree.chart.util$VerticalAlignment#equals(java.lang.Object)": -0.13890116284518372,
        "org.jfree.chart.util$VerticalAlignment#hashCode()": -0.08845231986943447,
        "org.jfree.chart.util$VerticalAlignment#readResolve()": -0.13890116284518383,
        "org.jfree.chart.util$VerticalAlignment#toString()": 0.0,
        "org.jfree.data$DefaultKeyedValues2D#DefaultKeyedValues2D()": 1.3183547356871328,
        "org.jfree.data$DefaultKeyedValues2D#DefaultKeyedValues2D(boolean)": -0.049773194606478444,
        "org.jfree.data$DefaultKeyedValues2D#addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)": -0.46957893642864806,
        "org.jfree.data$DefaultKeyedValues2D#clear()": -0.03185996119840184,
        "org.jfree.data$DefaultKeyedValues2D#clone()": -0.06563014207206663,
        "org.jfree.data$DefaultKeyedValues2D#equals(java.lang.Object)": -0.1013105426209939,
        "org.jfree.data$DefaultKeyedValues2D#getColumnCount()": -0.42676309312058147,
        "org.jfree.data$DefaultKeyedValues2D#getColumnIndex(java.lang.Comparable)": -0.05639410227011288,
        "org.jfree.data$DefaultKeyedValues2D#getColumnKey(int)": -0.14366083374420358,
        "org.jfree.data$DefaultKeyedValues2D#getColumnKeys()": -0.13890116284518372,
        "org.jfree.data$DefaultKeyedValues2D#getRowCount()": -0.4649154720899662,
        "org.jfree.data$DefaultKeyedValues2D#getRowIndex(java.lang.Comparable)": -0.4925820587187075,
        "org.jfree.data$DefaultKeyedValues2D#getRowKey(int)": -0.25996036323517924,
        "org.jfree.data$DefaultKeyedValues2D#getRowKeys()": -0.14366083374420358,
        "org.jfree.data$DefaultKeyedValues2D#getValue(int,int)": -0.3995431836505554,
        "org.jfree.data$DefaultKeyedValues2D#getValue(java.lang.Comparable,java.lang.Comparable)": -0.17840200274463644,
        "org.jfree.data$DefaultKeyedValues2D#hashCode()": 0.0,
        "org.jfree.data$DefaultKeyedValues2D#removeColumn(int)": 0.0,
        "org.jfree.data$DefaultKeyedValues2D#removeColumn(java.lang.Comparable)": -0.045616279612789114,
        "org.jfree.data$DefaultKeyedValues2D#removeRow(int)": -0.03185996119840184,
        "org.jfree.data$DefaultKeyedValues2D#removeRow(java.lang.Comparable)": 0.0,
        "org.jfree.data$DefaultKeyedValues2D#removeValue(java.lang.Comparable,java.lang.Comparable)": -0.056394102270112906,
        "org.jfree.data$DefaultKeyedValues2D#setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)": -0.4925820587187074,
        "org.jfree.data$UnknownKeyException#UnknownKeyException(java.lang.String)": -0.13890116284518372,
        "org.jfree.data.category$DefaultCategoryDataset#DefaultCategoryDataset()": 1.3550845279100336,
        "org.jfree.data.category$DefaultCategoryDataset#addValue(double,java.lang.Comparable,java.lang.Comparable)": -0.30547157278881937,
        "org.jfree.data.category$DefaultCategoryDataset#addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)": -0.4120262985717808,
        "org.jfree.data.category$DefaultCategoryDataset#clear()": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#clone()": -0.045616279612789114,
        "org.jfree.data.category$DefaultCategoryDataset#equals(java.lang.Object)": -0.09505299857610354,
        "org.jfree.data.category$DefaultCategoryDataset#getColumnCount()": -0.38686080824338354,
        "org.jfree.data.category$DefaultCategoryDataset#getColumnIndex(java.lang.Comparable)": -0.056394102270112906,
        "org.jfree.data.category$DefaultCategoryDataset#getColumnKey(int)": -0.13890116284518383,
        "org.jfree.data.category$DefaultCategoryDataset#getColumnKeys()": -0.09505299857610354,
        "org.jfree.data.category$DefaultCategoryDataset#getRowCount()": -0.4267630931205816,
        "org.jfree.data.category$DefaultCategoryDataset#getRowIndex(java.lang.Comparable)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#getRowKey(int)": -0.24040094117250768,
        "org.jfree.data.category$DefaultCategoryDataset#getRowKeys()": -0.1013105426209939,
        "org.jfree.data.category$DefaultCategoryDataset#getValue(int,int)": -0.36347686776521254,
        "org.jfree.data.category$DefaultCategoryDataset#getValue(java.lang.Comparable,java.lang.Comparable)": -0.1659690183054484,
        "org.jfree.data.category$DefaultCategoryDataset#hashCode()": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#incrementValue(double,java.lang.Comparable,java.lang.Comparable)": -0.031859961198401975,
        "org.jfree.data.category$DefaultCategoryDataset#removeColumn(int)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#removeColumn(java.lang.Comparable)": -0.031859961198401975,
        "org.jfree.data.category$DefaultCategoryDataset#removeRow(int)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#removeRow(java.lang.Comparable)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#removeValue(java.lang.Comparable,java.lang.Comparable)": -0.031859961198401975,
        "org.jfree.data.category$DefaultCategoryDataset#setValue(double,java.lang.Comparable,java.lang.Comparable)": -0.1013105426209939,
        "org.jfree.data.category$DefaultCategoryDataset#setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)": -0.11851886356601378,
        "org.jfree.data.general$AbstractDataset#AbstractDataset()": 0.6728508853099128,
        "org.jfree.data.general$AbstractDataset#addChangeListener(org.jfree.data.general.DatasetChangeListener)": -0.7080022595806401,
        "org.jfree.data.general$AbstractDataset#clone()": -0.21626441065225044,
        "org.jfree.data.general$AbstractDataset#fireDatasetChanged()": -0.9142457576750341,
        "org.jfree.data.general$AbstractDataset#getGroup()": -0.045616279612789246,
        "org.jfree.data.general$AbstractDataset#hasListener(java.util.EventListener)": 0.42859728276030584,
        "org.jfree.data.general$AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)": -0.9862878954768508,
        "org.jfree.data.general$AbstractDataset#readObject(java.io.ObjectInputStream)": -0.2966945395324405,
        "org.jfree.data.general$AbstractDataset#removeChangeListener(org.jfree.data.general.DatasetChangeListener)": -0.1573128937070467,
        "org.jfree.data.general$AbstractDataset#setGroup(org.jfree.data.general.DatasetGroup)": 0.0,
        "org.jfree.data.general$AbstractDataset#validateObject()": -0.2966945395324404,
        "org.jfree.data.general$AbstractDataset#writeObject(java.io.ObjectOutputStream)": -0.2966945395324405,
        "org.jfree.data.general$DatasetChangeEvent#DatasetChangeEvent(java.lang.Object,org.jfree.data.general.Dataset)": -1.1138957810225456,
        "org.jfree.data.general$DatasetChangeEvent#getDataset()": 0.0,
        "org.jfree.data.general$DatasetGroup#DatasetGroup()": -0.6745905193154383,
        "org.jfree.data.general$DatasetGroup#DatasetGroup(java.lang.String)": 0.0,
        "org.jfree.data.general$DatasetGroup#clone()": 0.0,
        "org.jfree.data.general$DatasetGroup#equals(java.lang.Object)": -0.03185996119840184,
        "org.jfree.data.general$DatasetGroup#getID()": 0.0
    },
    "Chart-14": {
        "org.jfree.chart$ChartColor#<clinit>()": -0.20750093549350523,
        "org.jfree.chart$ChartColor#ChartColor(int,int,int)": 0.0,
        "org.jfree.chart$ChartColor#createDefaultPaintArray()": 1.1382855021333995,
        "org.jfree.chart.axis$Axis#<clinit>()": -0.6782960062506862,
        "org.jfree.chart.axis$Axis#Axis(java.lang.String)": -0.6731554868640728,
        "org.jfree.chart.axis$Axis#addChangeListener(org.jfree.chart.event.AxisChangeListener)": -0.5368268454272204,
        "org.jfree.chart.axis$Axis#clone()": -0.16029876020501432,
        "org.jfree.chart.axis$Axis#drawAxisLine(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.19196490465150862,
        "org.jfree.chart.axis$Axis#drawLabel(java.lang.String,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)": -0.2689222601247599,
        "org.jfree.chart.axis$Axis#equals(java.lang.Object)": -0.3368305596125296,
        "org.jfree.chart.axis$Axis#getAxisLinePaint()": -0.26077759788593413,
        "org.jfree.chart.axis$Axis#getAxisLineStroke()": -0.26077759788593413,
        "org.jfree.chart.axis$Axis#getFixedDimension()": -0.26892226012475984,
        "org.jfree.chart.axis$Axis#getLabel()": -0.28997169935362344,
        "org.jfree.chart.axis$Axis#getLabelAngle()": -0.26892226012475984,
        "org.jfree.chart.axis$Axis#getLabelEnclosure(java.awt.Graphics2D,org.jfree.chart.util.RectangleEdge)": -0.2689222601247599,
        "org.jfree.chart.axis$Axis#getLabelFont()": -0.26892226012475984,
        "org.jfree.chart.axis$Axis#getLabelInsets()": -0.26892226012475984,
        "org.jfree.chart.axis$Axis#getLabelPaint()": -0.26892226012475984,
        "org.jfree.chart.axis$Axis#getLabelToolTip()": 0.0,
        "org.jfree.chart.axis$Axis#getLabelURL()": 0.0,
        "org.jfree.chart.axis$Axis#getPlot()": -0.5994147991335617,
        "org.jfree.chart.axis$Axis#getTickLabelFont()": -0.26892226012475984,
        "org.jfree.chart.axis$Axis#getTickLabelInsets()": -0.26892226012475984,
        "org.jfree.chart.axis$Axis#getTickLabelPaint()": -0.26892226012475984,
        "org.jfree.chart.axis$Axis#getTickMarkInsideLength()": -0.26892226012475984,
        "org.jfree.chart.axis$Axis#getTickMarkOutsideLength()": -0.26892226012475984,
        "org.jfree.chart.axis$Axis#getTickMarkPaint()": -0.26350901013155736,
        "org.jfree.chart.axis$Axis#getTickMarkStroke()": -0.26350901013155736,
        "org.jfree.chart.axis$Axis#hasListener(java.util.EventListener)": -0.042218131831658345,
        "org.jfree.chart.axis$Axis#isAxisLineVisible()": -0.26892226012475984,
        "org.jfree.chart.axis$Axis#isTickLabelsVisible()": -0.26892226012475984,
        "org.jfree.chart.axis$Axis#isTickMarksVisible()": -0.2662237544588868,
        "org.jfree.chart.axis$Axis#isVisible()": -0.26892226012475984,
        "org.jfree.chart.axis$Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)": -0.6030084151422623,
        "org.jfree.chart.axis$Axis#readObject(java.io.ObjectInputStream)": -0.18862561374638664,
        "org.jfree.chart.axis$Axis#removeChangeListener(org.jfree.chart.event.AxisChangeListener)": -0.1447609651697111,
        "org.jfree.chart.axis$Axis#setAxisLinePaint(java.awt.Paint)": -0.05215953530246446,
        "org.jfree.chart.axis$Axis#setAxisLineStroke(java.awt.Stroke)": -0.042218131831658394,
        "org.jfree.chart.axis$Axis#setAxisLineVisible(boolean)": -0.14068928983144624,
        "org.jfree.chart.axis$Axis#setFixedDimension(double)": -0.02951181079495213,
        "org.jfree.chart.axis$Axis#setLabel(java.lang.String)": -0.06066971212488354,
        "org.jfree.chart.axis$Axis#setLabelAngle(double)": -0.02951181079495206,
        "org.jfree.chart.axis$Axis#setLabelFont(java.awt.Font)": -0.02951181079495206,
        "org.jfree.chart.axis$Axis#setLabelInsets(org.jfree.chart.util.RectangleInsets)": -0.02951181079495206,
        "org.jfree.chart.axis$Axis#setLabelPaint(java.awt.Paint)": -0.02951181079495206,
        "org.jfree.chart.axis$Axis#setLabelToolTip(java.lang.String)": -0.02951181079495206,
        "org.jfree.chart.axis$Axis#setLabelURL(java.lang.String)": -0.02951181079495206,
        "org.jfree.chart.axis$Axis#setPlot(org.jfree.chart.plot.Plot)": -0.5368268454272204,
        "org.jfree.chart.axis$Axis#setTickLabelFont(java.awt.Font)": -0.02951181079495206,
        "org.jfree.chart.axis$Axis#setTickLabelInsets(org.jfree.chart.util.RectangleInsets)": -0.02951181079495206,
        "org.jfree.chart.axis$Axis#setTickLabelPaint(java.awt.Paint)": -0.02951181079495206,
        "org.jfree.chart.axis$Axis#setTickLabelsVisible(boolean)": -0.02951181079495206,
        "org.jfree.chart.axis$Axis#setTickMarkInsideLength(float)": -0.02951181079495206,
        "org.jfree.chart.axis$Axis#setTickMarkOutsideLength(float)": -0.02951181079495206,
        "org.jfree.chart.axis$Axis#setTickMarkPaint(java.awt.Paint)": -0.02951181079495206,
        "org.jfree.chart.axis$Axis#setTickMarkStroke(java.awt.Stroke)": -0.02951181079495206,
        "org.jfree.chart.axis$Axis#setTickMarksVisible(boolean)": -0.40230294142494927,
        "org.jfree.chart.axis$Axis#setVisible(boolean)": -0.02951181079495206,
        "org.jfree.chart.axis$Axis#writeObject(java.io.ObjectOutputStream)": -0.18862561374638664,
        "org.jfree.chart.axis$AxisLocation#<clinit>()": 1.2478344519518316,
        "org.jfree.chart.axis$AxisLocation#AxisLocation(java.lang.String)": -0.09795198567507313,
        "org.jfree.chart.axis$AxisLocation#equals(java.lang.Object)": -0.1712934207222082,
        "org.jfree.chart.axis$AxisLocation#getOpposite()": 0.0,
        "org.jfree.chart.axis$AxisLocation#getOpposite(org.jfree.chart.axis.AxisLocation)": 0.0,
        "org.jfree.chart.axis$AxisLocation#readResolve()": -0.14068928983144624,
        "org.jfree.chart.axis$AxisLocation#toString()": -0.1565165272337945,
        "org.jfree.chart.axis$CategoryAnchor#<clinit>()": 0.7062069102918999,
        "org.jfree.chart.axis$CategoryAnchor#CategoryAnchor(java.lang.String)": -0.15615499950305872,
        "org.jfree.chart.axis$CategoryAnchor#equals(java.lang.Object)": -0.15651652723379456,
        "org.jfree.chart.axis$CategoryAnchor#readResolve()": -0.10420336889546186,
        "org.jfree.chart.axis$CategoryAnchor#toString()": -0.11413840361639549,
        "org.jfree.chart.axis$CategoryAxis#CategoryAxis()": -0.02951181079495206,
        "org.jfree.chart.axis$CategoryAxis#CategoryAxis(java.lang.String)": -0.40230294142494927,
        "org.jfree.chart.axis$CategoryAxis#addCategoryLabelToolTip(java.lang.Comparable,java.lang.String)": -0.06826525624740698,
        "org.jfree.chart.axis$CategoryAxis#calculateCategoryGapSize(int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.18862561374638664,
        "org.jfree.chart.axis$CategoryAxis#calculateCategorySize(int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.19853161010124512,
        "org.jfree.chart.axis$CategoryAxis#calculateTextBlockHeight(org.jfree.chart.text.TextBlock,org.jfree.chart.axis.CategoryLabelPosition,java.awt.Graphics2D)": -0.14068928983144624,
        "org.jfree.chart.axis$CategoryAxis#calculateTextBlockWidth(org.jfree.chart.text.TextBlock,org.jfree.chart.axis.CategoryLabelPosition,java.awt.Graphics2D)": -0.11413840361639545,
        "org.jfree.chart.axis$CategoryAxis#clearCategoryLabelToolTips()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#clone()": -0.09347370398979445,
        "org.jfree.chart.axis$CategoryAxis#configure()": -0.357812798014143,
        "org.jfree.chart.axis$CategoryAxis#createLabel(java.lang.Comparable,float,org.jfree.chart.util.RectangleEdge,java.awt.Graphics2D)": -0.18862561374638664,
        "org.jfree.chart.axis$CategoryAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": -0.19196490465150856,
        "org.jfree.chart.axis$CategoryAxis#drawCategoryLabels(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)": -0.2017622227944037,
        "org.jfree.chart.axis$CategoryAxis#equalPaintMaps(java.util.Map,java.util.Map)": -0.1783620432358255,
        "org.jfree.chart.axis$CategoryAxis#equals(java.lang.Object)": -0.1783620432358254,
        "org.jfree.chart.axis$CategoryAxis#getCategoryEnd(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.18862561374638664,
        "org.jfree.chart.axis$CategoryAxis#getCategoryJava2DCoordinate(org.jfree.chart.axis.CategoryAnchor,int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryLabelPositionOffset()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryLabelPositions()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryLabelToolTip(java.lang.Comparable)": -0.09895229500019997,
        "org.jfree.chart.axis$CategoryAxis#getCategoryMargin()": -0.13653093870485167,
        "org.jfree.chart.axis$CategoryAxis#getCategoryMiddle(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.10420336889546186,
        "org.jfree.chart.axis$CategoryAxis#getCategorySeriesMiddle(java.lang.Comparable,java.lang.Comparable,org.jfree.data.category.CategoryDataset,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryStart(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.18862561374638664,
        "org.jfree.chart.axis$CategoryAxis#getLowerMargin()": -0.1985316101012451,
        "org.jfree.chart.axis$CategoryAxis#getMaximumCategoryLabelLines()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getMaximumCategoryLabelWidthRatio()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getTickLabelFont(java.lang.Comparable)": -0.18862561374638664,
        "org.jfree.chart.axis$CategoryAxis#getTickLabelPaint(java.lang.Comparable)": -0.18862561374638664,
        "org.jfree.chart.axis$CategoryAxis#getUpperMargin()": -0.1985316101012451,
        "org.jfree.chart.axis$CategoryAxis#hashCode()": -0.21436549535019428,
        "org.jfree.chart.axis$CategoryAxis#readObject(java.io.ObjectInputStream)": -0.10420336889546186,
        "org.jfree.chart.axis$CategoryAxis#readPaintMap(java.io.ObjectInputStream)": -0.10420336889546178,
        "org.jfree.chart.axis$CategoryAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.2017622227944037,
        "org.jfree.chart.axis$CategoryAxis#removeCategoryLabelToolTip(java.lang.Comparable)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)": -0.2017622227944037,
        "org.jfree.chart.axis$CategoryAxis#setCategoryLabelPositionOffset(int)": -0.042218131831658394,
        "org.jfree.chart.axis$CategoryAxis#setCategoryLabelPositions(org.jfree.chart.axis.CategoryLabelPositions)": -0.042218131831658394,
        "org.jfree.chart.axis$CategoryAxis#setCategoryMargin(double)": -0.09347370398979445,
        "org.jfree.chart.axis$CategoryAxis#setLowerMargin(double)": -0.042218131831658394,
        "org.jfree.chart.axis$CategoryAxis#setMaximumCategoryLabelLines(int)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#setMaximumCategoryLabelWidthRatio(float)": -0.042218131831658394,
        "org.jfree.chart.axis$CategoryAxis#setTickLabelFont(java.lang.Comparable,java.awt.Font)": -0.06826525624740698,
        "org.jfree.chart.axis$CategoryAxis#setTickLabelPaint(java.lang.Comparable,java.awt.Paint)": -0.08166465587953611,
        "org.jfree.chart.axis$CategoryAxis#setUpperMargin(double)": -0.042218131831658394,
        "org.jfree.chart.axis$CategoryAxis#writeObject(java.io.ObjectOutputStream)": -0.10420336889546186,
        "org.jfree.chart.axis$CategoryAxis#writePaintMap(java.util.Map,java.io.ObjectOutputStream)": -0.10420336889546178,
        "org.jfree.chart.axis$DateAxis#<clinit>()": -0.19526635080777932,
        "org.jfree.chart.axis$DateAxis#DateAxis()": -0.02951181079495206,
        "org.jfree.chart.axis$DateAxis#DateAxis(java.lang.String)": -0.19526635080777932,
        "org.jfree.chart.axis$DateAxis#DateAxis(java.lang.String,java.util.TimeZone)": -0.19526635080777932,
        "org.jfree.chart.axis$DateAxis#autoAdjustRange()": -0.19526635080777932,
        "org.jfree.chart.axis$DateAxis#calculateDateForPosition(org.jfree.data.time.RegularTimePeriod,org.jfree.chart.axis.DateTickMarkPosition)": -0.05215953530246446,
        "org.jfree.chart.axis$DateAxis#calculateHighestVisibleTickValue(org.jfree.chart.axis.DateTickUnit)": 0.0,
        "org.jfree.chart.axis$DateAxis#calculateLowestVisibleTickValue(org.jfree.chart.axis.DateTickUnit)": -0.06066971212488354,
        "org.jfree.chart.axis$DateAxis#clone()": -0.02951181079495206,
        "org.jfree.chart.axis$DateAxis#configure()": -0.11413840361639545,
        "org.jfree.chart.axis$DateAxis#createStandardDateTickUnits()": 0.0,
        "org.jfree.chart.axis$DateAxis#createStandardDateTickUnits(java.util.TimeZone)": -0.1952663508077792,
        "org.jfree.chart.axis$DateAxis#dateToJava2D(java.util.Date,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$DateAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": -0.06066971212488354,
        "org.jfree.chart.axis$DateAxis#equals(java.lang.Object)": -0.08166465587953611,
        "org.jfree.chart.axis$DateAxis#estimateMaximumTickLabelHeight(java.awt.Graphics2D,org.jfree.chart.axis.DateTickUnit)": 0.0,
        "org.jfree.chart.axis$DateAxis#estimateMaximumTickLabelWidth(java.awt.Graphics2D,org.jfree.chart.axis.DateTickUnit)": -0.06066971212488354,
        "org.jfree.chart.axis$DateAxis#getDateFormatOverride()": -0.06066971212488359,
        "org.jfree.chart.axis$DateAxis#getMaximumDate()": -0.07521110849756893,
        "org.jfree.chart.axis$DateAxis#getMinimumDate()": -0.07521110849756893,
        "org.jfree.chart.axis$DateAxis#getTickMarkPosition()": 0.0,
        "org.jfree.chart.axis$DateAxis#getTickUnit()": -0.06066971212488359,
        "org.jfree.chart.axis$DateAxis#getTimeZone()": 0.0,
        "org.jfree.chart.axis$DateAxis#getTimeline()": 0.0,
        "org.jfree.chart.axis$DateAxis#hashCode()": -0.06826525624740698,
        "org.jfree.chart.axis$DateAxis#isHiddenValue(long)": -0.06066971212488354,
        "org.jfree.chart.axis$DateAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.02951181079495206,
        "org.jfree.chart.axis$DateAxis#nextStandardDate(java.util.Date,org.jfree.chart.axis.DateTickUnit)": -0.06066971212488354,
        "org.jfree.chart.axis$DateAxis#previousStandardDate(java.util.Date,org.jfree.chart.axis.DateTickUnit)": -0.12792378638968477,
        "org.jfree.chart.axis$DateAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.06066971212488354,
        "org.jfree.chart.axis$DateAxis#refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.06066971212488354,
        "org.jfree.chart.axis$DateAxis#refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$DateAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.06066971212488354,
        "org.jfree.chart.axis$DateAxis#selectHorizontalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.06066971212488354,
        "org.jfree.chart.axis$DateAxis#selectVerticalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$DateAxis#setDateFormatOverride(java.text.DateFormat)": -0.02951181079495206,
        "org.jfree.chart.axis$DateAxis#setMaximumDate(java.util.Date)": -0.042218131831658394,
        "org.jfree.chart.axis$DateAxis#setMinimumDate(java.util.Date)": -0.042218131831658394,
        "org.jfree.chart.axis$DateAxis#setRange(double,double)": -0.02951181079495206,
        "org.jfree.chart.axis$DateAxis#setRange(java.util.Date,java.util.Date)": -0.11886616519811108,
        "org.jfree.chart.axis$DateAxis#setRange(org.jfree.data.Range)": -0.12345679012345678,
        "org.jfree.chart.axis$DateAxis#setRange(org.jfree.data.Range,boolean,boolean)": -0.19526635080777932,
        "org.jfree.chart.axis$DateAxis#setTickMarkPosition(org.jfree.chart.axis.DateTickMarkPosition)": -0.11413840361639545,
        "org.jfree.chart.axis$DateAxis#setTickUnit(org.jfree.chart.axis.DateTickUnit)": -0.11413840361639545,
        "org.jfree.chart.axis$DateAxis#setTickUnit(org.jfree.chart.axis.DateTickUnit,boolean,boolean)": -0.19526635080777932,
        "org.jfree.chart.axis$DateAxis#setTimeZone(java.util.TimeZone)": 0.0,
        "org.jfree.chart.axis$DateAxis#setTimeline(org.jfree.chart.axis.Timeline)": -0.02951181079495206,
        "org.jfree.chart.axis$DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.06066971212488354,
        "org.jfree.chart.axis$DateAxis#zoomRange(double,double)": 0.0,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#DateAxis$DefaultTimeline()": -0.1952663508077792,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#containsDomainRange(java.util.Date,java.util.Date)": 0.0,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#containsDomainRange(long,long)": 0.0,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#containsDomainValue(java.util.Date)": -0.06066971212488359,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#containsDomainValue(long)": 0.0,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#equals(java.lang.Object)": -0.05215953530246442,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#toMillisecond(long)": -0.1188661651981111,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#toTimelineValue(java.util.Date)": -0.06826525624740709,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#toTimelineValue(long)": -0.11413840361639549,
        "org.jfree.chart.axis$NumberAxis#<clinit>()": -0.5758301792654898,
        "org.jfree.chart.axis$NumberAxis#NumberAxis()": -0.06066971212488354,
        "org.jfree.chart.axis$NumberAxis#NumberAxis(java.lang.String)": -0.5703294664647321,
        "org.jfree.chart.axis$NumberAxis#autoAdjustRange()": -0.5349390591967647,
        "org.jfree.chart.axis$NumberAxis#calculateHighestVisibleTickValue()": 0.0,
        "org.jfree.chart.axis$NumberAxis#calculateLowestVisibleTickValue()": -0.26350901013155725,
        "org.jfree.chart.axis$NumberAxis#calculateVisibleTickCount()": -0.26350901013155725,
        "org.jfree.chart.axis$NumberAxis#clone()": -0.11413840361639545,
        "org.jfree.chart.axis$NumberAxis#configure()": -0.5235496168462404,
        "org.jfree.chart.axis$NumberAxis#createIntegerTickUnits()": -0.13227858008563098,
        "org.jfree.chart.axis$NumberAxis#createIntegerTickUnits(java.util.Locale)": 0.0,
        "org.jfree.chart.axis$NumberAxis#createStandardTickUnits()": -0.570329466464732,
        "org.jfree.chart.axis$NumberAxis#createStandardTickUnits(java.util.Locale)": 0.0,
        "org.jfree.chart.axis$NumberAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": -0.2552629551223364,
        "org.jfree.chart.axis$NumberAxis#equals(java.lang.Object)": -0.2552629551223364,
        "org.jfree.chart.axis$NumberAxis#estimateMaximumTickLabelHeight(java.awt.Graphics2D)": -0.2294871267669123,
        "org.jfree.chart.axis$NumberAxis#estimateMaximumTickLabelWidth(java.awt.Graphics2D,org.jfree.chart.axis.TickUnit)": -0.19196490465150856,
        "org.jfree.chart.axis$NumberAxis#getAutoRangeIncludesZero()": -0.5235496168462401,
        "org.jfree.chart.axis$NumberAxis#getAutoRangeStickyZero()": -0.5235496168462401,
        "org.jfree.chart.axis$NumberAxis#getMarkerBand()": 0.0,
        "org.jfree.chart.axis$NumberAxis#getNumberFormatOverride()": -0.25802906921334245,
        "org.jfree.chart.axis$NumberAxis#getRangeType()": 0.0,
        "org.jfree.chart.axis$NumberAxis#getTickUnit()": -0.26350901013155736,
        "org.jfree.chart.axis$NumberAxis#hashCode()": -0.26622375445888663,
        "org.jfree.chart.axis$NumberAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.02951181079495206,
        "org.jfree.chart.axis$NumberAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.26350901013155725,
        "org.jfree.chart.axis$NumberAxis#refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.19196490465150856,
        "org.jfree.chart.axis$NumberAxis#refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.2294871267669123,
        "org.jfree.chart.axis$NumberAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.26350901013155725,
        "org.jfree.chart.axis$NumberAxis#selectHorizontalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.19196490465150856,
        "org.jfree.chart.axis$NumberAxis#selectVerticalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.2294871267669123,
        "org.jfree.chart.axis$NumberAxis#setAutoRangeIncludesZero(boolean)": -0.23826777083948747,
        "org.jfree.chart.axis$NumberAxis#setAutoRangeStickyZero(boolean)": -0.06066971212488354,
        "org.jfree.chart.axis$NumberAxis#setMarkerBand(org.jfree.chart.axis.MarkerAxisBand)": 0.0,
        "org.jfree.chart.axis$NumberAxis#setNumberFormatOverride(java.text.NumberFormat)": -0.02951181079495206,
        "org.jfree.chart.axis$NumberAxis#setRangeType(org.jfree.data.RangeType)": -0.02951181079495206,
        "org.jfree.chart.axis$NumberAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit)": -0.02951181079495206,
        "org.jfree.chart.axis$NumberAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit,boolean,boolean)": -0.26622375445888663,
        "org.jfree.chart.axis$NumberAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.26350901013155725,
        "org.jfree.chart.axis$ValueAxis#<clinit>()": -0.6419753086419753,
        "org.jfree.chart.axis$ValueAxis#ValueAxis(java.lang.String,org.jfree.chart.axis.TickUnitSource)": -0.6367196598251015,
        "org.jfree.chart.axis$ValueAxis#calculateAnchorPoint(org.jfree.chart.axis.ValueTick,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.26350901013155725,
        "org.jfree.chart.axis$ValueAxis#centerRange(double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#clone()": -0.12792378638968477,
        "org.jfree.chart.axis$ValueAxis#drawAxisLine(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.2607775978859341,
        "org.jfree.chart.axis$ValueAxis#drawTickMarksAndLabels(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": -0.2689222601247599,
        "org.jfree.chart.axis$ValueAxis#equals(java.lang.Object)": -0.28738962058102135,
        "org.jfree.chart.axis$ValueAxis#findMaximumTickLabelHeight(java.util.List,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)": -0.20495962288807854,
        "org.jfree.chart.axis$ValueAxis#findMaximumTickLabelWidth(java.util.List,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)": -0.2294871267669123,
        "org.jfree.chart.axis$ValueAxis#getAutoRangeMinimumSize()": -0.5349390591967647,
        "org.jfree.chart.axis$ValueAxis#getAutoTickIndex()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getDefaultAutoRange()": -0.2324367569202852,
        "org.jfree.chart.axis$ValueAxis#getDownArrow()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getFixedAutoRange()": -0.5349390591967647,
        "org.jfree.chart.axis$ValueAxis#getLeftArrow()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getLowerBound()": -0.2294871267669123,
        "org.jfree.chart.axis$ValueAxis#getLowerMargin()": -0.5349390591967647,
        "org.jfree.chart.axis$ValueAxis#getRange()": -0.35551415670727105,
        "org.jfree.chart.axis$ValueAxis#getRightArrow()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getStandardTickUnits()": -0.26892226012475984,
        "org.jfree.chart.axis$ValueAxis#getUpArrow()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getUpperBound()": -0.2294871267669123,
        "org.jfree.chart.axis$ValueAxis#getUpperMargin()": -0.5349390591967647,
        "org.jfree.chart.axis$ValueAxis#isAutoRange()": -0.5611106355453814,
        "org.jfree.chart.axis$ValueAxis#isAutoTickUnitSelection()": -0.26892226012475984,
        "org.jfree.chart.axis$ValueAxis#isInverted()": -0.28218502133904044,
        "org.jfree.chart.axis$ValueAxis#isNegativeArrowVisible()": 0.0,
        "org.jfree.chart.axis$ValueAxis#isPositiveArrowVisible()": 0.0,
        "org.jfree.chart.axis$ValueAxis#isVerticalTickLabels()": -0.26892226012475984,
        "org.jfree.chart.axis$ValueAxis#lengthToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.26350901013155725,
        "org.jfree.chart.axis$ValueAxis#readObject(java.io.ObjectInputStream)": -0.17485194550392813,
        "org.jfree.chart.axis$ValueAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)": -0.2689222601247599,
        "org.jfree.chart.axis$ValueAxis#resizeRange(double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#resizeRange(double,double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setAutoRange(boolean)": -0.06826525624740698,
        "org.jfree.chart.axis$ValueAxis#setAutoRange(boolean,boolean)": -0.06826525624740698,
        "org.jfree.chart.axis$ValueAxis#setAutoRangeMinimumSize(double)": -0.19853161010124512,
        "org.jfree.chart.axis$ValueAxis#setAutoRangeMinimumSize(double,boolean)": -0.19853161010124512,
        "org.jfree.chart.axis$ValueAxis#setAutoTickIndex(int)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setAutoTickUnitSelection(boolean)": -0.02951181079495206,
        "org.jfree.chart.axis$ValueAxis#setAutoTickUnitSelection(boolean,boolean)": -0.13653093870485172,
        "org.jfree.chart.axis$ValueAxis#setDefaultAutoRange(org.jfree.data.Range)": -0.10420336889546186,
        "org.jfree.chart.axis$ValueAxis#setDownArrow(java.awt.Shape)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setFixedAutoRange(double)": -0.06826525624740698,
        "org.jfree.chart.axis$ValueAxis#setInverted(boolean)": -0.06066971212488354,
        "org.jfree.chart.axis$ValueAxis#setLeftArrow(java.awt.Shape)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setLowerBound(double)": -0.08166465587953611,
        "org.jfree.chart.axis$ValueAxis#setLowerMargin(double)": -0.12792378638968477,
        "org.jfree.chart.axis$ValueAxis#setNegativeArrowVisible(boolean)": -0.02951181079495206,
        "org.jfree.chart.axis$ValueAxis#setPositiveArrowVisible(boolean)": -0.02951181079495206,
        "org.jfree.chart.axis$ValueAxis#setRange(double,double)": -0.10420336889546186,
        "org.jfree.chart.axis$ValueAxis#setRange(org.jfree.data.Range)": -0.12345679012345678,
        "org.jfree.chart.axis$ValueAxis#setRange(org.jfree.data.Range,boolean,boolean)": -0.5922003279632763,
        "org.jfree.chart.axis$ValueAxis#setRangeAboutValue(double,double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setRangeWithMargins(double,double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setRangeWithMargins(org.jfree.data.Range)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setRangeWithMargins(org.jfree.data.Range,boolean,boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setRightArrow(java.awt.Shape)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setStandardTickUnits(org.jfree.chart.axis.TickUnitSource)": -0.11886616519811108,
        "org.jfree.chart.axis$ValueAxis#setUpArrow(java.awt.Shape)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setUpperBound(double)": -0.06826525624740698,
        "org.jfree.chart.axis$ValueAxis#setUpperMargin(double)": -0.12792378638968477,
        "org.jfree.chart.axis$ValueAxis#setVerticalTickLabels(boolean)": -0.02951181079495206,
        "org.jfree.chart.axis$ValueAxis#writeObject(java.io.ObjectOutputStream)": -0.17485194550392813,
        "org.jfree.chart.axis$ValueAxis#zoomRange(double,double)": 0.0,
        "org.jfree.chart.event$ChartChangeEvent#ChartChangeEvent(java.lang.Object)": 0.7509054555539191,
        "org.jfree.chart.event$ChartChangeEvent#ChartChangeEvent(java.lang.Object,org.jfree.chart.JFreeChart)": 0.0,
        "org.jfree.chart.event$ChartChangeEvent#ChartChangeEvent(java.lang.Object,org.jfree.chart.JFreeChart,org.jfree.chart.event.ChartChangeEventType)": -0.5948809820729858,
        "org.jfree.chart.event$ChartChangeEvent#getChart()": 0.0,
        "org.jfree.chart.event$ChartChangeEvent#getType()": 0.0,
        "org.jfree.chart.event$ChartChangeEvent#setChart(org.jfree.chart.JFreeChart)": -0.31018039256170504,
        "org.jfree.chart.event$ChartChangeEvent#setType(org.jfree.chart.event.ChartChangeEventType)": -0.10161661689239476,
        "org.jfree.chart.event$ChartChangeEventType#<clinit>()": 0.7509054555539191,
        "org.jfree.chart.event$ChartChangeEventType#ChartChangeEventType(java.lang.String)": -0.5948809820729858,
        "org.jfree.chart.event$ChartChangeEventType#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.event$ChartChangeEventType#hashCode()": 0.0,
        "org.jfree.chart.event$ChartChangeEventType#readResolve()": 0.0,
        "org.jfree.chart.event$ChartChangeEventType#toString()": 0.0,
        "org.jfree.chart.event$MarkerChangeEvent#MarkerChangeEvent(org.jfree.chart.plot.Marker)": 0.5163743862536133,
        "org.jfree.chart.event$MarkerChangeEvent#getMarker()": -0.13227858008563098,
        "org.jfree.chart.event$PlotChangeEvent#PlotChangeEvent(org.jfree.chart.plot.Plot)": 1.1640936423447172,
        "org.jfree.chart.event$PlotChangeEvent#getPlot()": 0.0,
        "org.jfree.chart.plot$CategoryMarker#CategoryMarker(java.lang.Comparable)": 0.636734743752593,
        "org.jfree.chart.plot$CategoryMarker#CategoryMarker(java.lang.Comparable,java.awt.Paint,java.awt.Stroke)": 0.6233353441204639,
        "org.jfree.chart.plot$CategoryMarker#CategoryMarker(java.lang.Comparable,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)": 0.6233353441204639,
        "org.jfree.chart.plot$CategoryMarker#equals(java.lang.Object)": -0.06826525624740698,
        "org.jfree.chart.plot$CategoryMarker#getDrawAsLine()": -0.02951181079495213,
        "org.jfree.chart.plot$CategoryMarker#getKey()": -0.02951181079495213,
        "org.jfree.chart.plot$CategoryMarker#setDrawAsLine(boolean)": -0.02951181079495206,
        "org.jfree.chart.plot$CategoryMarker#setKey(java.lang.Comparable)": -0.02951181079495206,
        "org.jfree.chart.plot$CategoryPlot#<clinit>()": 0.7367146602040622,
        "org.jfree.chart.plot$CategoryPlot#CategoryPlot()": 1.023633077196753,
        "org.jfree.chart.plot$CategoryPlot#CategoryPlot(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)": 0.7367146602040622,
        "org.jfree.chart.plot$CategoryPlot#addAnnotation(org.jfree.chart.annotations.CategoryAnnotation)": -0.02951181079495206,
        "org.jfree.chart.plot$CategoryPlot#addAnnotation(org.jfree.chart.annotations.CategoryAnnotation,boolean)": -0.02951181079495206,
        "org.jfree.chart.plot$CategoryPlot#addDomainMarker(int,org.jfree.chart.plot.CategoryMarker,org.jfree.chart.util.Layer)": -0.042218131831658394,
        "org.jfree.chart.plot$CategoryPlot#addDomainMarker(int,org.jfree.chart.plot.CategoryMarker,org.jfree.chart.util.Layer,boolean)": -0.042218131831658394,
        "org.jfree.chart.plot$CategoryPlot#addDomainMarker(org.jfree.chart.plot.CategoryMarker)": -0.042218131831658394,
        "org.jfree.chart.plot$CategoryPlot#addDomainMarker(org.jfree.chart.plot.CategoryMarker,org.jfree.chart.util.Layer)": -0.042218131831658394,
        "org.jfree.chart.plot$CategoryPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.7367146602040622,
        "org.jfree.chart.plot$CategoryPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)": 0.7367146602040622,
        "org.jfree.chart.plot$CategoryPlot#addRangeMarker(org.jfree.chart.plot.Marker)": -0.042218131831658394,
        "org.jfree.chart.plot$CategoryPlot#addRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.7367146602040622,
        "org.jfree.chart.plot$CategoryPlot#calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.2017622227944037,
        "org.jfree.chart.plot$CategoryPlot#calculateDomainAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)": -0.2017622227944037,
        "org.jfree.chart.plot$CategoryPlot#calculateRangeAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)": -0.2017622227944037,
        "org.jfree.chart.plot$CategoryPlot#clearAnnotations()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#clearDomainAxes()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#clearDomainMarkers()": -0.042218131831658394,
        "org.jfree.chart.plot$CategoryPlot#clearDomainMarkers(int)": -0.042218131831658394,
        "org.jfree.chart.plot$CategoryPlot#clearRangeAxes()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#clearRangeMarkers()": -0.06826525624740698,
        "org.jfree.chart.plot$CategoryPlot#clearRangeMarkers(int)": -0.06826525624740698,
        "org.jfree.chart.plot$CategoryPlot#clone()": -0.05215953530246446,
        "org.jfree.chart.plot$CategoryPlot#configureDomainAxes()": 0.7367146602040622,
        "org.jfree.chart.plot$CategoryPlot#configureRangeAxes()": 0.7367146602040622,
        "org.jfree.chart.plot$CategoryPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)": 0.7367146602040622,
        "org.jfree.chart.plot$CategoryPlot#datasetsMappedToDomainAxis(int)": -0.2017622227944037,
        "org.jfree.chart.plot$CategoryPlot#datasetsMappedToRangeAxis(int)": -0.36466272529074456,
        "org.jfree.chart.plot$CategoryPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)": -0.2017622227944037,
        "org.jfree.chart.plot$CategoryPlot#drawAnnotations(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)": -0.2017622227944037,
        "org.jfree.chart.plot$CategoryPlot#drawAxes(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)": -0.2017622227944037,
        "org.jfree.chart.plot$CategoryPlot#drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.19196490465150856,
        "org.jfree.chart.plot$CategoryPlot#drawDomainGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.2017622227944037,
        "org.jfree.chart.plot$CategoryPlot#drawDomainMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.util.Layer)": -0.2017622227944037,
        "org.jfree.chart.plot$CategoryPlot#drawRangeCrosshair(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation,double,org.jfree.chart.axis.ValueAxis,java.awt.Stroke,java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#drawRangeGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)": -0.2017622227944037,
        "org.jfree.chart.plot$CategoryPlot#drawRangeLine(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,java.awt.Stroke,java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#drawRangeMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.util.Layer)": -0.2017622227944037,
        "org.jfree.chart.plot$CategoryPlot#equals(java.lang.Object)": -0.18524668960957236,
        "org.jfree.chart.plot$CategoryPlot#getAnchorValue()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getAnnotations()": -0.2017622227944038,
        "org.jfree.chart.plot$CategoryPlot#getAxisOffset()": -0.02951181079495213,
        "org.jfree.chart.plot$CategoryPlot#getCategories()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getCategoriesForAxis(org.jfree.chart.axis.CategoryAxis)": -0.2017622227944037,
        "org.jfree.chart.plot$CategoryPlot#getColumnRenderingOrder()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDataRange(org.jfree.chart.axis.ValueAxis)": -0.36466272529074456,
        "org.jfree.chart.plot$CategoryPlot#getDataset()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDataset(int)": 0.7367146602040622,
        "org.jfree.chart.plot$CategoryPlot#getDatasetCount()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDatasetRenderingOrder()": -0.2017622227944038,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxis()": -0.21436549535019428,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxis(int)": -0.21744258585800033,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisCount()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisEdge()": -0.18524668960957236,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisEdge(int)": -0.2017622227944037,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisForDataset(int)": -0.2017622227944037,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisIndex(org.jfree.chart.axis.CategoryAxis)": -0.02951181079495206,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisLocation()": -0.2017622227944037,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisLocation(int)": -0.2017622227944037,
        "org.jfree.chart.plot$CategoryPlot#getDomainGridlinePaint()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainGridlinePosition()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainGridlineStroke()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainMarkers(int,org.jfree.chart.util.Layer)": -0.2017622227944037,
        "org.jfree.chart.plot$CategoryPlot#getDomainMarkers(org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDrawSharedDomainAxis()": -0.02951181079495213,
        "org.jfree.chart.plot$CategoryPlot#getFixedDomainAxisSpace()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getFixedLegendItems()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getFixedRangeAxisSpace()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getIndexOf(org.jfree.chart.renderer.category.CategoryItemRenderer)": -0.02951181079495206,
        "org.jfree.chart.plot$CategoryPlot#getLegendItems()": -0.2017622227944037,
        "org.jfree.chart.plot$CategoryPlot#getOrientation()": -0.2265137336756975,
        "org.jfree.chart.plot$CategoryPlot#getPlotType()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxis()": -0.2716049382716049,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxis(int)": 0.7367146602040622,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisCount()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisEdge()": -0.2017622227944037,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisEdge(int)": -0.2017622227944037,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisForDataset(int)": -0.2017622227944037,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisIndex(org.jfree.chart.axis.ValueAxis)": -0.02951181079495206,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisLocation()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisLocation(int)": -0.2017622227944037,
        "org.jfree.chart.plot$CategoryPlot#getRangeCrosshairPaint()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeCrosshairStroke()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeCrosshairValue()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeGridlinePaint()": -0.2017622227944038,
        "org.jfree.chart.plot$CategoryPlot#getRangeGridlineStroke()": -0.2017622227944038,
        "org.jfree.chart.plot$CategoryPlot#getRangeMarkers(int,org.jfree.chart.util.Layer)": -0.2017622227944037,
        "org.jfree.chart.plot$CategoryPlot#getRangeMarkers(org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRenderer()": -0.26350901013155725,
        "org.jfree.chart.plot$CategoryPlot#getRenderer(int)": -0.26622375445888663,
        "org.jfree.chart.plot$CategoryPlot#getRendererForDataset(org.jfree.data.category.CategoryDataset)": -0.3391959289114337,
        "org.jfree.chart.plot$CategoryPlot#getRowRenderingOrder()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getWeight()": -0.042218131831658345,
        "org.jfree.chart.plot$CategoryPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#isDomainGridlinesVisible()": -0.2017622227944038,
        "org.jfree.chart.plot$CategoryPlot#isDomainZoomable()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#isRangeCrosshairLockedOnData()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#isRangeCrosshairVisible()": -0.20495962288807856,
        "org.jfree.chart.plot$CategoryPlot#isRangeGridlinesVisible()": -0.2017622227944038,
        "org.jfree.chart.plot$CategoryPlot#isRangeZoomable()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#mapDatasetToDomainAxis(int,int)": 0.7367146602040622,
        "org.jfree.chart.plot$CategoryPlot#mapDatasetToRangeAxis(int,int)": 0.7367146602040622,
        "org.jfree.chart.plot$CategoryPlot#readObject(java.io.ObjectInputStream)": -0.08772844473327564,
        "org.jfree.chart.plot$CategoryPlot#removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.705,
        "org.jfree.chart.plot$CategoryPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)": 0.705,
        "org.jfree.chart.plot$CategoryPlot#removeDomainMarker(org.jfree.chart.plot.Marker)": 0.705,
        "org.jfree.chart.plot$CategoryPlot#removeDomainMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.705,
        "org.jfree.chart.plot$CategoryPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.705,
        "org.jfree.chart.plot$CategoryPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)": 0.705,
        "org.jfree.chart.plot$CategoryPlot#removeRangeMarker(org.jfree.chart.plot.Marker)": 0.705,
        "org.jfree.chart.plot$CategoryPlot#removeRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.705,
        "org.jfree.chart.plot$CategoryPlot#render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.plot.PlotRenderingInfo)": -0.2017622227944037,
        "org.jfree.chart.plot$CategoryPlot#rendererChanged(org.jfree.chart.event.RendererChangeEvent)": -0.1602987602050144,
        "org.jfree.chart.plot$CategoryPlot#setAnchorValue(double)": -0.02951181079495206,
        "org.jfree.chart.plot$CategoryPlot#setAnchorValue(double,boolean)": -0.02951181079495206,
        "org.jfree.chart.plot$CategoryPlot#setAxisOffset(org.jfree.chart.util.RectangleInsets)": -0.02951181079495206,
        "org.jfree.chart.plot$CategoryPlot#setColumnRenderingOrder(org.jfree.chart.util.SortOrder)": -0.09347370398979445,
        "org.jfree.chart.plot$CategoryPlot#setDataset(int,org.jfree.data.category.CategoryDataset)": -0.15266923384466216,
        "org.jfree.chart.plot$CategoryPlot#setDataset(org.jfree.data.category.CategoryDataset)": -0.11886616519811108,
        "org.jfree.chart.plot$CategoryPlot#setDatasetRenderingOrder(org.jfree.chart.plot.DatasetRenderingOrder)": -0.02951181079495206,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxes(org.jfree.chart.axis.CategoryAxis[])": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxis(int,org.jfree.chart.axis.CategoryAxis)": -0.08772844473327564,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxis(int,org.jfree.chart.axis.CategoryAxis,boolean)": -0.08772844473327564,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxis(org.jfree.chart.axis.CategoryAxis)": -0.07521110849756893,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation)": -0.02951181079495206,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)": 0.7367146602040622,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxisLocation(org.jfree.chart.axis.AxisLocation)": -0.02951181079495206,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)": 0.7367146602040622,
        "org.jfree.chart.plot$CategoryPlot#setDomainGridlinePaint(java.awt.Paint)": -0.02951181079495206,
        "org.jfree.chart.plot$CategoryPlot#setDomainGridlinePosition(org.jfree.chart.axis.CategoryAnchor)": -0.02951181079495206,
        "org.jfree.chart.plot$CategoryPlot#setDomainGridlineStroke(java.awt.Stroke)": -0.02951181079495206,
        "org.jfree.chart.plot$CategoryPlot#setDomainGridlinesVisible(boolean)": -0.08166465587953611,
        "org.jfree.chart.plot$CategoryPlot#setDrawSharedDomainAxis(boolean)": -0.02951181079495206,
        "org.jfree.chart.plot$CategoryPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace)": -0.02951181079495206,
        "org.jfree.chart.plot$CategoryPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)": -0.02951181079495206,
        "org.jfree.chart.plot$CategoryPlot#setFixedLegendItems(org.jfree.chart.LegendItemCollection)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace)": -0.02951181079495206,
        "org.jfree.chart.plot$CategoryPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)": -0.02951181079495206,
        "org.jfree.chart.plot$CategoryPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)": -0.28218502133904033,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxes(org.jfree.chart.axis.ValueAxis[])": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis)": -0.10420336889546186,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis,boolean)": -0.10420336889546186,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxis(org.jfree.chart.axis.ValueAxis)": -0.08772844473327564,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation)": -0.02951181079495206,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)": 0.7367146602040622,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxisLocation(org.jfree.chart.axis.AxisLocation)": -0.02951181079495206,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)": 0.7367146602040622,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairLockedOnData(boolean)": -0.02951181079495206,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairPaint(java.awt.Paint)": -0.042218131831658394,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairStroke(java.awt.Stroke)": -0.02951181079495206,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairValue(double)": -0.02951181079495206,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairValue(double,boolean)": -0.02951181079495206,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairVisible(boolean)": -0.02951181079495206,
        "org.jfree.chart.plot$CategoryPlot#setRangeGridlinePaint(java.awt.Paint)": -0.02951181079495206,
        "org.jfree.chart.plot$CategoryPlot#setRangeGridlineStroke(java.awt.Stroke)": -0.02951181079495206,
        "org.jfree.chart.plot$CategoryPlot#setRangeGridlinesVisible(boolean)": -0.02951181079495206,
        "org.jfree.chart.plot$CategoryPlot#setRenderer(int,org.jfree.chart.renderer.category.CategoryItemRenderer)": -0.06066971212488354,
        "org.jfree.chart.plot$CategoryPlot#setRenderer(int,org.jfree.chart.renderer.category.CategoryItemRenderer,boolean)": -0.07521110849756893,
        "org.jfree.chart.plot$CategoryPlot#setRenderer(org.jfree.chart.renderer.category.CategoryItemRenderer)": -0.05215953530246446,
        "org.jfree.chart.plot$CategoryPlot#setRenderer(org.jfree.chart.renderer.category.CategoryItemRenderer,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRenderers(org.jfree.chart.renderer.category.CategoryItemRenderer[])": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRowRenderingOrder(org.jfree.chart.util.SortOrder)": -0.06826525624740698,
        "org.jfree.chart.plot$CategoryPlot#setWeight(int)": -0.09347370398979445,
        "org.jfree.chart.plot$CategoryPlot#writeObject(java.io.ObjectOutputStream)": -0.08772844473327579,
        "org.jfree.chart.plot$CategoryPlot#zoom(double)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#zoomDomainAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)": 0.0,
        "org.jfree.chart.plot$DatasetRenderingOrder#<clinit>()": 1.2607409526474054,
        "org.jfree.chart.plot$DatasetRenderingOrder#DatasetRenderingOrder(java.lang.String)": -0.0850454849794996,
        "org.jfree.chart.plot$DatasetRenderingOrder#equals(java.lang.Object)": -0.13227858008563112,
        "org.jfree.chart.plot$DatasetRenderingOrder#hashCode()": 0.0,
        "org.jfree.chart.plot$DatasetRenderingOrder#readResolve()": -0.13227858008563112,
        "org.jfree.chart.plot$DatasetRenderingOrder#toString()": -0.13227858008563098,
        "org.jfree.chart.plot$DefaultDrawingSupplier#<clinit>()": 1.1382855021333995,
        "org.jfree.chart.plot$DefaultDrawingSupplier#DefaultDrawingSupplier()": 1.1382855021333995,
        "org.jfree.chart.plot$DefaultDrawingSupplier#DefaultDrawingSupplier(java.awt.Paint[],java.awt.Paint[],java.awt.Paint[],java.awt.Stroke[],java.awt.Stroke[],java.awt.Shape[])": 1.1382855021333995,
        "org.jfree.chart.plot$DefaultDrawingSupplier#DefaultDrawingSupplier(java.awt.Paint[],java.awt.Paint[],java.awt.Stroke[],java.awt.Stroke[],java.awt.Shape[])": -0.042218131831658394,
        "org.jfree.chart.plot$DefaultDrawingSupplier#clone()": -0.16768375220015108,
        "org.jfree.chart.plot$DefaultDrawingSupplier#createStandardSeriesShapes()": 1.1382855021333995,
        "org.jfree.chart.plot$DefaultDrawingSupplier#equalShapes(java.awt.Shape[],java.awt.Shape[])": -0.320011901732554,
        "org.jfree.chart.plot$DefaultDrawingSupplier#equals(java.lang.Object)": -0.320011901732554,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextFillPaint()": -0.02951181079495213,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextOutlinePaint()": -0.042218131831658345,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextOutlineStroke()": -0.02951181079495213,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextPaint()": -0.3051992246419237,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextShape()": -0.15266923384466224,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextStroke()": -0.02951181079495213,
        "org.jfree.chart.plot$DefaultDrawingSupplier#intArray(double,double,double)": -0.20750093549350523,
        "org.jfree.chart.plot$DefaultDrawingSupplier#intArray(double,double,double,double)": -0.20750093549350523,
        "org.jfree.chart.plot$DefaultDrawingSupplier#readObject(java.io.ObjectInputStream)": -0.19196490465150862,
        "org.jfree.chart.plot$DefaultDrawingSupplier#writeObject(java.io.ObjectOutputStream)": -0.19196490465150862,
        "org.jfree.chart.plot$IntervalMarker#IntervalMarker(double,double)": -0.08166465587953611,
        "org.jfree.chart.plot$IntervalMarker#IntervalMarker(double,double,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)": -0.08166465587953611,
        "org.jfree.chart.plot$IntervalMarker#clone()": -0.02951181079495206,
        "org.jfree.chart.plot$IntervalMarker#equals(java.lang.Object)": -0.08166465587953611,
        "org.jfree.chart.plot$IntervalMarker#getEndValue()": -0.05215953530246442,
        "org.jfree.chart.plot$IntervalMarker#getGradientPaintTransformer()": 0.0,
        "org.jfree.chart.plot$IntervalMarker#getStartValue()": -0.05215953530246442,
        "org.jfree.chart.plot$IntervalMarker#setEndValue(double)": -0.02951181079495206,
        "org.jfree.chart.plot$IntervalMarker#setGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)": -0.02951181079495206,
        "org.jfree.chart.plot$IntervalMarker#setStartValue(double)": -0.02951181079495206,
        "org.jfree.chart.plot$Marker#Marker()": 1.302663360548613,
        "org.jfree.chart.plot$Marker#Marker(java.awt.Paint)": 1.302663360548613,
        "org.jfree.chart.plot$Marker#Marker(java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)": 1.3694030666841286,
        "org.jfree.chart.plot$Marker#addChangeListener(org.jfree.chart.event.MarkerChangeListener)": -0.1730878456210148,
        "org.jfree.chart.plot$Marker#clone()": -0.05215953530246442,
        "org.jfree.chart.plot$Marker#equals(java.lang.Object)": -0.1602987602050144,
        "org.jfree.chart.plot$Marker#getAlpha()": -0.19196490465150862,
        "org.jfree.chart.plot$Marker#getLabel()": -0.1952663508077792,
        "org.jfree.chart.plot$Marker#getLabelAnchor()": -0.1952663508077792,
        "org.jfree.chart.plot$Marker#getLabelFont()": -0.02951181079495213,
        "org.jfree.chart.plot$Marker#getLabelOffset()": -0.02951181079495213,
        "org.jfree.chart.plot$Marker#getLabelOffsetType()": -0.02951181079495213,
        "org.jfree.chart.plot$Marker#getLabelPaint()": -0.02951181079495213,
        "org.jfree.chart.plot$Marker#getLabelTextAnchor()": -0.02951181079495213,
        "org.jfree.chart.plot$Marker#getListeners(java.lang.Class)": -0.07521110849756885,
        "org.jfree.chart.plot$Marker#getOutlinePaint()": -0.06826525624740709,
        "org.jfree.chart.plot$Marker#getOutlineStroke()": -0.042218131831658345,
        "org.jfree.chart.plot$Marker#getPaint()": -0.2017622227944038,
        "org.jfree.chart.plot$Marker#getStroke()": -0.19196490465150862,
        "org.jfree.chart.plot$Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)": 0.5162179149540937,
        "org.jfree.chart.plot$Marker#readObject(java.io.ObjectInputStream)": -0.11413840361639549,
        "org.jfree.chart.plot$Marker#removeChangeListener(org.jfree.chart.event.MarkerChangeListener)": -0.09347370398979438,
        "org.jfree.chart.plot$Marker#setAlpha(float)": -0.042218131831658394,
        "org.jfree.chart.plot$Marker#setLabel(java.lang.String)": -0.042218131831658394,
        "org.jfree.chart.plot$Marker#setLabelAnchor(org.jfree.chart.util.RectangleAnchor)": -0.042218131831658394,
        "org.jfree.chart.plot$Marker#setLabelFont(java.awt.Font)": -0.042218131831658394,
        "org.jfree.chart.plot$Marker#setLabelOffset(org.jfree.chart.util.RectangleInsets)": -0.042218131831658394,
        "org.jfree.chart.plot$Marker#setLabelOffsetType(org.jfree.chart.util.LengthAdjustmentType)": 0.5770762136103152,
        "org.jfree.chart.plot$Marker#setLabelPaint(java.awt.Paint)": -0.042218131831658394,
        "org.jfree.chart.plot$Marker#setLabelTextAnchor(org.jfree.chart.text.TextAnchor)": -0.042218131831658394,
        "org.jfree.chart.plot$Marker#setOutlinePaint(java.awt.Paint)": -0.042218131831658394,
        "org.jfree.chart.plot$Marker#setOutlineStroke(java.awt.Stroke)": -0.042218131831658394,
        "org.jfree.chart.plot$Marker#setPaint(java.awt.Paint)": -0.06826525624740698,
        "org.jfree.chart.plot$Marker#setStroke(java.awt.Stroke)": -0.042218131831658394,
        "org.jfree.chart.plot$Marker#writeObject(java.io.ObjectOutputStream)": -0.11413840361639549,
        "org.jfree.chart.plot$Plot#<clinit>()": 1.1434157861268677,
        "org.jfree.chart.plot$Plot#Plot()": 1.1434157861268677,
        "org.jfree.chart.plot$Plot#addChangeListener(org.jfree.chart.event.PlotChangeListener)": -0.538711710541128,
        "org.jfree.chart.plot$Plot#axisChanged(org.jfree.chart.event.AxisChangeEvent)": -0.1092573422098672,
        "org.jfree.chart.plot$Plot#clone()": -0.1640199593245546,
        "org.jfree.chart.plot$Plot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)": -0.09347370398979445,
        "org.jfree.chart.plot$Plot#drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.06826525624740698,
        "org.jfree.chart.plot$Plot#drawBackgroundImage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.2716049382716048,
        "org.jfree.chart.plot$Plot#drawNoDataMessage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.10420336889546178,
        "org.jfree.chart.plot$Plot#drawOutline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.2716049382716048,
        "org.jfree.chart.plot$Plot#equals(java.lang.Object)": -0.31265429982750154,
        "org.jfree.chart.plot$Plot#fillBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.06826525624740698,
        "org.jfree.chart.plot$Plot#fillBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation)": -0.2716049382716049,
        "org.jfree.chart.plot$Plot#fireChangeEvent()": 0.5176919820529859,
        "org.jfree.chart.plot$Plot#getBackgroundAlpha()": -0.05215953530246442,
        "org.jfree.chart.plot$Plot#getBackgroundImage()": -0.05215953530246442,
        "org.jfree.chart.plot$Plot#getBackgroundImageAlignment()": 0.0,
        "org.jfree.chart.plot$Plot#getBackgroundImageAlpha()": 0.0,
        "org.jfree.chart.plot$Plot#getBackgroundPaint()": -0.05215953530246442,
        "org.jfree.chart.plot$Plot#getDatasetGroup()": 0.0,
        "org.jfree.chart.plot$Plot#getDrawingSupplier()": -0.3076954423713895,
        "org.jfree.chart.plot$Plot#getForegroundAlpha()": -0.27956186887317624,
        "org.jfree.chart.plot$Plot#getInsets()": -0.28218502133904044,
        "org.jfree.chart.plot$Plot#getLegendItems()": -0.02951181079495213,
        "org.jfree.chart.plot$Plot#getNoDataMessage()": 0.0,
        "org.jfree.chart.plot$Plot#getNoDataMessageFont()": 0.0,
        "org.jfree.chart.plot$Plot#getNoDataMessagePaint()": 0.0,
        "org.jfree.chart.plot$Plot#getOutlinePaint()": -0.05215953530246442,
        "org.jfree.chart.plot$Plot#getOutlineStroke()": -0.05215953530246442,
        "org.jfree.chart.plot$Plot#getParent()": -0.09243611446953348,
        "org.jfree.chart.plot$Plot#getRectX(double,double,double,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.plot$Plot#getRectY(double,double,double,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.plot$Plot#getRootPlot()": 0.0,
        "org.jfree.chart.plot$Plot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$Plot#isOutlineVisible()": 0.0,
        "org.jfree.chart.plot$Plot#isSubplot()": 0.0,
        "org.jfree.chart.plot$Plot#markerChanged(org.jfree.chart.event.MarkerChangeEvent)": 0.0,
        "org.jfree.chart.plot$Plot#notifyListeners(org.jfree.chart.event.PlotChangeEvent)": 1.1640936423447172,
        "org.jfree.chart.plot$Plot#readObject(java.io.ObjectInputStream)": -0.18862561374638664,
        "org.jfree.chart.plot$Plot#removeChangeListener(org.jfree.chart.event.PlotChangeListener)": -0.06066971212488354,
        "org.jfree.chart.plot$Plot#resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)": -0.26622375445888663,
        "org.jfree.chart.plot$Plot#resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)": -0.26622375445888663,
        "org.jfree.chart.plot$Plot#setBackgroundAlpha(float)": -0.02951181079495206,
        "org.jfree.chart.plot$Plot#setBackgroundImage(java.awt.Image)": -0.02951181079495206,
        "org.jfree.chart.plot$Plot#setBackgroundImageAlignment(int)": -0.02951181079495206,
        "org.jfree.chart.plot$Plot#setBackgroundImageAlpha(float)": -0.02951181079495206,
        "org.jfree.chart.plot$Plot#setBackgroundPaint(java.awt.Paint)": -0.06826525624740698,
        "org.jfree.chart.plot$Plot#setDatasetGroup(org.jfree.data.general.DatasetGroup)": -0.042218131831658345,
        "org.jfree.chart.plot$Plot#setDrawingSupplier(org.jfree.chart.plot.DrawingSupplier)": -0.02951181079495206,
        "org.jfree.chart.plot$Plot#setForegroundAlpha(float)": -0.08772844473327564,
        "org.jfree.chart.plot$Plot#setInsets(org.jfree.chart.util.RectangleInsets)": -0.18524668960957236,
        "org.jfree.chart.plot$Plot#setInsets(org.jfree.chart.util.RectangleInsets,boolean)": -0.19853161010124512,
        "org.jfree.chart.plot$Plot#setNoDataMessage(java.lang.String)": -0.02951181079495206,
        "org.jfree.chart.plot$Plot#setNoDataMessageFont(java.awt.Font)": -0.02951181079495206,
        "org.jfree.chart.plot$Plot#setNoDataMessagePaint(java.awt.Paint)": -0.02951181079495206,
        "org.jfree.chart.plot$Plot#setOutlinePaint(java.awt.Paint)": -0.02951181079495206,
        "org.jfree.chart.plot$Plot#setOutlineStroke(java.awt.Stroke)": -0.02951181079495206,
        "org.jfree.chart.plot$Plot#setOutlineVisible(boolean)": -0.02951181079495206,
        "org.jfree.chart.plot$Plot#setParent(org.jfree.chart.plot.Plot)": -0.1279237863896847,
        "org.jfree.chart.plot$Plot#writeObject(java.io.ObjectOutputStream)": -0.18862561374638664,
        "org.jfree.chart.plot$Plot#zoom(double)": 0.0,
        "org.jfree.chart.plot$PlotOrientation#<clinit>()": 1.24416982073451,
        "org.jfree.chart.plot$PlotOrientation#PlotOrientation(java.lang.String)": -0.10161661689239476,
        "org.jfree.chart.plot$PlotOrientation#equals(java.lang.Object)": -0.14068928983144624,
        "org.jfree.chart.plot$PlotOrientation#hashCode()": 0.0,
        "org.jfree.chart.plot$PlotOrientation#readResolve()": -0.13653093870485172,
        "org.jfree.chart.plot$PlotOrientation#toString()": -0.14068928983144624,
        "org.jfree.chart.plot$SeriesRenderingOrder#<clinit>()": 0.7732064796918875,
        "org.jfree.chart.plot$SeriesRenderingOrder#SeriesRenderingOrder(java.lang.String)": -0.08915543010307109,
        "org.jfree.chart.plot$SeriesRenderingOrder#equals(java.lang.Object)": -0.09347370398979445,
        "org.jfree.chart.plot$SeriesRenderingOrder#hashCode()": 0.0,
        "org.jfree.chart.plot$SeriesRenderingOrder#readResolve()": -0.09347370398979445,
        "org.jfree.chart.plot$SeriesRenderingOrder#toString()": -0.09347370398979438,
        "org.jfree.chart.plot$ValueMarker#ValueMarker(double)": 1.302663360548613,
        "org.jfree.chart.plot$ValueMarker#ValueMarker(double,java.awt.Paint,java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$ValueMarker#ValueMarker(double,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)": 0.734495063760388,
        "org.jfree.chart.plot$ValueMarker#equals(java.lang.Object)": -0.1783620432358254,
        "org.jfree.chart.plot$ValueMarker#getValue()": -0.21126004872762216,
        "org.jfree.chart.plot$ValueMarker#setValue(double)": -0.042218131831658394,
        "org.jfree.chart.plot$XYPlot#<clinit>()": 0.7732064796918875,
        "org.jfree.chart.plot$XYPlot#XYPlot()": 0.9805758424816957,
        "org.jfree.chart.plot$XYPlot#XYPlot(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)": 0.7732064796918875,
        "org.jfree.chart.plot$XYPlot#addAnnotation(org.jfree.chart.annotations.XYAnnotation)": -0.08772844473327564,
        "org.jfree.chart.plot$XYPlot#addAnnotation(org.jfree.chart.annotations.XYAnnotation,boolean)": -0.08772844473327564,
        "org.jfree.chart.plot$XYPlot#addDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": -0.05215953530246446,
        "org.jfree.chart.plot$XYPlot#addDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)": -0.05215953530246446,
        "org.jfree.chart.plot$XYPlot#addDomainMarker(org.jfree.chart.plot.Marker)": -0.042218131831658394,
        "org.jfree.chart.plot$XYPlot#addDomainMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": -0.05215953530246446,
        "org.jfree.chart.plot$XYPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": -0.06066971212488354,
        "org.jfree.chart.plot$XYPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)": -0.06066971212488354,
        "org.jfree.chart.plot$XYPlot#addRangeMarker(org.jfree.chart.plot.Marker)": -0.05215953530246446,
        "org.jfree.chart.plot$XYPlot#addRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": -0.06066971212488354,
        "org.jfree.chart.plot$XYPlot#calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.15266923384466216,
        "org.jfree.chart.plot$XYPlot#calculateDomainAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)": -0.15266923384466216,
        "org.jfree.chart.plot$XYPlot#calculateRangeAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)": -0.15266923384466216,
        "org.jfree.chart.plot$XYPlot#clearAnnotations()": 0.0,
        "org.jfree.chart.plot$XYPlot#clearDomainAxes()": 0.0,
        "org.jfree.chart.plot$XYPlot#clearDomainMarkers()": -0.042218131831658394,
        "org.jfree.chart.plot$XYPlot#clearDomainMarkers(int)": -0.042218131831658394,
        "org.jfree.chart.plot$XYPlot#clearRangeAxes()": 0.0,
        "org.jfree.chart.plot$XYPlot#clearRangeMarkers()": -0.042218131831658394,
        "org.jfree.chart.plot$XYPlot#clearRangeMarkers(int)": -0.042218131831658394,
        "org.jfree.chart.plot$XYPlot#clone()": -0.08166465587953611,
        "org.jfree.chart.plot$XYPlot#configureDomainAxes()": 0.7732064796918875,
        "org.jfree.chart.plot$XYPlot#configureRangeAxes()": 0.7732064796918875,
        "org.jfree.chart.plot$XYPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)": 0.7732064796918875,
        "org.jfree.chart.plot$XYPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)": -0.15266923384466216,
        "org.jfree.chart.plot$XYPlot#drawAnnotations(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)": -0.15266923384466216,
        "org.jfree.chart.plot$XYPlot#drawAxes(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)": -0.15266923384466216,
        "org.jfree.chart.plot$XYPlot#drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.15266923384466216,
        "org.jfree.chart.plot$XYPlot#drawDomainCrosshair(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation,double,org.jfree.chart.axis.ValueAxis,java.awt.Stroke,java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawDomainGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)": -0.15266923384466216,
        "org.jfree.chart.plot$XYPlot#drawDomainMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.util.Layer)": -0.15266923384466216,
        "org.jfree.chart.plot$XYPlot#drawDomainTickBands(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)": -0.15266923384466216,
        "org.jfree.chart.plot$XYPlot#drawHorizontalLine(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,java.awt.Stroke,java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawQuadrants(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.15266923384466216,
        "org.jfree.chart.plot$XYPlot#drawRangeCrosshair(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation,double,org.jfree.chart.axis.ValueAxis,java.awt.Stroke,java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawRangeGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)": -0.15266923384466216,
        "org.jfree.chart.plot$XYPlot#drawRangeMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.util.Layer)": -0.15266923384466216,
        "org.jfree.chart.plot$XYPlot#drawRangeTickBands(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)": -0.15266923384466216,
        "org.jfree.chart.plot$XYPlot#drawVerticalLine(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,java.awt.Stroke,java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawZeroDomainBaseline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.15266923384466216,
        "org.jfree.chart.plot$XYPlot#drawZeroRangeBaseline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.15266923384466216,
        "org.jfree.chart.plot$XYPlot#equals(java.lang.Object)": -0.2081251481099916,
        "org.jfree.chart.plot$XYPlot#getAnnotations()": -0.02951181079495213,
        "org.jfree.chart.plot$XYPlot#getAxisOffset()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDataRange(org.jfree.chart.axis.ValueAxis)": -0.3051992246419237,
        "org.jfree.chart.plot$XYPlot#getDataset()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDataset(int)": 0.7732064796918875,
        "org.jfree.chart.plot$XYPlot#getDatasetCount()": -0.15266923384466216,
        "org.jfree.chart.plot$XYPlot#getDatasetRenderingOrder()": -0.15266923384466224,
        "org.jfree.chart.plot$XYPlot#getDatasetsMappedToDomainAxis(java.lang.Integer)": -0.2950969077848703,
        "org.jfree.chart.plot$XYPlot#getDatasetsMappedToRangeAxis(java.lang.Integer)": -0.30017204913370615,
        "org.jfree.chart.plot$XYPlot#getDomainAxis()": -0.19196490465150856,
        "org.jfree.chart.plot$XYPlot#getDomainAxis(int)": -0.19853161010124512,
        "org.jfree.chart.plot$XYPlot#getDomainAxisCount()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainAxisEdge()": -0.15266923384466216,
        "org.jfree.chart.plot$XYPlot#getDomainAxisEdge(int)": -0.15266923384466216,
        "org.jfree.chart.plot$XYPlot#getDomainAxisForDataset(int)": -0.14875239024171985,
        "org.jfree.chart.plot$XYPlot#getDomainAxisIndex(org.jfree.chart.axis.ValueAxis)": -0.3051992246419237,
        "org.jfree.chart.plot$XYPlot#getDomainAxisLocation()": -0.15266923384466216,
        "org.jfree.chart.plot$XYPlot#getDomainAxisLocation(int)": -0.15266923384466216,
        "org.jfree.chart.plot$XYPlot#getDomainCrosshairPaint()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainCrosshairStroke()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainCrosshairValue()": -0.15266923384466224,
        "org.jfree.chart.plot$XYPlot#getDomainGridlinePaint()": -0.14875239024171982,
        "org.jfree.chart.plot$XYPlot#getDomainGridlineStroke()": -0.14875239024171982,
        "org.jfree.chart.plot$XYPlot#getDomainMarkers(int,org.jfree.chart.util.Layer)": -0.14875239024171985,
        "org.jfree.chart.plot$XYPlot#getDomainMarkers(org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainTickBandPaint()": -0.15266923384466224,
        "org.jfree.chart.plot$XYPlot#getDomainZeroBaselinePaint()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainZeroBaselineStroke()": 0.0,
        "org.jfree.chart.plot$XYPlot#getFixedDomainAxisSpace()": 0.0,
        "org.jfree.chart.plot$XYPlot#getFixedLegendItems()": 0.0,
        "org.jfree.chart.plot$XYPlot#getFixedRangeAxisSpace()": 0.0,
        "org.jfree.chart.plot$XYPlot#getIndexOf(org.jfree.chart.renderer.xy.XYItemRenderer)": 0.0,
        "org.jfree.chart.plot$XYPlot#getLegendItems()": -0.15266923384466216,
        "org.jfree.chart.plot$XYPlot#getOrientation()": -0.1565165272337945,
        "org.jfree.chart.plot$XYPlot#getPlotType()": 0.0,
        "org.jfree.chart.plot$XYPlot#getQuadrantOrigin()": -0.02951181079495213,
        "org.jfree.chart.plot$XYPlot#getQuadrantPaint(int)": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeAxis()": -0.22351576278650642,
        "org.jfree.chart.plot$XYPlot#getRangeAxis(int)": -0.2294871267669123,
        "org.jfree.chart.plot$XYPlot#getRangeAxisCount()": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeAxisEdge()": -0.15266923384466216,
        "org.jfree.chart.plot$XYPlot#getRangeAxisEdge(int)": -0.15266923384466216,
        "org.jfree.chart.plot$XYPlot#getRangeAxisForDataset(int)": -0.14875239024171985,
        "org.jfree.chart.plot$XYPlot#getRangeAxisIndex(org.jfree.chart.axis.ValueAxis)": -0.3051992246419237,
        "org.jfree.chart.plot$XYPlot#getRangeAxisLocation()": -0.15266923384466216,
        "org.jfree.chart.plot$XYPlot#getRangeAxisLocation(int)": -0.15266923384466216,
        "org.jfree.chart.plot$XYPlot#getRangeCrosshairPaint()": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeCrosshairStroke()": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeCrosshairValue()": -0.15266923384466224,
        "org.jfree.chart.plot$XYPlot#getRangeGridlinePaint()": -0.14875239024171982,
        "org.jfree.chart.plot$XYPlot#getRangeGridlineStroke()": -0.14875239024171982,
        "org.jfree.chart.plot$XYPlot#getRangeMarkers(int,org.jfree.chart.util.Layer)": -0.14875239024171985,
        "org.jfree.chart.plot$XYPlot#getRangeMarkers(org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeTickBandPaint()": -0.15266923384466224,
        "org.jfree.chart.plot$XYPlot#getRangeZeroBaselinePaint()": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeZeroBaselineStroke()": 0.0,
        "org.jfree.chart.plot$XYPlot#getRenderer()": -0.2496759841875234,
        "org.jfree.chart.plot$XYPlot#getRenderer(int)": -0.2716049382716049,
        "org.jfree.chart.plot$XYPlot#getRendererForDataset(org.jfree.data.xy.XYDataset)": -0.2925406992659124,
        "org.jfree.chart.plot$XYPlot#getSeriesCount()": 0.0,
        "org.jfree.chart.plot$XYPlot#getSeriesRenderingOrder()": -0.13227858008563098,
        "org.jfree.chart.plot$XYPlot#getWeight()": -0.042218131831658345,
        "org.jfree.chart.plot$XYPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$XYPlot#indexOf(org.jfree.data.xy.XYDataset)": -0.02951181079495206,
        "org.jfree.chart.plot$XYPlot#isDomainCrosshairLockedOnData()": -0.13227858008563098,
        "org.jfree.chart.plot$XYPlot#isDomainCrosshairVisible()": -0.15266923384466224,
        "org.jfree.chart.plot$XYPlot#isDomainGridlinesVisible()": -0.14875239024171982,
        "org.jfree.chart.plot$XYPlot#isDomainZeroBaselineVisible()": -0.15266923384466224,
        "org.jfree.chart.plot$XYPlot#isDomainZoomable()": -0.02951181079495213,
        "org.jfree.chart.plot$XYPlot#isRangeCrosshairLockedOnData()": -0.13227858008563098,
        "org.jfree.chart.plot$XYPlot#isRangeCrosshairVisible()": -0.1565165272337945,
        "org.jfree.chart.plot$XYPlot#isRangeGridlinesVisible()": -0.14875239024171982,
        "org.jfree.chart.plot$XYPlot#isRangeZeroBaselineVisible()": -0.15266923384466224,
        "org.jfree.chart.plot$XYPlot#isRangeZoomable()": -0.02951181079495213,
        "org.jfree.chart.plot$XYPlot#mapDatasetToDomainAxis(int,int)": 0.7732064796918875,
        "org.jfree.chart.plot$XYPlot#mapDatasetToRangeAxis(int,int)": 0.7732064796918875,
        "org.jfree.chart.plot$XYPlot#readObject(java.io.ObjectInputStream)": -0.09347370398979445,
        "org.jfree.chart.plot$XYPlot#removeAnnotation(org.jfree.chart.annotations.XYAnnotation)": -0.02951181079495206,
        "org.jfree.chart.plot$XYPlot#removeAnnotation(org.jfree.chart.annotations.XYAnnotation,boolean)": -0.02951181079495206,
        "org.jfree.chart.plot$XYPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.705,
        "org.jfree.chart.plot$XYPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)": 0.705,
        "org.jfree.chart.plot$XYPlot#removeDomainMarker(org.jfree.chart.plot.Marker)": 0.705,
        "org.jfree.chart.plot$XYPlot#removeDomainMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.705,
        "org.jfree.chart.plot$XYPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.705,
        "org.jfree.chart.plot$XYPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)": 0.705,
        "org.jfree.chart.plot$XYPlot#removeRangeMarker(org.jfree.chart.plot.Marker)": 0.705,
        "org.jfree.chart.plot$XYPlot#removeRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.705,
        "org.jfree.chart.plot$XYPlot#render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.CrosshairState)": -0.15266923384466216,
        "org.jfree.chart.plot$XYPlot#rendererChanged(org.jfree.chart.event.RendererChangeEvent)": -0.11886616519811108,
        "org.jfree.chart.plot$XYPlot#setAxisOffset(org.jfree.chart.util.RectangleInsets)": -0.02951181079495206,
        "org.jfree.chart.plot$XYPlot#setDataset(int,org.jfree.data.xy.XYDataset)": -0.14068928983144624,
        "org.jfree.chart.plot$XYPlot#setDataset(org.jfree.data.xy.XYDataset)": -0.08166465587953611,
        "org.jfree.chart.plot$XYPlot#setDatasetRenderingOrder(org.jfree.chart.plot.DatasetRenderingOrder)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainAxes(org.jfree.chart.axis.ValueAxis[])": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainAxis(int,org.jfree.chart.axis.ValueAxis)": -0.08166465587953611,
        "org.jfree.chart.plot$XYPlot#setDomainAxis(int,org.jfree.chart.axis.ValueAxis,boolean)": -0.08166465587953611,
        "org.jfree.chart.plot$XYPlot#setDomainAxis(org.jfree.chart.axis.ValueAxis)": -0.06826525624740698,
        "org.jfree.chart.plot$XYPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation)": -0.042218131831658394,
        "org.jfree.chart.plot$XYPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)": -0.042218131831658394,
        "org.jfree.chart.plot$XYPlot#setDomainAxisLocation(org.jfree.chart.axis.AxisLocation)": -0.02951181079495206,
        "org.jfree.chart.plot$XYPlot#setDomainAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainCrosshairLockedOnData(boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainCrosshairPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainCrosshairStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainCrosshairValue(double)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainCrosshairValue(double,boolean)": -0.15266923384466216,
        "org.jfree.chart.plot$XYPlot#setDomainCrosshairVisible(boolean)": -0.07521110849756893,
        "org.jfree.chart.plot$XYPlot#setDomainGridlinePaint(java.awt.Paint)": -0.02951181079495206,
        "org.jfree.chart.plot$XYPlot#setDomainGridlineStroke(java.awt.Stroke)": -0.02951181079495206,
        "org.jfree.chart.plot$XYPlot#setDomainGridlinesVisible(boolean)": -0.02951181079495206,
        "org.jfree.chart.plot$XYPlot#setDomainTickBandPaint(java.awt.Paint)": -0.02951181079495206,
        "org.jfree.chart.plot$XYPlot#setDomainZeroBaselinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainZeroBaselineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainZeroBaselineVisible(boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace)": 0.0,
        "org.jfree.chart.plot$XYPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setFixedLegendItems(org.jfree.chart.LegendItemCollection)": 0.0,
        "org.jfree.chart.plot$XYPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace)": 0.0,
        "org.jfree.chart.plot$XYPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)": -0.22651373367569738,
        "org.jfree.chart.plot$XYPlot#setQuadrantOrigin(java.awt.geom.Point2D)": -0.042218131831658394,
        "org.jfree.chart.plot$XYPlot#setQuadrantPaint(int,java.awt.Paint)": -0.042218131831658394,
        "org.jfree.chart.plot$XYPlot#setRangeAxes(org.jfree.chart.axis.ValueAxis[])": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis)": -0.06066971212488354,
        "org.jfree.chart.plot$XYPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis,boolean)": -0.06066971212488354,
        "org.jfree.chart.plot$XYPlot#setRangeAxis(org.jfree.chart.axis.ValueAxis)": -0.1092573422098672,
        "org.jfree.chart.plot$XYPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation)": -0.042218131831658394,
        "org.jfree.chart.plot$XYPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)": -0.08772844473327564,
        "org.jfree.chart.plot$XYPlot#setRangeAxisLocation(org.jfree.chart.axis.AxisLocation)": -0.08166465587953611,
        "org.jfree.chart.plot$XYPlot#setRangeAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeCrosshairLockedOnData(boolean)": -0.02951181079495206,
        "org.jfree.chart.plot$XYPlot#setRangeCrosshairPaint(java.awt.Paint)": -0.02951181079495206,
        "org.jfree.chart.plot$XYPlot#setRangeCrosshairStroke(java.awt.Stroke)": -0.02951181079495206,
        "org.jfree.chart.plot$XYPlot#setRangeCrosshairValue(double)": -0.02951181079495206,
        "org.jfree.chart.plot$XYPlot#setRangeCrosshairValue(double,boolean)": -0.15651652723379456,
        "org.jfree.chart.plot$XYPlot#setRangeCrosshairVisible(boolean)": -0.08166465587953611,
        "org.jfree.chart.plot$XYPlot#setRangeGridlinePaint(java.awt.Paint)": -0.02951181079495206,
        "org.jfree.chart.plot$XYPlot#setRangeGridlineStroke(java.awt.Stroke)": -0.02951181079495206,
        "org.jfree.chart.plot$XYPlot#setRangeGridlinesVisible(boolean)": -0.02951181079495206,
        "org.jfree.chart.plot$XYPlot#setRangeTickBandPaint(java.awt.Paint)": -0.02951181079495206,
        "org.jfree.chart.plot$XYPlot#setRangeZeroBaselinePaint(java.awt.Paint)": -0.02951181079495206,
        "org.jfree.chart.plot$XYPlot#setRangeZeroBaselineStroke(java.awt.Stroke)": -0.02951181079495206,
        "org.jfree.chart.plot$XYPlot#setRangeZeroBaselineVisible(boolean)": -0.02951181079495206,
        "org.jfree.chart.plot$XYPlot#setRenderer(int,org.jfree.chart.renderer.xy.XYItemRenderer)": -0.2017622227944037,
        "org.jfree.chart.plot$XYPlot#setRenderer(int,org.jfree.chart.renderer.xy.XYItemRenderer,boolean)": -0.2017622227944037,
        "org.jfree.chart.plot$XYPlot#setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)": -0.18182619828836857,
        "org.jfree.chart.plot$XYPlot#setRenderers(org.jfree.chart.renderer.xy.XYItemRenderer[])": 0.0,
        "org.jfree.chart.plot$XYPlot#setSeriesRenderingOrder(org.jfree.chart.plot.SeriesRenderingOrder)": 0.0,
        "org.jfree.chart.plot$XYPlot#setWeight(int)": -0.09347370398979445,
        "org.jfree.chart.plot$XYPlot#writeObject(java.io.ObjectOutputStream)": -0.09347370398979438,
        "org.jfree.chart.plot$XYPlot#zoomDomainAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$XYPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$XYPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$XYPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$XYPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)": 0.0,
        "org.jfree.chart.text$TextAnchor#<clinit>()": 0.7523633697085469,
        "org.jfree.chart.text$TextAnchor#TextAnchor(java.lang.String)": -0.593423067918358,
        "org.jfree.chart.text$TextAnchor#equals(java.lang.Object)": -0.5849486761939768,
        "org.jfree.chart.text$TextAnchor#hashCode()": -0.0816646558795362,
        "org.jfree.chart.text$TextAnchor#readResolve()": -0.33207268171800763,
        "org.jfree.chart.text$TextAnchor#toString()": 0.0,
        "org.jfree.chart.util$AbstractObjectList#AbstractObjectList()": 0.7831263120366333,
        "org.jfree.chart.util$AbstractObjectList#AbstractObjectList(int)": 0.7831263120366333,
        "org.jfree.chart.util$AbstractObjectList#AbstractObjectList(int,int)": -0.562660125590272,
        "org.jfree.chart.util$AbstractObjectList#clear()": 0.0,
        "org.jfree.chart.util$AbstractObjectList#clone()": -0.30269150703933323,
        "org.jfree.chart.util$AbstractObjectList#equals(java.lang.Object)": -0.6731554868640728,
        "org.jfree.chart.util$AbstractObjectList#get(int)": -0.15370719757348483,
        "org.jfree.chart.util$AbstractObjectList#hashCode()": -0.2353633949401906,
        "org.jfree.chart.util$AbstractObjectList#indexOf(java.lang.Object)": -0.5158950299881659,
        "org.jfree.chart.util$AbstractObjectList#readObject(java.io.ObjectInputStream)": -0.3175698475528949,
        "org.jfree.chart.util$AbstractObjectList#set(int,java.lang.Object)": -0.1589925231550583,
        "org.jfree.chart.util$AbstractObjectList#size()": -0.4654954691870431,
        "org.jfree.chart.util$AbstractObjectList#writeObject(java.io.ObjectOutputStream)": -0.3175698475528949,
        "org.jfree.chart.util$Layer#<clinit>()": 1.3755555555555556,
        "org.jfree.chart.util$Layer#Layer(java.lang.String)": 0.029769117928650668,
        "org.jfree.chart.util$Layer#equals(java.lang.Object)": -0.2742721829798973,
        "org.jfree.chart.util$Layer#hashCode()": 0.0,
        "org.jfree.chart.util$Layer#readResolve()": 0.0,
        "org.jfree.chart.util$Layer#toString()": 0.0,
        "org.jfree.chart.util$LengthAdjustmentType#<clinit>()": 1.3694030666841286,
        "org.jfree.chart.util$LengthAdjustmentType#LengthAdjustmentType(java.lang.String)": 0.023616629057223615,
        "org.jfree.chart.util$LengthAdjustmentType#equals(java.lang.Object)": -0.16029876020501432,
        "org.jfree.chart.util$LengthAdjustmentType#hashCode()": 0.0,
        "org.jfree.chart.util$LengthAdjustmentType#readResolve()": -0.11413840361639545,
        "org.jfree.chart.util$LengthAdjustmentType#toString()": 0.0,
        "org.jfree.chart.util$ObjectList#ObjectList()": 0.8082431087681855,
        "org.jfree.chart.util$ObjectList#ObjectList(int)": 0.0,
        "org.jfree.chart.util$ObjectList#get(int)": 1.240515108816112,
        "org.jfree.chart.util$ObjectList#indexOf(java.lang.Object)": -0.5158950299881659,
        "org.jfree.chart.util$ObjectList#set(int,java.lang.Object)": 1.238691427202681,
        "org.jfree.chart.util$RectangleAnchor#<clinit>()": 1.1571725585499437,
        "org.jfree.chart.util$RectangleAnchor#RectangleAnchor(java.lang.String)": -0.18861387907696125,
        "org.jfree.chart.util$RectangleAnchor#coordinates(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleAnchor)": -0.24685407435959505,
        "org.jfree.chart.util$RectangleAnchor#createRectangle(org.jfree.chart.util.Size2D,double,double,org.jfree.chart.util.RectangleAnchor)": -0.042218131831658394,
        "org.jfree.chart.util$RectangleAnchor#equals(java.lang.Object)": -0.2294871267669123,
        "org.jfree.chart.util$RectangleAnchor#hashCode()": -0.042218131831658345,
        "org.jfree.chart.util$RectangleAnchor#readResolve()": -0.1712934207222082,
        "org.jfree.chart.util$RectangleAnchor#toString()": 0.0,
        "org.jfree.chart.util$RectangleInsets#<clinit>()": 0.8757356419013937,
        "org.jfree.chart.util$RectangleInsets#RectangleInsets()": 0.0,
        "org.jfree.chart.util$RectangleInsets#RectangleInsets(double,double,double,double)": 0.904712872623962,
        "org.jfree.chart.util$RectangleInsets#RectangleInsets(org.jfree.chart.util.UnitType,double,double,double,double)": -0.47005079572551123,
        "org.jfree.chart.util$RectangleInsets#calculateBottomInset(double)": -0.2847941645497349,
        "org.jfree.chart.util$RectangleInsets#calculateBottomOutset(double)": -0.28738962058102135,
        "org.jfree.chart.util$RectangleInsets#calculateLeftInset(double)": -0.2847941645497349,
        "org.jfree.chart.util$RectangleInsets#calculateLeftOutset(double)": -0.28738962058102135,
        "org.jfree.chart.util$RectangleInsets#calculateRightInset(double)": -0.2847941645497349,
        "org.jfree.chart.util$RectangleInsets#calculateRightOutset(double)": -0.28738962058102135,
        "org.jfree.chart.util$RectangleInsets#calculateTopInset(double)": -0.2847941645497349,
        "org.jfree.chart.util$RectangleInsets#calculateTopOutset(double)": -0.28738962058102135,
        "org.jfree.chart.util$RectangleInsets#createAdjustedRectangle(java.awt.geom.Rectangle2D,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.LengthAdjustmentType)": 0.0,
        "org.jfree.chart.util$RectangleInsets#createInsetRectangle(java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.util$RectangleInsets#createInsetRectangle(java.awt.geom.Rectangle2D,boolean,boolean)": 0.0,
        "org.jfree.chart.util$RectangleInsets#createOutsetRectangle(java.awt.geom.Rectangle2D)": -0.2689222601247599,
        "org.jfree.chart.util$RectangleInsets#createOutsetRectangle(java.awt.geom.Rectangle2D,boolean,boolean)": -0.2689222601247599,
        "org.jfree.chart.util$RectangleInsets#equals(java.lang.Object)": -0.482767188695576,
        "org.jfree.chart.util$RectangleInsets#extendHeight(double)": -0.2847941645497349,
        "org.jfree.chart.util$RectangleInsets#extendWidth(double)": -0.2847941645497349,
        "org.jfree.chart.util$RectangleInsets#getBottom()": -0.26892226012475984,
        "org.jfree.chart.util$RectangleInsets#getLeft()": -0.26892226012475984,
        "org.jfree.chart.util$RectangleInsets#getRight()": -0.26892226012475984,
        "org.jfree.chart.util$RectangleInsets#getTop()": -0.26892226012475984,
        "org.jfree.chart.util$RectangleInsets#getUnitType()": 0.0,
        "org.jfree.chart.util$RectangleInsets#hashCode()": 0.0,
        "org.jfree.chart.util$RectangleInsets#toString()": 0.0,
        "org.jfree.chart.util$RectangleInsets#trim(java.awt.geom.Rectangle2D)": -0.28218502133904033,
        "org.jfree.chart.util$RectangleInsets#trimHeight(double)": -0.28218502133904033,
        "org.jfree.chart.util$RectangleInsets#trimWidth(double)": -0.28218502133904033,
        "org.jfree.chart.util$SortOrder#<clinit>()": 0.7278753415611952,
        "org.jfree.chart.util$SortOrder#SortOrder(java.lang.String)": -0.13448656823376332,
        "org.jfree.chart.util$SortOrder#equals(java.lang.Object)": -0.1092573422098672,
        "org.jfree.chart.util$SortOrder#hashCode()": 0.0,
        "org.jfree.chart.util$SortOrder#readResolve()": -0.08772844473327564,
        "org.jfree.chart.util$SortOrder#toString()": -0.09895229500019997,
        "org.jfree.chart.util$UnitType#<clinit>()": 0.8666468596670646,
        "org.jfree.chart.util$UnitType#UnitType(java.lang.String)": -0.4791395779598403,
        "org.jfree.chart.util$UnitType#equals(java.lang.Object)": -0.28218502133904044,
        "org.jfree.chart.util$UnitType#hashCode()": 0.0,
        "org.jfree.chart.util$UnitType#readResolve()": -0.28218502133904033,
        "org.jfree.chart.util$UnitType#toString()": 0.0,
        "org.jfree.data.general$DatasetChangeEvent#DatasetChangeEvent(java.lang.Object,org.jfree.data.general.Dataset)": -0.5241650379561428,
        "org.jfree.data.general$DatasetChangeEvent#getDataset()": 0.0,
        "org.jfree.data.time$Day#<clinit>()": -0.4627837048480667,
        "org.jfree.data.time$Day#Day()": -0.1092573422098672,
        "org.jfree.data.time$Day#Day(int,int,int)": -0.3714460972909581,
        "org.jfree.data.time$Day#Day(java.util.Date)": -0.11886616519811108,
        "org.jfree.data.time$Day#Day(java.util.Date,java.util.TimeZone)": -0.19196490465150856,
        "org.jfree.data.time$Day#Day(org.jfree.data.time.SerialDate)": -0.11886616519811108,
        "org.jfree.data.time$Day#compareTo(java.lang.Object)": -0.09347370398979445,
        "org.jfree.data.time$Day#equals(java.lang.Object)": -0.16401995932455452,
        "org.jfree.data.time$Day#getDayOfMonth()": -0.3320726817180075,
        "org.jfree.data.time$Day#getFirstMillisecond()": -0.1188661651981111,
        "org.jfree.data.time$Day#getFirstMillisecond(java.util.Calendar)": -0.4423845365319161,
        "org.jfree.data.time$Day#getLastMillisecond()": -0.1188661651981111,
        "org.jfree.data.time$Day#getLastMillisecond(java.util.Calendar)": -0.4423845365319161,
        "org.jfree.data.time$Day#getMonth()": -0.3320726817180075,
        "org.jfree.data.time$Day#getSerialDate()": -0.1783620432358255,
        "org.jfree.data.time$Day#getSerialIndex()": -0.11413840361639549,
        "org.jfree.data.time$Day#getYear()": -0.32727753292304795,
        "org.jfree.data.time$Day#hashCode()": -0.07521110849756885,
        "org.jfree.data.time$Day#next()": -0.14068928983144624,
        "org.jfree.data.time$Day#parseDay(java.lang.String)": -0.042218131831658394,
        "org.jfree.data.time$Day#peg(java.util.Calendar)": -0.4423845365319161,
        "org.jfree.data.time$Day#previous()": -0.06066971212488354,
        "org.jfree.data.time$Day#toString()": 0.0,
        "org.jfree.data.time$RegularTimePeriod#<clinit>()": -0.7138650629582943,
        "org.jfree.data.time$RegularTimePeriod#RegularTimePeriod()": -0.7003979714351323,
        "org.jfree.data.time$RegularTimePeriod#createInstance(java.lang.Class,java.util.Date,java.util.TimeZone)": -0.02951181079495206,
        "org.jfree.data.time$RegularTimePeriod#downsize(java.lang.Class)": -0.06066971212488354,
        "org.jfree.data.time$RegularTimePeriod#getEnd()": -0.12792378638968477,
        "org.jfree.data.time$RegularTimePeriod#getMiddleMillisecond()": -0.13653093870485172,
        "org.jfree.data.time$RegularTimePeriod#getMiddleMillisecond(java.util.Calendar)": -0.02951181079495206,
        "org.jfree.data.time$RegularTimePeriod#getStart()": -0.12792378638968477,
        "org.jfree.data.time$RegularTimePeriod#toString()": 0.0
    },
    "Chart-15": {
        "org.jfree.chart$ChartColor#<clinit>()": -0.26217572831450686,
        "org.jfree.chart$ChartColor#ChartColor(int,int,int)": 0.0,
        "org.jfree.chart$ChartColor#createDefaultPaintArray()": 1.083610709312398,
        "org.jfree.chart$ChartFactory#ChartFactory()": 0.0,
        "org.jfree.chart$ChartFactory#createAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": -0.06491218980083,
        "org.jfree.chart$ChartFactory#createBarChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": -0.10607339214640099,
        "org.jfree.chart$ChartFactory#createBarChart3D(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": -0.06491218980083,
        "org.jfree.chart$ChartFactory#createBoxAndWhiskerChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.statistics.BoxAndWhiskerCategoryDataset,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createBoxAndWhiskerChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.statistics.BoxAndWhiskerXYDataset,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createBubbleChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYZDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createCandlestickChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.OHLCDataset,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createGanttChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.IntervalCategoryDataset,boolean,boolean,boolean)": -0.07306782685288771,
        "org.jfree.chart$ChartFactory#createHighLowChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.OHLCDataset,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createHighLowChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.OHLCDataset,org.jfree.chart.axis.Timeline,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createHistogram(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.IntervalXYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createLineChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": -0.09399160353000481,
        "org.jfree.chart$ChartFactory#createLineChart3D(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": -0.06491218980083,
        "org.jfree.chart$ChartFactory#createMultiplePieChart(java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createMultiplePieChart3D(java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createPieChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,boolean)": -0.13248772729377373,
        "org.jfree.chart$ChartFactory#createPieChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,java.util.Locale)": 0.0,
        "org.jfree.chart$ChartFactory#createPieChart(java.lang.String,org.jfree.data.general.PieDataset,org.jfree.data.general.PieDataset,int,boolean,boolean,boolean,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createPieChart(java.lang.String,org.jfree.data.general.PieDataset,org.jfree.data.general.PieDataset,int,boolean,boolean,boolean,java.util.Locale,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createPieChart3D(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,boolean)": 1.7642185401879598,
        "org.jfree.chart$ChartFactory#createPieChart3D(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,java.util.Locale)": 0.0,
        "org.jfree.chart$ChartFactory#createPolarChart(java.lang.String,org.jfree.data.xy.XYDataset,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createRingChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createRingChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,java.util.Locale)": 0.0,
        "org.jfree.chart$ChartFactory#createScatterPlot(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": -0.09399160353000481,
        "org.jfree.chart$ChartFactory#createStackedAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": -0.06491218980083,
        "org.jfree.chart$ChartFactory#createStackedBarChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": -0.06491218980083,
        "org.jfree.chart$ChartFactory#createStackedBarChart3D(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": -0.06491218980083,
        "org.jfree.chart$ChartFactory#createStackedXYAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.TableXYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": -0.07306782685288771,
        "org.jfree.chart$ChartFactory#createTimeSeriesChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,boolean,boolean,boolean)": -0.06491218980083,
        "org.jfree.chart$ChartFactory#createWaferMapChart(java.lang.String,org.jfree.data.general.WaferMapDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createWaterfallChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": -0.055781459812040295,
        "org.jfree.chart$ChartFactory#createWindPlot(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.WindDataset,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createXYAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": -0.055781459812040295,
        "org.jfree.chart$ChartFactory#createXYBarChart(java.lang.String,java.lang.String,boolean,java.lang.String,org.jfree.data.xy.IntervalXYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": -0.06491218980083,
        "org.jfree.chart$ChartFactory#createXYLineChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": -0.11172958175989456,
        "org.jfree.chart$ChartFactory#createXYStepAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": -0.055781459812040295,
        "org.jfree.chart$ChartFactory#createXYStepChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": -0.055781459812040295,
        "org.jfree.chart$JFreeChart#<clinit>()": -0.07725493343627987,
        "org.jfree.chart$JFreeChart#JFreeChart(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)": 1.2855983223608884,
        "org.jfree.chart$JFreeChart#JFreeChart(java.lang.String,org.jfree.chart.plot.Plot)": 0.0,
        "org.jfree.chart$JFreeChart#JFreeChart(org.jfree.chart.plot.Plot)": -0.2752688087952396,
        "org.jfree.chart$JFreeChart#addChangeListener(org.jfree.chart.event.ChartChangeListener)": -0.15980346450639288,
        "org.jfree.chart$JFreeChart#addLegend(org.jfree.chart.title.LegendTitle)": 0.0,
        "org.jfree.chart$JFreeChart#addProgressListener(org.jfree.chart.event.ChartProgressListener)": -0.0315206412053729,
        "org.jfree.chart$JFreeChart#addSubtitle(int,org.jfree.chart.title.Title)": -0.0315206412053729,
        "org.jfree.chart$JFreeChart#addSubtitle(org.jfree.chart.title.Title)": -0.04512489437491821,
        "org.jfree.chart$JFreeChart#clearSubtitles()": 0.0,
        "org.jfree.chart$JFreeChart#clone()": 0.0,
        "org.jfree.chart$JFreeChart#createAlignedRectangle2D(org.jfree.chart.util.Size2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment)": 1.5183040173485058,
        "org.jfree.chart$JFreeChart#createBufferedImage(int,int)": -0.06491218980083,
        "org.jfree.chart$JFreeChart#createBufferedImage(int,int,double,double,org.jfree.chart.ChartRenderingInfo)": 0.0,
        "org.jfree.chart$JFreeChart#createBufferedImage(int,int,int,org.jfree.chart.ChartRenderingInfo)": -0.21014618269899346,
        "org.jfree.chart$JFreeChart#createBufferedImage(int,int,org.jfree.chart.ChartRenderingInfo)": -0.21014618269899346,
        "org.jfree.chart$JFreeChart#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart$JFreeChart#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.ChartRenderingInfo)": 1.5183040173485058,
        "org.jfree.chart$JFreeChart#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.ChartRenderingInfo)": 0.0,
        "org.jfree.chart$JFreeChart#drawTitle(org.jfree.chart.title.Title,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)": 1.5183040173485058,
        "org.jfree.chart$JFreeChart#equals(java.lang.Object)": -0.11717564179433315,
        "org.jfree.chart$JFreeChart#fireChartChanged()": -0.08053082525790804,
        "org.jfree.chart$JFreeChart#getAntiAlias()": 0.0,
        "org.jfree.chart$JFreeChart#getBackgroundImage()": 0.0,
        "org.jfree.chart$JFreeChart#getBackgroundImageAlignment()": 0.0,
        "org.jfree.chart$JFreeChart#getBackgroundImageAlpha()": 0.0,
        "org.jfree.chart$JFreeChart#getBackgroundPaint()": 0.0,
        "org.jfree.chart$JFreeChart#getBorderPaint()": 0.0,
        "org.jfree.chart$JFreeChart#getBorderStroke()": 0.0,
        "org.jfree.chart$JFreeChart#getCategoryPlot()": 0.0,
        "org.jfree.chart$JFreeChart#getLegend()": -0.07306782685288771,
        "org.jfree.chart$JFreeChart#getLegend(int)": -0.07306782685288771,
        "org.jfree.chart$JFreeChart#getPadding()": 0.0,
        "org.jfree.chart$JFreeChart#getPlot()": -0.3350345207627272,
        "org.jfree.chart$JFreeChart#getRenderingHints()": 0.0,
        "org.jfree.chart$JFreeChart#getSubtitle(int)": -0.10607339214640099,
        "org.jfree.chart$JFreeChart#getSubtitleCount()": -0.12243735987372562,
        "org.jfree.chart$JFreeChart#getSubtitles()": -0.03152064120537301,
        "org.jfree.chart$JFreeChart#getTextAntiAlias()": 0.0,
        "org.jfree.chart$JFreeChart#getTitle()": -0.03152064120537301,
        "org.jfree.chart$JFreeChart#getXYPlot()": 0.0,
        "org.jfree.chart$JFreeChart#handleClick(int,int,org.jfree.chart.ChartRenderingInfo)": 0.0,
        "org.jfree.chart$JFreeChart#isBorderVisible()": 0.17251757972160087,
        "org.jfree.chart$JFreeChart#isNotify()": 0.0,
        "org.jfree.chart$JFreeChart#main(java.lang.String[])": 0.0,
        "org.jfree.chart$JFreeChart#notifyListeners(org.jfree.chart.event.ChartChangeEvent)": -0.3457479347901982,
        "org.jfree.chart$JFreeChart#notifyListeners(org.jfree.chart.event.ChartProgressEvent)": 1.5183040173485058,
        "org.jfree.chart$JFreeChart#plotChanged(org.jfree.chart.event.PlotChangeEvent)": -0.326876587952035,
        "org.jfree.chart$JFreeChart#readObject(java.io.ObjectInputStream)": -0.10017464578637128,
        "org.jfree.chart$JFreeChart#removeChangeListener(org.jfree.chart.event.ChartChangeListener)": -0.0315206412053729,
        "org.jfree.chart$JFreeChart#removeLegend()": -0.055781459812040295,
        "org.jfree.chart$JFreeChart#removeProgressListener(org.jfree.chart.event.ChartProgressListener)": -0.0315206412053729,
        "org.jfree.chart$JFreeChart#removeSubtitle(org.jfree.chart.title.Title)": -0.055781459812040295,
        "org.jfree.chart$JFreeChart#setAntiAlias(boolean)": 0.0,
        "org.jfree.chart$JFreeChart#setBackgroundImage(java.awt.Image)": -0.0315206412053729,
        "org.jfree.chart$JFreeChart#setBackgroundImageAlignment(int)": -0.0315206412053729,
        "org.jfree.chart$JFreeChart#setBackgroundImageAlpha(float)": -0.0315206412053729,
        "org.jfree.chart$JFreeChart#setBackgroundPaint(java.awt.Paint)": -0.06491218980083,
        "org.jfree.chart$JFreeChart#setBorderPaint(java.awt.Paint)": -0.0315206412053729,
        "org.jfree.chart$JFreeChart#setBorderStroke(java.awt.Stroke)": -0.0315206412053729,
        "org.jfree.chart$JFreeChart#setBorderVisible(boolean)": -0.0315206412053729,
        "org.jfree.chart$JFreeChart#setNotify(boolean)": 0.0,
        "org.jfree.chart$JFreeChart#setPadding(org.jfree.chart.util.RectangleInsets)": -0.0315206412053729,
        "org.jfree.chart$JFreeChart#setRenderingHints(java.awt.RenderingHints)": -0.0315206412053729,
        "org.jfree.chart$JFreeChart#setSubtitles(java.util.List)": 0.0,
        "org.jfree.chart$JFreeChart#setTextAntiAlias(boolean)": 0.0,
        "org.jfree.chart$JFreeChart#setTextAntiAlias(java.lang.Object)": 0.0,
        "org.jfree.chart$JFreeChart#setTitle(java.lang.String)": -0.0315206412053729,
        "org.jfree.chart$JFreeChart#setTitle(org.jfree.chart.title.TextTitle)": -0.06491218980083,
        "org.jfree.chart$JFreeChart#titleChanged(org.jfree.chart.event.TitleChangeEvent)": -0.055781459812040295,
        "org.jfree.chart$JFreeChart#writeObject(java.io.ObjectOutputStream)": -0.10017464578637125,
        "org.jfree.chart$LegendItemCollection#LegendItemCollection()": 0.16399838055339722,
        "org.jfree.chart$LegendItemCollection#add(org.jfree.chart.LegendItem)": -0.2812639924701479,
        "org.jfree.chart$LegendItemCollection#addAll(org.jfree.chart.LegendItemCollection)": 0.0,
        "org.jfree.chart$LegendItemCollection#clone()": -0.03152064120537301,
        "org.jfree.chart$LegendItemCollection#equals(java.lang.Object)": -0.0557814598120403,
        "org.jfree.chart$LegendItemCollection#get(int)": -0.2661300660257371,
        "org.jfree.chart$LegendItemCollection#getItemCount()": 0.17251757972160087,
        "org.jfree.chart$LegendItemCollection#iterator()": 0.0,
        "org.jfree.chart$PaintMap#PaintMap()": 0.23670983771469045,
        "org.jfree.chart$PaintMap#clear()": 0.0,
        "org.jfree.chart$PaintMap#clone()": -0.03152064120537301,
        "org.jfree.chart$PaintMap#containsKey(java.lang.Comparable)": 0.0,
        "org.jfree.chart$PaintMap#equals(java.lang.Object)": -0.13730800916199676,
        "org.jfree.chart$PaintMap#getPaint(java.lang.Comparable)": -0.10607339214640099,
        "org.jfree.chart$PaintMap#put(java.lang.Comparable,java.awt.Paint)": -0.10607339214640099,
        "org.jfree.chart$PaintMap#readObject(java.io.ObjectInputStream)": -0.0939916035300048,
        "org.jfree.chart$PaintMap#writeObject(java.io.ObjectOutputStream)": -0.09399160353000481,
        "org.jfree.chart$StrokeMap#StrokeMap()": 0.24001920542254152,
        "org.jfree.chart$StrokeMap#clear()": 0.0,
        "org.jfree.chart$StrokeMap#clone()": -0.03152064120537301,
        "org.jfree.chart$StrokeMap#containsKey(java.lang.Comparable)": 0.0,
        "org.jfree.chart$StrokeMap#equals(java.lang.Object)": -0.13730800916199676,
        "org.jfree.chart$StrokeMap#getStroke(java.lang.Comparable)": -0.10017464578637125,
        "org.jfree.chart$StrokeMap#put(java.lang.Comparable,java.awt.Stroke)": -0.08053082525790822,
        "org.jfree.chart$StrokeMap#readObject(java.io.ObjectInputStream)": -0.0939916035300048,
        "org.jfree.chart$StrokeMap#writeObject(java.io.ObjectOutputStream)": -0.09399160353000481,
        "org.jfree.chart.axis$Axis#<clinit>()": -0.736389290687602,
        "org.jfree.chart.axis$Axis#Axis(java.lang.String)": -0.7307294553335405,
        "org.jfree.chart.axis$Axis#addChangeListener(org.jfree.chart.event.AxisChangeListener)": -0.5807987329758643,
        "org.jfree.chart.axis$Axis#clone()": -0.1722870948563211,
        "org.jfree.chart.axis$Axis#drawAxisLine(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.20656849764559695,
        "org.jfree.chart.axis$Axis#drawLabel(java.lang.String,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)": -0.2901210510002251,
        "org.jfree.chart.axis$Axis#equals(java.lang.Object)": -0.36149506006471216,
        "org.jfree.chart.axis$Axis#getAxisLinePaint()": -0.2812639924701479,
        "org.jfree.chart.axis$Axis#getAxisLineStroke()": -0.2812639924701479,
        "org.jfree.chart.axis$Axis#getFixedDimension()": -0.290121051000225,
        "org.jfree.chart.axis$Axis#getLabel()": -0.3130259469337453,
        "org.jfree.chart.axis$Axis#getLabelAngle()": -0.290121051000225,
        "org.jfree.chart.axis$Axis#getLabelEnclosure(java.awt.Graphics2D,org.jfree.chart.util.RectangleEdge)": -0.2901210510002251,
        "org.jfree.chart.axis$Axis#getLabelFont()": -0.290121051000225,
        "org.jfree.chart.axis$Axis#getLabelInsets()": -0.290121051000225,
        "org.jfree.chart.axis$Axis#getLabelPaint()": -0.290121051000225,
        "org.jfree.chart.axis$Axis#getLabelToolTip()": 0.0,
        "org.jfree.chart.axis$Axis#getLabelURL()": 0.0,
        "org.jfree.chart.axis$Axis#getPlot()": -0.6495894266383562,
        "org.jfree.chart.axis$Axis#getTickLabelFont()": -0.290121051000225,
        "org.jfree.chart.axis$Axis#getTickLabelInsets()": -0.290121051000225,
        "org.jfree.chart.axis$Axis#getTickLabelPaint()": -0.290121051000225,
        "org.jfree.chart.axis$Axis#getTickMarkInsideLength()": -0.290121051000225,
        "org.jfree.chart.axis$Axis#getTickMarkOutsideLength()": -0.290121051000225,
        "org.jfree.chart.axis$Axis#getTickMarkPaint()": -0.28423396249210775,
        "org.jfree.chart.axis$Axis#getTickMarkStroke()": -0.28423396249210775,
        "org.jfree.chart.axis$Axis#hasListener(java.util.EventListener)": -0.04512489437491829,
        "org.jfree.chart.axis$Axis#isAxisLineVisible()": -0.290121051000225,
        "org.jfree.chart.axis$Axis#isTickLabelsVisible()": -0.290121051000225,
        "org.jfree.chart.axis$Axis#isTickMarksVisible()": -0.2871861627914236,
        "org.jfree.chart.axis$Axis#isVisible()": -0.290121051000225,
        "org.jfree.chart.axis$Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)": -0.6535413980231322,
        "org.jfree.chart.axis$Axis#readObject(java.io.ObjectInputStream)": -0.19929018159679868,
        "org.jfree.chart.axis$Axis#removeChangeListener(org.jfree.chart.event.AxisChangeListener)": -0.15549019065619635,
        "org.jfree.chart.axis$Axis#setAxisLinePaint(java.awt.Paint)": -0.055781459812040295,
        "org.jfree.chart.axis$Axis#setAxisLineStroke(java.awt.Stroke)": -0.04512489437491821,
        "org.jfree.chart.axis$Axis#setAxisLineVisible(boolean)": -0.15109136173257415,
        "org.jfree.chart.axis$Axis#setFixedDimension(double)": -0.03152064120537301,
        "org.jfree.chart.axis$Axis#setLabel(java.lang.String)": -0.06491218980083,
        "org.jfree.chart.axis$Axis#setLabelAngle(double)": -0.0315206412053729,
        "org.jfree.chart.axis$Axis#setLabelFont(java.awt.Font)": -0.0315206412053729,
        "org.jfree.chart.axis$Axis#setLabelInsets(org.jfree.chart.util.RectangleInsets)": -0.0315206412053729,
        "org.jfree.chart.axis$Axis#setLabelPaint(java.awt.Paint)": -0.0315206412053729,
        "org.jfree.chart.axis$Axis#setLabelToolTip(java.lang.String)": -0.0315206412053729,
        "org.jfree.chart.axis$Axis#setLabelURL(java.lang.String)": -0.0315206412053729,
        "org.jfree.chart.axis$Axis#setPlot(org.jfree.chart.plot.Plot)": -0.5807987329758643,
        "org.jfree.chart.axis$Axis#setTickLabelFont(java.awt.Font)": -0.0315206412053729,
        "org.jfree.chart.axis$Axis#setTickLabelInsets(org.jfree.chart.util.RectangleInsets)": -0.0315206412053729,
        "org.jfree.chart.axis$Axis#setTickLabelPaint(java.awt.Paint)": -0.0315206412053729,
        "org.jfree.chart.axis$Axis#setTickLabelsVisible(boolean)": -0.0315206412053729,
        "org.jfree.chart.axis$Axis#setTickMarkInsideLength(float)": -0.0315206412053729,
        "org.jfree.chart.axis$Axis#setTickMarkOutsideLength(float)": -0.0315206412053729,
        "org.jfree.chart.axis$Axis#setTickMarkPaint(java.awt.Paint)": -0.0315206412053729,
        "org.jfree.chart.axis$Axis#setTickMarkStroke(java.awt.Stroke)": -0.0315206412053729,
        "org.jfree.chart.axis$Axis#setTickMarksVisible(boolean)": -0.43556677069446426,
        "org.jfree.chart.axis$Axis#setVisible(boolean)": -0.0315206412053729,
        "org.jfree.chart.axis$Axis#writeObject(java.io.ObjectOutputStream)": -0.19929018159679868,
        "org.jfree.chart.axis$CategoryAxis#CategoryAxis()": -0.0315206412053729,
        "org.jfree.chart.axis$CategoryAxis#CategoryAxis(java.lang.String)": -0.43556677069446426,
        "org.jfree.chart.axis$CategoryAxis#addCategoryLabelToolTip(java.lang.Comparable,java.lang.String)": -0.07306782685288771,
        "org.jfree.chart.axis$CategoryAxis#calculateCategoryGapSize(int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.20295046618068313,
        "org.jfree.chart.axis$CategoryAxis#calculateCategorySize(int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.2136852888186523,
        "org.jfree.chart.axis$CategoryAxis#calculateTextBlockHeight(org.jfree.chart.text.TextBlock,org.jfree.chart.axis.CategoryLabelPosition,java.awt.Graphics2D)": -0.15109136173257415,
        "org.jfree.chart.axis$CategoryAxis#calculateTextBlockWidth(org.jfree.chart.text.TextBlock,org.jfree.chart.axis.CategoryLabelPosition,java.awt.Graphics2D)": -0.12243735987372574,
        "org.jfree.chart.axis$CategoryAxis#clearCategoryLabelToolTips()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#clone()": -0.10017464578637128,
        "org.jfree.chart.axis$CategoryAxis#configure()": -0.3869756336896131,
        "org.jfree.chart.axis$CategoryAxis#createLabel(java.lang.Comparable,float,org.jfree.chart.util.RectangleEdge,java.awt.Graphics2D)": -0.20295046618068313,
        "org.jfree.chart.axis$CategoryAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": -0.20656849764559695,
        "org.jfree.chart.axis$CategoryAxis#drawCategoryLabels(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)": -0.21718745808350026,
        "org.jfree.chart.axis$CategoryAxis#equalPaintMaps(java.util.Map,java.util.Map)": -0.19183443255646404,
        "org.jfree.chart.axis$CategoryAxis#equals(java.lang.Object)": -0.19183443255646399,
        "org.jfree.chart.axis$CategoryAxis#getCategoryEnd(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.20295046618068313,
        "org.jfree.chart.axis$CategoryAxis#getCategoryJava2DCoordinate(org.jfree.chart.axis.CategoryAnchor,int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryLabelPositionOffset()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryLabelPositions()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryLabelToolTip(java.lang.Comparable)": -0.10607339214640099,
        "org.jfree.chart.axis$CategoryAxis#getCategoryMargin()": -0.14660012746525974,
        "org.jfree.chart.axis$CategoryAxis#getCategoryMiddle(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.11172958175989456,
        "org.jfree.chart.axis$CategoryAxis#getCategorySeriesMiddle(java.lang.Comparable,java.lang.Comparable,org.jfree.data.category.CategoryDataset,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryStart(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.20295046618068313,
        "org.jfree.chart.axis$CategoryAxis#getLowerMargin()": -0.21368528881865245,
        "org.jfree.chart.axis$CategoryAxis#getMaximumCategoryLabelLines()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getMaximumCategoryLabelWidthRatio()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getTickLabelFont(java.lang.Comparable)": -0.20295046618068313,
        "org.jfree.chart.axis$CategoryAxis#getTickLabelPaint(java.lang.Comparable)": -0.20295046618068313,
        "org.jfree.chart.axis$CategoryAxis#getUpperMargin()": -0.21368528881865245,
        "org.jfree.chart.axis$CategoryAxis#hashCode()": -0.23085585819364388,
        "org.jfree.chart.axis$CategoryAxis#readObject(java.io.ObjectInputStream)": -0.11172958175989456,
        "org.jfree.chart.axis$CategoryAxis#readPaintMap(java.io.ObjectInputStream)": -0.11172958175989445,
        "org.jfree.chart.axis$CategoryAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.21718745808350026,
        "org.jfree.chart.axis$CategoryAxis#removeCategoryLabelToolTip(java.lang.Comparable)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)": -0.21718745808350026,
        "org.jfree.chart.axis$CategoryAxis#setCategoryLabelPositionOffset(int)": -0.04512489437491821,
        "org.jfree.chart.axis$CategoryAxis#setCategoryLabelPositions(org.jfree.chart.axis.CategoryLabelPositions)": -0.04512489437491821,
        "org.jfree.chart.axis$CategoryAxis#setCategoryMargin(double)": -0.10017464578637128,
        "org.jfree.chart.axis$CategoryAxis#setLowerMargin(double)": -0.04512489437491821,
        "org.jfree.chart.axis$CategoryAxis#setMaximumCategoryLabelLines(int)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#setMaximumCategoryLabelWidthRatio(float)": -0.04512489437491821,
        "org.jfree.chart.axis$CategoryAxis#setTickLabelFont(java.lang.Comparable,java.awt.Font)": -0.07306782685288771,
        "org.jfree.chart.axis$CategoryAxis#setTickLabelPaint(java.lang.Comparable,java.awt.Paint)": -0.08746897581990874,
        "org.jfree.chart.axis$CategoryAxis#setUpperMargin(double)": -0.04512489437491821,
        "org.jfree.chart.axis$CategoryAxis#writeObject(java.io.ObjectOutputStream)": -0.11172958175989456,
        "org.jfree.chart.axis$CategoryAxis#writePaintMap(java.util.Map,java.io.ObjectOutputStream)": -0.11172958175989445,
        "org.jfree.chart.axis$CategoryAxis3D#CategoryAxis3D()": 0.0,
        "org.jfree.chart.axis$CategoryAxis3D#CategoryAxis3D(java.lang.String)": -0.12753564450448468,
        "org.jfree.chart.axis$CategoryAxis3D#clone()": -0.0315206412053729,
        "org.jfree.chart.axis$CategoryAxis3D#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": -0.055781459812040295,
        "org.jfree.chart.axis$CategoryAxis3D#getCategoryJava2DCoordinate(org.jfree.chart.axis.CategoryAnchor,int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$DateAxis#<clinit>()": -0.20656849764559695,
        "org.jfree.chart.axis$DateAxis#DateAxis()": -0.0315206412053729,
        "org.jfree.chart.axis$DateAxis#DateAxis(java.lang.String)": -0.20656849764559695,
        "org.jfree.chart.axis$DateAxis#DateAxis(java.lang.String,java.util.TimeZone)": -0.20656849764559695,
        "org.jfree.chart.axis$DateAxis#autoAdjustRange()": -0.20656849764559695,
        "org.jfree.chart.axis$DateAxis#calculateDateForPosition(org.jfree.data.time.RegularTimePeriod,org.jfree.chart.axis.DateTickMarkPosition)": -0.0557814598120403,
        "org.jfree.chart.axis$DateAxis#calculateHighestVisibleTickValue(org.jfree.chart.axis.DateTickUnit)": 0.0,
        "org.jfree.chart.axis$DateAxis#calculateLowestVisibleTickValue(org.jfree.chart.axis.DateTickUnit)": -0.06491218980083,
        "org.jfree.chart.axis$DateAxis#clone()": -0.0315206412053729,
        "org.jfree.chart.axis$DateAxis#configure()": -0.11717564179433315,
        "org.jfree.chart.axis$DateAxis#createStandardDateTickUnits()": 0.0,
        "org.jfree.chart.axis$DateAxis#createStandardDateTickUnits(java.util.TimeZone)": -0.20656849764559704,
        "org.jfree.chart.axis$DateAxis#dateToJava2D(java.util.Date,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$DateAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": -0.06491218980083,
        "org.jfree.chart.axis$DateAxis#equals(java.lang.Object)": -0.08053082525790804,
        "org.jfree.chart.axis$DateAxis#estimateMaximumTickLabelHeight(java.awt.Graphics2D,org.jfree.chart.axis.DateTickUnit)": 0.0,
        "org.jfree.chart.axis$DateAxis#estimateMaximumTickLabelWidth(java.awt.Graphics2D,org.jfree.chart.axis.DateTickUnit)": -0.06491218980083,
        "org.jfree.chart.axis$DateAxis#getDateFormatOverride()": -0.06491218980083002,
        "org.jfree.chart.axis$DateAxis#getMaximumDate()": -0.08053082525790804,
        "org.jfree.chart.axis$DateAxis#getMinimumDate()": -0.08053082525790804,
        "org.jfree.chart.axis$DateAxis#getTickMarkPosition()": 0.0,
        "org.jfree.chart.axis$DateAxis#getTickUnit()": -0.06491218980083002,
        "org.jfree.chart.axis$DateAxis#getTimeZone()": 0.0,
        "org.jfree.chart.axis$DateAxis#getTimeline()": 0.0,
        "org.jfree.chart.axis$DateAxis#hashCode()": -0.07306782685288771,
        "org.jfree.chart.axis$DateAxis#isHiddenValue(long)": -0.06491218980083,
        "org.jfree.chart.axis$DateAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.0315206412053729,
        "org.jfree.chart.axis$DateAxis#nextStandardDate(java.util.Date,org.jfree.chart.axis.DateTickUnit)": -0.06491218980083,
        "org.jfree.chart.axis$DateAxis#previousStandardDate(java.util.Date,org.jfree.chart.axis.DateTickUnit)": -0.13730800916199676,
        "org.jfree.chart.axis$DateAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.06491218980083,
        "org.jfree.chart.axis$DateAxis#refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.06491218980083,
        "org.jfree.chart.axis$DateAxis#refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$DateAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.06491218980083,
        "org.jfree.chart.axis$DateAxis#selectHorizontalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.06491218980083,
        "org.jfree.chart.axis$DateAxis#selectVerticalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$DateAxis#setDateFormatOverride(java.text.DateFormat)": -0.0315206412053729,
        "org.jfree.chart.axis$DateAxis#setMaximumDate(java.util.Date)": -0.04512489437491821,
        "org.jfree.chart.axis$DateAxis#setMinimumDate(java.util.Date)": -0.04512489437491821,
        "org.jfree.chart.axis$DateAxis#setRange(double,double)": -0.0315206412053729,
        "org.jfree.chart.axis$DateAxis#setRange(java.util.Date,java.util.Date)": -0.12753564450448468,
        "org.jfree.chart.axis$DateAxis#setRange(org.jfree.data.Range)": -0.13248772729377373,
        "org.jfree.chart.axis$DateAxis#setRange(org.jfree.data.Range,boolean,boolean)": -0.20656849764559695,
        "org.jfree.chart.axis$DateAxis#setTickMarkPosition(org.jfree.chart.axis.DateTickMarkPosition)": -0.12243735987372574,
        "org.jfree.chart.axis$DateAxis#setTickUnit(org.jfree.chart.axis.DateTickUnit)": -0.12243735987372574,
        "org.jfree.chart.axis$DateAxis#setTickUnit(org.jfree.chart.axis.DateTickUnit,boolean,boolean)": -0.20656849764559695,
        "org.jfree.chart.axis$DateAxis#setTimeZone(java.util.TimeZone)": 0.0,
        "org.jfree.chart.axis$DateAxis#setTimeline(org.jfree.chart.axis.Timeline)": -0.0315206412053729,
        "org.jfree.chart.axis$DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.06491218980083,
        "org.jfree.chart.axis$DateAxis#zoomRange(double,double)": 0.0,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#DateAxis$DefaultTimeline()": -0.20656849764559704,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#containsDomainRange(java.util.Date,java.util.Date)": 0.0,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#containsDomainRange(long,long)": 0.0,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#containsDomainValue(java.util.Date)": -0.06491218980083002,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#containsDomainValue(long)": 0.0,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#equals(java.lang.Object)": -0.04512489437491829,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#toMillisecond(long)": -0.12243735987372562,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#toTimelineValue(java.util.Date)": -0.07306782685288771,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#toTimelineValue(long)": -0.11717564179433304,
        "org.jfree.chart.axis$NumberAxis#<clinit>()": -0.6256689441743044,
        "org.jfree.chart.axis$NumberAxis#NumberAxis()": -0.06491218980083,
        "org.jfree.chart.axis$NumberAxis#NumberAxis(java.lang.String)": -0.6196306088567592,
        "org.jfree.chart.axis$NumberAxis#autoAdjustRange()": -0.5807987329758643,
        "org.jfree.chart.axis$NumberAxis#calculateHighestVisibleTickValue()": 0.0,
        "org.jfree.chart.axis$NumberAxis#calculateLowestVisibleTickValue()": -0.2842339624921078,
        "org.jfree.chart.axis$NumberAxis#calculateVisibleTickCount()": -0.2842339624921078,
        "org.jfree.chart.axis$NumberAxis#clone()": -0.12243735987372574,
        "org.jfree.chart.axis$NumberAxis#configure()": -0.568308396405437,
        "org.jfree.chart.axis$NumberAxis#createIntegerTickUnits()": -0.14200867150013163,
        "org.jfree.chart.axis$NumberAxis#createIntegerTickUnits(java.util.Locale)": 0.0,
        "org.jfree.chart.axis$NumberAxis#createStandardTickUnits()": -0.6196306088567594,
        "org.jfree.chart.axis$NumberAxis#createStandardTickUnits(java.util.Locale)": 0.0,
        "org.jfree.chart.axis$NumberAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": -0.2752688087952396,
        "org.jfree.chart.axis$NumberAxis#equals(java.lang.Object)": -0.2752688087952396,
        "org.jfree.chart.axis$NumberAxis#estimateMaximumTickLabelHeight(java.awt.Graphics2D)": -0.24726709140992598,
        "org.jfree.chart.axis$NumberAxis#estimateMaximumTickLabelWidth(java.awt.Graphics2D,org.jfree.chart.axis.TickUnit)": -0.20656849764559695,
        "org.jfree.chart.axis$NumberAxis#getAutoRangeIncludesZero()": -0.568308396405437,
        "org.jfree.chart.axis$NumberAxis#getAutoRangeStickyZero()": -0.568308396405437,
        "org.jfree.chart.axis$NumberAxis#getMarkerBand()": 0.0,
        "org.jfree.chart.axis$NumberAxis#getNumberFormatOverride()": -0.2782757745689677,
        "org.jfree.chart.axis$NumberAxis#getRangeType()": 0.0,
        "org.jfree.chart.axis$NumberAxis#getTickUnit()": -0.28423396249210775,
        "org.jfree.chart.axis$NumberAxis#hashCode()": -0.28718616279142356,
        "org.jfree.chart.axis$NumberAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.0315206412053729,
        "org.jfree.chart.axis$NumberAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.2842339624921078,
        "org.jfree.chart.axis$NumberAxis#refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.20656849764559695,
        "org.jfree.chart.axis$NumberAxis#refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.24726709140992598,
        "org.jfree.chart.axis$NumberAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.2842339624921078,
        "org.jfree.chart.axis$NumberAxis#selectHorizontalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.20656849764559695,
        "org.jfree.chart.axis$NumberAxis#selectVerticalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.24726709140992598,
        "org.jfree.chart.axis$NumberAxis#setAutoRangeIncludesZero(boolean)": -0.2568021722696766,
        "org.jfree.chart.axis$NumberAxis#setAutoRangeStickyZero(boolean)": -0.06491218980083,
        "org.jfree.chart.axis$NumberAxis#setMarkerBand(org.jfree.chart.axis.MarkerAxisBand)": 0.0,
        "org.jfree.chart.axis$NumberAxis#setNumberFormatOverride(java.text.NumberFormat)": -0.0315206412053729,
        "org.jfree.chart.axis$NumberAxis#setRangeType(org.jfree.data.RangeType)": -0.0315206412053729,
        "org.jfree.chart.axis$NumberAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit)": -0.0315206412053729,
        "org.jfree.chart.axis$NumberAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit,boolean,boolean)": -0.28718616279142356,
        "org.jfree.chart.axis$NumberAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.2842339624921078,
        "org.jfree.chart.axis$NumberAxis3D#NumberAxis3D()": 0.0,
        "org.jfree.chart.axis$NumberAxis3D#NumberAxis3D(java.lang.String)": -0.12243735987372574,
        "org.jfree.chart.axis$NumberAxis3D#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": -0.055781459812040295,
        "org.jfree.chart.axis$ValueAxis#<clinit>()": -0.6964089574943748,
        "org.jfree.chart.axis$ValueAxis#ValueAxis(java.lang.String,org.jfree.chart.axis.TickUnitSource)": -0.6906256380154175,
        "org.jfree.chart.axis$ValueAxis#calculateAnchorPoint(org.jfree.chart.axis.ValueTick,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.2842339624921078,
        "org.jfree.chart.axis$ValueAxis#centerRange(double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#clone()": -0.13730800916199676,
        "org.jfree.chart.axis$ValueAxis#drawAxisLine(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.28126399247014805,
        "org.jfree.chart.axis$ValueAxis#drawTickMarksAndLabels(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": -0.2901210510002251,
        "org.jfree.chart.axis$ValueAxis#equals(java.lang.Object)": -0.30739015516606477,
        "org.jfree.chart.axis$ValueAxis#findMaximumTickLabelHeight(java.util.List,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)": -0.22065421928654283,
        "org.jfree.chart.axis$ValueAxis#findMaximumTickLabelWidth(java.util.List,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)": -0.24726709140992598,
        "org.jfree.chart.axis$ValueAxis#getAutoRangeMinimumSize()": -0.5787250153736405,
        "org.jfree.chart.axis$ValueAxis#getAutoTickIndex()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getDefaultAutoRange()": -0.2504697042627615,
        "org.jfree.chart.axis$ValueAxis#getDownArrow()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getFixedAutoRange()": -0.5787250153736405,
        "org.jfree.chart.axis$ValueAxis#getLeftArrow()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getLowerBound()": -0.24726709140992598,
        "org.jfree.chart.axis$ValueAxis#getLowerMargin()": -0.5787250153736405,
        "org.jfree.chart.axis$ValueAxis#getRange()": -0.38446704219222116,
        "org.jfree.chart.axis$ValueAxis#getRightArrow()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getStandardTickUnits()": -0.290121051000225,
        "org.jfree.chart.axis$ValueAxis#getUpArrow()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getUpperBound()": -0.24726709140992598,
        "org.jfree.chart.axis$ValueAxis#getUpperMargin()": -0.5787250153736405,
        "org.jfree.chart.axis$ValueAxis#isAutoRange()": -0.6074803840125362,
        "org.jfree.chart.axis$ValueAxis#isAutoTickUnitSelection()": -0.290121051000225,
        "org.jfree.chart.axis$ValueAxis#isInverted()": -0.3045505365653405,
        "org.jfree.chart.axis$ValueAxis#isNegativeArrowVisible()": 0.0,
        "org.jfree.chart.axis$ValueAxis#isPositiveArrowVisible()": 0.0,
        "org.jfree.chart.axis$ValueAxis#isVerticalTickLabels()": -0.290121051000225,
        "org.jfree.chart.axis$ValueAxis#lengthToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.2842339624921078,
        "org.jfree.chart.axis$ValueAxis#readObject(java.io.ObjectInputStream)": -0.18418254594687866,
        "org.jfree.chart.axis$ValueAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)": -0.2901210510002251,
        "org.jfree.chart.axis$ValueAxis#resizeRange(double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#resizeRange(double,double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setAutoRange(boolean)": -0.07306782685288771,
        "org.jfree.chart.axis$ValueAxis#setAutoRange(boolean,boolean)": -0.07306782685288771,
        "org.jfree.chart.axis$ValueAxis#setAutoRangeMinimumSize(double)": -0.21014618269899346,
        "org.jfree.chart.axis$ValueAxis#setAutoRangeMinimumSize(double,boolean)": -0.21014618269899346,
        "org.jfree.chart.axis$ValueAxis#setAutoTickIndex(int)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setAutoTickUnitSelection(boolean)": -0.0315206412053729,
        "org.jfree.chart.axis$ValueAxis#setAutoTickUnitSelection(boolean,boolean)": -0.1466001274652598,
        "org.jfree.chart.axis$ValueAxis#setDefaultAutoRange(org.jfree.data.Range)": -0.11172958175989456,
        "org.jfree.chart.axis$ValueAxis#setDownArrow(java.awt.Shape)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setFixedAutoRange(double)": -0.07306782685288771,
        "org.jfree.chart.axis$ValueAxis#setInverted(boolean)": -0.06491218980083,
        "org.jfree.chart.axis$ValueAxis#setLeftArrow(java.awt.Shape)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setLowerBound(double)": -0.08746897581990874,
        "org.jfree.chart.axis$ValueAxis#setLowerMargin(double)": -0.13730800916199676,
        "org.jfree.chart.axis$ValueAxis#setNegativeArrowVisible(boolean)": -0.0315206412053729,
        "org.jfree.chart.axis$ValueAxis#setPositiveArrowVisible(boolean)": -0.0315206412053729,
        "org.jfree.chart.axis$ValueAxis#setRange(double,double)": -0.11172958175989456,
        "org.jfree.chart.axis$ValueAxis#setRange(org.jfree.data.Range)": -0.13248772729377373,
        "org.jfree.chart.axis$ValueAxis#setRange(org.jfree.data.Range,boolean,boolean)": -0.6416562406308908,
        "org.jfree.chart.axis$ValueAxis#setRangeAboutValue(double,double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setRangeWithMargins(double,double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setRangeWithMargins(org.jfree.data.Range)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setRangeWithMargins(org.jfree.data.Range,boolean,boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setRightArrow(java.awt.Shape)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setStandardTickUnits(org.jfree.chart.axis.TickUnitSource)": -0.12753564450448468,
        "org.jfree.chart.axis$ValueAxis#setUpArrow(java.awt.Shape)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setUpperBound(double)": -0.07306782685288771,
        "org.jfree.chart.axis$ValueAxis#setUpperMargin(double)": -0.13730800916199676,
        "org.jfree.chart.axis$ValueAxis#setVerticalTickLabels(boolean)": -0.0315206412053729,
        "org.jfree.chart.axis$ValueAxis#writeObject(java.io.ObjectOutputStream)": -0.18418254594687866,
        "org.jfree.chart.axis$ValueAxis#zoomRange(double,double)": 0.0,
        "org.jfree.chart.block$AbstractBlock#AbstractBlock()": 1.1803332489761085,
        "org.jfree.chart.block$AbstractBlock#arrange(java.awt.Graphics2D)": -0.0315206412053729,
        "org.jfree.chart.block$AbstractBlock#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": -0.06491218980083,
        "org.jfree.chart.block$AbstractBlock#calculateTotalHeight(double)": 1.5154494634346594,
        "org.jfree.chart.block$AbstractBlock#calculateTotalWidth(double)": 1.5154494634346594,
        "org.jfree.chart.block$AbstractBlock#clone()": -0.12243735987372574,
        "org.jfree.chart.block$AbstractBlock#drawBorder(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 1.5183040173485058,
        "org.jfree.chart.block$AbstractBlock#equals(java.lang.Object)": -0.2842339624921078,
        "org.jfree.chart.block$AbstractBlock#getBounds()": -0.2691965158185461,
        "org.jfree.chart.block$AbstractBlock#getContentXOffset()": 0.0,
        "org.jfree.chart.block$AbstractBlock#getContentYOffset()": 0.0,
        "org.jfree.chart.block$AbstractBlock#getFrame()": 0.17538742599601276,
        "org.jfree.chart.block$AbstractBlock#getHeight()": -0.07306782685288771,
        "org.jfree.chart.block$AbstractBlock#getID()": 0.0,
        "org.jfree.chart.block$AbstractBlock#getMargin()": 0.0,
        "org.jfree.chart.block$AbstractBlock#getPadding()": 0.0,
        "org.jfree.chart.block$AbstractBlock#getWidth()": -0.07306782685288771,
        "org.jfree.chart.block$AbstractBlock#readObject(java.io.ObjectInputStream)": -0.15549019065619651,
        "org.jfree.chart.block$AbstractBlock#setBounds(java.awt.geom.Rectangle2D)": -0.290121051000225,
        "org.jfree.chart.block$AbstractBlock#setFrame(org.jfree.chart.block.BlockFrame)": -0.023085434944114858,
        "org.jfree.chart.block$AbstractBlock#setHeight(double)": -0.15980346450639304,
        "org.jfree.chart.block$AbstractBlock#setID(java.lang.String)": -0.03152064120537301,
        "org.jfree.chart.block$AbstractBlock#setMargin(double,double,double,double)": 0.0,
        "org.jfree.chart.block$AbstractBlock#setMargin(org.jfree.chart.util.RectangleInsets)": -0.023085434944114858,
        "org.jfree.chart.block$AbstractBlock#setPadding(double,double,double,double)": -0.28126399247014805,
        "org.jfree.chart.block$AbstractBlock#setPadding(org.jfree.chart.util.RectangleInsets)": -0.1271537945090676,
        "org.jfree.chart.block$AbstractBlock#setWidth(double)": -0.15980346450639304,
        "org.jfree.chart.block$AbstractBlock#toContentConstraint(org.jfree.chart.block.RectangleConstraint)": 1.5154494634346594,
        "org.jfree.chart.block$AbstractBlock#trimBorder(java.awt.geom.Rectangle2D)": 1.5183040173485058,
        "org.jfree.chart.block$AbstractBlock#trimMargin(java.awt.geom.Rectangle2D)": 1.5183040173485058,
        "org.jfree.chart.block$AbstractBlock#trimPadding(java.awt.geom.Rectangle2D)": 1.5183040173485058,
        "org.jfree.chart.block$AbstractBlock#trimToContentHeight(double)": 1.5183040173485058,
        "org.jfree.chart.block$AbstractBlock#trimToContentHeight(org.jfree.data.Range)": 1.5183040173485058,
        "org.jfree.chart.block$AbstractBlock#trimToContentWidth(double)": 1.5183040173485058,
        "org.jfree.chart.block$AbstractBlock#trimToContentWidth(org.jfree.data.Range)": 1.5183040173485058,
        "org.jfree.chart.block$AbstractBlock#writeObject(java.io.ObjectOutputStream)": -0.15549019065619651,
        "org.jfree.chart.block$BlockBorder#<clinit>()": 1.1743722468342521,
        "org.jfree.chart.block$BlockBorder#BlockBorder()": -0.0315206412053729,
        "org.jfree.chart.block$BlockBorder#BlockBorder(double,double,double,double)": 0.0,
        "org.jfree.chart.block$BlockBorder#BlockBorder(double,double,double,double,java.awt.Paint)": 0.0,
        "org.jfree.chart.block$BlockBorder#BlockBorder(java.awt.Paint)": -0.055781459812040295,
        "org.jfree.chart.block$BlockBorder#BlockBorder(org.jfree.chart.util.RectangleInsets,java.awt.Paint)": -0.17141419079265285,
        "org.jfree.chart.block$BlockBorder#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 1.5183040173485058,
        "org.jfree.chart.block$BlockBorder#equals(java.lang.Object)": -0.2901210510002251,
        "org.jfree.chart.block$BlockBorder#getInsets()": 0.16682340720703037,
        "org.jfree.chart.block$BlockBorder#getPaint()": 0.0,
        "org.jfree.chart.block$BlockBorder#readObject(java.io.ObjectInputStream)": -0.15980346450639304,
        "org.jfree.chart.block$BlockBorder#writeObject(java.io.ObjectOutputStream)": -0.15980346450639304,
        "org.jfree.chart.block$BlockContainer#BlockContainer()": -0.07306782685288771,
        "org.jfree.chart.block$BlockContainer#BlockContainer(org.jfree.chart.block.Arrangement)": 1.2942221635791977,
        "org.jfree.chart.block$BlockContainer#add(org.jfree.chart.block.Block)": -0.2988261363770824,
        "org.jfree.chart.block$BlockContainer#add(org.jfree.chart.block.Block,java.lang.Object)": -0.2988261363770824,
        "org.jfree.chart.block$BlockContainer#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": -0.27827577456896774,
        "org.jfree.chart.block$BlockContainer#clear()": 1.5154494634346594,
        "org.jfree.chart.block$BlockContainer#clone()": -0.0315206412053729,
        "org.jfree.chart.block$BlockContainer#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.block$BlockContainer#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)": 1.5211738636229177,
        "org.jfree.chart.block$BlockContainer#equals(java.lang.Object)": -0.08746897581990874,
        "org.jfree.chart.block$BlockContainer#getArrangement()": 0.0,
        "org.jfree.chart.block$BlockContainer#getBlocks()": -0.27224257189668943,
        "org.jfree.chart.block$BlockContainer#isEmpty()": 0.17538742599601276,
        "org.jfree.chart.block$BlockContainer#setArrangement(org.jfree.chart.block.Arrangement)": 0.17251757972160087,
        "org.jfree.chart.block$BlockParams#BlockParams()": 0.17251757972160087,
        "org.jfree.chart.block$BlockParams#getGenerateEntities()": 0.17251757972160087,
        "org.jfree.chart.block$BlockParams#getTranslateX()": 0.0,
        "org.jfree.chart.block$BlockParams#getTranslateY()": 0.0,
        "org.jfree.chart.block$BlockParams#setGenerateEntities(boolean)": 0.17251757972160087,
        "org.jfree.chart.block$BlockParams#setTranslateX(double)": 0.0,
        "org.jfree.chart.block$BlockParams#setTranslateY(double)": 0.0,
        "org.jfree.chart.block$BlockResult#BlockResult()": 0.17538742599601276,
        "org.jfree.chart.block$BlockResult#getEntityCollection()": 0.24335770417945135,
        "org.jfree.chart.block$BlockResult#setEntityCollection(org.jfree.chart.entity.EntityCollection)": -0.11172958175989445,
        "org.jfree.chart.block$ColumnArrangement#ColumnArrangement()": -0.029721651523753834,
        "org.jfree.chart.block$ColumnArrangement#ColumnArrangement(org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,double,double)": -0.03152064120537301,
        "org.jfree.chart.block$ColumnArrangement#add(org.jfree.chart.block.Block,java.lang.Object)": -0.03152064120537301,
        "org.jfree.chart.block$ColumnArrangement#arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$ColumnArrangement#arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$ColumnArrangement#arrangeNF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$ColumnArrangement#arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)": 0.0,
        "org.jfree.chart.block$ColumnArrangement#arrangeRF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$ColumnArrangement#arrangeRR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$ColumnArrangement#clear()": 0.0,
        "org.jfree.chart.block$ColumnArrangement#equals(java.lang.Object)": -0.13248772729377367,
        "org.jfree.chart.block$FlowArrangement#FlowArrangement()": 1.3094679879937994,
        "org.jfree.chart.block$FlowArrangement#FlowArrangement(org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,double,double)": -0.04287702191767251,
        "org.jfree.chart.block$FlowArrangement#add(org.jfree.chart.block.Block,java.lang.Object)": -0.2691965158185461,
        "org.jfree.chart.block$FlowArrangement#arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": -0.26613006602573697,
        "org.jfree.chart.block$FlowArrangement#arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$FlowArrangement#arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": -0.0315206412053729,
        "org.jfree.chart.block$FlowArrangement#arrangeFR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": -0.0315206412053729,
        "org.jfree.chart.block$FlowArrangement#arrangeNF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$FlowArrangement#arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)": -0.26613006602573697,
        "org.jfree.chart.block$FlowArrangement#arrangeRF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$FlowArrangement#arrangeRN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$FlowArrangement#arrangeRR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": -0.26613006602573697,
        "org.jfree.chart.block$FlowArrangement#clear()": 0.17538742599601276,
        "org.jfree.chart.block$FlowArrangement#equals(java.lang.Object)": -0.14660012746525974,
        "org.jfree.chart.block$LengthConstraintType#<clinit>()": 1.5041772313683057,
        "org.jfree.chart.block$LengthConstraintType#LengthConstraintType(java.lang.String)": 0.15839079374140053,
        "org.jfree.chart.block$LengthConstraintType#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.block$LengthConstraintType#hashCode()": 0.0,
        "org.jfree.chart.block$LengthConstraintType#readResolve()": 0.0,
        "org.jfree.chart.block$LengthConstraintType#toString()": 0.0,
        "org.jfree.chart.block$LineBorder#LineBorder()": 1.324922049705197,
        "org.jfree.chart.block$LineBorder#LineBorder(java.awt.Paint,java.awt.Stroke,org.jfree.chart.util.RectangleInsets)": -0.02530196314310873,
        "org.jfree.chart.block$LineBorder#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 1.5211738636229177,
        "org.jfree.chart.block$LineBorder#equals(java.lang.Object)": -0.11172958175989456,
        "org.jfree.chart.block$LineBorder#getInsets()": 0.17538742599601276,
        "org.jfree.chart.block$LineBorder#getPaint()": -0.2661300660257371,
        "org.jfree.chart.block$LineBorder#getStroke()": -0.2661300660257371,
        "org.jfree.chart.block$LineBorder#readObject(java.io.ObjectInputStream)": -0.10017464578637125,
        "org.jfree.chart.block$LineBorder#writeObject(java.io.ObjectOutputStream)": -0.10017464578637125,
        "org.jfree.chart.block$RectangleConstraint#<clinit>()": 1.5041772313683057,
        "org.jfree.chart.block$RectangleConstraint#RectangleConstraint(double,double)": -0.04512489437491821,
        "org.jfree.chart.block$RectangleConstraint#RectangleConstraint(double,org.jfree.data.Range)": 0.0,
        "org.jfree.chart.block$RectangleConstraint#RectangleConstraint(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)": 0.15839079374140053,
        "org.jfree.chart.block$RectangleConstraint#RectangleConstraint(org.jfree.data.Range,double)": 0.0,
        "org.jfree.chart.block$RectangleConstraint#RectangleConstraint(org.jfree.data.Range,org.jfree.data.Range)": 0.0,
        "org.jfree.chart.block$RectangleConstraint#calculateConstrainedSize(org.jfree.chart.util.Size2D)": -0.07306782685288771,
        "org.jfree.chart.block$RectangleConstraint#getHeight()": 0.16682340720703037,
        "org.jfree.chart.block$RectangleConstraint#getHeightConstraintType()": 0.16399838055339722,
        "org.jfree.chart.block$RectangleConstraint#getHeightRange()": 0.17251757972160087,
        "org.jfree.chart.block$RectangleConstraint#getWidth()": 0.16682340720703037,
        "org.jfree.chart.block$RectangleConstraint#getWidthConstraintType()": 0.16399838055339722,
        "org.jfree.chart.block$RectangleConstraint#getWidthRange()": 0.17251757972160087,
        "org.jfree.chart.block$RectangleConstraint#toFixedHeight(double)": -0.0315206412053729,
        "org.jfree.chart.block$RectangleConstraint#toFixedWidth(double)": -0.04512489437491821,
        "org.jfree.chart.block$RectangleConstraint#toRangeHeight(org.jfree.data.Range)": 0.0,
        "org.jfree.chart.block$RectangleConstraint#toRangeWidth(org.jfree.data.Range)": 0.0,
        "org.jfree.chart.block$RectangleConstraint#toString()": 0.0,
        "org.jfree.chart.block$RectangleConstraint#toUnconstrainedHeight()": 0.0,
        "org.jfree.chart.block$RectangleConstraint#toUnconstrainedWidth()": 0.0,
        "org.jfree.chart.entity$ChartEntity#ChartEntity(java.awt.Shape)": -0.13248772729377373,
        "org.jfree.chart.entity$ChartEntity#ChartEntity(java.awt.Shape,java.lang.String)": -0.13248772729377373,
        "org.jfree.chart.entity$ChartEntity#ChartEntity(java.awt.Shape,java.lang.String,java.lang.String)": -0.19929018159679868,
        "org.jfree.chart.entity$ChartEntity#clone()": -0.08053082525790822,
        "org.jfree.chart.entity$ChartEntity#equals(java.lang.Object)": -0.15109136173257415,
        "org.jfree.chart.entity$ChartEntity#getArea()": 0.0,
        "org.jfree.chart.entity$ChartEntity#getImageMapAreaTag(org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)": 0.0,
        "org.jfree.chart.entity$ChartEntity#getPolyCoords(java.awt.Shape)": 0.0,
        "org.jfree.chart.entity$ChartEntity#getRectCoords(java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.entity$ChartEntity#getShapeCoords()": 0.0,
        "org.jfree.chart.entity$ChartEntity#getShapeType()": 0.0,
        "org.jfree.chart.entity$ChartEntity#getToolTipText()": 0.0,
        "org.jfree.chart.entity$ChartEntity#getURLText()": 0.0,
        "org.jfree.chart.entity$ChartEntity#hashCode()": 0.0,
        "org.jfree.chart.entity$ChartEntity#readObject(java.io.ObjectInputStream)": -0.08053082525790822,
        "org.jfree.chart.entity$ChartEntity#setArea(java.awt.Shape)": -0.07306782685288771,
        "org.jfree.chart.entity$ChartEntity#setToolTipText(java.lang.String)": -0.13248772729377367,
        "org.jfree.chart.entity$ChartEntity#setURLText(java.lang.String)": -0.13248772729377367,
        "org.jfree.chart.entity$ChartEntity#toString()": 0.0,
        "org.jfree.chart.entity$ChartEntity#writeObject(java.io.ObjectOutputStream)": -0.08053082525790822,
        "org.jfree.chart.entity$PieSectionEntity#PieSectionEntity(java.awt.Shape,org.jfree.data.general.PieDataset,int,int,java.lang.Comparable,java.lang.String,java.lang.String)": -0.08053082525790804,
        "org.jfree.chart.entity$PieSectionEntity#getDataset()": 0.0,
        "org.jfree.chart.entity$PieSectionEntity#getPieIndex()": 0.0,
        "org.jfree.chart.entity$PieSectionEntity#getSectionIndex()": 0.0,
        "org.jfree.chart.entity$PieSectionEntity#getSectionKey()": 0.0,
        "org.jfree.chart.entity$PieSectionEntity#setDataset(org.jfree.data.general.PieDataset)": 0.0,
        "org.jfree.chart.entity$PieSectionEntity#setPieIndex(int)": 0.0,
        "org.jfree.chart.entity$PieSectionEntity#setSectionIndex(int)": 0.0,
        "org.jfree.chart.entity$PieSectionEntity#setSectionKey(java.lang.Comparable)": 0.0,
        "org.jfree.chart.entity$PieSectionEntity#toString()": 0.0,
        "org.jfree.chart.event$ChartChangeEvent#ChartChangeEvent(java.lang.Object)": 0.6538207868549425,
        "org.jfree.chart.event$ChartChangeEvent#ChartChangeEvent(java.lang.Object,org.jfree.chart.JFreeChart)": 0.0,
        "org.jfree.chart.event$ChartChangeEvent#ChartChangeEvent(java.lang.Object,org.jfree.chart.JFreeChart,org.jfree.chart.event.ChartChangeEventType)": -0.6919656507719626,
        "org.jfree.chart.event$ChartChangeEvent#getChart()": 0.0,
        "org.jfree.chart.event$ChartChangeEvent#getType()": 0.0,
        "org.jfree.chart.event$ChartChangeEvent#setChart(org.jfree.chart.JFreeChart)": -0.3350345207627272,
        "org.jfree.chart.event$ChartChangeEvent#setType(org.jfree.chart.event.ChartChangeEventType)": -0.6216460639080235,
        "org.jfree.chart.event$ChartChangeEventType#<clinit>()": 0.6538207868549425,
        "org.jfree.chart.event$ChartChangeEventType#ChartChangeEventType(java.lang.String)": -0.6919656507719626,
        "org.jfree.chart.event$ChartChangeEventType#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.event$ChartChangeEventType#hashCode()": 0.0,
        "org.jfree.chart.event$ChartChangeEventType#readResolve()": 0.0,
        "org.jfree.chart.event$ChartChangeEventType#toString()": 0.0,
        "org.jfree.chart.event$ChartProgressEvent#ChartProgressEvent(java.lang.Object,org.jfree.chart.JFreeChart,int,int)": 0.17251757972160087,
        "org.jfree.chart.event$ChartProgressEvent#getChart()": 0.0,
        "org.jfree.chart.event$ChartProgressEvent#getPercent()": 0.0,
        "org.jfree.chart.event$ChartProgressEvent#getType()": 0.0,
        "org.jfree.chart.event$ChartProgressEvent#setChart(org.jfree.chart.JFreeChart)": 0.0,
        "org.jfree.chart.event$ChartProgressEvent#setPercent(int)": 0.0,
        "org.jfree.chart.event$ChartProgressEvent#setType(int)": 0.0,
        "org.jfree.chart.event$PlotChangeEvent#PlotChangeEvent(org.jfree.chart.plot.Plot)": 1.1120799360709461,
        "org.jfree.chart.event$PlotChangeEvent#getPlot()": 0.0,
        "org.jfree.chart.event$TitleChangeEvent#TitleChangeEvent(org.jfree.chart.title.Title)": 1.3138615337255164,
        "org.jfree.chart.event$TitleChangeEvent#getTitle()": 0.0,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#AbstractPieItemLabelGenerator(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)": 0.24001920542254152,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#clone()": -0.10017464578637125,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#createItemArray(org.jfree.data.general.PieDataset,java.lang.Comparable)": -0.055781459812040295,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#equals(java.lang.Object)": -0.17631227992770637,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)": -0.055781459812040295,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#getLabelFormat()": 0.0,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#getNumberFormat()": -0.0557814598120403,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#getPercentFormat()": -0.03152064120537301,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#StandardPieSectionLabelGenerator()": 1.5959130014162852,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#StandardPieSectionLabelGenerator(java.lang.String)": -0.0315206412053729,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#StandardPieSectionLabelGenerator(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)": 1.5959130014162852,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#StandardPieSectionLabelGenerator(java.lang.String,java.util.Locale)": 0.0,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#StandardPieSectionLabelGenerator(java.util.Locale)": 0.0,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#clone()": -0.09399160353000481,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#equals(java.lang.Object)": -0.16403722680653643,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#generateAttributedSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)": 0.0,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)": -0.055781459812040295,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#getAttributedLabel(int)": 0.0,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#setAttributedLabel(int,java.text.AttributedString)": -0.0315206412053729,
        "org.jfree.chart.plot$AbstractPieLabelDistributor#AbstractPieLabelDistributor()": 0.26052827355444264,
        "org.jfree.chart.plot$AbstractPieLabelDistributor#addPieLabelRecord(org.jfree.chart.plot.PieLabelRecord)": -0.04512489437491829,
        "org.jfree.chart.plot$AbstractPieLabelDistributor#clear()": -0.04512489437491829,
        "org.jfree.chart.plot$AbstractPieLabelDistributor#getItemCount()": -0.04512489437491829,
        "org.jfree.chart.plot$AbstractPieLabelDistributor#getPieLabelRecord(int)": -0.04512489437491829,
        "org.jfree.chart.plot$CategoryPlot#<clinit>()": -0.40919612016852014,
        "org.jfree.chart.plot$CategoryPlot#CategoryPlot()": -0.09399160353000481,
        "org.jfree.chart.plot$CategoryPlot#CategoryPlot(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)": -0.40919612016852014,
        "org.jfree.chart.plot$CategoryPlot#addAnnotation(org.jfree.chart.annotations.CategoryAnnotation)": -0.0315206412053729,
        "org.jfree.chart.plot$CategoryPlot#addDomainMarker(int,org.jfree.chart.plot.CategoryMarker,org.jfree.chart.util.Layer)": -0.04512489437491821,
        "org.jfree.chart.plot$CategoryPlot#addDomainMarker(org.jfree.chart.plot.CategoryMarker)": -0.04512489437491821,
        "org.jfree.chart.plot$CategoryPlot#addDomainMarker(org.jfree.chart.plot.CategoryMarker,org.jfree.chart.util.Layer)": -0.04512489437491821,
        "org.jfree.chart.plot$CategoryPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": -0.40919612016852014,
        "org.jfree.chart.plot$CategoryPlot#addRangeMarker(org.jfree.chart.plot.Marker)": -0.04512489437491821,
        "org.jfree.chart.plot$CategoryPlot#addRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": -0.40919612016852014,
        "org.jfree.chart.plot$CategoryPlot#calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.21718745808350026,
        "org.jfree.chart.plot$CategoryPlot#calculateDomainAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)": -0.21718745808350026,
        "org.jfree.chart.plot$CategoryPlot#calculateRangeAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)": -0.21718745808350026,
        "org.jfree.chart.plot$CategoryPlot#clearAnnotations()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#clearDomainAxes()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#clearDomainMarkers()": -0.04512489437491821,
        "org.jfree.chart.plot$CategoryPlot#clearDomainMarkers(int)": -0.04512489437491821,
        "org.jfree.chart.plot$CategoryPlot#clearRangeAxes()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#clearRangeMarkers()": -0.07306782685288771,
        "org.jfree.chart.plot$CategoryPlot#clearRangeMarkers(int)": -0.07306782685288771,
        "org.jfree.chart.plot$CategoryPlot#clone()": -0.055781459812040295,
        "org.jfree.chart.plot$CategoryPlot#configureDomainAxes()": -0.40919612016852014,
        "org.jfree.chart.plot$CategoryPlot#configureRangeAxes()": -0.40919612016852014,
        "org.jfree.chart.plot$CategoryPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)": -0.40919612016852014,
        "org.jfree.chart.plot$CategoryPlot#datasetsMappedToDomainAxis(int)": -0.21718745808350026,
        "org.jfree.chart.plot$CategoryPlot#datasetsMappedToRangeAxis(int)": -0.3944523710079635,
        "org.jfree.chart.plot$CategoryPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)": -0.21718745808350026,
        "org.jfree.chart.plot$CategoryPlot#drawAnnotations(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)": -0.21718745808350026,
        "org.jfree.chart.plot$CategoryPlot#drawAxes(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)": -0.21718745808350026,
        "org.jfree.chart.plot$CategoryPlot#drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.20656849764559695,
        "org.jfree.chart.plot$CategoryPlot#drawDomainGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.21718745808350026,
        "org.jfree.chart.plot$CategoryPlot#drawDomainMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.util.Layer)": -0.21718745808350026,
        "org.jfree.chart.plot$CategoryPlot#drawRangeCrosshair(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation,double,org.jfree.chart.axis.ValueAxis,java.awt.Stroke,java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#drawRangeGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)": -0.21718745808350026,
        "org.jfree.chart.plot$CategoryPlot#drawRangeLine(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,java.awt.Stroke,java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#drawRangeMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.util.Layer)": -0.21718745808350026,
        "org.jfree.chart.plot$CategoryPlot#equals(java.lang.Object)": -0.1992901815967987,
        "org.jfree.chart.plot$CategoryPlot#getAnchorValue()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getAnnotations()": -0.21718745808350026,
        "org.jfree.chart.plot$CategoryPlot#getAxisOffset()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getCategories()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getCategoriesForAxis(org.jfree.chart.axis.CategoryAxis)": -0.21718745808350026,
        "org.jfree.chart.plot$CategoryPlot#getColumnRenderingOrder()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDataRange(org.jfree.chart.axis.ValueAxis)": -0.3944523710079635,
        "org.jfree.chart.plot$CategoryPlot#getDataset()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDataset(int)": -0.40919612016852014,
        "org.jfree.chart.plot$CategoryPlot#getDatasetCount()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDatasetRenderingOrder()": -0.21718745808350026,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxis()": -0.23085585819364388,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxis(int)": -0.23419435695055352,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisCount()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisEdge()": -0.1992901815967987,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisEdge(int)": -0.21718745808350026,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisForDataset(int)": -0.21718745808350026,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisIndex(org.jfree.chart.axis.CategoryAxis)": -0.0315206412053729,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisLocation()": -0.21718745808350026,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisLocation(int)": -0.21718745808350026,
        "org.jfree.chart.plot$CategoryPlot#getDomainGridlinePaint()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainGridlinePosition()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainGridlineStroke()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainMarkers(int,org.jfree.chart.util.Layer)": -0.21718745808350026,
        "org.jfree.chart.plot$CategoryPlot#getDomainMarkers(org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDrawSharedDomainAxis()": -0.03152064120537301,
        "org.jfree.chart.plot$CategoryPlot#getFixedDomainAxisSpace()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getFixedLegendItems()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getFixedRangeAxisSpace()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getIndexOf(org.jfree.chart.renderer.category.CategoryItemRenderer)": -0.0315206412053729,
        "org.jfree.chart.plot$CategoryPlot#getLegendItems()": -0.21718745808350026,
        "org.jfree.chart.plot$CategoryPlot#getOrientation()": -0.2440391448107151,
        "org.jfree.chart.plot$CategoryPlot#getPlotType()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxis()": -0.2930390654388103,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxis(int)": -0.40919612016852014,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisCount()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisEdge()": -0.21718745808350026,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisEdge(int)": -0.21718745808350026,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisForDataset(int)": -0.21718745808350026,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisIndex(org.jfree.chart.axis.ValueAxis)": -0.0315206412053729,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisLocation()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisLocation(int)": -0.21718745808350026,
        "org.jfree.chart.plot$CategoryPlot#getRangeCrosshairPaint()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeCrosshairStroke()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeCrosshairValue()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeGridlinePaint()": -0.21718745808350026,
        "org.jfree.chart.plot$CategoryPlot#getRangeGridlineStroke()": -0.21718745808350026,
        "org.jfree.chart.plot$CategoryPlot#getRangeMarkers(int,org.jfree.chart.util.Layer)": -0.21718745808350026,
        "org.jfree.chart.plot$CategoryPlot#getRangeMarkers(org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRenderer()": -0.2842339624921078,
        "org.jfree.chart.plot$CategoryPlot#getRenderer(int)": -0.28718616279142356,
        "org.jfree.chart.plot$CategoryPlot#getRendererForDataset(org.jfree.data.category.CategoryDataset)": -0.3666641087873155,
        "org.jfree.chart.plot$CategoryPlot#getRowRenderingOrder()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getWeight()": -0.04512489437491829,
        "org.jfree.chart.plot$CategoryPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#isDomainGridlinesVisible()": -0.21718745808350026,
        "org.jfree.chart.plot$CategoryPlot#isDomainZoomable()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#isRangeCrosshairLockedOnData()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#isRangeCrosshairVisible()": -0.22065421928654283,
        "org.jfree.chart.plot$CategoryPlot#isRangeGridlinesVisible()": -0.21718745808350026,
        "org.jfree.chart.plot$CategoryPlot#isRangeZoomable()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#mapDatasetToDomainAxis(int,int)": -0.40919612016852014,
        "org.jfree.chart.plot$CategoryPlot#mapDatasetToRangeAxis(int,int)": -0.40919612016852014,
        "org.jfree.chart.plot$CategoryPlot#readObject(java.io.ObjectInputStream)": -0.09399160353000481,
        "org.jfree.chart.plot$CategoryPlot#removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#removeDomainMarker(org.jfree.chart.plot.Marker)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#removeDomainMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#removeRangeMarker(org.jfree.chart.plot.Marker)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#removeRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.plot.PlotRenderingInfo)": -0.21718745808350026,
        "org.jfree.chart.plot$CategoryPlot#rendererChanged(org.jfree.chart.event.RendererChangeEvent)": -0.1722870948563212,
        "org.jfree.chart.plot$CategoryPlot#setAnchorValue(double)": -0.0315206412053729,
        "org.jfree.chart.plot$CategoryPlot#setAnchorValue(double,boolean)": -0.0315206412053729,
        "org.jfree.chart.plot$CategoryPlot#setAxisOffset(org.jfree.chart.util.RectangleInsets)": -0.0315206412053729,
        "org.jfree.chart.plot$CategoryPlot#setColumnRenderingOrder(org.jfree.chart.util.SortOrder)": -0.10017464578637128,
        "org.jfree.chart.plot$CategoryPlot#setDataset(int,org.jfree.data.category.CategoryDataset)": -0.16403722680653643,
        "org.jfree.chart.plot$CategoryPlot#setDataset(org.jfree.data.category.CategoryDataset)": -0.12753564450448468,
        "org.jfree.chart.plot$CategoryPlot#setDatasetRenderingOrder(org.jfree.chart.plot.DatasetRenderingOrder)": -0.0315206412053729,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxes(org.jfree.chart.axis.CategoryAxis[])": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxis(int,org.jfree.chart.axis.CategoryAxis)": -0.09399160353000481,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxis(int,org.jfree.chart.axis.CategoryAxis,boolean)": -0.09399160353000481,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxis(org.jfree.chart.axis.CategoryAxis)": -0.08053082525790804,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation)": -0.0315206412053729,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)": -0.40919612016852014,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxisLocation(org.jfree.chart.axis.AxisLocation)": -0.0315206412053729,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)": -0.40919612016852014,
        "org.jfree.chart.plot$CategoryPlot#setDomainGridlinePaint(java.awt.Paint)": -0.0315206412053729,
        "org.jfree.chart.plot$CategoryPlot#setDomainGridlinePosition(org.jfree.chart.axis.CategoryAnchor)": -0.0315206412053729,
        "org.jfree.chart.plot$CategoryPlot#setDomainGridlineStroke(java.awt.Stroke)": -0.0315206412053729,
        "org.jfree.chart.plot$CategoryPlot#setDomainGridlinesVisible(boolean)": -0.08746897581990874,
        "org.jfree.chart.plot$CategoryPlot#setDrawSharedDomainAxis(boolean)": -0.0315206412053729,
        "org.jfree.chart.plot$CategoryPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace)": -0.03152064120537301,
        "org.jfree.chart.plot$CategoryPlot#setFixedLegendItems(org.jfree.chart.LegendItemCollection)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace)": -0.03152064120537301,
        "org.jfree.chart.plot$CategoryPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)": -0.30455053656534053,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxes(org.jfree.chart.axis.ValueAxis[])": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis)": -0.11172958175989456,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis,boolean)": -0.11172958175989456,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxis(org.jfree.chart.axis.ValueAxis)": -0.09399160353000481,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation)": -0.0315206412053729,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)": -0.40919612016852014,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxisLocation(org.jfree.chart.axis.AxisLocation)": -0.0315206412053729,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)": -0.40919612016852014,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairLockedOnData(boolean)": -0.0315206412053729,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairPaint(java.awt.Paint)": -0.04512489437491821,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairStroke(java.awt.Stroke)": -0.0315206412053729,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairValue(double)": -0.0315206412053729,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairValue(double,boolean)": -0.0315206412053729,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairVisible(boolean)": -0.0315206412053729,
        "org.jfree.chart.plot$CategoryPlot#setRangeGridlinePaint(java.awt.Paint)": -0.0315206412053729,
        "org.jfree.chart.plot$CategoryPlot#setRangeGridlineStroke(java.awt.Stroke)": -0.0315206412053729,
        "org.jfree.chart.plot$CategoryPlot#setRangeGridlinesVisible(boolean)": -0.0315206412053729,
        "org.jfree.chart.plot$CategoryPlot#setRenderer(int,org.jfree.chart.renderer.category.CategoryItemRenderer)": -0.06491218980083,
        "org.jfree.chart.plot$CategoryPlot#setRenderer(int,org.jfree.chart.renderer.category.CategoryItemRenderer,boolean)": -0.08053082525790804,
        "org.jfree.chart.plot$CategoryPlot#setRenderer(org.jfree.chart.renderer.category.CategoryItemRenderer)": -0.055781459812040295,
        "org.jfree.chart.plot$CategoryPlot#setRenderer(org.jfree.chart.renderer.category.CategoryItemRenderer,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRenderers(org.jfree.chart.renderer.category.CategoryItemRenderer[])": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRowRenderingOrder(org.jfree.chart.util.SortOrder)": -0.07306782685288771,
        "org.jfree.chart.plot$CategoryPlot#setWeight(int)": -0.10017464578637125,
        "org.jfree.chart.plot$CategoryPlot#writeObject(java.io.ObjectOutputStream)": -0.0939916035300048,
        "org.jfree.chart.plot$CategoryPlot#zoom(double)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#zoomDomainAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)": 0.0,
        "org.jfree.chart.plot$DefaultDrawingSupplier#<clinit>()": 1.083610709312398,
        "org.jfree.chart.plot$DefaultDrawingSupplier#DefaultDrawingSupplier()": 1.083610709312398,
        "org.jfree.chart.plot$DefaultDrawingSupplier#DefaultDrawingSupplier(java.awt.Paint[],java.awt.Paint[],java.awt.Paint[],java.awt.Stroke[],java.awt.Stroke[],java.awt.Shape[])": 1.083610709312398,
        "org.jfree.chart.plot$DefaultDrawingSupplier#DefaultDrawingSupplier(java.awt.Paint[],java.awt.Paint[],java.awt.Stroke[],java.awt.Stroke[],java.awt.Shape[])": -0.04512489437491821,
        "org.jfree.chart.plot$DefaultDrawingSupplier#clone()": -0.18027626401316543,
        "org.jfree.chart.plot$DefaultDrawingSupplier#createStandardSeriesShapes()": 1.083610709312398,
        "org.jfree.chart.plot$DefaultDrawingSupplier#equalShapes(java.awt.Shape[],java.awt.Shape[])": -0.34308645035632224,
        "org.jfree.chart.plot$DefaultDrawingSupplier#equals(java.lang.Object)": -0.34308645035632224,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextFillPaint()": -0.03152064120537301,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextOutlinePaint()": -0.04512489437491829,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextOutlineStroke()": -0.03152064120537301,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextPaint()": -0.3296080763775784,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextShape()": -0.16403722680653643,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextStroke()": -0.03152064120537301,
        "org.jfree.chart.plot$DefaultDrawingSupplier#intArray(double,double,double)": -0.26217572831450686,
        "org.jfree.chart.plot$DefaultDrawingSupplier#intArray(double,double,double,double)": -0.26217572831450686,
        "org.jfree.chart.plot$DefaultDrawingSupplier#readObject(java.io.ObjectInputStream)": -0.20295046618068313,
        "org.jfree.chart.plot$DefaultDrawingSupplier#writeObject(java.io.ObjectOutputStream)": -0.20295046618068313,
        "org.jfree.chart.plot$Marker#Marker()": -0.19183443255646399,
        "org.jfree.chart.plot$Marker#Marker(java.awt.Paint)": -0.19183443255646399,
        "org.jfree.chart.plot$Marker#Marker(java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)": -0.486147597742279,
        "org.jfree.chart.plot$Marker#addChangeListener(org.jfree.chart.event.MarkerChangeListener)": -0.46118504389699,
        "org.jfree.chart.plot$Marker#clone()": -0.0557814598120403,
        "org.jfree.chart.plot$Marker#equals(java.lang.Object)": -0.1722870948563212,
        "org.jfree.chart.plot$Marker#getAlpha()": -0.20656849764559704,
        "org.jfree.chart.plot$Marker#getLabel()": -0.21014618269899343,
        "org.jfree.chart.plot$Marker#getLabelAnchor()": -0.21014618269899343,
        "org.jfree.chart.plot$Marker#getLabelFont()": -0.03152064120537301,
        "org.jfree.chart.plot$Marker#getLabelOffset()": -0.03152064120537301,
        "org.jfree.chart.plot$Marker#getLabelOffsetType()": -0.03152064120537301,
        "org.jfree.chart.plot$Marker#getLabelPaint()": -0.03152064120537301,
        "org.jfree.chart.plot$Marker#getLabelTextAnchor()": -0.03152064120537301,
        "org.jfree.chart.plot$Marker#getListeners(java.lang.Class)": -0.08053082525790822,
        "org.jfree.chart.plot$Marker#getOutlinePaint()": -0.07306782685288771,
        "org.jfree.chart.plot$Marker#getOutlineStroke()": -0.04512489437491829,
        "org.jfree.chart.plot$Marker#getPaint()": -0.21718745808350026,
        "org.jfree.chart.plot$Marker#getStroke()": -0.20656849764559704,
        "org.jfree.chart.plot$Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)": -0.20295046618068313,
        "org.jfree.chart.plot$Marker#readObject(java.io.ObjectInputStream)": -0.12243735987372562,
        "org.jfree.chart.plot$Marker#removeChangeListener(org.jfree.chart.event.MarkerChangeListener)": -0.10017464578637125,
        "org.jfree.chart.plot$Marker#setAlpha(float)": -0.04512489437491821,
        "org.jfree.chart.plot$Marker#setLabel(java.lang.String)": -0.04512489437491821,
        "org.jfree.chart.plot$Marker#setLabelAnchor(org.jfree.chart.util.RectangleAnchor)": -0.04512489437491821,
        "org.jfree.chart.plot$Marker#setLabelFont(java.awt.Font)": -0.04512489437491821,
        "org.jfree.chart.plot$Marker#setLabelOffset(org.jfree.chart.util.RectangleInsets)": -0.04512489437491821,
        "org.jfree.chart.plot$Marker#setLabelOffsetType(org.jfree.chart.util.LengthAdjustmentType)": -0.13730800916199676,
        "org.jfree.chart.plot$Marker#setLabelPaint(java.awt.Paint)": -0.04512489437491821,
        "org.jfree.chart.plot$Marker#setLabelTextAnchor(org.jfree.chart.text.TextAnchor)": -0.04512489437491821,
        "org.jfree.chart.plot$Marker#setOutlinePaint(java.awt.Paint)": -0.04512489437491821,
        "org.jfree.chart.plot$Marker#setOutlineStroke(java.awt.Stroke)": -0.04512489437491821,
        "org.jfree.chart.plot$Marker#setPaint(java.awt.Paint)": -0.07306782685288771,
        "org.jfree.chart.plot$Marker#setStroke(java.awt.Stroke)": -0.04512489437491821,
        "org.jfree.chart.plot$Marker#writeObject(java.io.ObjectOutputStream)": -0.12243735987372562,
        "org.jfree.chart.plot$MultiplePiePlot#MultiplePiePlot()": -0.04512489437491821,
        "org.jfree.chart.plot$MultiplePiePlot#MultiplePiePlot(org.jfree.data.category.CategoryDataset)": -0.055781459812040295,
        "org.jfree.chart.plot$MultiplePiePlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#equals(java.lang.Object)": -0.055781459812040295,
        "org.jfree.chart.plot$MultiplePiePlot#getAggregatedItemsKey()": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#getAggregatedItemsPaint()": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#getDataExtractOrder()": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#getDataset()": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#getLegendItems()": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#getLimit()": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#getPieChart()": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#getPlotType()": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#prefetchSectionPaints()": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#readObject(java.io.ObjectInputStream)": -0.03152064120537301,
        "org.jfree.chart.plot$MultiplePiePlot#setAggregatedItemsKey(java.lang.Comparable)": -0.0315206412053729,
        "org.jfree.chart.plot$MultiplePiePlot#setAggregatedItemsPaint(java.awt.Paint)": -0.04512489437491821,
        "org.jfree.chart.plot$MultiplePiePlot#setDataExtractOrder(org.jfree.chart.util.TableOrder)": -0.0315206412053729,
        "org.jfree.chart.plot$MultiplePiePlot#setDataset(org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#setLimit(double)": -0.0315206412053729,
        "org.jfree.chart.plot$MultiplePiePlot#setPieChart(org.jfree.chart.JFreeChart)": -0.0315206412053729,
        "org.jfree.chart.plot$MultiplePiePlot#writeObject(java.io.ObjectOutputStream)": -0.03152064120537301,
        "org.jfree.chart.plot$PieLabelDistributor#PieLabelDistributor(int)": 1.6063147111813476,
        "org.jfree.chart.plot$PieLabelDistributor#adjustDownwards(double,double)": 0.0,
        "org.jfree.chart.plot$PieLabelDistributor#adjustInwards()": -0.0315206412053729,
        "org.jfree.chart.plot$PieLabelDistributor#adjustUpwards(double,double)": 0.0,
        "org.jfree.chart.plot$PieLabelDistributor#distributeLabels(double,double)": -0.04512489437491821,
        "org.jfree.chart.plot$PieLabelDistributor#isOverlap()": -0.04512489437491821,
        "org.jfree.chart.plot$PieLabelDistributor#sort()": -0.04512489437491829,
        "org.jfree.chart.plot$PieLabelDistributor#spreadEvenly(double,double)": 0.0,
        "org.jfree.chart.plot$PieLabelDistributor#toString()": 0.0,
        "org.jfree.chart.plot$PiePlot#<clinit>()": 1.6063147111813476,
        "org.jfree.chart.plot$PiePlot#PiePlot()": -0.11172958175989456,
        "org.jfree.chart.plot$PiePlot#PiePlot(org.jfree.data.general.PieDataset)": 1.6063147111813476,
        "org.jfree.chart.plot$PiePlot#clone()": -0.08746897581990874,
        "org.jfree.chart.plot$PiePlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)": -0.0315206412053729,
        "org.jfree.chart.plot$PiePlot#drawItem(java.awt.Graphics2D,int,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState,int)": -0.0315206412053729,
        "org.jfree.chart.plot$PiePlot#drawLabels(java.awt.Graphics2D,java.util.List,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState)": -0.04512489437491821,
        "org.jfree.chart.plot$PiePlot#drawLeftLabel(java.awt.Graphics2D,org.jfree.chart.plot.PiePlotState,org.jfree.chart.plot.PieLabelRecord)": -0.04512489437491821,
        "org.jfree.chart.plot$PiePlot#drawLeftLabels(org.jfree.data.KeyedValues,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,float,org.jfree.chart.plot.PiePlotState)": -0.04512489437491821,
        "org.jfree.chart.plot$PiePlot#drawPie(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)": -0.0315206412053729,
        "org.jfree.chart.plot$PiePlot#drawRightLabel(java.awt.Graphics2D,org.jfree.chart.plot.PiePlotState,org.jfree.chart.plot.PieLabelRecord)": -0.04512489437491821,
        "org.jfree.chart.plot$PiePlot#drawRightLabels(org.jfree.data.KeyedValues,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,float,org.jfree.chart.plot.PiePlotState)": -0.04512489437491821,
        "org.jfree.chart.plot$PiePlot#drawSimpleLabels(java.awt.Graphics2D,java.util.List,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState)": 0.0,
        "org.jfree.chart.plot$PiePlot#equals(java.lang.Object)": -0.15549019065619635,
        "org.jfree.chart.plot$PiePlot#getArcBounds(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,double,double,double)": -0.03152064120537301,
        "org.jfree.chart.plot$PiePlot#getBaseSectionOutlinePaint()": 0.0,
        "org.jfree.chart.plot$PiePlot#getBaseSectionOutlineStroke()": 0.0,
        "org.jfree.chart.plot$PiePlot#getBaseSectionPaint()": -0.03152064120537301,
        "org.jfree.chart.plot$PiePlot#getDataset()": 0.4011457355202074,
        "org.jfree.chart.plot$PiePlot#getDirection()": -0.03152064120537301,
        "org.jfree.chart.plot$PiePlot#getExplodePercent(java.lang.Comparable)": -0.04512489437491829,
        "org.jfree.chart.plot$PiePlot#getIgnoreNullValues()": 0.0,
        "org.jfree.chart.plot$PiePlot#getIgnoreZeroValues()": 0.0,
        "org.jfree.chart.plot$PiePlot#getInteriorGap()": 0.4426929211677221,
        "org.jfree.chart.plot$PiePlot#getLabelBackgroundPaint()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLabelDistributor()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLabelFont()": -0.04512489437491829,
        "org.jfree.chart.plot$PiePlot#getLabelGap()": 0.4426929211677221,
        "org.jfree.chart.plot$PiePlot#getLabelGenerator()": 0.4426929211677221,
        "org.jfree.chart.plot$PiePlot#getLabelLinkMargin()": -0.03152064120537301,
        "org.jfree.chart.plot$PiePlot#getLabelLinkPaint()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLabelLinkStroke()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLabelLinksVisible()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLabelOutlinePaint()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLabelOutlineStroke()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLabelPadding()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLabelPaint()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLabelShadowPaint()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLegendItemShape()": -0.0557814598120403,
        "org.jfree.chart.plot$PiePlot#getLegendItems()": 1.7642185401879598,
        "org.jfree.chart.plot$PiePlot#getLegendLabelGenerator()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLegendLabelToolTipGenerator()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLegendLabelURLGenerator()": -0.03152064120537301,
        "org.jfree.chart.plot$PiePlot#getMaximumExplodePercent()": -0.04512489437491829,
        "org.jfree.chart.plot$PiePlot#getMaximumLabelWidth()": 0.4426929211677221,
        "org.jfree.chart.plot$PiePlot#getMinimumArcAngleToDraw()": -0.04512489437491829,
        "org.jfree.chart.plot$PiePlot#getPieIndex()": 0.0,
        "org.jfree.chart.plot$PiePlot#getPlotType()": 0.0,
        "org.jfree.chart.plot$PiePlot#getSectionKey(int)": -0.04512489437491829,
        "org.jfree.chart.plot$PiePlot#getSectionOutlinePaint(java.lang.Comparable)": 0.0,
        "org.jfree.chart.plot$PiePlot#getSectionOutlineStroke(java.lang.Comparable)": 0.0,
        "org.jfree.chart.plot$PiePlot#getSectionOutlinesVisible()": 0.0,
        "org.jfree.chart.plot$PiePlot#getSectionPaint(java.lang.Comparable)": 0.0,
        "org.jfree.chart.plot$PiePlot#getShadowPaint()": 0.0,
        "org.jfree.chart.plot$PiePlot#getShadowXOffset()": 0.0,
        "org.jfree.chart.plot$PiePlot#getShadowYOffset()": 0.0,
        "org.jfree.chart.plot$PiePlot#getSimpleLabelOffset()": 0.0,
        "org.jfree.chart.plot$PiePlot#getSimpleLabels()": -0.03152064120537301,
        "org.jfree.chart.plot$PiePlot#getStartAngle()": -0.04512489437491829,
        "org.jfree.chart.plot$PiePlot#getToolTipGenerator()": 0.0,
        "org.jfree.chart.plot$PiePlot#getURLGenerator()": -0.03152064120537301,
        "org.jfree.chart.plot$PiePlot#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlot,java.lang.Integer,org.jfree.chart.plot.PlotRenderingInfo)": 1.7748751056250818,
        "org.jfree.chart.plot$PiePlot#isCircular()": 0.4290886679981768,
        "org.jfree.chart.plot$PiePlot#lookupSectionOutlinePaint(java.lang.Comparable)": -0.055781459812040295,
        "org.jfree.chart.plot$PiePlot#lookupSectionOutlinePaint(java.lang.Comparable,boolean)": -0.055781459812040295,
        "org.jfree.chart.plot$PiePlot#lookupSectionOutlineStroke(java.lang.Comparable)": -0.055781459812040295,
        "org.jfree.chart.plot$PiePlot#lookupSectionOutlineStroke(java.lang.Comparable,boolean)": -0.055781459812040295,
        "org.jfree.chart.plot$PiePlot#lookupSectionPaint(java.lang.Comparable)": -0.0315206412053729,
        "org.jfree.chart.plot$PiePlot#lookupSectionPaint(java.lang.Comparable,boolean)": -0.055781459812040295,
        "org.jfree.chart.plot$PiePlot#readObject(java.io.ObjectInputStream)": -0.08053082525790822,
        "org.jfree.chart.plot$PiePlot#setBaseSectionOutlinePaint(java.awt.Paint)": -0.0315206412053729,
        "org.jfree.chart.plot$PiePlot#setBaseSectionOutlineStroke(java.awt.Stroke)": -0.0315206412053729,
        "org.jfree.chart.plot$PiePlot#setBaseSectionPaint(java.awt.Paint)": -0.04512489437491821,
        "org.jfree.chart.plot$PiePlot#setCircular(boolean)": -0.0315206412053729,
        "org.jfree.chart.plot$PiePlot#setCircular(boolean,boolean)": 1.739469174742092,
        "org.jfree.chart.plot$PiePlot#setDataset(org.jfree.data.general.PieDataset)": -0.04512489437491821,
        "org.jfree.chart.plot$PiePlot#setDirection(org.jfree.chart.util.Rotation)": -0.0315206412053729,
        "org.jfree.chart.plot$PiePlot#setExplodePercent(java.lang.Comparable,double)": -0.0315206412053729,
        "org.jfree.chart.plot$PiePlot#setIgnoreNullValues(boolean)": -0.04512489437491821,
        "org.jfree.chart.plot$PiePlot#setIgnoreZeroValues(boolean)": -0.04512489437491821,
        "org.jfree.chart.plot$PiePlot#setInteriorGap(double)": -0.0315206412053729,
        "org.jfree.chart.plot$PiePlot#setLabelBackgroundPaint(java.awt.Paint)": -0.0315206412053729,
        "org.jfree.chart.plot$PiePlot#setLabelDistributor(org.jfree.chart.plot.AbstractPieLabelDistributor)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLabelFont(java.awt.Font)": -0.0315206412053729,
        "org.jfree.chart.plot$PiePlot#setLabelGap(double)": -0.0315206412053729,
        "org.jfree.chart.plot$PiePlot#setLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator)": -0.13730800916199676,
        "org.jfree.chart.plot$PiePlot#setLabelLinkMargin(double)": -0.0315206412053729,
        "org.jfree.chart.plot$PiePlot#setLabelLinkPaint(java.awt.Paint)": -0.0315206412053729,
        "org.jfree.chart.plot$PiePlot#setLabelLinkStroke(java.awt.Stroke)": -0.0315206412053729,
        "org.jfree.chart.plot$PiePlot#setLabelLinksVisible(boolean)": -0.0315206412053729,
        "org.jfree.chart.plot$PiePlot#setLabelOutlinePaint(java.awt.Paint)": -0.0315206412053729,
        "org.jfree.chart.plot$PiePlot#setLabelOutlineStroke(java.awt.Stroke)": -0.0315206412053729,
        "org.jfree.chart.plot$PiePlot#setLabelPadding(org.jfree.chart.util.RectangleInsets)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLabelPaint(java.awt.Paint)": -0.0315206412053729,
        "org.jfree.chart.plot$PiePlot#setLabelShadowPaint(java.awt.Paint)": -0.0315206412053729,
        "org.jfree.chart.plot$PiePlot#setLegendItemShape(java.awt.Shape)": -0.04512489437491821,
        "org.jfree.chart.plot$PiePlot#setLegendLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator)": -0.055781459812040295,
        "org.jfree.chart.plot$PiePlot#setLegendLabelToolTipGenerator(org.jfree.chart.labels.PieSectionLabelGenerator)": -0.04512489437491821,
        "org.jfree.chart.plot$PiePlot#setLegendLabelURLGenerator(org.jfree.chart.urls.PieURLGenerator)": -0.04512489437491821,
        "org.jfree.chart.plot$PiePlot#setMaximumLabelWidth(double)": -0.0315206412053729,
        "org.jfree.chart.plot$PiePlot#setMinimumArcAngleToDraw(double)": -0.03152064120537301,
        "org.jfree.chart.plot$PiePlot#setPieIndex(int)": -0.03152064120537301,
        "org.jfree.chart.plot$PiePlot#setSectionOutlinePaint(java.lang.Comparable,java.awt.Paint)": -0.0315206412053729,
        "org.jfree.chart.plot$PiePlot#setSectionOutlineStroke(java.lang.Comparable,java.awt.Stroke)": -0.0315206412053729,
        "org.jfree.chart.plot$PiePlot#setSectionOutlinesVisible(boolean)": -0.0315206412053729,
        "org.jfree.chart.plot$PiePlot#setSectionPaint(java.lang.Comparable,java.awt.Paint)": -0.0315206412053729,
        "org.jfree.chart.plot$PiePlot#setShadowPaint(java.awt.Paint)": -0.0315206412053729,
        "org.jfree.chart.plot$PiePlot#setShadowXOffset(double)": -0.0315206412053729,
        "org.jfree.chart.plot$PiePlot#setShadowYOffset(double)": -0.0315206412053729,
        "org.jfree.chart.plot$PiePlot#setSimpleLabelOffset(org.jfree.chart.util.RectangleInsets)": 0.0,
        "org.jfree.chart.plot$PiePlot#setSimpleLabels(boolean)": 0.0,
        "org.jfree.chart.plot$PiePlot#setStartAngle(double)": -0.0315206412053729,
        "org.jfree.chart.plot$PiePlot#setToolTipGenerator(org.jfree.chart.labels.PieToolTipGenerator)": -0.14200867150013158,
        "org.jfree.chart.plot$PiePlot#setURLGenerator(org.jfree.chart.urls.PieURLGenerator)": -0.07306782685288771,
        "org.jfree.chart.plot$PiePlot#writeObject(java.io.ObjectOutputStream)": -0.08053082525790822,
        "org.jfree.chart.plot$PiePlot3D#PiePlot3D()": -0.0315206412053729,
        "org.jfree.chart.plot$PiePlot3D#PiePlot3D(org.jfree.data.general.PieDataset)": 1.7469321731471124,
        "org.jfree.chart.plot$PiePlot3D#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)": 1.788479358794627,
        "org.jfree.chart.plot$PiePlot3D#drawSide(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Arc2D,java.awt.geom.Area,java.awt.geom.Area,java.awt.Paint,java.awt.Paint,java.awt.Stroke,boolean,boolean)": -0.0315206412053729,
        "org.jfree.chart.plot$PiePlot3D#equals(java.lang.Object)": -0.06491218980083,
        "org.jfree.chart.plot$PiePlot3D#getDarkerSides()": -0.03152064120537301,
        "org.jfree.chart.plot$PiePlot3D#getDepthFactor()": 0.0,
        "org.jfree.chart.plot$PiePlot3D#getPlotType()": 0.0,
        "org.jfree.chart.plot$PiePlot3D#isAngleAtBack(double)": -0.03152064120537301,
        "org.jfree.chart.plot$PiePlot3D#isAngleAtFront(double)": -0.03152064120537301,
        "org.jfree.chart.plot$PiePlot3D#setDarkerSides(boolean)": -0.0315206412053729,
        "org.jfree.chart.plot$PiePlot3D#setDepthFactor(double)": -0.0315206412053729,
        "org.jfree.chart.plot$PiePlotState#PiePlotState(org.jfree.chart.plot.PlotRenderingInfo)": 1.7748751056250818,
        "org.jfree.chart.plot$PiePlotState#getExplodedPieArea()": -0.03152064120537301,
        "org.jfree.chart.plot$PiePlotState#getLatestAngle()": -0.03152064120537301,
        "org.jfree.chart.plot$PiePlotState#getLinkArea()": -0.04512489437491829,
        "org.jfree.chart.plot$PiePlotState#getPassesRequired()": -0.03152064120537301,
        "org.jfree.chart.plot$PiePlotState#getPieArea()": -0.03152064120537301,
        "org.jfree.chart.plot$PiePlotState#getPieCenterX()": -0.04512489437491829,
        "org.jfree.chart.plot$PiePlotState#getPieCenterY()": -0.04512489437491829,
        "org.jfree.chart.plot$PiePlotState#getPieHRadius()": -0.04512489437491829,
        "org.jfree.chart.plot$PiePlotState#getPieWRadius()": -0.04512489437491829,
        "org.jfree.chart.plot$PiePlotState#getTotal()": -0.03152064120537301,
        "org.jfree.chart.plot$PiePlotState#setExplodedPieArea(java.awt.geom.Rectangle2D)": -0.04512489437491829,
        "org.jfree.chart.plot$PiePlotState#setLatestAngle(double)": -0.04512489437491829,
        "org.jfree.chart.plot$PiePlotState#setLinkArea(java.awt.geom.Rectangle2D)": -0.04512489437491829,
        "org.jfree.chart.plot$PiePlotState#setPassesRequired(int)": 0.4290886679981768,
        "org.jfree.chart.plot$PiePlotState#setPieArea(java.awt.geom.Rectangle2D)": -0.04512489437491829,
        "org.jfree.chart.plot$PiePlotState#setPieCenterX(double)": -0.04512489437491829,
        "org.jfree.chart.plot$PiePlotState#setPieCenterY(double)": -0.04512489437491829,
        "org.jfree.chart.plot$PiePlotState#setPieHRadius(double)": -0.04512489437491829,
        "org.jfree.chart.plot$PiePlotState#setPieWRadius(double)": -0.04512489437491829,
        "org.jfree.chart.plot$PiePlotState#setTotal(double)": -0.04512489437491829,
        "org.jfree.chart.plot$Plot#<clinit>()": 1.0892705446664595,
        "org.jfree.chart.plot$Plot#Plot()": 1.0892705446664595,
        "org.jfree.chart.plot$Plot#addChangeListener(org.jfree.chart.event.PlotChangeListener)": 1.2371306894782235,
        "org.jfree.chart.plot$Plot#axisChanged(org.jfree.chart.event.AxisChangeEvent)": -0.11717564179433315,
        "org.jfree.chart.plot$Plot#clone()": -0.1763122799277064,
        "org.jfree.chart.plot$Plot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)": -0.10017464578637128,
        "org.jfree.chart.plot$Plot#drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 1.75508781019917,
        "org.jfree.chart.plot$Plot#drawBackgroundImage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.18409251137287008,
        "org.jfree.chart.plot$Plot#drawNoDataMessage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.10607339214640099,
        "org.jfree.chart.plot$Plot#drawOutline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.290121051000225,
        "org.jfree.chart.plot$Plot#equals(java.lang.Object)": -0.33503452076272716,
        "org.jfree.chart.plot$Plot#fillBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 1.75508781019917,
        "org.jfree.chart.plot$Plot#fillBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation)": 1.5298789489997748,
        "org.jfree.chart.plot$Plot#getBackgroundAlpha()": -0.0557814598120403,
        "org.jfree.chart.plot$Plot#getBackgroundImage()": -0.0557814598120403,
        "org.jfree.chart.plot$Plot#getBackgroundImageAlignment()": 0.0,
        "org.jfree.chart.plot$Plot#getBackgroundImageAlpha()": 0.0,
        "org.jfree.chart.plot$Plot#getBackgroundPaint()": -0.0557814598120403,
        "org.jfree.chart.plot$Plot#getDatasetGroup()": 0.0,
        "org.jfree.chart.plot$Plot#getDrawingSupplier()": -0.33232730475047034,
        "org.jfree.chart.plot$Plot#getForegroundAlpha()": -0.3016959826514942,
        "org.jfree.chart.plot$Plot#getInsets()": 0.17251757972160087,
        "org.jfree.chart.plot$Plot#getLegendItems()": -0.03152064120537301,
        "org.jfree.chart.plot$Plot#getNoDataMessage()": 0.0,
        "org.jfree.chart.plot$Plot#getNoDataMessageFont()": 0.0,
        "org.jfree.chart.plot$Plot#getNoDataMessagePaint()": 0.0,
        "org.jfree.chart.plot$Plot#getOutlinePaint()": -0.0557814598120403,
        "org.jfree.chart.plot$Plot#getOutlineStroke()": -0.0557814598120403,
        "org.jfree.chart.plot$Plot#getParent()": -0.611541549372882,
        "org.jfree.chart.plot$Plot#getRectX(double,double,double,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.plot$Plot#getRectY(double,double,double,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.plot$Plot#getRootPlot()": 0.0,
        "org.jfree.chart.plot$Plot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$Plot#isOutlineVisible()": 0.0,
        "org.jfree.chart.plot$Plot#isSubplot()": 0.0,
        "org.jfree.chart.plot$Plot#markerChanged(org.jfree.chart.event.MarkerChangeEvent)": 0.0,
        "org.jfree.chart.plot$Plot#notifyListeners(org.jfree.chart.event.PlotChangeEvent)": 1.1120799360709461,
        "org.jfree.chart.plot$Plot#readObject(java.io.ObjectInputStream)": -0.19929018159679868,
        "org.jfree.chart.plot$Plot#removeChangeListener(org.jfree.chart.event.PlotChangeListener)": -0.06491218980083,
        "org.jfree.chart.plot$Plot#resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)": -0.28718616279142356,
        "org.jfree.chart.plot$Plot#resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)": -0.28718616279142356,
        "org.jfree.chart.plot$Plot#setBackgroundAlpha(float)": -0.0315206412053729,
        "org.jfree.chart.plot$Plot#setBackgroundImage(java.awt.Image)": -0.0315206412053729,
        "org.jfree.chart.plot$Plot#setBackgroundImageAlignment(int)": -0.0315206412053729,
        "org.jfree.chart.plot$Plot#setBackgroundImageAlpha(float)": -0.0315206412053729,
        "org.jfree.chart.plot$Plot#setBackgroundPaint(java.awt.Paint)": -0.07306782685288771,
        "org.jfree.chart.plot$Plot#setDatasetGroup(org.jfree.data.general.DatasetGroup)": -0.04512489437491829,
        "org.jfree.chart.plot$Plot#setDrawingSupplier(org.jfree.chart.plot.DrawingSupplier)": -0.0315206412053729,
        "org.jfree.chart.plot$Plot#setForegroundAlpha(float)": -0.09399160353000481,
        "org.jfree.chart.plot$Plot#setInsets(org.jfree.chart.util.RectangleInsets)": 1.6244144178994024,
        "org.jfree.chart.plot$Plot#setInsets(org.jfree.chart.util.RectangleInsets,boolean)": 1.6098538173010066,
        "org.jfree.chart.plot$Plot#setNoDataMessage(java.lang.String)": -0.0315206412053729,
        "org.jfree.chart.plot$Plot#setNoDataMessageFont(java.awt.Font)": -0.0315206412053729,
        "org.jfree.chart.plot$Plot#setNoDataMessagePaint(java.awt.Paint)": -0.0315206412053729,
        "org.jfree.chart.plot$Plot#setOutlinePaint(java.awt.Paint)": -0.0315206412053729,
        "org.jfree.chart.plot$Plot#setOutlineStroke(java.awt.Stroke)": -0.0315206412053729,
        "org.jfree.chart.plot$Plot#setOutlineVisible(boolean)": -0.0315206412053729,
        "org.jfree.chart.plot$Plot#setParent(org.jfree.chart.plot.Plot)": -0.1373080091619967,
        "org.jfree.chart.plot$Plot#writeObject(java.io.ObjectOutputStream)": -0.19929018159679868,
        "org.jfree.chart.plot$Plot#zoom(double)": 0.0,
        "org.jfree.chart.plot$PlotOrientation#<clinit>()": 1.2003693911432407,
        "org.jfree.chart.plot$PlotOrientation#PlotOrientation(java.lang.String)": -0.14541704648366427,
        "org.jfree.chart.plot$PlotOrientation#equals(java.lang.Object)": -0.1466001274652598,
        "org.jfree.chart.plot$PlotOrientation#hashCode()": 0.0,
        "org.jfree.chart.plot$PlotOrientation#readResolve()": -0.14200867150013158,
        "org.jfree.chart.plot$PlotOrientation#toString()": -0.14660012746525974,
        "org.jfree.chart.plot$PolarPlot#<clinit>()": -0.055781459812040295,
        "org.jfree.chart.plot$PolarPlot#PolarPlot()": -0.055781459812040295,
        "org.jfree.chart.plot$PolarPlot#PolarPlot(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.PolarItemRenderer)": -0.055781459812040295,
        "org.jfree.chart.plot$PolarPlot#addCornerTextItem(java.lang.String)": -0.04512489437491821,
        "org.jfree.chart.plot$PolarPlot#clearCornerTextItems()": 0.0,
        "org.jfree.chart.plot$PolarPlot#clone()": -0.0315206412053729,
        "org.jfree.chart.plot$PolarPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)": 0.0,
        "org.jfree.chart.plot$PolarPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$PolarPlot#drawAxis(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$PolarPlot#drawCornerTextItems(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$PolarPlot#drawGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List,java.util.List)": 0.0,
        "org.jfree.chart.plot$PolarPlot#equals(java.lang.Object)": -0.055781459812040295,
        "org.jfree.chart.plot$PolarPlot#getAngleGridlinePaint()": 0.0,
        "org.jfree.chart.plot$PolarPlot#getAngleGridlineStroke()": 0.0,
        "org.jfree.chart.plot$PolarPlot#getAngleLabelFont()": 0.0,
        "org.jfree.chart.plot$PolarPlot#getAngleLabelPaint()": 0.0,
        "org.jfree.chart.plot$PolarPlot#getAngleTickUnit()": 0.0,
        "org.jfree.chart.plot$PolarPlot#getAxis()": -0.03152064120537301,
        "org.jfree.chart.plot$PolarPlot#getDataRange(org.jfree.chart.axis.ValueAxis)": -0.04512489437491821,
        "org.jfree.chart.plot$PolarPlot#getDataset()": 0.0,
        "org.jfree.chart.plot$PolarPlot#getLegendItems()": 0.0,
        "org.jfree.chart.plot$PolarPlot#getMaxRadius()": 0.0,
        "org.jfree.chart.plot$PolarPlot#getOrientation()": 0.0,
        "org.jfree.chart.plot$PolarPlot#getPlotType()": 0.0,
        "org.jfree.chart.plot$PolarPlot#getRadiusGridlinePaint()": 0.0,
        "org.jfree.chart.plot$PolarPlot#getRadiusGridlineStroke()": 0.0,
        "org.jfree.chart.plot$PolarPlot#getRenderer()": 0.0,
        "org.jfree.chart.plot$PolarPlot#getSeriesCount()": 0.0,
        "org.jfree.chart.plot$PolarPlot#isAngleGridlinesVisible()": 0.0,
        "org.jfree.chart.plot$PolarPlot#isAngleLabelsVisible()": 0.0,
        "org.jfree.chart.plot$PolarPlot#isDomainZoomable()": 0.0,
        "org.jfree.chart.plot$PolarPlot#isRadiusGridlinesVisible()": 0.0,
        "org.jfree.chart.plot$PolarPlot#isRangeZoomable()": 0.0,
        "org.jfree.chart.plot$PolarPlot#readObject(java.io.ObjectInputStream)": -0.0315206412053729,
        "org.jfree.chart.plot$PolarPlot#refreshAngleTicks()": 0.0,
        "org.jfree.chart.plot$PolarPlot#removeCornerTextItem(java.lang.String)": 0.0,
        "org.jfree.chart.plot$PolarPlot#render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$PolarPlot#rendererChanged(org.jfree.chart.event.RendererChangeEvent)": 0.0,
        "org.jfree.chart.plot$PolarPlot#setAngleGridlinePaint(java.awt.Paint)": -0.04512489437491821,
        "org.jfree.chart.plot$PolarPlot#setAngleGridlineStroke(java.awt.Stroke)": -0.0315206412053729,
        "org.jfree.chart.plot$PolarPlot#setAngleGridlinesVisible(boolean)": -0.0315206412053729,
        "org.jfree.chart.plot$PolarPlot#setAngleLabelFont(java.awt.Font)": -0.0315206412053729,
        "org.jfree.chart.plot$PolarPlot#setAngleLabelPaint(java.awt.Paint)": -0.04512489437491821,
        "org.jfree.chart.plot$PolarPlot#setAngleLabelsVisible(boolean)": -0.0315206412053729,
        "org.jfree.chart.plot$PolarPlot#setAngleTickUnit(org.jfree.chart.axis.TickUnit)": -0.0315206412053729,
        "org.jfree.chart.plot$PolarPlot#setAxis(org.jfree.chart.axis.ValueAxis)": -0.0315206412053729,
        "org.jfree.chart.plot$PolarPlot#setDataset(org.jfree.data.xy.XYDataset)": 0.0,
        "org.jfree.chart.plot$PolarPlot#setRadiusGridlinePaint(java.awt.Paint)": -0.04512489437491821,
        "org.jfree.chart.plot$PolarPlot#setRadiusGridlineStroke(java.awt.Stroke)": -0.0315206412053729,
        "org.jfree.chart.plot$PolarPlot#setRadiusGridlinesVisible(boolean)": -0.0315206412053729,
        "org.jfree.chart.plot$PolarPlot#setRenderer(org.jfree.chart.renderer.PolarItemRenderer)": 0.0,
        "org.jfree.chart.plot$PolarPlot#translateValueThetaRadiusToJava2D(double,double,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$PolarPlot#writeObject(java.io.ObjectOutputStream)": -0.03152064120537301,
        "org.jfree.chart.plot$PolarPlot#zoom(double)": 0.0,
        "org.jfree.chart.plot$PolarPlot#zoomDomainAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$PolarPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$PolarPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)": 0.0,
        "org.jfree.chart.plot$PolarPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$PolarPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$PolarPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)": 0.0,
        "org.jfree.chart.plot$RingPlot#RingPlot()": -0.0315206412053729,
        "org.jfree.chart.plot$RingPlot#RingPlot(org.jfree.data.general.PieDataset)": -0.06491218980083,
        "org.jfree.chart.plot$RingPlot#drawItem(java.awt.Graphics2D,int,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState,int)": 0.0,
        "org.jfree.chart.plot$RingPlot#equals(java.lang.Object)": -0.06491218980083,
        "org.jfree.chart.plot$RingPlot#extendLine(java.awt.geom.Line2D,double,double)": 0.0,
        "org.jfree.chart.plot$RingPlot#getInnerSeparatorExtension()": 0.0,
        "org.jfree.chart.plot$RingPlot#getOuterSeparatorExtension()": 0.0,
        "org.jfree.chart.plot$RingPlot#getSectionDepth()": 0.0,
        "org.jfree.chart.plot$RingPlot#getSeparatorPaint()": 0.0,
        "org.jfree.chart.plot$RingPlot#getSeparatorStroke()": 0.0,
        "org.jfree.chart.plot$RingPlot#getSeparatorsVisible()": 0.0,
        "org.jfree.chart.plot$RingPlot#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlot,java.lang.Integer,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$RingPlot#readObject(java.io.ObjectInputStream)": -0.03152064120537301,
        "org.jfree.chart.plot$RingPlot#setInnerSeparatorExtension(double)": -0.0315206412053729,
        "org.jfree.chart.plot$RingPlot#setOuterSeparatorExtension(double)": -0.0315206412053729,
        "org.jfree.chart.plot$RingPlot#setSectionDepth(double)": -0.0315206412053729,
        "org.jfree.chart.plot$RingPlot#setSeparatorPaint(java.awt.Paint)": -0.055781459812040295,
        "org.jfree.chart.plot$RingPlot#setSeparatorStroke(java.awt.Stroke)": -0.0315206412053729,
        "org.jfree.chart.plot$RingPlot#setSeparatorsVisible(boolean)": -0.0315206412053729,
        "org.jfree.chart.plot$RingPlot#writeObject(java.io.ObjectOutputStream)": -0.03152064120537301,
        "org.jfree.chart.plot$ValueMarker#ValueMarker(double)": -0.19183443255646399,
        "org.jfree.chart.plot$ValueMarker#ValueMarker(double,java.awt.Paint,java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$ValueMarker#ValueMarker(double,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)": -0.41162754856542216,
        "org.jfree.chart.plot$ValueMarker#equals(java.lang.Object)": -0.19183443255646399,
        "org.jfree.chart.plot$ValueMarker#getValue()": -0.22748712888929723,
        "org.jfree.chart.plot$ValueMarker#setValue(double)": -0.04512489437491821,
        "org.jfree.chart.plot$XYPlot#<clinit>()": -0.36923441619492503,
        "org.jfree.chart.plot$XYPlot#XYPlot()": -0.1466001274652598,
        "org.jfree.chart.plot$XYPlot#XYPlot(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)": -0.36923441619492503,
        "org.jfree.chart.plot$XYPlot#addAnnotation(org.jfree.chart.annotations.XYAnnotation)": -0.09399160353000481,
        "org.jfree.chart.plot$XYPlot#addDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": -0.055781459812040295,
        "org.jfree.chart.plot$XYPlot#addDomainMarker(org.jfree.chart.plot.Marker)": -0.04512489437491821,
        "org.jfree.chart.plot$XYPlot#addDomainMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": -0.055781459812040295,
        "org.jfree.chart.plot$XYPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": -0.06491218980083,
        "org.jfree.chart.plot$XYPlot#addRangeMarker(org.jfree.chart.plot.Marker)": -0.055781459812040295,
        "org.jfree.chart.plot$XYPlot#addRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": -0.06491218980083,
        "org.jfree.chart.plot$XYPlot#calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.16403722680653643,
        "org.jfree.chart.plot$XYPlot#calculateDomainAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)": -0.16403722680653643,
        "org.jfree.chart.plot$XYPlot#calculateRangeAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)": -0.16403722680653643,
        "org.jfree.chart.plot$XYPlot#clearAnnotations()": 0.0,
        "org.jfree.chart.plot$XYPlot#clearDomainAxes()": 0.0,
        "org.jfree.chart.plot$XYPlot#clearDomainMarkers()": -0.04512489437491821,
        "org.jfree.chart.plot$XYPlot#clearDomainMarkers(int)": -0.04512489437491821,
        "org.jfree.chart.plot$XYPlot#clearRangeAxes()": 0.0,
        "org.jfree.chart.plot$XYPlot#clearRangeMarkers()": -0.04512489437491821,
        "org.jfree.chart.plot$XYPlot#clearRangeMarkers(int)": -0.04512489437491821,
        "org.jfree.chart.plot$XYPlot#clone()": -0.08746897581990874,
        "org.jfree.chart.plot$XYPlot#configureDomainAxes()": -0.36923441619492503,
        "org.jfree.chart.plot$XYPlot#configureRangeAxes()": -0.36923441619492503,
        "org.jfree.chart.plot$XYPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)": -0.36923441619492503,
        "org.jfree.chart.plot$XYPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)": -0.16403722680653643,
        "org.jfree.chart.plot$XYPlot#drawAnnotations(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)": -0.16403722680653643,
        "org.jfree.chart.plot$XYPlot#drawAxes(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)": -0.16403722680653643,
        "org.jfree.chart.plot$XYPlot#drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.16403722680653643,
        "org.jfree.chart.plot$XYPlot#drawDomainCrosshair(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation,double,org.jfree.chart.axis.ValueAxis,java.awt.Stroke,java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawDomainGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)": -0.16403722680653643,
        "org.jfree.chart.plot$XYPlot#drawDomainMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.util.Layer)": -0.16403722680653643,
        "org.jfree.chart.plot$XYPlot#drawDomainTickBands(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)": -0.16403722680653643,
        "org.jfree.chart.plot$XYPlot#drawHorizontalLine(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,java.awt.Stroke,java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawQuadrants(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.16403722680653643,
        "org.jfree.chart.plot$XYPlot#drawRangeCrosshair(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation,double,org.jfree.chart.axis.ValueAxis,java.awt.Stroke,java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawRangeGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)": -0.16403722680653643,
        "org.jfree.chart.plot$XYPlot#drawRangeMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.util.Layer)": -0.16403722680653643,
        "org.jfree.chart.plot$XYPlot#drawRangeTickBands(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)": -0.16403722680653643,
        "org.jfree.chart.plot$XYPlot#drawVerticalLine(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,java.awt.Stroke,java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawZeroDomainBaseline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.16403722680653643,
        "org.jfree.chart.plot$XYPlot#drawZeroRangeBaseline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.16403722680653643,
        "org.jfree.chart.plot$XYPlot#equals(java.lang.Object)": -0.22065421928654283,
        "org.jfree.chart.plot$XYPlot#getAnnotations()": -0.03152064120537301,
        "org.jfree.chart.plot$XYPlot#getAxisOffset()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDataRange(org.jfree.chart.axis.ValueAxis)": -0.326876587952035,
        "org.jfree.chart.plot$XYPlot#getDataset()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDataset(int)": -0.36923441619492503,
        "org.jfree.chart.plot$XYPlot#getDatasetCount()": -0.16403722680653643,
        "org.jfree.chart.plot$XYPlot#getDatasetRenderingOrder()": -0.16403722680653643,
        "org.jfree.chart.plot$XYPlot#getDatasetsMappedToDomainAxis(java.lang.Integer)": -0.3158227686316944,
        "org.jfree.chart.plot$XYPlot#getDatasetsMappedToRangeAxis(java.lang.Integer)": -0.32413258315071913,
        "org.jfree.chart.plot$XYPlot#getDomainAxis()": -0.20656849764559695,
        "org.jfree.chart.plot$XYPlot#getDomainAxis(int)": -0.2136852888186523,
        "org.jfree.chart.plot$XYPlot#getDomainAxisCount()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainAxisEdge()": -0.16403722680653643,
        "org.jfree.chart.plot$XYPlot#getDomainAxisEdge(int)": -0.16403722680653643,
        "org.jfree.chart.plot$XYPlot#getDomainAxisForDataset(int)": -0.15980346450639288,
        "org.jfree.chart.plot$XYPlot#getDomainAxisIndex(org.jfree.chart.axis.ValueAxis)": -0.326876587952035,
        "org.jfree.chart.plot$XYPlot#getDomainAxisLocation()": -0.16403722680653643,
        "org.jfree.chart.plot$XYPlot#getDomainAxisLocation(int)": -0.16403722680653643,
        "org.jfree.chart.plot$XYPlot#getDomainCrosshairPaint()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainCrosshairStroke()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainCrosshairValue()": -0.16403722680653643,
        "org.jfree.chart.plot$XYPlot#getDomainGridlinePaint()": -0.15980346450639304,
        "org.jfree.chart.plot$XYPlot#getDomainGridlineStroke()": -0.15980346450639304,
        "org.jfree.chart.plot$XYPlot#getDomainMarkers(int,org.jfree.chart.util.Layer)": -0.15980346450639304,
        "org.jfree.chart.plot$XYPlot#getDomainMarkers(org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainTickBandPaint()": -0.16403722680653643,
        "org.jfree.chart.plot$XYPlot#getDomainZeroBaselinePaint()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainZeroBaselineStroke()": 0.0,
        "org.jfree.chart.plot$XYPlot#getFixedDomainAxisSpace()": 0.0,
        "org.jfree.chart.plot$XYPlot#getFixedLegendItems()": 0.0,
        "org.jfree.chart.plot$XYPlot#getFixedRangeAxisSpace()": 0.0,
        "org.jfree.chart.plot$XYPlot#getIndexOf(org.jfree.chart.renderer.xy.XYItemRenderer)": 0.0,
        "org.jfree.chart.plot$XYPlot#getLegendItems()": -0.16403722680653643,
        "org.jfree.chart.plot$XYPlot#getOrientation()": -0.16819684139444302,
        "org.jfree.chart.plot$XYPlot#getPlotType()": 0.0,
        "org.jfree.chart.plot$XYPlot#getQuadrantOrigin()": -0.03152064120537301,
        "org.jfree.chart.plot$XYPlot#getQuadrantPaint(int)": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeAxis()": -0.24078499574005374,
        "org.jfree.chart.plot$XYPlot#getRangeAxis(int)": -0.24726709140992598,
        "org.jfree.chart.plot$XYPlot#getRangeAxisCount()": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeAxisEdge()": -0.16403722680653643,
        "org.jfree.chart.plot$XYPlot#getRangeAxisEdge(int)": -0.16403722680653643,
        "org.jfree.chart.plot$XYPlot#getRangeAxisForDataset(int)": -0.15980346450639288,
        "org.jfree.chart.plot$XYPlot#getRangeAxisIndex(org.jfree.chart.axis.ValueAxis)": -0.326876587952035,
        "org.jfree.chart.plot$XYPlot#getRangeAxisLocation()": -0.16403722680653643,
        "org.jfree.chart.plot$XYPlot#getRangeAxisLocation(int)": -0.16403722680653643,
        "org.jfree.chart.plot$XYPlot#getRangeCrosshairPaint()": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeCrosshairStroke()": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeCrosshairValue()": -0.16403722680653643,
        "org.jfree.chart.plot$XYPlot#getRangeGridlinePaint()": -0.15980346450639304,
        "org.jfree.chart.plot$XYPlot#getRangeGridlineStroke()": -0.15980346450639304,
        "org.jfree.chart.plot$XYPlot#getRangeMarkers(int,org.jfree.chart.util.Layer)": -0.15980346450639304,
        "org.jfree.chart.plot$XYPlot#getRangeMarkers(org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeTickBandPaint()": -0.16403722680653643,
        "org.jfree.chart.plot$XYPlot#getRangeZeroBaselinePaint()": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeZeroBaselineStroke()": 0.0,
        "org.jfree.chart.plot$XYPlot#getRenderer()": -0.26613006602573697,
        "org.jfree.chart.plot$XYPlot#getRenderer(int)": -0.2930390654388103,
        "org.jfree.chart.plot$XYPlot#getRendererForDataset(org.jfree.data.xy.XYDataset)": -0.3130259469337453,
        "org.jfree.chart.plot$XYPlot#getSeriesCount()": 0.0,
        "org.jfree.chart.plot$XYPlot#getSeriesRenderingOrder()": -0.14200867150013163,
        "org.jfree.chart.plot$XYPlot#getWeight()": -0.04512489437491829,
        "org.jfree.chart.plot$XYPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$XYPlot#indexOf(org.jfree.data.xy.XYDataset)": -0.0315206412053729,
        "org.jfree.chart.plot$XYPlot#isDomainCrosshairLockedOnData()": -0.14200867150013163,
        "org.jfree.chart.plot$XYPlot#isDomainCrosshairVisible()": -0.16403722680653643,
        "org.jfree.chart.plot$XYPlot#isDomainGridlinesVisible()": -0.15980346450639304,
        "org.jfree.chart.plot$XYPlot#isDomainZeroBaselineVisible()": -0.16403722680653643,
        "org.jfree.chart.plot$XYPlot#isDomainZoomable()": -0.03152064120537301,
        "org.jfree.chart.plot$XYPlot#isRangeCrosshairLockedOnData()": -0.14200867150013163,
        "org.jfree.chart.plot$XYPlot#isRangeCrosshairVisible()": -0.16819684139444302,
        "org.jfree.chart.plot$XYPlot#isRangeGridlinesVisible()": -0.15980346450639304,
        "org.jfree.chart.plot$XYPlot#isRangeZeroBaselineVisible()": -0.16403722680653643,
        "org.jfree.chart.plot$XYPlot#isRangeZoomable()": -0.03152064120537301,
        "org.jfree.chart.plot$XYPlot#mapDatasetToDomainAxis(int,int)": -0.36923441619492503,
        "org.jfree.chart.plot$XYPlot#mapDatasetToRangeAxis(int,int)": -0.36923441619492503,
        "org.jfree.chart.plot$XYPlot#readObject(java.io.ObjectInputStream)": -0.09399160353000481,
        "org.jfree.chart.plot$XYPlot#removeAnnotation(org.jfree.chart.annotations.XYAnnotation)": -0.0315206412053729,
        "org.jfree.chart.plot$XYPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$XYPlot#removeDomainMarker(org.jfree.chart.plot.Marker)": 0.0,
        "org.jfree.chart.plot$XYPlot#removeDomainMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$XYPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$XYPlot#removeRangeMarker(org.jfree.chart.plot.Marker)": 0.0,
        "org.jfree.chart.plot$XYPlot#removeRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$XYPlot#render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.CrosshairState)": -0.16403722680653643,
        "org.jfree.chart.plot$XYPlot#rendererChanged(org.jfree.chart.event.RendererChangeEvent)": -0.12243735987372574,
        "org.jfree.chart.plot$XYPlot#setAxisOffset(org.jfree.chart.util.RectangleInsets)": -0.0315206412053729,
        "org.jfree.chart.plot$XYPlot#setDataset(int,org.jfree.data.xy.XYDataset)": -0.15109136173257415,
        "org.jfree.chart.plot$XYPlot#setDataset(org.jfree.data.xy.XYDataset)": -0.08746897581990874,
        "org.jfree.chart.plot$XYPlot#setDatasetRenderingOrder(org.jfree.chart.plot.DatasetRenderingOrder)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainAxes(org.jfree.chart.axis.ValueAxis[])": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainAxis(int,org.jfree.chart.axis.ValueAxis)": -0.08746897581990874,
        "org.jfree.chart.plot$XYPlot#setDomainAxis(int,org.jfree.chart.axis.ValueAxis,boolean)": -0.08746897581990874,
        "org.jfree.chart.plot$XYPlot#setDomainAxis(org.jfree.chart.axis.ValueAxis)": -0.07306782685288771,
        "org.jfree.chart.plot$XYPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation)": -0.04512489437491821,
        "org.jfree.chart.plot$XYPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)": -0.04512489437491821,
        "org.jfree.chart.plot$XYPlot#setDomainAxisLocation(org.jfree.chart.axis.AxisLocation)": -0.0315206412053729,
        "org.jfree.chart.plot$XYPlot#setDomainAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainCrosshairLockedOnData(boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainCrosshairPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainCrosshairStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainCrosshairValue(double)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainCrosshairValue(double,boolean)": -0.16403722680653643,
        "org.jfree.chart.plot$XYPlot#setDomainCrosshairVisible(boolean)": -0.08053082525790804,
        "org.jfree.chart.plot$XYPlot#setDomainGridlinePaint(java.awt.Paint)": -0.0315206412053729,
        "org.jfree.chart.plot$XYPlot#setDomainGridlineStroke(java.awt.Stroke)": -0.0315206412053729,
        "org.jfree.chart.plot$XYPlot#setDomainGridlinesVisible(boolean)": -0.0315206412053729,
        "org.jfree.chart.plot$XYPlot#setDomainTickBandPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainZeroBaselinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainZeroBaselineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainZeroBaselineVisible(boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace)": 0.0,
        "org.jfree.chart.plot$XYPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setFixedLegendItems(org.jfree.chart.LegendItemCollection)": 0.0,
        "org.jfree.chart.plot$XYPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace)": 0.0,
        "org.jfree.chart.plot$XYPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)": -0.2440391448107152,
        "org.jfree.chart.plot$XYPlot#setQuadrantOrigin(java.awt.geom.Point2D)": -0.04512489437491821,
        "org.jfree.chart.plot$XYPlot#setQuadrantPaint(int,java.awt.Paint)": -0.04512489437491821,
        "org.jfree.chart.plot$XYPlot#setRangeAxes(org.jfree.chart.axis.ValueAxis[])": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis)": -0.06491218980083,
        "org.jfree.chart.plot$XYPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis,boolean)": -0.06491218980083,
        "org.jfree.chart.plot$XYPlot#setRangeAxis(org.jfree.chart.axis.ValueAxis)": -0.11717564179433315,
        "org.jfree.chart.plot$XYPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation)": -0.04512489437491821,
        "org.jfree.chart.plot$XYPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)": -0.09399160353000481,
        "org.jfree.chart.plot$XYPlot#setRangeAxisLocation(org.jfree.chart.axis.AxisLocation)": -0.08746897581990874,
        "org.jfree.chart.plot$XYPlot#setRangeAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeCrosshairLockedOnData(boolean)": -0.0315206412053729,
        "org.jfree.chart.plot$XYPlot#setRangeCrosshairPaint(java.awt.Paint)": -0.0315206412053729,
        "org.jfree.chart.plot$XYPlot#setRangeCrosshairStroke(java.awt.Stroke)": -0.0315206412053729,
        "org.jfree.chart.plot$XYPlot#setRangeCrosshairValue(double)": -0.0315206412053729,
        "org.jfree.chart.plot$XYPlot#setRangeCrosshairValue(double,boolean)": -0.16819684139444316,
        "org.jfree.chart.plot$XYPlot#setRangeCrosshairVisible(boolean)": -0.08746897581990874,
        "org.jfree.chart.plot$XYPlot#setRangeGridlinePaint(java.awt.Paint)": -0.0315206412053729,
        "org.jfree.chart.plot$XYPlot#setRangeGridlineStroke(java.awt.Stroke)": -0.0315206412053729,
        "org.jfree.chart.plot$XYPlot#setRangeGridlinesVisible(boolean)": -0.0315206412053729,
        "org.jfree.chart.plot$XYPlot#setRangeTickBandPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeZeroBaselinePaint(java.awt.Paint)": -0.0315206412053729,
        "org.jfree.chart.plot$XYPlot#setRangeZeroBaselineStroke(java.awt.Stroke)": -0.0315206412053729,
        "org.jfree.chart.plot$XYPlot#setRangeZeroBaselineVisible(boolean)": -0.0315206412053729,
        "org.jfree.chart.plot$XYPlot#setRenderer(int,org.jfree.chart.renderer.xy.XYItemRenderer)": -0.21718745808350026,
        "org.jfree.chart.plot$XYPlot#setRenderer(int,org.jfree.chart.renderer.xy.XYItemRenderer,boolean)": -0.21718745808350026,
        "org.jfree.chart.plot$XYPlot#setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)": -0.19558558210059737,
        "org.jfree.chart.plot$XYPlot#setRenderers(org.jfree.chart.renderer.xy.XYItemRenderer[])": 0.0,
        "org.jfree.chart.plot$XYPlot#setSeriesRenderingOrder(org.jfree.chart.plot.SeriesRenderingOrder)": 0.0,
        "org.jfree.chart.plot$XYPlot#setWeight(int)": -0.10017464578637128,
        "org.jfree.chart.plot$XYPlot#writeObject(java.io.ObjectOutputStream)": -0.0939916035300048,
        "org.jfree.chart.plot$XYPlot#zoomDomainAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$XYPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$XYPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$XYPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$XYPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)": 0.0,
        "org.jfree.chart.renderer$RendererState#RendererState(org.jfree.chart.plot.PlotRenderingInfo)": 0.21117094269682013,
        "org.jfree.chart.renderer$RendererState#getEntityCollection()": -0.21718745808350026,
        "org.jfree.chart.renderer$RendererState#getInfo()": -0.11172958175989445,
        "org.jfree.chart.resources$JFreeChartResources#<clinit>()": -0.07725493343627987,
        "org.jfree.chart.resources$JFreeChartResources#JFreeChartResources()": -0.07725493343627987,
        "org.jfree.chart.resources$JFreeChartResources#getContents()": 1.2685315041906249,
        "org.jfree.chart.text$G2TextMeasurer#G2TextMeasurer(java.awt.Graphics2D)": 0.205017046554549,
        "org.jfree.chart.text$G2TextMeasurer#getStringWidth(java.lang.String,int,int)": 1.550803484181454,
        "org.jfree.chart.text$TextAnchor#<clinit>()": 0.6538207868549425,
        "org.jfree.chart.text$TextAnchor#TextAnchor(java.lang.String)": -0.6919656507719626,
        "org.jfree.chart.text$TextAnchor#equals(java.lang.Object)": -0.6336831340991385,
        "org.jfree.chart.text$TextAnchor#hashCode()": -0.08746897581990876,
        "org.jfree.chart.text$TextAnchor#readResolve()": -0.35628697600703646,
        "org.jfree.chart.text$TextAnchor#toString()": 0.0,
        "org.jfree.chart.text$TextBlock#TextBlock()": 1.4931234120479648,
        "org.jfree.chart.text$TextBlock#addLine(java.lang.String,java.awt.Font,java.awt.Paint)": 1.5041772313683057,
        "org.jfree.chart.text$TextBlock#addLine(org.jfree.chart.text.TextLine)": 0.15283776578071795,
        "org.jfree.chart.text$TextBlock#calculateBounds(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextBlockAnchor,float,float,double)": -0.20295046618068313,
        "org.jfree.chart.text$TextBlock#calculateDimensions(java.awt.Graphics2D)": 1.5211738636229177,
        "org.jfree.chart.text$TextBlock#calculateOffsets(org.jfree.chart.text.TextBlockAnchor,double,double)": 1.5211738636229177,
        "org.jfree.chart.text$TextBlock#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextBlockAnchor)": 1.5211738636229177,
        "org.jfree.chart.text$TextBlock#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextBlockAnchor,float,float,double)": 1.5211738636229177,
        "org.jfree.chart.text$TextBlock#equals(java.lang.Object)": -0.06491218980083002,
        "org.jfree.chart.text$TextBlock#getLastLine()": -0.03152064120537301,
        "org.jfree.chart.text$TextBlock#getLineAlignment()": 0.0,
        "org.jfree.chart.text$TextBlock#getLines()": 0.0,
        "org.jfree.chart.text$TextBlock#hashCode()": -0.03152064120537301,
        "org.jfree.chart.text$TextBlock#setLineAlignment(org.jfree.chart.util.HorizontalAlignment)": 0.2786279802724977,
        "org.jfree.chart.text$TextBlockAnchor#<clinit>()": 1.3029094157092325,
        "org.jfree.chart.text$TextBlockAnchor#TextBlockAnchor(java.lang.String)": -0.04287702191767251,
        "org.jfree.chart.text$TextBlockAnchor#equals(java.lang.Object)": -0.15980346450639304,
        "org.jfree.chart.text$TextBlockAnchor#hashCode()": -0.0557814598120403,
        "org.jfree.chart.text$TextBlockAnchor#readResolve()": -0.12753564450448468,
        "org.jfree.chart.text$TextBlockAnchor#toString()": 0.0,
        "org.jfree.chart.text$TextFragment#<clinit>()": 0.15283776578071795,
        "org.jfree.chart.text$TextFragment#TextFragment(java.lang.String)": 0.0,
        "org.jfree.chart.text$TextFragment#TextFragment(java.lang.String,java.awt.Font)": -0.04512489437491821,
        "org.jfree.chart.text$TextFragment#TextFragment(java.lang.String,java.awt.Font,java.awt.Paint)": 1.4986242034076227,
        "org.jfree.chart.text$TextFragment#TextFragment(java.lang.String,java.awt.Font,java.awt.Paint,float)": 0.15283776578071795,
        "org.jfree.chart.text$TextFragment#calculateBaselineOffset(java.awt.Graphics2D,org.jfree.chart.text.TextAnchor)": 1.5211738636229177,
        "org.jfree.chart.text$TextFragment#calculateDimensions(java.awt.Graphics2D)": 1.5211738636229177,
        "org.jfree.chart.text$TextFragment#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,float,float,double)": 1.5211738636229177,
        "org.jfree.chart.text$TextFragment#equals(java.lang.Object)": -0.0557814598120403,
        "org.jfree.chart.text$TextFragment#getBaselineOffset()": 0.0,
        "org.jfree.chart.text$TextFragment#getFont()": -0.03152064120537301,
        "org.jfree.chart.text$TextFragment#getPaint()": -0.03152064120537301,
        "org.jfree.chart.text$TextFragment#getText()": -0.03152064120537301,
        "org.jfree.chart.text$TextFragment#hashCode()": -0.03152064120537301,
        "org.jfree.chart.text$TextFragment#readObject(java.io.ObjectInputStream)": -0.04512489437491829,
        "org.jfree.chart.text$TextFragment#writeObject(java.io.ObjectOutputStream)": -0.04512489437491829,
        "org.jfree.chart.text$TextLine#TextLine()": 0.0,
        "org.jfree.chart.text$TextLine#TextLine(java.lang.String)": -0.04512489437491821,
        "org.jfree.chart.text$TextLine#TextLine(java.lang.String,java.awt.Font)": -0.04512489437491821,
        "org.jfree.chart.text$TextLine#TextLine(java.lang.String,java.awt.Font,java.awt.Paint)": 1.5041772313683057,
        "org.jfree.chart.text$TextLine#addFragment(org.jfree.chart.text.TextFragment)": -0.03152064120537301,
        "org.jfree.chart.text$TextLine#calculateBaselineOffset(java.awt.Graphics2D,org.jfree.chart.text.TextAnchor)": 1.5211738636229177,
        "org.jfree.chart.text$TextLine#calculateDimensions(java.awt.Graphics2D)": 1.5211738636229177,
        "org.jfree.chart.text$TextLine#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,float,float,double)": 1.5211738636229177,
        "org.jfree.chart.text$TextLine#equals(java.lang.Object)": -0.04512489437491829,
        "org.jfree.chart.text$TextLine#getFirstTextFragment()": 0.0,
        "org.jfree.chart.text$TextLine#getLastTextFragment()": -0.03152064120537301,
        "org.jfree.chart.text$TextLine#hashCode()": -0.03152064120537301,
        "org.jfree.chart.text$TextLine#removeFragment(org.jfree.chart.text.TextFragment)": -0.03152064120537301,
        "org.jfree.chart.text$TextUtilities#<clinit>()": 1.509784818180302,
        "org.jfree.chart.text$TextUtilities#TextUtilities()": 0.0,
        "org.jfree.chart.text$TextUtilities#calculateRotatedStringBounds(java.lang.String,java.awt.Graphics2D,float,float,double,float,float)": 0.0,
        "org.jfree.chart.text$TextUtilities#calculateRotatedStringBounds(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)": 0.0,
        "org.jfree.chart.text$TextUtilities#createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint)": -0.2752688087952396,
        "org.jfree.chart.text$TextUtilities#createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,int,org.jfree.chart.text.TextMeasurer)": 1.550803484181454,
        "org.jfree.chart.text$TextUtilities#createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,org.jfree.chart.text.TextMeasurer)": 1.6244144178994024,
        "org.jfree.chart.text$TextUtilities#deriveRotationAnchorOffsets(java.awt.Graphics2D,java.lang.String,org.jfree.chart.text.TextAnchor)": -0.2901210510002251,
        "org.jfree.chart.text$TextUtilities#deriveTextBoundsAnchorOffsets(java.awt.Graphics2D,java.lang.String,org.jfree.chart.text.TextAnchor)": 1.5183040173485058,
        "org.jfree.chart.text$TextUtilities#deriveTextBoundsAnchorOffsets(java.awt.Graphics2D,java.lang.String,org.jfree.chart.text.TextAnchor,java.awt.geom.Rectangle2D)": -0.0315206412053729,
        "org.jfree.chart.text$TextUtilities#drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)": -0.0315206412053729,
        "org.jfree.chart.text$TextUtilities#drawRotatedString(java.lang.String,java.awt.Graphics2D,double,float,float)": 0.0,
        "org.jfree.chart.text$TextUtilities#drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,double,float,float)": 1.5183040173485058,
        "org.jfree.chart.text$TextUtilities#drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,float,float)": 1.5211738636229177,
        "org.jfree.chart.text$TextUtilities#drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)": -0.2901210510002251,
        "org.jfree.chart.text$TextUtilities#getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)": 1.5183040173485058,
        "org.jfree.chart.text$TextUtilities#getUseFontMetricsGetStringBounds()": 0.0,
        "org.jfree.chart.text$TextUtilities#isUseDrawRotatedStringWorkaround()": 0.0,
        "org.jfree.chart.text$TextUtilities#nextLineBreak(java.lang.String,int,float,java.text.BreakIterator,org.jfree.chart.text.TextMeasurer)": 1.550803484181454,
        "org.jfree.chart.text$TextUtilities#setUseDrawRotatedStringWorkaround(boolean)": 0.0,
        "org.jfree.chart.text$TextUtilities#setUseFontMetricsGetStringBounds(boolean)": 0.0,
        "org.jfree.chart.title$LegendTitle#<clinit>()": 1.3182724177899685,
        "org.jfree.chart.title$LegendTitle#LegendTitle(org.jfree.chart.LegendItemSource)": 1.3182724177899685,
        "org.jfree.chart.title$LegendTitle#LegendTitle(org.jfree.chart.LegendItemSource,org.jfree.chart.block.Arrangement,org.jfree.chart.block.Arrangement)": 1.3182724177899685,
        "org.jfree.chart.title$LegendTitle#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 1.5211738636229177,
        "org.jfree.chart.title$LegendTitle#createLegendItemBlock(org.jfree.chart.LegendItem)": -0.26613006602573697,
        "org.jfree.chart.title$LegendTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.title$LegendTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)": 1.5211738636229177,
        "org.jfree.chart.title$LegendTitle#equals(java.lang.Object)": -0.13248772729377373,
        "org.jfree.chart.title$LegendTitle#fetchLegendItems()": 1.5211738636229177,
        "org.jfree.chart.title$LegendTitle#getBackgroundPaint()": 0.0,
        "org.jfree.chart.title$LegendTitle#getItemContainer()": 0.0,
        "org.jfree.chart.title$LegendTitle#getItemFont()": 0.0,
        "org.jfree.chart.title$LegendTitle#getItemLabelPadding()": 0.0,
        "org.jfree.chart.title$LegendTitle#getItemPaint()": 0.0,
        "org.jfree.chart.title$LegendTitle#getLegendItemGraphicAnchor()": -0.2661300660257371,
        "org.jfree.chart.title$LegendTitle#getLegendItemGraphicEdge()": 0.0,
        "org.jfree.chart.title$LegendTitle#getLegendItemGraphicLocation()": -0.2661300660257371,
        "org.jfree.chart.title$LegendTitle#getLegendItemGraphicPadding()": 0.0,
        "org.jfree.chart.title$LegendTitle#getSources()": -0.04512489437491829,
        "org.jfree.chart.title$LegendTitle#readObject(java.io.ObjectInputStream)": -0.10017464578637125,
        "org.jfree.chart.title$LegendTitle#setBackgroundPaint(java.awt.Paint)": 1.32270100268279,
        "org.jfree.chart.title$LegendTitle#setItemFont(java.awt.Font)": -0.0315206412053729,
        "org.jfree.chart.title$LegendTitle#setItemLabelPadding(org.jfree.chart.util.RectangleInsets)": 0.0,
        "org.jfree.chart.title$LegendTitle#setItemPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.title$LegendTitle#setLegendItemGraphicAnchor(org.jfree.chart.util.RectangleAnchor)": -0.03152064120537301,
        "org.jfree.chart.title$LegendTitle#setLegendItemGraphicEdge(org.jfree.chart.util.RectangleEdge)": -0.0315206412053729,
        "org.jfree.chart.title$LegendTitle#setLegendItemGraphicLocation(org.jfree.chart.util.RectangleAnchor)": -0.03152064120537301,
        "org.jfree.chart.title$LegendTitle#setLegendItemGraphicPadding(org.jfree.chart.util.RectangleInsets)": 0.0,
        "org.jfree.chart.title$LegendTitle#setSources(org.jfree.chart.LegendItemSource[])": 0.0,
        "org.jfree.chart.title$LegendTitle#setWrapper(org.jfree.chart.block.BlockContainer)": 0.0,
        "org.jfree.chart.title$LegendTitle#writeObject(java.io.ObjectOutputStream)": -0.10017464578637125,
        "org.jfree.chart.title$TextTitle#<clinit>()": 1.3680502113748938,
        "org.jfree.chart.title$TextTitle#TextTitle()": -0.07306782685288771,
        "org.jfree.chart.title$TextTitle#TextTitle(java.lang.String)": -0.12753564450448468,
        "org.jfree.chart.title$TextTitle#TextTitle(java.lang.String,java.awt.Font)": 1.4011204085739695,
        "org.jfree.chart.title$TextTitle#TextTitle(java.lang.String,java.awt.Font,java.awt.Paint,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)": 1.3680502113748938,
        "org.jfree.chart.title$TextTitle#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 1.6244144178994024,
        "org.jfree.chart.title$TextTitle#arrangeRR(java.awt.Graphics2D,org.jfree.data.Range,org.jfree.data.Range)": 1.6244144178994024,
        "org.jfree.chart.title$TextTitle#clone()": -0.04512489437491821,
        "org.jfree.chart.title$TextTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.title$TextTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)": 1.6244144178994024,
        "org.jfree.chart.title$TextTitle#drawHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 1.6244144178994024,
        "org.jfree.chart.title$TextTitle#drawVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.title$TextTitle#equals(java.lang.Object)": -0.1763122799277064,
        "org.jfree.chart.title$TextTitle#getBackgroundPaint()": 0.0,
        "org.jfree.chart.title$TextTitle#getExpandToFitSpace()": 0.0,
        "org.jfree.chart.title$TextTitle#getFont()": 0.0,
        "org.jfree.chart.title$TextTitle#getPaint()": 0.0,
        "org.jfree.chart.title$TextTitle#getText()": 0.0,
        "org.jfree.chart.title$TextTitle#getTextAlignment()": 0.0,
        "org.jfree.chart.title$TextTitle#getToolTipText()": 0.0,
        "org.jfree.chart.title$TextTitle#getURLText()": 0.0,
        "org.jfree.chart.title$TextTitle#hashCode()": -0.055781459812040295,
        "org.jfree.chart.title$TextTitle#readObject(java.io.ObjectInputStream)": -0.11717564179433304,
        "org.jfree.chart.title$TextTitle#setBackgroundPaint(java.awt.Paint)": -0.04512489437491821,
        "org.jfree.chart.title$TextTitle#setExpandToFitSpace(boolean)": 0.0,
        "org.jfree.chart.title$TextTitle#setFont(java.awt.Font)": -0.055781459812040295,
        "org.jfree.chart.title$TextTitle#setPaint(java.awt.Paint)": -0.04512489437491821,
        "org.jfree.chart.title$TextTitle#setText(java.lang.String)": -0.055781459812040295,
        "org.jfree.chart.title$TextTitle#setTextAlignment(org.jfree.chart.util.HorizontalAlignment)": -0.0315206412053729,
        "org.jfree.chart.title$TextTitle#setToolTipText(java.lang.String)": 0.0,
        "org.jfree.chart.title$TextTitle#setURLText(java.lang.String)": 0.0,
        "org.jfree.chart.title$TextTitle#writeObject(java.io.ObjectOutputStream)": -0.11717564179433304,
        "org.jfree.chart.title$Title#<clinit>()": 1.230937540491304,
        "org.jfree.chart.title$Title#Title()": 1.3007315220093714,
        "org.jfree.chart.title$Title#Title(org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment)": 0.0,
        "org.jfree.chart.title$Title#Title(org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)": 1.230937540491304,
        "org.jfree.chart.title$Title#addChangeListener(org.jfree.chart.event.TitleChangeListener)": 1.2855983223608884,
        "org.jfree.chart.title$Title#clone()": -0.08053082525790804,
        "org.jfree.chart.title$Title#equals(java.lang.Object)": -0.21718745808350026,
        "org.jfree.chart.title$Title#getHorizontalAlignment()": 0.17251757972160087,
        "org.jfree.chart.title$Title#getNotify()": 0.0,
        "org.jfree.chart.title$Title#getPosition()": 0.17251757972160087,
        "org.jfree.chart.title$Title#getVerticalAlignment()": 0.0,
        "org.jfree.chart.title$Title#hashCode()": -0.08746897581990874,
        "org.jfree.chart.title$Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)": 1.3138615337255164,
        "org.jfree.chart.title$Title#readObject(java.io.ObjectInputStream)": -0.12753564450448462,
        "org.jfree.chart.title$Title#removeChangeListener(org.jfree.chart.event.TitleChangeListener)": -0.0315206412053729,
        "org.jfree.chart.title$Title#setHorizontalAlignment(org.jfree.chart.util.HorizontalAlignment)": -0.0315206412053729,
        "org.jfree.chart.title$Title#setNotify(boolean)": 0.0,
        "org.jfree.chart.title$Title#setPosition(org.jfree.chart.util.RectangleEdge)": 1.324922049705197,
        "org.jfree.chart.title$Title#setVerticalAlignment(org.jfree.chart.util.VerticalAlignment)": -0.0315206412053729,
        "org.jfree.chart.title$Title#writeObject(java.io.ObjectOutputStream)": -0.12753564450448462,
        "org.jfree.chart.ui$BasicProjectInfo#BasicProjectInfo()": 1.2685315041906249,
        "org.jfree.chart.ui$BasicProjectInfo#BasicProjectInfo(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.jfree.chart.ui$BasicProjectInfo#BasicProjectInfo(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.jfree.chart.ui$BasicProjectInfo#addLibrary(org.jfree.chart.ui.Library)": 0.0,
        "org.jfree.chart.ui$BasicProjectInfo#addOptionalLibrary(java.lang.String)": 0.0,
        "org.jfree.chart.ui$BasicProjectInfo#addOptionalLibrary(org.jfree.chart.ui.Library)": 0.0,
        "org.jfree.chart.ui$BasicProjectInfo#getCopyright()": 0.0,
        "org.jfree.chart.ui$BasicProjectInfo#getLibraries()": 0.0,
        "org.jfree.chart.ui$BasicProjectInfo#getOptionalLibraries()": 0.0,
        "org.jfree.chart.ui$BasicProjectInfo#setCopyright(java.lang.String)": -0.07725493343627987,
        "org.jfree.chart.ui$BasicProjectInfo#setInfo(java.lang.String)": 1.2685315041906249,
        "org.jfree.chart.ui$BasicProjectInfo#setLicenceName(java.lang.String)": 1.2685315041906249,
        "org.jfree.chart.ui$BasicProjectInfo#setName(java.lang.String)": 1.2685315041906249,
        "org.jfree.chart.ui$BasicProjectInfo#setVersion(java.lang.String)": 1.2685315041906249,
        "org.jfree.chart.ui$Contributor#Contributor(java.lang.String,java.lang.String)": -0.07725493343627987,
        "org.jfree.chart.ui$Contributor#getEmail()": 0.0,
        "org.jfree.chart.ui$Contributor#getName()": 0.0,
        "org.jfree.chart.ui$Library#Library()": -0.07725493343627987,
        "org.jfree.chart.ui$Library#Library(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.jfree.chart.ui$Library#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.ui$Library#getInfo()": 0.0,
        "org.jfree.chart.ui$Library#getLicenceName()": 0.0,
        "org.jfree.chart.ui$Library#getName()": 0.0,
        "org.jfree.chart.ui$Library#getVersion()": 0.0,
        "org.jfree.chart.ui$Library#hashCode()": 0.0,
        "org.jfree.chart.ui$Library#setInfo(java.lang.String)": -0.07725493343627987,
        "org.jfree.chart.ui$Library#setLicenceName(java.lang.String)": -0.07725493343627987,
        "org.jfree.chart.ui$Library#setName(java.lang.String)": -0.07725493343627987,
        "org.jfree.chart.ui$Library#setVersion(java.lang.String)": -0.07725493343627987,
        "org.jfree.chart.ui$Licences#Licences()": -0.07725493343627987,
        "org.jfree.chart.ui$Licences#getGPL()": 0.0,
        "org.jfree.chart.ui$Licences#getInstance()": 1.2685315041906249,
        "org.jfree.chart.ui$Licences#getLGPL()": -0.07725493343627987,
        "org.jfree.chart.ui$ProjectInfo#ProjectInfo()": 1.2685315041906249,
        "org.jfree.chart.ui$ProjectInfo#ProjectInfo(java.lang.String,java.lang.String,java.lang.String,java.awt.Image,java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.jfree.chart.ui$ProjectInfo#getContributors()": 0.0,
        "org.jfree.chart.ui$ProjectInfo#getLicenceText()": 0.0,
        "org.jfree.chart.ui$ProjectInfo#getLogo()": -0.10017464578637125,
        "org.jfree.chart.ui$ProjectInfo#setContributors(java.util.List)": -0.07725493343627987,
        "org.jfree.chart.ui$ProjectInfo#setLicenceText(java.lang.String)": -0.07725493343627987,
        "org.jfree.chart.ui$ProjectInfo#setLogo(java.awt.Image)": -0.07725493343627987,
        "org.jfree.chart.ui$ProjectInfo#toString()": 0.0,
        "org.jfree.chart.util$AbstractObjectList#AbstractObjectList()": 0.6878497211595161,
        "org.jfree.chart.util$AbstractObjectList#AbstractObjectList(int)": 0.6878497211595161,
        "org.jfree.chart.util$AbstractObjectList#AbstractObjectList(int,int)": -0.6579367164673887,
        "org.jfree.chart.util$AbstractObjectList#clear()": 0.0,
        "org.jfree.chart.util$AbstractObjectList#clone()": -0.326876587952035,
        "org.jfree.chart.util$AbstractObjectList#equals(java.lang.Object)": -0.7307294553335405,
        "org.jfree.chart.util$AbstractObjectList#get(int)": -0.6790016845072813,
        "org.jfree.chart.util$AbstractObjectList#hashCode()": -0.2536478051263064,
        "org.jfree.chart.util$AbstractObjectList#indexOf(java.lang.Object)": -0.5578091841190014,
        "org.jfree.chart.util$AbstractObjectList#readObject(java.io.ObjectInputStream)": -0.3404138657031045,
        "org.jfree.chart.util$AbstractObjectList#set(int,java.lang.Object)": -0.6848233362906462,
        "org.jfree.chart.util$AbstractObjectList#size()": -1.0230619123616869,
        "org.jfree.chart.util$AbstractObjectList#writeObject(java.io.ObjectOutputStream)": -0.3404138657031045,
        "org.jfree.chart.util$HorizontalAlignment#<clinit>()": 1.1943310558256957,
        "org.jfree.chart.util$HorizontalAlignment#HorizontalAlignment(java.lang.String)": -0.15145538180120932,
        "org.jfree.chart.util$HorizontalAlignment#equals(java.lang.Object)": -0.1510913617325742,
        "org.jfree.chart.util$HorizontalAlignment#hashCode()": -0.08746897581990876,
        "org.jfree.chart.util$HorizontalAlignment#readResolve()": -0.15109136173257415,
        "org.jfree.chart.util$HorizontalAlignment#toString()": 0.0,
        "org.jfree.chart.util$ObjectList#ObjectList()": 0.7156252251271312,
        "org.jfree.chart.util$ObjectList#ObjectList(int)": 0.0,
        "org.jfree.chart.util$ObjectList#get(int)": -0.6256689441743044,
        "org.jfree.chart.util$ObjectList#indexOf(java.lang.Object)": -0.5578091841190014,
        "org.jfree.chart.util$ObjectList#set(int,java.lang.Object)": -0.6276764089457677,
        "org.jfree.chart.util$ObjectUtilities#<clinit>()": -1.04853141313821,
        "org.jfree.chart.util$ObjectUtilities#ObjectUtilities()": 0.0,
        "org.jfree.chart.util$ObjectUtilities#clone(java.lang.Object)": -0.428454013663171,
        "org.jfree.chart.util$ObjectUtilities#convertName(java.lang.String,java.lang.Class)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#deepClone(java.util.Collection)": -0.2752688087952396,
        "org.jfree.chart.util$ObjectUtilities#equal(java.lang.Object,java.lang.Object)": -1.4230087199385246,
        "org.jfree.chart.util$ObjectUtilities#getClassLoader()": 0.0,
        "org.jfree.chart.util$ObjectUtilities#getClassLoader(java.lang.Class)": 1.509784818180302,
        "org.jfree.chart.util$ObjectUtilities#getClassLoaderSource()": 0.0,
        "org.jfree.chart.util$ObjectUtilities#getResource(java.lang.String,java.lang.Class)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#getResourceAsStream(java.lang.String,java.lang.Class)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#getResourceRelative(java.lang.String,java.lang.Class)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#getResourceRelativeAsStream(java.lang.String,java.lang.Class)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#hashCode(java.lang.Object)": -0.10017464578637128,
        "org.jfree.chart.util$ObjectUtilities#isJDK14()": 1.509784818180302,
        "org.jfree.chart.util$ObjectUtilities#loadAndInstantiate(java.lang.String,java.lang.Class)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#loadAndInstantiate(java.lang.String,java.lang.Class,java.lang.Class)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#parseVersions(java.lang.String)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#setClassLoader(java.lang.ClassLoader)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#setClassLoaderSource(java.lang.String)": 0.0,
        "org.jfree.chart.util$RectangleAnchor#<clinit>()": 1.102542300259576,
        "org.jfree.chart.util$RectangleAnchor#RectangleAnchor(java.lang.String)": -0.24324413736732897,
        "org.jfree.chart.util$RectangleAnchor#coordinates(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleAnchor)": -0.26613006602573697,
        "org.jfree.chart.util$RectangleAnchor#createRectangle(org.jfree.chart.util.Size2D,double,double,org.jfree.chart.util.RectangleAnchor)": -0.04512489437491821,
        "org.jfree.chart.util$RectangleAnchor#equals(java.lang.Object)": -0.24726709140992598,
        "org.jfree.chart.util$RectangleAnchor#hashCode()": -0.04512489437491829,
        "org.jfree.chart.util$RectangleAnchor#readResolve()": -0.1841825459468786,
        "org.jfree.chart.util$RectangleAnchor#toString()": 0.0,
        "org.jfree.chart.util$RectangleEdge#<clinit>()": 1.2145544324627853,
        "org.jfree.chart.util$RectangleEdge#RectangleEdge(java.lang.String)": -0.1312320051641197,
        "org.jfree.chart.util$RectangleEdge#coordinate(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.util$RectangleEdge#equals(java.lang.Object)": -0.2568021722696767,
        "org.jfree.chart.util$RectangleEdge#hashCode()": -0.08746897581990876,
        "org.jfree.chart.util$RectangleEdge#isLeftOrRight(org.jfree.chart.util.RectangleEdge)": -0.2988261363770824,
        "org.jfree.chart.util$RectangleEdge#isTopOrBottom(org.jfree.chart.util.RectangleEdge)": 1.5041772313683057,
        "org.jfree.chart.util$RectangleEdge#opposite(org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.util$RectangleEdge#readResolve()": -0.12753564450448468,
        "org.jfree.chart.util$RectangleEdge#toString()": 0.0,
        "org.jfree.chart.util$RectangleInsets#<clinit>()": 0.7935800765039495,
        "org.jfree.chart.util$RectangleInsets#RectangleInsets()": 0.0,
        "org.jfree.chart.util$RectangleInsets#RectangleInsets(double,double,double,double)": 0.8256262281088562,
        "org.jfree.chart.util$RectangleInsets#RectangleInsets(org.jfree.chart.util.UnitType,double,double,double,double)": -0.5522063611229554,
        "org.jfree.chart.util$RectangleInsets#calculateBottomInset(double)": 1.5154494634346594,
        "org.jfree.chart.util$RectangleInsets#calculateBottomOutset(double)": 1.5126098448339351,
        "org.jfree.chart.util$RectangleInsets#calculateLeftInset(double)": 1.5154494634346594,
        "org.jfree.chart.util$RectangleInsets#calculateLeftOutset(double)": 1.5126098448339351,
        "org.jfree.chart.util$RectangleInsets#calculateRightInset(double)": 1.5154494634346594,
        "org.jfree.chart.util$RectangleInsets#calculateRightOutset(double)": 1.5126098448339351,
        "org.jfree.chart.util$RectangleInsets#calculateTopInset(double)": 1.5154494634346594,
        "org.jfree.chart.util$RectangleInsets#calculateTopOutset(double)": 1.5126098448339351,
        "org.jfree.chart.util$RectangleInsets#createAdjustedRectangle(java.awt.geom.Rectangle2D,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.LengthAdjustmentType)": 0.0,
        "org.jfree.chart.util$RectangleInsets#createInsetRectangle(java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.util$RectangleInsets#createInsetRectangle(java.awt.geom.Rectangle2D,boolean,boolean)": 0.0,
        "org.jfree.chart.util$RectangleInsets#createOutsetRectangle(java.awt.geom.Rectangle2D)": -0.2901210510002251,
        "org.jfree.chart.util$RectangleInsets#createOutsetRectangle(java.awt.geom.Rectangle2D,boolean,boolean)": -0.2901210510002251,
        "org.jfree.chart.util$RectangleInsets#equals(java.lang.Object)": -0.04287702191767251,
        "org.jfree.chart.util$RectangleInsets#extendHeight(double)": 1.5154494634346594,
        "org.jfree.chart.util$RectangleInsets#extendWidth(double)": 1.5154494634346594,
        "org.jfree.chart.util$RectangleInsets#getBottom()": -0.290121051000225,
        "org.jfree.chart.util$RectangleInsets#getLeft()": -0.290121051000225,
        "org.jfree.chart.util$RectangleInsets#getRight()": -0.290121051000225,
        "org.jfree.chart.util$RectangleInsets#getTop()": -0.290121051000225,
        "org.jfree.chart.util$RectangleInsets#getUnitType()": 0.0,
        "org.jfree.chart.util$RectangleInsets#hashCode()": 0.0,
        "org.jfree.chart.util$RectangleInsets#toString()": 0.0,
        "org.jfree.chart.util$RectangleInsets#trim(java.awt.geom.Rectangle2D)": 1.5183040173485058,
        "org.jfree.chart.util$RectangleInsets#trimHeight(double)": 1.5183040173485058,
        "org.jfree.chart.util$RectangleInsets#trimWidth(double)": 1.5183040173485058,
        "org.jfree.chart.util$Rotation#<clinit>()": 1.5925128711107028,
        "org.jfree.chart.util$Rotation#Rotation(java.lang.String,double)": 0.24672643348379786,
        "org.jfree.chart.util$Rotation#equals(java.lang.Object)": -0.10017464578637125,
        "org.jfree.chart.util$Rotation#getFactor()": -0.0557814598120403,
        "org.jfree.chart.util$Rotation#hashCode()": 0.0,
        "org.jfree.chart.util$Rotation#readResolve()": -0.08746897581990874,
        "org.jfree.chart.util$Rotation#toString()": 0.0,
        "org.jfree.chart.util$Size2D#Size2D()": 1.5069740530662545,
        "org.jfree.chart.util$Size2D#Size2D(double,double)": 0.15839079374140053,
        "org.jfree.chart.util$Size2D#clone()": 0.0,
        "org.jfree.chart.util$Size2D#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$Size2D#getHeight()": 0.16682340720703037,
        "org.jfree.chart.util$Size2D#getWidth()": 0.1696630258077546,
        "org.jfree.chart.util$Size2D#setHeight(double)": 0.0,
        "org.jfree.chart.util$Size2D#setWidth(double)": 0.0,
        "org.jfree.chart.util$Size2D#toString()": 0.0,
        "org.jfree.chart.util$UnitType#<clinit>()": 0.7835269640433927,
        "org.jfree.chart.util$UnitType#UnitType(java.lang.String)": -0.5622594735835124,
        "org.jfree.chart.util$UnitType#equals(java.lang.Object)": -0.3016959826514942,
        "org.jfree.chart.util$UnitType#hashCode()": 0.0,
        "org.jfree.chart.util$UnitType#readResolve()": -0.3016959826514942,
        "org.jfree.chart.util$UnitType#toString()": 0.0,
        "org.jfree.chart.util$VerticalAlignment#<clinit>()": 1.2145544324627853,
        "org.jfree.chart.util$VerticalAlignment#VerticalAlignment(java.lang.String)": -0.1312320051641197,
        "org.jfree.chart.util$VerticalAlignment#equals(java.lang.Object)": -0.1373080091619967,
        "org.jfree.chart.util$VerticalAlignment#hashCode()": -0.08746897581990876,
        "org.jfree.chart.util$VerticalAlignment#readResolve()": -0.13730800916199676,
        "org.jfree.chart.util$VerticalAlignment#toString()": 0.0,
        "org.jfree.data$Range#Range(double,double)": -0.3325338364820475,
        "org.jfree.data$Range#combine(org.jfree.data.Range,org.jfree.data.Range)": -0.5365480119906554,
        "org.jfree.data$Range#constrain(double)": -0.055781459812040295,
        "org.jfree.data$Range#contains(double)": -0.3241325831507189,
        "org.jfree.data$Range#equals(java.lang.Object)": -0.361495060064712,
        "org.jfree.data$Range#expand(org.jfree.data.Range,double,double)": -0.0315206412053729,
        "org.jfree.data$Range#expandToInclude(org.jfree.data.Range,double)": -0.1841825459468786,
        "org.jfree.data$Range#getCentralValue()": 0.0,
        "org.jfree.data$Range#getLength()": -0.06491218980083002,
        "org.jfree.data$Range#getLowerBound()": -0.1733962487758277,
        "org.jfree.data$Range#getUpperBound()": -0.1733962487758277,
        "org.jfree.data$Range#hashCode()": 0.0,
        "org.jfree.data$Range#intersects(double,double)": -0.06491218980083002,
        "org.jfree.data$Range#shift(org.jfree.data.Range,double)": 0.0,
        "org.jfree.data$Range#shift(org.jfree.data.Range,double,boolean)": 0.0,
        "org.jfree.data$Range#shiftWithNoZeroCrossing(double,double)": 0.0,
        "org.jfree.data$Range#toString()": 0.0,
        "org.jfree.data.general$DatasetUtilities#DatasetUtilities()": 0.0,
        "org.jfree.data.general$DatasetUtilities#calculatePieDatasetTotal(org.jfree.data.general.PieDataset)": 0.4011457355202074,
        "org.jfree.data.general$DatasetUtilities#calculateStackTotal(org.jfree.data.xy.TableXYDataset,int)": 0.0,
        "org.jfree.data.general$DatasetUtilities#createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues)": 0.0,
        "org.jfree.data.general$DatasetUtilities#createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double[][])": -0.04512489437491829,
        "org.jfree.data.general$DatasetUtilities#createCategoryDataset(java.lang.String,java.lang.String,double[][])": 0.0,
        "org.jfree.data.general$DatasetUtilities#createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][])": -0.21368528881865245,
        "org.jfree.data.general$DatasetUtilities#createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double)": -0.0315206412053729,
        "org.jfree.data.general$DatasetUtilities#createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int)": -0.0315206412053729,
        "org.jfree.data.general$DatasetUtilities#createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,int)": 0.0,
        "org.jfree.data.general$DatasetUtilities#createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,java.lang.Comparable)": 0.0,
        "org.jfree.data.general$DatasetUtilities#createPieDatasetForRow(org.jfree.data.category.CategoryDataset,int)": 0.0,
        "org.jfree.data.general$DatasetUtilities#createPieDatasetForRow(org.jfree.data.category.CategoryDataset,java.lang.Comparable)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset)": -0.07306782685288771,
        "org.jfree.data.general$DatasetUtilities#findDomainBounds(org.jfree.data.xy.XYDataset)": -0.16819684139444316,
        "org.jfree.data.general$DatasetUtilities#findDomainBounds(org.jfree.data.xy.XYDataset,boolean)": -0.3186059533830423,
        "org.jfree.data.general$DatasetUtilities#findMaximumDomainValue(org.jfree.data.xy.XYDataset)": -0.03152064120537301,
        "org.jfree.data.general$DatasetUtilities#findMaximumRangeValue(org.jfree.data.category.CategoryDataset)": -0.0557814598120403,
        "org.jfree.data.general$DatasetUtilities#findMaximumRangeValue(org.jfree.data.xy.XYDataset)": -0.03152064120537301,
        "org.jfree.data.general$DatasetUtilities#findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset)": -0.03152064120537301,
        "org.jfree.data.general$DatasetUtilities#findMinimumDomainValue(org.jfree.data.xy.XYDataset)": -0.03152064120537301,
        "org.jfree.data.general$DatasetUtilities#findMinimumRangeValue(org.jfree.data.category.CategoryDataset)": -0.04512489437491829,
        "org.jfree.data.general$DatasetUtilities#findMinimumRangeValue(org.jfree.data.xy.XYDataset)": -0.03152064120537301,
        "org.jfree.data.general$DatasetUtilities#findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findRangeBounds(org.jfree.data.category.CategoryDataset)": -0.326876587952035,
        "org.jfree.data.general$DatasetUtilities#findRangeBounds(org.jfree.data.category.CategoryDataset,boolean)": -0.326876587952035,
        "org.jfree.data.general$DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset)": -0.1722870948563212,
        "org.jfree.data.general$DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset,boolean)": -0.30739015516606477,
        "org.jfree.data.general$DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset)": -0.10607339214640099,
        "org.jfree.data.general$DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double)": -0.12753564450448468,
        "org.jfree.data.general$DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap)": -0.04512489437491821,
        "org.jfree.data.general$DatasetUtilities#findStackedRangeBounds(org.jfree.data.xy.TableXYDataset)": -0.08053082525790804,
        "org.jfree.data.general$DatasetUtilities#findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double)": -0.08053082525790804,
        "org.jfree.data.general$DatasetUtilities#isEmptyOrNull(org.jfree.data.category.CategoryDataset)": -0.22065421928654283,
        "org.jfree.data.general$DatasetUtilities#isEmptyOrNull(org.jfree.data.general.PieDataset)": -0.04512489437491829,
        "org.jfree.data.general$DatasetUtilities#isEmptyOrNull(org.jfree.data.xy.XYDataset)": -0.16819684139444302,
        "org.jfree.data.general$DatasetUtilities#iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean)": -0.27827577456896774,
        "org.jfree.data.general$DatasetUtilities#iterateDomainBounds(org.jfree.data.xy.XYDataset)": -0.0315206412053729,
        "org.jfree.data.general$DatasetUtilities#iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean)": -0.3186059533830423,
        "org.jfree.data.general$DatasetUtilities#iterateXYRangeBounds(org.jfree.data.xy.XYDataset)": -0.3130259469337453,
        "org.jfree.data.general$DatasetUtilities#sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable)": 0.0
    },
    "Chart-16": {
        "org.jfree.data$DataUtilities#DataUtilities()": 0.0,
        "org.jfree.data$DataUtilities#calculateColumnTotal(org.jfree.data.Values2D,int)": -0.06507333244473718,
        "org.jfree.data$DataUtilities#calculateRowTotal(org.jfree.data.Values2D,int)": -0.0452351977243263,
        "org.jfree.data$DataUtilities#createNumberArray(double[])": -0.1469837886617007,
        "org.jfree.data$DataUtilities#createNumberArray2D(double[][])": 1.6314627893955533,
        "org.jfree.data$DataUtilities#getCumulativePercentages(org.jfree.data.KeyedValues)": 0.0,
        "org.jfree.data$UnknownKeyException#UnknownKeyException(java.lang.String)": -0.20349718187474886,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#DefaultIntervalCategoryDataset(double[][],double[][])": 1.6392434369451743,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#DefaultIntervalCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][])": 1.6392434369451743,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#DefaultIntervalCategoryDataset(java.lang.Number[][],java.lang.Number[][])": 1.6392434369451743,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#DefaultIntervalCategoryDataset(java.lang.String[],java.lang.Number[][],java.lang.Number[][])": 0.0,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#clone()": 0.41081819286894744,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#clone(java.lang.Number[][])": -0.0452351977243263,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#equal(java.lang.Number[][],java.lang.Number[][])": -0.08073302389262473,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#equals(java.lang.Object)": -0.08073302389262473,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#generateKeys(int,java.lang.String)": -0.13766546188195572,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#getCategoryCount()": -0.10634433803178667,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#getCategoryIndex(java.lang.Comparable)": 0.03880419480500161,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#getColumnCount()": 0.06796065630515788,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#getColumnIndex(java.lang.Comparable)": 0.37532036670064906,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#getColumnKey(int)": -0.04523519772432616,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#getColumnKeys()": -0.04523519772432616,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#getEndValue(int,int)": -0.08073302389262473,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#getEndValue(java.lang.Comparable,java.lang.Comparable)": -0.06507333244473718,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#getRowCount()": -0.06507333244473701,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#getRowIndex(java.lang.Comparable)": 0.45605339059327377,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#getRowKey(int)": -0.0452351977243263,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#getRowKeys()": -0.04523519772432616,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#getSeriesCount()": -0.13766546188195572,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#getSeriesIndex(java.lang.Comparable)": 0.05230096485727018,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#getSeriesKey(int)": 0.0,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#getStartValue(int,int)": -0.08073302389262473,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#getStartValue(java.lang.Comparable,java.lang.Comparable)": -0.06507333244473718,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#getValue(int,int)": -0.0452351977243263,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#getValue(java.lang.Comparable,java.lang.Comparable)": -0.0452351977243263,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#setCategoryKeys(java.lang.Comparable[])": 0.45605339059327377,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#setEndValue(int,java.lang.Comparable,java.lang.Number)": -0.0452351977243263,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#setSeriesKeys(java.lang.Comparable[])": -0.0452351977243263,
        "org.jfree.data.category$DefaultIntervalCategoryDataset#setStartValue(int,java.lang.Comparable,java.lang.Number)": -0.06507333244473718,
        "org.jfree.data.general$AbstractDataset#AbstractDataset()": -0.029257354911392475,
        "org.jfree.data.general$AbstractDataset#addChangeListener(org.jfree.data.general.DatasetChangeListener)": -1.1162244751125705,
        "org.jfree.data.general$AbstractDataset#clone()": -0.2485534286480649,
        "org.jfree.data.general$AbstractDataset#fireDatasetChanged()": -1.4629216749922405,
        "org.jfree.data.general$AbstractDataset#getGroup()": -0.06507333244473701,
        "org.jfree.data.general$AbstractDataset#hasListener(java.util.EventListener)": -0.06507333244473701,
        "org.jfree.data.general$AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)": -1.5863070991467092,
        "org.jfree.data.general$AbstractDataset#readObject(java.io.ObjectInputStream)": -0.4439221584063313,
        "org.jfree.data.general$AbstractDataset#removeChangeListener(org.jfree.data.general.DatasetChangeListener)": -0.23148566854477637,
        "org.jfree.data.general$AbstractDataset#setGroup(org.jfree.data.general.DatasetGroup)": 0.0,
        "org.jfree.data.general$AbstractDataset#validateObject()": -0.44392215840633137,
        "org.jfree.data.general$AbstractDataset#writeObject(java.io.ObjectOutputStream)": -0.4439221584063313,
        "org.jfree.data.general$AbstractSeriesDataset#AbstractSeriesDataset()": 0.6161033176994887,
        "org.jfree.data.general$AbstractSeriesDataset#indexOf(java.lang.Comparable)": -0.21071418688674798,
        "org.jfree.data.general$AbstractSeriesDataset#seriesChanged(org.jfree.data.general.SeriesChangeEvent)": -0.0942297939448932,
        "org.jfree.data.general$DatasetChangeEvent#DatasetChangeEvent(java.lang.Object,org.jfree.data.general.Dataset)": -1.7916425229420896,
        "org.jfree.data.general$DatasetChangeEvent#getDataset()": 0.0,
        "org.jfree.data.general$DatasetGroup#DatasetGroup()": -1.3779134570166045,
        "org.jfree.data.general$DatasetGroup#DatasetGroup(java.lang.String)": 0.0,
        "org.jfree.data.general$DatasetGroup#clone()": 0.0,
        "org.jfree.data.general$DatasetGroup#equals(java.lang.Object)": -0.04523519772432616,
        "org.jfree.data.general$DatasetGroup#getID()": 0.0,
        "org.jfree.data.resources$DataPackageResources#<clinit>()": 0.29345699931826974,
        "org.jfree.data.resources$DataPackageResources#DataPackageResources()": 0.29345699931826974,
        "org.jfree.data.resources$DataPackageResources#getContents()": -0.13766546188195555
    },
    "Chart-17": {
        "org.jfree.chart.util$ObjectUtilities#<clinit>()": -1.4577404216248575,
        "org.jfree.chart.util$ObjectUtilities#ObjectUtilities()": 0.0,
        "org.jfree.chart.util$ObjectUtilities#clone(java.lang.Object)": -0.4086082970897804,
        "org.jfree.chart.util$ObjectUtilities#convertName(java.lang.String,java.lang.Class)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#deepClone(java.util.Collection)": -0.25851984004224726,
        "org.jfree.chart.util$ObjectUtilities#equal(java.lang.Object,java.lang.Object)": -1.3646229276672726,
        "org.jfree.chart.util$ObjectUtilities#getClassLoader()": 0.0,
        "org.jfree.chart.util$ObjectUtilities#getClassLoader(java.lang.Class)": -0.29571641788233005,
        "org.jfree.chart.util$ObjectUtilities#getClassLoaderSource()": 0.0,
        "org.jfree.chart.util$ObjectUtilities#getResource(java.lang.String,java.lang.Class)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#getResourceAsStream(java.lang.String,java.lang.Class)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#getResourceRelative(java.lang.String,java.lang.Class)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#getResourceRelativeAsStream(java.lang.String,java.lang.Class)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#hashCode(java.lang.Object)": -0.26736951415385,
        "org.jfree.chart.util$ObjectUtilities#isJDK14()": -0.29571641788233005,
        "org.jfree.chart.util$ObjectUtilities#loadAndInstantiate(java.lang.String,java.lang.Class)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#loadAndInstantiate(java.lang.String,java.lang.Class,java.lang.Class)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#parseVersions(java.lang.String)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#setClassLoader(java.lang.ClassLoader)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#setClassLoaderSource(java.lang.String)": 0.0,
        "org.jfree.data.general$Series#Series(java.lang.Comparable)": 1.0964461228634665,
        "org.jfree.data.general$Series#Series(java.lang.Comparable,java.lang.String)": -0.24934031476343843,
        "org.jfree.data.general$Series#addChangeListener(org.jfree.data.general.SeriesChangeListener)": -0.5157873141468095,
        "org.jfree.data.general$Series#addPropertyChangeListener(java.beans.PropertyChangeListener)": 0.0,
        "org.jfree.data.general$Series#clone()": -0.15955603191346723,
        "org.jfree.data.general$Series#equals(java.lang.Object)": -0.3225949911386333,
        "org.jfree.data.general$Series#firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)": -0.030731248584356052,
        "org.jfree.data.general$Series#fireSeriesChanged()": 1.1329096069371993,
        "org.jfree.data.general$Series#getDescription()": -0.30662544063581,
        "org.jfree.data.general$Series#getKey()": -0.4359956489426118,
        "org.jfree.data.general$Series#getNotify()": 0.0,
        "org.jfree.data.general$Series#hashCode()": -0.05435715711818861,
        "org.jfree.data.general$Series#isEmpty()": 0.0,
        "org.jfree.data.general$Series#notifyListeners(org.jfree.data.general.SeriesChangeEvent)": -0.21287683068970542,
        "org.jfree.data.general$Series#removeChangeListener(org.jfree.data.general.SeriesChangeListener)": -0.11405714593717864,
        "org.jfree.data.general$Series#removePropertyChangeListener(java.beans.PropertyChangeListener)": 0.0,
        "org.jfree.data.general$Series#setDescription(java.lang.String)": -0.07843750798301397,
        "org.jfree.data.general$Series#setKey(java.lang.Comparable)": -0.07117836480617723,
        "org.jfree.data.general$Series#setNotify(boolean)": 0.0,
        "org.jfree.data.general$SeriesChangeEvent#SeriesChangeEvent(java.lang.Object)": -0.21287683068970542,
        "org.jfree.data.general$SeriesException#SeriesException(java.lang.String)": -0.04398217492813106,
        "org.jfree.data.time$Day#<clinit>()": 1.3379590898278346,
        "org.jfree.data.time$Day#Day()": -0.11405714593717864,
        "org.jfree.data.time$Day#Day(int,int,int)": -0.38506870170878693,
        "org.jfree.data.time$Day#Day(java.util.Date)": -0.12412056962238055,
        "org.jfree.data.time$Day#Day(java.util.Date,java.util.TimeZone)": -0.2008077851510483,
        "org.jfree.data.time$Day#Day(org.jfree.data.time.SerialDate)": -0.12412056962238055,
        "org.jfree.data.time$Day#compareTo(java.lang.Object)": -0.09152623765679634,
        "org.jfree.data.time$Day#equals(java.lang.Object)": -0.17146568192445272,
        "org.jfree.data.time$Day#getDayOfMonth()": -0.34829487925641,
        "org.jfree.data.time$Day#getFirstMillisecond()": -0.1241205696223806,
        "org.jfree.data.time$Day#getFirstMillisecond(java.util.Calendar)": -0.46038671901091227,
        "org.jfree.data.time$Day#getLastMillisecond()": -0.1241205696223806,
        "org.jfree.data.time$Day#getLastMillisecond(java.util.Calendar)": -0.46038671901091227,
        "org.jfree.data.time$Day#getMonth()": -0.34829487925641,
        "org.jfree.data.time$Day#getSerialDate()": -0.18283576241010047,
        "org.jfree.data.time$Day#getSerialIndex()": -0.11405714593717864,
        "org.jfree.data.time$Day#getYear()": -0.34323842515497127,
        "org.jfree.data.time$Day#hashCode()": -0.07843750798301383,
        "org.jfree.data.time$Day#next()": -0.14699189679788435,
        "org.jfree.data.time$Day#parseDay(java.lang.String)": -0.04398217492813102,
        "org.jfree.data.time$Day#peg(java.util.Calendar)": -0.46038671901091227,
        "org.jfree.data.time$Day#previous()": -0.06324344106897965,
        "org.jfree.data.time$Day#toString()": 0.0,
        "org.jfree.data.time$FixedMillisecond#FixedMillisecond()": -0.030731248584356257,
        "org.jfree.data.time$FixedMillisecond#FixedMillisecond(java.util.Date)": -0.06324344106897965,
        "org.jfree.data.time$FixedMillisecond#FixedMillisecond(long)": -0.05435715711818861,
        "org.jfree.data.time$FixedMillisecond#compareTo(java.lang.Object)": -0.030731248584356052,
        "org.jfree.data.time$FixedMillisecond#equals(java.lang.Object)": -0.04398217492813102,
        "org.jfree.data.time$FixedMillisecond#getFirstMillisecond()": 0.0,
        "org.jfree.data.time$FixedMillisecond#getFirstMillisecond(java.util.Calendar)": 0.0,
        "org.jfree.data.time$FixedMillisecond#getLastMillisecond()": 0.0,
        "org.jfree.data.time$FixedMillisecond#getLastMillisecond(java.util.Calendar)": 0.0,
        "org.jfree.data.time$FixedMillisecond#getMiddleMillisecond()": 0.0,
        "org.jfree.data.time$FixedMillisecond#getMiddleMillisecond(java.util.Calendar)": 0.0,
        "org.jfree.data.time$FixedMillisecond#getSerialIndex()": 0.0,
        "org.jfree.data.time$FixedMillisecond#getTime()": -0.04398217492813106,
        "org.jfree.data.time$FixedMillisecond#hashCode()": -0.030731248584356052,
        "org.jfree.data.time$FixedMillisecond#next()": 0.0,
        "org.jfree.data.time$FixedMillisecond#peg(java.util.Calendar)": 0.0,
        "org.jfree.data.time$FixedMillisecond#previous()": 0.0,
        "org.jfree.data.time$Month#Month()": -0.030731248584356257,
        "org.jfree.data.time$Month#Month(int,int)": -0.17909996645697007,
        "org.jfree.data.time$Month#Month(int,org.jfree.data.time.Year)": -0.030731248584356257,
        "org.jfree.data.time$Month#Month(java.util.Date)": -0.030731248584356257,
        "org.jfree.data.time$Month#Month(java.util.Date,java.util.TimeZone)": -0.07843750798301383,
        "org.jfree.data.time$Month#compareTo(java.lang.Object)": -0.05435715711818861,
        "org.jfree.data.time$Month#equals(java.lang.Object)": -0.08518457755411528,
        "org.jfree.data.time$Month#evaluateAsYear(java.lang.String)": -0.030731248584356257,
        "org.jfree.data.time$Month#findSeparator(java.lang.String)": -0.030731248584356052,
        "org.jfree.data.time$Month#getFirstMillisecond()": -0.07117836480617723,
        "org.jfree.data.time$Month#getFirstMillisecond(java.util.Calendar)": -0.18283576241010047,
        "org.jfree.data.time$Month#getLastMillisecond()": -0.06324344106897972,
        "org.jfree.data.time$Month#getLastMillisecond(java.util.Calendar)": -0.18283576241010055,
        "org.jfree.data.time$Month#getMonth()": -0.11916858560609422,
        "org.jfree.data.time$Month#getSerialIndex()": -0.06324344106897972,
        "org.jfree.data.time$Month#getYear()": -0.04398217492813102,
        "org.jfree.data.time$Month#getYearValue()": -0.09753657745387034,
        "org.jfree.data.time$Month#hashCode()": -0.030731248584356052,
        "org.jfree.data.time$Month#next()": -0.05435715711818861,
        "org.jfree.data.time$Month#parseMonth(java.lang.String)": -0.030731248584356257,
        "org.jfree.data.time$Month#peg(java.util.Calendar)": -0.18283576241010055,
        "org.jfree.data.time$Month#previous()": -0.05435715711818861,
        "org.jfree.data.time$Month#toString()": 0.0,
        "org.jfree.data.time$RegularTimePeriod#<clinit>()": -0.27266734982375873,
        "org.jfree.data.time$RegularTimePeriod#RegularTimePeriod()": -0.25834551769929426,
        "org.jfree.data.time$RegularTimePeriod#createInstance(java.lang.Class,java.util.Date,java.util.TimeZone)": -0.030731248584356257,
        "org.jfree.data.time$RegularTimePeriod#downsize(java.lang.Class)": -0.06324344106897965,
        "org.jfree.data.time$RegularTimePeriod#getEnd()": -0.1336106577390279,
        "org.jfree.data.time$RegularTimePeriod#getMiddleMillisecond()": -0.14263218818599593,
        "org.jfree.data.time$RegularTimePeriod#getMiddleMillisecond(java.util.Calendar)": -0.030731248584356257,
        "org.jfree.data.time$RegularTimePeriod#getStart()": -0.1336106577390279,
        "org.jfree.data.time$RegularTimePeriod#toString()": 0.0,
        "org.jfree.data.time$SerialDate#<clinit>()": -0.5666349108601789,
        "org.jfree.data.time$SerialDate#SerialDate()": -0.4603867190109123,
        "org.jfree.data.time$SerialDate#addDays(int,org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$SerialDate#addMonths(int,org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$SerialDate#addYears(int,org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$SerialDate#createInstance(int)": -0.12412056962238055,
        "org.jfree.data.time$SerialDate#createInstance(int,int,int)": -0.46038671901091227,
        "org.jfree.data.time$SerialDate#createInstance(java.util.Date)": 0.0,
        "org.jfree.data.time$SerialDate#getDescription()": 0.0,
        "org.jfree.data.time$SerialDate#getEndOfCurrentMonth(org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$SerialDate#getFollowingDayOfWeek(int)": 0.0,
        "org.jfree.data.time$SerialDate#getFollowingDayOfWeek(int,org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$SerialDate#getMonths()": 0.0,
        "org.jfree.data.time$SerialDate#getMonths(boolean)": 0.0,
        "org.jfree.data.time$SerialDate#getNearestDayOfWeek(int)": 0.0,
        "org.jfree.data.time$SerialDate#getNearestDayOfWeek(int,org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$SerialDate#getPreviousDayOfWeek(int)": 0.0,
        "org.jfree.data.time$SerialDate#getPreviousDayOfWeek(int,org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$SerialDate#isLeapYear(int)": -0.4603867190109123,
        "org.jfree.data.time$SerialDate#isValidMonthCode(int)": 0.0,
        "org.jfree.data.time$SerialDate#isValidWeekInMonthCode(int)": 0.0,
        "org.jfree.data.time$SerialDate#isValidWeekdayCode(int)": 0.0,
        "org.jfree.data.time$SerialDate#lastDayOfMonth(int,int)": -0.566634910860179,
        "org.jfree.data.time$SerialDate#leapYearCount(int)": -0.4603867190109123,
        "org.jfree.data.time$SerialDate#monthCodeToQuarter(int)": -0.05435715711818845,
        "org.jfree.data.time$SerialDate#monthCodeToString(int)": 0.0,
        "org.jfree.data.time$SerialDate#monthCodeToString(int,boolean)": 0.0,
        "org.jfree.data.time$SerialDate#relativeToString(int)": 0.0,
        "org.jfree.data.time$SerialDate#setDescription(java.lang.String)": 0.0,
        "org.jfree.data.time$SerialDate#stringToMonthCode(java.lang.String)": -0.030731248584356257,
        "org.jfree.data.time$SerialDate#stringToWeekdayCode(java.lang.String)": 0.0,
        "org.jfree.data.time$SerialDate#toString()": 0.0,
        "org.jfree.data.time$SerialDate#weekInMonthToString(int)": 0.0,
        "org.jfree.data.time$SerialDate#weekdayCodeToString(int)": 0.0,
        "org.jfree.data.time$SpreadsheetDate#SpreadsheetDate(int)": -0.12412056962238055,
        "org.jfree.data.time$SpreadsheetDate#SpreadsheetDate(int,int,int)": -0.46038671901091227,
        "org.jfree.data.time$SpreadsheetDate#calcSerial(int,int,int)": -0.46038671901091227,
        "org.jfree.data.time$SpreadsheetDate#compare(org.jfree.data.time.SerialDate)": -0.09152623765679634,
        "org.jfree.data.time$SpreadsheetDate#compareTo(java.lang.Object)": 0.0,
        "org.jfree.data.time$SpreadsheetDate#equals(java.lang.Object)": -0.15544752867540002,
        "org.jfree.data.time$SpreadsheetDate#getDayOfMonth()": -0.4603867190109123,
        "org.jfree.data.time$SpreadsheetDate#getDayOfWeek()": 0.0,
        "org.jfree.data.time$SpreadsheetDate#getMonth()": -0.4603867190109123,
        "org.jfree.data.time$SpreadsheetDate#getYYYY()": -0.4603867190109123,
        "org.jfree.data.time$SpreadsheetDate#hashCode()": -0.07843750798301383,
        "org.jfree.data.time$SpreadsheetDate#isAfter(org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$SpreadsheetDate#isBefore(org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$SpreadsheetDate#isInRange(org.jfree.data.time.SerialDate,org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$SpreadsheetDate#isInRange(org.jfree.data.time.SerialDate,org.jfree.data.time.SerialDate,int)": 0.0,
        "org.jfree.data.time$SpreadsheetDate#isOn(org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$SpreadsheetDate#isOnOrAfter(org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$SpreadsheetDate#isOnOrBefore(org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$SpreadsheetDate#toDate()": 0.0,
        "org.jfree.data.time$SpreadsheetDate#toSerial()": -0.2614894419156608,
        "org.jfree.data.time$TimePeriodFormatException#TimePeriodFormatException(java.lang.String)": -0.04398217492813106,
        "org.jfree.data.time$TimeSeries#TimeSeries(java.lang.Comparable)": 1.7167304591861874,
        "org.jfree.data.time$TimeSeries#TimeSeries(java.lang.Comparable,java.lang.Class)": 1.656407807884389,
        "org.jfree.data.time$TimeSeries#TimeSeries(java.lang.Comparable,java.lang.String,java.lang.String,java.lang.Class)": 1.6334788132979488,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.RegularTimePeriod,double)": -0.14263218818599593,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.RegularTimePeriod,double,boolean)": -0.14263218818599593,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.RegularTimePeriod,java.lang.Number)": 1.6645524713245998,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.RegularTimePeriod,java.lang.Number,boolean)": 1.6645524713245998,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.TimeSeriesDataItem)": -0.07117836480617716,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.TimeSeriesDataItem,boolean)": 1.6485343180755474,
        "org.jfree.data.time$TimeSeries#addAndOrUpdate(org.jfree.data.time.TimeSeries)": -0.030731248584356257,
        "org.jfree.data.time$TimeSeries#addOrUpdate(org.jfree.data.time.RegularTimePeriod,double)": -0.04398217492813102,
        "org.jfree.data.time$TimeSeries#addOrUpdate(org.jfree.data.time.RegularTimePeriod,java.lang.Number)": -0.05435715711818861,
        "org.jfree.data.time$TimeSeries#clear()": 0.0,
        "org.jfree.data.time$TimeSeries#clone()": 1.776017825071869,
        "org.jfree.data.time$TimeSeries#createCopy(int,int)": 1.7556350599625565,
        "org.jfree.data.time$TimeSeries#createCopy(org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod)": -0.030731248584356257,
        "org.jfree.data.time$TimeSeries#delete(int,int)": -0.04398217492813102,
        "org.jfree.data.time$TimeSeries#delete(org.jfree.data.time.RegularTimePeriod)": -0.030731248584356257,
        "org.jfree.data.time$TimeSeries#equals(java.lang.Object)": -0.0975365774538702,
        "org.jfree.data.time$TimeSeries#getDataItem(int)": 0.3027478804486422,
        "org.jfree.data.time$TimeSeries#getDataItem(org.jfree.data.time.RegularTimePeriod)": -0.030731248584356257,
        "org.jfree.data.time$TimeSeries#getDomainDescription()": -0.08518457755411535,
        "org.jfree.data.time$TimeSeries#getIndex(org.jfree.data.time.RegularTimePeriod)": -0.09152623765679634,
        "org.jfree.data.time$TimeSeries#getItemCount()": 0.29890258931095726,
        "org.jfree.data.time$TimeSeries#getItems()": 0.0,
        "org.jfree.data.time$TimeSeries#getMaximumItemAge()": -0.09753657745387034,
        "org.jfree.data.time$TimeSeries#getMaximumItemCount()": -0.09753657745387034,
        "org.jfree.data.time$TimeSeries#getNextTimePeriod()": 0.0,
        "org.jfree.data.time$TimeSeries#getRangeDescription()": -0.08518457755411535,
        "org.jfree.data.time$TimeSeries#getTimePeriod(int)": 1.6485343180755474,
        "org.jfree.data.time$TimeSeries#getTimePeriodClass()": -0.04398217492813106,
        "org.jfree.data.time$TimeSeries#getTimePeriods()": 0.0,
        "org.jfree.data.time$TimeSeries#getTimePeriodsUniqueToOtherSeries(org.jfree.data.time.TimeSeries)": 0.0,
        "org.jfree.data.time$TimeSeries#getValue(int)": -0.06324344106897965,
        "org.jfree.data.time$TimeSeries#getValue(org.jfree.data.time.RegularTimePeriod)": -0.06324344106897965,
        "org.jfree.data.time$TimeSeries#hashCode()": -0.030731248584356257,
        "org.jfree.data.time$TimeSeries#removeAgedItems(boolean)": 1.6485343180755474,
        "org.jfree.data.time$TimeSeries#removeAgedItems(long,boolean)": -0.030731248584356257,
        "org.jfree.data.time$TimeSeries#setDomainDescription(java.lang.String)": 0.0,
        "org.jfree.data.time$TimeSeries#setMaximumItemAge(long)": -0.05435715711818861,
        "org.jfree.data.time$TimeSeries#setMaximumItemCount(int)": -0.05435715711818861,
        "org.jfree.data.time$TimeSeries#setRangeDescription(java.lang.String)": 0.0,
        "org.jfree.data.time$TimeSeries#update(int,java.lang.Number)": 0.0,
        "org.jfree.data.time$TimeSeries#update(org.jfree.data.time.RegularTimePeriod,java.lang.Number)": -0.030731248584356257,
        "org.jfree.data.time$TimeSeriesDataItem#TimeSeriesDataItem(org.jfree.data.time.RegularTimePeriod,double)": -0.17146568192445272,
        "org.jfree.data.time$TimeSeriesDataItem#TimeSeriesDataItem(org.jfree.data.time.RegularTimePeriod,java.lang.Number)": 0.2913777999629946,
        "org.jfree.data.time$TimeSeriesDataItem#clone()": -0.07843750798301397,
        "org.jfree.data.time$TimeSeriesDataItem#compareTo(java.lang.Object)": -0.11916858560609404,
        "org.jfree.data.time$TimeSeriesDataItem#equals(java.lang.Object)": -0.09152623765679634,
        "org.jfree.data.time$TimeSeriesDataItem#getPeriod()": 0.3027478804486422,
        "org.jfree.data.time$TimeSeriesDataItem#getValue()": -0.07843750798301397,
        "org.jfree.data.time$TimeSeriesDataItem#hashCode()": -0.030731248584356257,
        "org.jfree.data.time$TimeSeriesDataItem#setValue(java.lang.Number)": -0.07117836480617723,
        "org.jfree.data.time$Year#Year()": -0.030731248584356257,
        "org.jfree.data.time$Year#Year(int)": 1.4947858974010426,
        "org.jfree.data.time$Year#Year(java.util.Date)": -0.030731248584356257,
        "org.jfree.data.time$Year#Year(java.util.Date,java.util.TimeZone)": -0.06324344106897965,
        "org.jfree.data.time$Year#compareTo(java.lang.Object)": 1.6298411765356242,
        "org.jfree.data.time$Year#equals(java.lang.Object)": -0.18652118670205117,
        "org.jfree.data.time$Year#getFirstMillisecond()": -0.10876585099999048,
        "org.jfree.data.time$Year#getFirstMillisecond(java.util.Calendar)": 0.14121014696371825,
        "org.jfree.data.time$Year#getLastMillisecond()": -0.10876585099999048,
        "org.jfree.data.time$Year#getLastMillisecond(java.util.Calendar)": 0.14121014696371825,
        "org.jfree.data.time$Year#getSerialIndex()": 0.3187660336976951,
        "org.jfree.data.time$Year#getYear()": 0.19816373820720445,
        "org.jfree.data.time$Year#hashCode()": -0.030731248584356052,
        "org.jfree.data.time$Year#next()": -0.05435715711818861,
        "org.jfree.data.time$Year#parseYear(java.lang.String)": -0.05435715711818861,
        "org.jfree.data.time$Year#peg(java.util.Calendar)": 1.486996584590623,
        "org.jfree.data.time$Year#previous()": -0.04398217492813102,
        "org.jfree.data.time$Year#toString()": 0.0
    },
    "Chart-18": {
        "org.jfree.data$DefaultKeyedValues#DefaultKeyedValues()": -0.44440370277015784,
        "org.jfree.data$DefaultKeyedValues#addValue(java.lang.Comparable,double)": 0.6122649641553312,
        "org.jfree.data$DefaultKeyedValues#addValue(java.lang.Comparable,java.lang.Number)": 0.9170381693512246,
        "org.jfree.data$DefaultKeyedValues#clear()": -0.13542295881202082,
        "org.jfree.data$DefaultKeyedValues#clone()": -0.14457700632174775,
        "org.jfree.data$DefaultKeyedValues#equals(java.lang.Object)": -0.06406184436951404,
        "org.jfree.data$DefaultKeyedValues#getIndex(java.lang.Comparable)": -0.4136710783212604,
        "org.jfree.data$DefaultKeyedValues#getItemCount()": -0.23407909973582308,
        "org.jfree.data$DefaultKeyedValues#getKey(int)": -0.20715224105129426,
        "org.jfree.data$DefaultKeyedValues#getKeys()": -0.11558592107176247,
        "org.jfree.data$DefaultKeyedValues#getValue(int)": -0.753646317175495,
        "org.jfree.data$DefaultKeyedValues#getValue(java.lang.Comparable)": -0.16987689731907513,
        "org.jfree.data$DefaultKeyedValues#hashCode()": 0.0,
        "org.jfree.data$DefaultKeyedValues#insertValue(int,java.lang.Comparable,double)": -0.04454270040408622,
        "org.jfree.data$DefaultKeyedValues#insertValue(int,java.lang.Comparable,java.lang.Number)": -0.04454270040408622,
        "org.jfree.data$DefaultKeyedValues#rebuildIndex()": 0.08849128834580852,
        "org.jfree.data$DefaultKeyedValues#removeValue(int)": 1.8131419108277438,
        "org.jfree.data$DefaultKeyedValues#removeValue(java.lang.Comparable)": 1.8199999999999998,
        "org.jfree.data$DefaultKeyedValues#setValue(java.lang.Comparable,double)": 0.0,
        "org.jfree.data$DefaultKeyedValues#setValue(java.lang.Comparable,java.lang.Number)": 0.935552461051021,
        "org.jfree.data$DefaultKeyedValues#sortByKeys(org.jfree.chart.util.SortOrder)": -0.06406184436951404,
        "org.jfree.data$DefaultKeyedValues#sortByValues(org.jfree.chart.util.SortOrder)": -0.06406184436951404,
        "org.jfree.data$DefaultKeyedValues2D#DefaultKeyedValues2D()": 0.35982073460249814,
        "org.jfree.data$DefaultKeyedValues2D#DefaultKeyedValues2D(boolean)": -0.5385911520597702,
        "org.jfree.data$DefaultKeyedValues2D#addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)": 0.4114041414674819,
        "org.jfree.data$DefaultKeyedValues2D#clear()": -0.044542700404086366,
        "org.jfree.data$DefaultKeyedValues2D#clone()": -0.0927350358446688,
        "org.jfree.data$DefaultKeyedValues2D#equals(java.lang.Object)": -0.14457700632174772,
        "org.jfree.data$DefaultKeyedValues2D#getColumnCount()": -0.6448929002289447,
        "org.jfree.data$DefaultKeyedValues2D#getColumnIndex(java.lang.Comparable)": -0.07946399610479316,
        "org.jfree.data$DefaultKeyedValues2D#getColumnKey(int)": -0.20715224105129426,
        "org.jfree.data$DefaultKeyedValues2D#getColumnKeys()": -0.20006861183532298,
        "org.jfree.data$DefaultKeyedValues2D#getRowCount()": -0.7057026397190655,
        "org.jfree.data$DefaultKeyedValues2D#getRowIndex(java.lang.Comparable)": -0.48794244057818364,
        "org.jfree.data$DefaultKeyedValues2D#getRowKey(int)": -0.3835494150761063,
        "org.jfree.data$DefaultKeyedValues2D#getRowKeys()": -0.20715224105129426,
        "org.jfree.data$DefaultKeyedValues2D#getValue(int,int)": -0.601717582119445,
        "org.jfree.data$DefaultKeyedValues2D#getValue(java.lang.Comparable,java.lang.Comparable)": -0.24683857227279107,
        "org.jfree.data$DefaultKeyedValues2D#hashCode()": 0.0,
        "org.jfree.data$DefaultKeyedValues2D#removeColumn(int)": 0.0,
        "org.jfree.data$DefaultKeyedValues2D#removeColumn(java.lang.Comparable)": 1.1171067811865476,
        "org.jfree.data$DefaultKeyedValues2D#removeRow(int)": -0.044542700404086366,
        "org.jfree.data$DefaultKeyedValues2D#removeRow(java.lang.Comparable)": 0.0,
        "org.jfree.data$DefaultKeyedValues2D#removeValue(java.lang.Comparable,java.lang.Comparable)": -0.07946399610479304,
        "org.jfree.data$DefaultKeyedValues2D#setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)": 0.3744194692167751,
        "org.jfree.data$UnknownKeyException#UnknownKeyException(java.lang.String)": -0.1777441448613808,
        "org.jfree.data.category$DefaultCategoryDataset#DefaultCategoryDataset()": 0.003036415762595085,
        "org.jfree.data.category$DefaultCategoryDataset#addValue(double,java.lang.Comparable,java.lang.Comparable)": 0.25550036766441,
        "org.jfree.data.category$DefaultCategoryDataset#addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)": 0.0874391439767919,
        "org.jfree.data.category$DefaultCategoryDataset#clear()": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#clone()": -0.06406184436951404,
        "org.jfree.data.category$DefaultCategoryDataset#equals(java.lang.Object)": -0.1354229588120208,
        "org.jfree.data.category$DefaultCategoryDataset#getColumnCount()": -0.5816643729971003,
        "org.jfree.data.category$DefaultCategoryDataset#getColumnIndex(java.lang.Comparable)": -0.07946399610479304,
        "org.jfree.data.category$DefaultCategoryDataset#getColumnKey(int)": -0.20006861183532298,
        "org.jfree.data.category$DefaultCategoryDataset#getColumnKeys()": -0.1354229588120208,
        "org.jfree.data.category$DefaultCategoryDataset#getRowCount()": -0.6448929002289447,
        "org.jfree.data.category$DefaultCategoryDataset#getRowIndex(java.lang.Comparable)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#getRowKey(int)": -0.3534858579344946,
        "org.jfree.data.category$DefaultCategoryDataset#getRowKeys()": -0.14457700632174772,
        "org.jfree.data.category$DefaultCategoryDataset#getValue(int,int)": -0.5448005352380697,
        "org.jfree.data.category$DefaultCategoryDataset#getValue(java.lang.Comparable,java.lang.Comparable)": -0.23407909973582317,
        "org.jfree.data.category$DefaultCategoryDataset#hashCode()": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#incrementValue(double,java.lang.Comparable,java.lang.Comparable)": -0.04454270040408622,
        "org.jfree.data.category$DefaultCategoryDataset#removeColumn(int)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#removeColumn(java.lang.Comparable)": 0.705,
        "org.jfree.data.category$DefaultCategoryDataset#removeRow(int)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#removeRow(java.lang.Comparable)": 0.0,
        "org.jfree.data.category$DefaultCategoryDataset#removeValue(java.lang.Comparable,java.lang.Comparable)": -0.04454270040408622,
        "org.jfree.data.category$DefaultCategoryDataset#setValue(double,java.lang.Comparable,java.lang.Comparable)": -0.14457700632174772,
        "org.jfree.data.category$DefaultCategoryDataset#setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)": -0.16987689731907513,
        "org.jfree.data.general$AbstractDataset#AbstractDataset()": -1.0815753745270131,
        "org.jfree.data.general$AbstractDataset#addChangeListener(org.jfree.data.general.DatasetChangeListener)": -1.0869015032795777,
        "org.jfree.data.general$AbstractDataset#clone()": -0.3111297157773951,
        "org.jfree.data.general$AbstractDataset#fireDatasetChanged()": -0.7150359239144265,
        "org.jfree.data.general$AbstractDataset#getGroup()": -0.06406184436951401,
        "org.jfree.data.general$AbstractDataset#hasListener(java.util.EventListener)": -0.06406184436951401,
        "org.jfree.data.general$AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)": -1.4077061436974103,
        "org.jfree.data.general$AbstractDataset#readObject(java.io.ObjectInputStream)": -0.4357865180631464,
        "org.jfree.data.general$AbstractDataset#removeChangeListener(org.jfree.data.general.DatasetChangeListener)": -0.22753653034018106,
        "org.jfree.data.general$AbstractDataset#setGroup(org.jfree.data.general.DatasetGroup)": 0.0,
        "org.jfree.data.general$AbstractDataset#validateObject()": -0.43578651806314644,
        "org.jfree.data.general$AbstractDataset#writeObject(java.io.ObjectOutputStream)": -0.4357865180631464,
        "org.jfree.data.general$DatasetChangeEvent#DatasetChangeEvent(java.lang.Object,org.jfree.data.general.Dataset)": -1.608461565673568,
        "org.jfree.data.general$DatasetChangeEvent#getDataset()": 0.0,
        "org.jfree.data.general$DatasetGroup#DatasetGroup()": -1.656349849538558,
        "org.jfree.data.general$DatasetGroup#DatasetGroup(java.lang.String)": 0.0,
        "org.jfree.data.general$DatasetGroup#clone()": 0.0,
        "org.jfree.data.general$DatasetGroup#equals(java.lang.Object)": -0.044542700404086366,
        "org.jfree.data.general$DatasetGroup#getID()": 0.0
    },
    "Chart-19": {},
    "Chart-2": {
        "org.jfree.chart.event$DatasetChangeInfo#DatasetChangeInfo()": -0.9508988336577427,
        "org.jfree.data$ComparableObjectItem#ComparableObjectItem(java.lang.Comparable,java.lang.Object)": 0.030951907124366573,
        "org.jfree.data$ComparableObjectItem#clone()": -0.08627652491710025,
        "org.jfree.data$ComparableObjectItem#compareTo(java.lang.Object)": -0.19820320911512868,
        "org.jfree.data$ComparableObjectItem#equals(java.lang.Object)": -0.24883744074112046,
        "org.jfree.data$ComparableObjectItem#getComparable()": -0.22635489344754522,
        "org.jfree.data$ComparableObjectItem#getObject()": 0.3166849449985495,
        "org.jfree.data$ComparableObjectItem#hashCode()": -0.05968475764830533,
        "org.jfree.data$ComparableObjectItem#setObject(java.lang.Object)": 0.0,
        "org.jfree.data$ComparableObjectSeries#ComparableObjectSeries(java.lang.Comparable)": -0.07825164468511749,
        "org.jfree.data$ComparableObjectSeries#ComparableObjectSeries(java.lang.Comparable,boolean,boolean)": 1.4120508288264744,
        "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object)": -0.0694881264542804,
        "org.jfree.data$ComparableObjectSeries#add(java.lang.Comparable,java.lang.Object,boolean)": -0.0694881264542804,
        "org.jfree.data$ComparableObjectSeries#add(org.jfree.data.ComparableObjectItem,boolean)": 1.4460565099499187,
        "org.jfree.data$ComparableObjectSeries#clear()": -0.07825164468511749,
        "org.jfree.data$ComparableObjectSeries#delete(int,int)": 0.0,
        "org.jfree.data$ComparableObjectSeries#equals(java.lang.Object)": -0.23399629425645818,
        "org.jfree.data$ComparableObjectSeries#getAllowDuplicateXValues()": -0.033680233439906226,
        "org.jfree.data$ComparableObjectSeries#getAutoSort()": -0.033680233439906226,
        "org.jfree.data$ComparableObjectSeries#getDataItem(int)": 0.24785866892554986,
        "org.jfree.data$ComparableObjectSeries#getItemCount()": 0.09737719639858267,
        "org.jfree.data$ComparableObjectSeries#getMaximumItemCount()": -0.08627652491710025,
        "org.jfree.data$ComparableObjectSeries#hashCode()": -0.048254219975912345,
        "org.jfree.data$ComparableObjectSeries#indexOf(java.lang.Comparable)": -0.1671415872425754,
        "org.jfree.data$ComparableObjectSeries#remove(int)": -0.10742367904312271,
        "org.jfree.data$ComparableObjectSeries#remove(java.lang.Comparable)": -0.1198785005862652,
        "org.jfree.data$ComparableObjectSeries#setMaximumItemCount(int)": -0.11378042249821976,
        "org.jfree.data$ComparableObjectSeries#update(java.lang.Comparable,java.lang.Object)": 0.0,
        "org.jfree.data$ComparableObjectSeries#updateByIndex(int,java.lang.Object)": 0.0,
        "org.jfree.data$Range#Range(double,double)": -1.060905077867429,
        "org.jfree.data$Range#combine(org.jfree.data.Range,org.jfree.data.Range)": -0.6562014654417618,
        "org.jfree.data$Range#constrain(double)": -0.18967776294421163,
        "org.jfree.data$Range#contains(double)": -0.4849543749733334,
        "org.jfree.data$Range#equals(java.lang.Object)": -0.4591050040598623,
        "org.jfree.data$Range#expand(org.jfree.data.Range,double,double)": -0.03368023343990616,
        "org.jfree.data$Range#expandToInclude(org.jfree.data.Range,double)": -0.21056229386964537,
        "org.jfree.data$Range#getCentralValue()": -0.10742367904312267,
        "org.jfree.data$Range#getLength()": -0.1314299030249828,
        "org.jfree.data$Range#getLowerBound()": -0.8087364131160755,
        "org.jfree.data$Range#getUpperBound()": -0.8108048956206209,
        "org.jfree.data$Range#hashCode()": -0.033680233439906226,
        "org.jfree.data$Range#intersects(double,double)": -0.0596847576483055,
        "org.jfree.data$Range#intersects(org.jfree.data.Range)": 0.0,
        "org.jfree.data$Range#scale(org.jfree.data.Range,double)": -0.03368023343990616,
        "org.jfree.data$Range#shift(org.jfree.data.Range,double)": -0.048254219975912345,
        "org.jfree.data$Range#shift(org.jfree.data.Range,double,boolean)": -0.048254219975912345,
        "org.jfree.data$Range#shiftWithNoZeroCrossing(double,double)": -0.048254219975912394,
        "org.jfree.data$Range#toString()": 0.0,
        "org.jfree.data.event$DatasetChangeEvent#DatasetChangeEvent(java.lang.Object,org.jfree.data.general.Dataset,org.jfree.chart.event.DatasetChangeInfo)": -0.9508988336577427,
        "org.jfree.data.event$DatasetChangeEvent#getDataset()": 0.0,
        "org.jfree.data.event$DatasetChangeEvent#getInfo()": 0.0,
        "org.jfree.data.event$SeriesChangeEvent#SeriesChangeEvent(java.lang.Object)": 0.9139523925177084,
        "org.jfree.data.event$SeriesChangeEvent#SeriesChangeEvent(java.lang.Object,org.jfree.data.general.SeriesChangeInfo)": -0.43183404510919654,
        "org.jfree.data.event$SeriesChangeEvent#getSummary()": 0.0,
        "org.jfree.data.event$SeriesChangeEvent#setSummary(org.jfree.data.general.SeriesChangeInfo)": 0.0,
        "org.jfree.data.general$AbstractDataset#AbstractDataset()": 0.3827666657226133,
        "org.jfree.data.general$AbstractDataset#addChangeListener(org.jfree.data.event.DatasetChangeListener)": -0.8436491633353471,
        "org.jfree.data.general$AbstractDataset#clone()": -0.2596247426872804,
        "org.jfree.data.general$AbstractDataset#fireDatasetChanged(org.jfree.chart.event.DatasetChangeInfo)": 0.5177061829564892,
        "org.jfree.data.general$AbstractDataset#getGroup()": -0.06948812645428037,
        "org.jfree.data.general$AbstractDataset#hasListener(java.util.EventListener)": -0.0596847576483055,
        "org.jfree.data.general$AbstractDataset#notifyListeners(org.jfree.data.event.DatasetChangeEvent)": -0.8280802546704157,
        "org.jfree.data.general$AbstractDataset#readObject(java.io.ObjectInputStream)": -0.33211078924060145,
        "org.jfree.data.general$AbstractDataset#removeChangeListener(org.jfree.data.event.DatasetChangeListener)": -0.16714158724257544,
        "org.jfree.data.general$AbstractDataset#setGroup(org.jfree.data.general.DatasetGroup)": 0.0,
        "org.jfree.data.general$AbstractDataset#validateObject()": -0.3321107892406016,
        "org.jfree.data.general$AbstractDataset#writeObject(java.io.ObjectOutputStream)": -0.33211078924060145,
        "org.jfree.data.general$AbstractSeriesDataset#AbstractSeriesDataset()": 0.8413361136085065,
        "org.jfree.data.general$AbstractSeriesDataset#indexOf(java.lang.Comparable)": -0.37683636597451253,
        "org.jfree.data.general$AbstractSeriesDataset#seriesChanged(org.jfree.data.event.SeriesChangeEvent)": -0.11378042249821976,
        "org.jfree.data.general$DatasetGroup#DatasetGroup()": -0.9647491040659263,
        "org.jfree.data.general$DatasetGroup#DatasetGroup(java.lang.String)": 0.0,
        "org.jfree.data.general$DatasetGroup#clone()": 0.0,
        "org.jfree.data.general$DatasetGroup#equals(java.lang.Object)": -0.033680233439906226,
        "org.jfree.data.general$DatasetGroup#getID()": 0.0,
        "org.jfree.data.general$DatasetUtilities#DatasetUtilities()": 0.0,
        "org.jfree.data.general$DatasetUtilities#calculatePieDatasetTotal(org.jfree.data.pie.PieDataset)": -0.07825164468511736,
        "org.jfree.data.general$DatasetUtilities#calculateStackTotal(org.jfree.data.xy.TableXYDataset,int)": 0.0,
        "org.jfree.data.general$DatasetUtilities#createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues)": 0.0,
        "org.jfree.data.general$DatasetUtilities#createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double[][])": -0.048254219975912394,
        "org.jfree.data.general$DatasetUtilities#createCategoryDataset(java.lang.String,java.lang.String,double[][])": 0.0,
        "org.jfree.data.general$DatasetUtilities#createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][])": -0.23019528880018125,
        "org.jfree.data.general$DatasetUtilities#createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double)": -0.03368023343990616,
        "org.jfree.data.general$DatasetUtilities#createConsolidatedPieDataset(org.jfree.data.pie.PieDataset,java.lang.Comparable,double,int)": -0.03368023343990616,
        "org.jfree.data.general$DatasetUtilities#createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,int)": 0.0,
        "org.jfree.data.general$DatasetUtilities#createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,java.lang.Comparable)": 0.0,
        "org.jfree.data.general$DatasetUtilities#createPieDatasetForRow(org.jfree.data.category.CategoryDataset,int)": 0.0,
        "org.jfree.data.general$DatasetUtilities#createPieDatasetForRow(org.jfree.data.category.CategoryDataset,java.lang.Comparable)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset)": -0.0694881264542804,
        "org.jfree.data.general$DatasetUtilities#findDomainBounds(org.jfree.data.xy.XYDataset)": -0.18967776294421163,
        "org.jfree.data.general$DatasetUtilities#findDomainBounds(org.jfree.data.xy.XYDataset,boolean)": -0.2451787372280192,
        "org.jfree.data.general$DatasetUtilities#findDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean)": -0.3710390007842775,
        "org.jfree.data.general$DatasetUtilities#findMaximumDomainValue(org.jfree.data.xy.XYDataset)": -0.03368023343990616,
        "org.jfree.data.general$DatasetUtilities#findMaximumRangeValue(org.jfree.data.category.CategoryDataset)": -0.0596847576483055,
        "org.jfree.data.general$DatasetUtilities#findMaximumRangeValue(org.jfree.data.xy.XYDataset)": -0.03368023343990616,
        "org.jfree.data.general$DatasetUtilities#findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset)": -0.0596847576483055,
        "org.jfree.data.general$DatasetUtilities#findMinimumDomainValue(org.jfree.data.xy.XYDataset)": -0.03368023343990616,
        "org.jfree.data.general$DatasetUtilities#findMinimumRangeValue(org.jfree.data.category.CategoryDataset)": -0.048254219975912394,
        "org.jfree.data.general$DatasetUtilities#findMinimumRangeValue(org.jfree.data.xy.XYDataset)": -0.03368023343990616,
        "org.jfree.data.general$DatasetUtilities#findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset)": -0.048254219975912394,
        "org.jfree.data.general$DatasetUtilities#findRangeBounds(org.jfree.data.category.CategoryDataset)": -0.03368023343990616,
        "org.jfree.data.general$DatasetUtilities#findRangeBounds(org.jfree.data.category.CategoryDataset,boolean)": -0.03368023343990616,
        "org.jfree.data.general$DatasetUtilities#findRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean)": -0.36812267411402533,
        "org.jfree.data.general$DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset)": -0.18967776294421163,
        "org.jfree.data.general$DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset,boolean)": -0.22635489344754506,
        "org.jfree.data.general$DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean)": -0.35036261713340866,
        "org.jfree.data.general$DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset)": -0.1198785005862652,
        "org.jfree.data.general$DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double)": -0.14748689120643313,
        "org.jfree.data.general$DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap)": -0.0694881264542804,
        "org.jfree.data.general$DatasetUtilities#findStackedRangeBounds(org.jfree.data.xy.TableXYDataset)": -0.08627652491710036,
        "org.jfree.data.general$DatasetUtilities#findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double)": -0.08627652491710036,
        "org.jfree.data.general$DatasetUtilities#isEmptyOrNull(org.jfree.data.category.CategoryDataset)": -0.2064957729154504,
        "org.jfree.data.general$DatasetUtilities#isEmptyOrNull(org.jfree.data.pie.PieDataset)": -0.0596847576483055,
        "org.jfree.data.general$DatasetUtilities#isEmptyOrNull(org.jfree.data.xy.XYDataset)": -0.1525659837707275,
        "org.jfree.data.general$DatasetUtilities#iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean)": 0.0,
        "org.jfree.data.general$DatasetUtilities#iterateDomainBounds(org.jfree.data.xy.XYDataset)": 1.0688525612106352,
        "org.jfree.data.general$DatasetUtilities#iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean)": 0.974826546218059,
        "org.jfree.data.general$DatasetUtilities#iterateRangeBounds(org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean)": -0.0694881264542804,
        "org.jfree.data.general$DatasetUtilities#iterateRangeBounds(org.jfree.data.xy.XYDataset)": 1.0476186547322672,
        "org.jfree.data.general$DatasetUtilities#iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean)": 0.9696198899801145,
        "org.jfree.data.general$DatasetUtilities#iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean)": -0.36812267411402533,
        "org.jfree.data.general$DatasetUtilities#iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean)": -0.3739434900500814,
        "org.jfree.data.general$DatasetUtilities#iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean)": -0.356334249435304,
        "org.jfree.data.general$DatasetUtilities#iterateXYRangeBounds(org.jfree.data.xy.XYDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable)": -0.03368023343990616,
        "org.jfree.data.general$DatasetUtilities#sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable)": -0.033680233439906226,
        "org.jfree.data.general$Series#Series(java.lang.Comparable)": 0.8588300228031293,
        "org.jfree.data.general$Series#Series(java.lang.Comparable,java.lang.String)": -0.4869564148237754,
        "org.jfree.data.general$Series#addChangeListener(org.jfree.data.event.SeriesChangeListener)": -0.18198790306866675,
        "org.jfree.data.general$Series#addPropertyChangeListener(java.beans.PropertyChangeListener)": 0.0,
        "org.jfree.data.general$Series#clone()": -0.21457917330528198,
        "org.jfree.data.general$Series#equals(java.lang.Object)": -0.40238338771868054,
        "org.jfree.data.general$Series#firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)": -0.033680233439906226,
        "org.jfree.data.general$Series#fireSeriesChanged()": 0.9139523925177084,
        "org.jfree.data.general$Series#getDescription()": -0.3768363659745124,
        "org.jfree.data.general$Series#getKey()": -0.6199395342599545,
        "org.jfree.data.general$Series#getNotify()": 0.0,
        "org.jfree.data.general$Series#hashCode()": -0.0694881264542804,
        "org.jfree.data.general$Series#isEmpty()": -0.07825164468511749,
        "org.jfree.data.general$Series#notifyListeners(org.jfree.data.event.SeriesChangeEvent)": 0.9112806313124284,
        "org.jfree.data.general$Series#removeChangeListener(org.jfree.data.event.SeriesChangeListener)": -0.1623843733811754,
        "org.jfree.data.general$Series#removePropertyChangeListener(java.beans.PropertyChangeListener)": 0.0,
        "org.jfree.data.general$Series#setDescription(java.lang.String)": -0.0937417012369075,
        "org.jfree.data.general$Series#setKey(java.lang.Comparable)": -0.07825164468511736,
        "org.jfree.data.general$Series#setNotify(boolean)": 0.0,
        "org.jfree.data.general$SeriesException#SeriesException(java.lang.String)": -0.0596847576483055,
        "org.jfree.data.xy$AbstractIntervalXYDataset#AbstractIntervalXYDataset()": 1.1195660795372162,
        "org.jfree.data.xy$AbstractIntervalXYDataset#getEndXValue(int,int)": -0.09374170123690743,
        "org.jfree.data.xy$AbstractIntervalXYDataset#getEndYValue(int,int)": -0.0694881264542804,
        "org.jfree.data.xy$AbstractIntervalXYDataset#getStartXValue(int,int)": -0.09374170123690743,
        "org.jfree.data.xy$AbstractIntervalXYDataset#getStartYValue(int,int)": -0.0694881264542804,
        "org.jfree.data.xy$AbstractXYDataset#AbstractXYDataset()": 0.939932298501526,
        "org.jfree.data.xy$AbstractXYDataset#getDomainOrder()": -0.07825164468511736,
        "org.jfree.data.xy$AbstractXYDataset#getSelectionState()": 0.0,
        "org.jfree.data.xy$AbstractXYDataset#getXValue(int,int)": -0.3593003175167619,
        "org.jfree.data.xy$AbstractXYDataset#getYValue(int,int)": -0.35335510708951656,
        "org.jfree.data.xy$AbstractXYDataset#setSelectionState(org.jfree.data.xy.XYDatasetSelectionState)": -0.45910500405986227,
        "org.jfree.data.xy$XYInterval#XYInterval(double,double,double,double,double)": 0.2978248133326905,
        "org.jfree.data.xy$XYInterval#equals(java.lang.Object)": -0.0937417012369075,
        "org.jfree.data.xy$XYInterval#getXHigh()": 0.20649065141567652,
        "org.jfree.data.xy$XYInterval#getXLow()": 0.20649065141567652,
        "org.jfree.data.xy$XYInterval#getY()": -0.06948812645428037,
        "org.jfree.data.xy$XYInterval#getYHigh()": 0.20649065141567652,
        "org.jfree.data.xy$XYInterval#getYLow()": 0.20649065141567652,
        "org.jfree.data.xy$XYIntervalDataItem#XYIntervalDataItem(double,double,double,double,double,double)": 1.6576156266188247,
        "org.jfree.data.xy$XYIntervalDataItem#getX()": -0.07825164468511749,
        "org.jfree.data.xy$XYIntervalDataItem#getXHighValue()": 1.0688525612106352,
        "org.jfree.data.xy$XYIntervalDataItem#getXLowValue()": 1.0688525612106352,
        "org.jfree.data.xy$XYIntervalDataItem#getYHighValue()": 1.0688525612106352,
        "org.jfree.data.xy$XYIntervalDataItem#getYLowValue()": 1.0688525612106352,
        "org.jfree.data.xy$XYIntervalDataItem#getYValue()": -0.0694881264542804,
        "org.jfree.data.xy$XYIntervalSeries#XYIntervalSeries(java.lang.Comparable)": 1.6777197650315117,
        "org.jfree.data.xy$XYIntervalSeries#XYIntervalSeries(java.lang.Comparable,boolean,boolean)": 1.6674340162292725,
        "org.jfree.data.xy$XYIntervalSeries#add(double,double,double,double,double,double)": 1.6777197650315117,
        "org.jfree.data.xy$XYIntervalSeries#getDataItem(int)": 1.7337234750828996,
        "org.jfree.data.xy$XYIntervalSeries#getX(int)": -0.0694881264542804,
        "org.jfree.data.xy$XYIntervalSeries#getXHighValue(int)": 1.0834265477466414,
        "org.jfree.data.xy$XYIntervalSeries#getXLowValue(int)": 1.0834265477466414,
        "org.jfree.data.xy$XYIntervalSeries#getYHighValue(int)": 1.0834265477466414,
        "org.jfree.data.xy$XYIntervalSeries#getYLowValue(int)": 1.0834265477466414,
        "org.jfree.data.xy$XYIntervalSeries#getYValue(int)": -0.05968475764830533,
        "org.jfree.data.xy$XYIntervalSeriesCollection#XYIntervalSeriesCollection()": 1.7337234750828996,
        "org.jfree.data.xy$XYIntervalSeriesCollection#addSeries(org.jfree.data.xy.XYIntervalSeries)": 1.7417483553148825,
        "org.jfree.data.xy$XYIntervalSeriesCollection#clone()": -0.03368023343990616,
        "org.jfree.data.xy$XYIntervalSeriesCollection#equals(java.lang.Object)": -0.06948812645428037,
        "org.jfree.data.xy$XYIntervalSeriesCollection#getEndX(int,int)": 0.0,
        "org.jfree.data.xy$XYIntervalSeriesCollection#getEndXValue(int,int)": 1.1171067811865476,
        "org.jfree.data.xy$XYIntervalSeriesCollection#getEndY(int,int)": 0.0,
        "org.jfree.data.xy$XYIntervalSeriesCollection#getEndYValue(int,int)": 1.1171067811865476,
        "org.jfree.data.xy$XYIntervalSeriesCollection#getItemCount(int)": 1.8199999999999998,
        "org.jfree.data.xy$XYIntervalSeriesCollection#getSeries(int)": 1.7863197665600938,
        "org.jfree.data.xy$XYIntervalSeriesCollection#getSeriesCount()": 0.4145288047247896,
        "org.jfree.data.xy$XYIntervalSeriesCollection#getSeriesKey(int)": 0.0,
        "org.jfree.data.xy$XYIntervalSeriesCollection#getStartX(int,int)": 0.0,
        "org.jfree.data.xy$XYIntervalSeriesCollection#getStartXValue(int,int)": 1.1171067811865476,
        "org.jfree.data.xy$XYIntervalSeriesCollection#getStartY(int,int)": 0.0,
        "org.jfree.data.xy$XYIntervalSeriesCollection#getStartYValue(int,int)": 1.1171067811865476,
        "org.jfree.data.xy$XYIntervalSeriesCollection#getX(int,int)": 0.0,
        "org.jfree.data.xy$XYIntervalSeriesCollection#getY(int,int)": 0.0,
        "org.jfree.data.xy$XYIntervalSeriesCollection#getYValue(int,int)": 0.0,
        "org.jfree.data.xy$XYIntervalSeriesCollection#removeAllSeries()": 0.0,
        "org.jfree.data.xy$XYIntervalSeriesCollection#removeSeries(int)": -0.03368023343990616,
        "org.jfree.data.xy$XYIntervalSeriesCollection#removeSeries(org.jfree.data.xy.XYIntervalSeries)": 0.0
    },
    "Chart-20": {},
    "Chart-3": {
        "org.jfree.data.event$SeriesChangeEvent#SeriesChangeEvent(java.lang.Object)": 0.5434524571797966,
        "org.jfree.data.event$SeriesChangeEvent#SeriesChangeEvent(java.lang.Object,org.jfree.data.general.SeriesChangeInfo)": -0.8023339804471087,
        "org.jfree.data.event$SeriesChangeEvent#getSummary()": 0.0,
        "org.jfree.data.event$SeriesChangeEvent#setSummary(org.jfree.data.general.SeriesChangeInfo)": 0.0,
        "org.jfree.data.general$Series#Series(java.lang.Comparable)": 0.462087115401257,
        "org.jfree.data.general$Series#Series(java.lang.Comparable,java.lang.String)": -0.8836993222256478,
        "org.jfree.data.general$Series#addChangeListener(org.jfree.data.event.SeriesChangeListener)": -0.9139382182653508,
        "org.jfree.data.general$Series#addPropertyChangeListener(java.beans.PropertyChangeListener)": 0.0,
        "org.jfree.data.general$Series#clone()": 0.193043160452549,
        "org.jfree.data.general$Series#equals(java.lang.Object)": -0.5494330778418879,
        "org.jfree.data.general$Series#firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)": -0.043520800012516014,
        "org.jfree.data.general$Series#fireSeriesChanged()": 0.5434524571797966,
        "org.jfree.data.general$Series#getDescription()": -0.5132683753179095,
        "org.jfree.data.general$Series#getKey()": -0.861371276134975,
        "org.jfree.data.general$Series#getNotify()": 0.0,
        "org.jfree.data.general$Series#hashCode()": -0.09053200142119248,
        "org.jfree.data.general$Series#isEmpty()": -0.1021390833582732,
        "org.jfree.data.general$Series#notifyListeners(org.jfree.data.event.SeriesChangeEvent)": -0.8023339804471087,
        "org.jfree.data.general$Series#removeChangeListener(org.jfree.data.event.SeriesChangeListener)": -0.21525442898099745,
        "org.jfree.data.general$Series#removePropertyChangeListener(java.beans.PropertyChangeListener)": 0.0,
        "org.jfree.data.general$Series#setDescription(java.lang.String)": -0.12274425154323931,
        "org.jfree.data.general$Series#setKey(java.lang.Comparable)": -0.10213908335827315,
        "org.jfree.data.general$Series#setNotify(boolean)": 0.0,
        "org.jfree.data.general$SeriesException#SeriesException(java.lang.String)": -0.07759306262348287,
        "org.jfree.data.time$Day#<clinit>()": -0.7421310555799554,
        "org.jfree.data.time$Day#Day()": -0.17331167446647977,
        "org.jfree.data.time$Day#Day(int,int,int)": -0.6037316994112174,
        "org.jfree.data.time$Day#Day(java.util.Date)": -0.18797421089384758,
        "org.jfree.data.time$Day#Day(java.util.Date,java.util.TimeZone)": -0.3029283337155363,
        "org.jfree.data.time$Day#Day(org.jfree.data.time.SerialDate)": -0.18074278953489056,
        "org.jfree.data.time$Day#compareTo(java.lang.Object)": -0.14955805143298823,
        "org.jfree.data.time$Day#equals(java.lang.Object)": -0.25250801402418543,
        "org.jfree.data.time$Day#getDayOfMonth()": -0.5294765507598371,
        "org.jfree.data.time$Day#getFirstMillisecond()": -0.1950256084270272,
        "org.jfree.data.time$Day#getFirstMillisecond(java.util.Calendar)": -0.7280633492029325,
        "org.jfree.data.time$Day#getLastMillisecond()": -0.1950256084270272,
        "org.jfree.data.time$Day#getLastMillisecond(java.util.Calendar)": -0.7280633492029325,
        "org.jfree.data.time$Day#getMonth()": -0.5294765507598371,
        "org.jfree.data.time$Day#getSerialDate()": -0.2811704019205461,
        "org.jfree.data.time$Day#getSerialIndex()": -0.18074278953489054,
        "org.jfree.data.time$Day#getYear()": -0.5214005984113075,
        "org.jfree.data.time$Day#hashCode()": -0.11280010620781167,
        "org.jfree.data.time$Day#next()": -0.2152544289809975,
        "org.jfree.data.time$Day#parseDay(java.lang.String)": -0.06257002052289967,
        "org.jfree.data.time$Day#peg(java.util.Calendar)": -0.7280633492029325,
        "org.jfree.data.time$Day#previous()": -0.09053200142119248,
        "org.jfree.data.time$Day#toString()": 0.0,
        "org.jfree.data.time$FixedMillisecond#FixedMillisecond()": -0.04352080001251596,
        "org.jfree.data.time$FixedMillisecond#FixedMillisecond(java.util.Date)": -0.1021390833582732,
        "org.jfree.data.time$FixedMillisecond#FixedMillisecond(long)": -0.077593062623483,
        "org.jfree.data.time$FixedMillisecond#compareTo(java.lang.Object)": -0.043520800012516014,
        "org.jfree.data.time$FixedMillisecond#equals(java.lang.Object)": -0.06257002052289967,
        "org.jfree.data.time$FixedMillisecond#getFirstMillisecond()": -0.07759306262348287,
        "org.jfree.data.time$FixedMillisecond#getFirstMillisecond(java.util.Calendar)": 0.0,
        "org.jfree.data.time$FixedMillisecond#getLastMillisecond()": 0.0,
        "org.jfree.data.time$FixedMillisecond#getLastMillisecond(java.util.Calendar)": 0.0,
        "org.jfree.data.time$FixedMillisecond#getMiddleMillisecond()": 0.0,
        "org.jfree.data.time$FixedMillisecond#getMiddleMillisecond(java.util.Calendar)": 0.0,
        "org.jfree.data.time$FixedMillisecond#getSerialIndex()": 0.0,
        "org.jfree.data.time$FixedMillisecond#getTime()": 0.0,
        "org.jfree.data.time$FixedMillisecond#hashCode()": -0.043520800012516014,
        "org.jfree.data.time$FixedMillisecond#next()": 0.0,
        "org.jfree.data.time$FixedMillisecond#peg(java.util.Calendar)": 0.0,
        "org.jfree.data.time$FixedMillisecond#previous()": 0.0,
        "org.jfree.data.time$Month#Month()": -0.04352080001251596,
        "org.jfree.data.time$Month#Month(int,int)": -0.2755793074693795,
        "org.jfree.data.time$Month#Month(int,org.jfree.data.time.Year)": -0.04352080001251596,
        "org.jfree.data.time$Month#Month(java.util.Date)": -0.04352080001251596,
        "org.jfree.data.time$Month#Month(java.util.Date,java.util.TimeZone)": -0.04352080001251596,
        "org.jfree.data.time$Month#Month(java.util.Date,java.util.TimeZone,java.util.Locale)": -0.12274425154323917,
        "org.jfree.data.time$Month#compareTo(java.lang.Object)": -0.077593062623483,
        "org.jfree.data.time$Month#equals(java.lang.Object)": -0.12274425154323931,
        "org.jfree.data.time$Month#evaluateAsYear(java.lang.String)": -0.04352080001251596,
        "org.jfree.data.time$Month#findSeparator(java.lang.String)": -0.043520800012516014,
        "org.jfree.data.time$Month#getFirstMillisecond()": -0.10213908335827315,
        "org.jfree.data.time$Month#getFirstMillisecond(java.util.Calendar)": -0.2811704019205461,
        "org.jfree.data.time$Month#getLastMillisecond()": -0.10213908335827315,
        "org.jfree.data.time$Month#getLastMillisecond(java.util.Calendar)": -0.2811704019205461,
        "org.jfree.data.time$Month#getMonth()": -0.12274425154323931,
        "org.jfree.data.time$Month#getSerialIndex()": -0.09053200142119233,
        "org.jfree.data.time$Month#getYear()": -0.06257002052289967,
        "org.jfree.data.time$Month#getYearValue()": -0.07759306262348287,
        "org.jfree.data.time$Month#hashCode()": -0.043520800012516014,
        "org.jfree.data.time$Month#next()": -0.077593062623483,
        "org.jfree.data.time$Month#parseMonth(java.lang.String)": -0.04352080001251596,
        "org.jfree.data.time$Month#peg(java.util.Calendar)": -0.28117040192054615,
        "org.jfree.data.time$Month#previous()": -0.09053200142119248,
        "org.jfree.data.time$Month#toString()": 0.0,
        "org.jfree.data.time$RegularTimePeriod#RegularTimePeriod()": -0.7699690873266744,
        "org.jfree.data.time$RegularTimePeriod#createInstance(java.lang.Class,java.util.Date,java.util.TimeZone)": -0.06257002052289962,
        "org.jfree.data.time$RegularTimePeriod#downsize(java.lang.Class)": -0.11280010620781167,
        "org.jfree.data.time$RegularTimePeriod#getEnd()": -0.22808906072023266,
        "org.jfree.data.time$RegularTimePeriod#getMiddleMillisecond()": -0.2152544289809975,
        "org.jfree.data.time$RegularTimePeriod#getMiddleMillisecond(java.util.Calendar)": -0.04352080001251596,
        "org.jfree.data.time$RegularTimePeriod#getStart()": -0.22808906072023266,
        "org.jfree.data.time$RegularTimePeriod#toString()": 0.0,
        "org.jfree.data.time$TimePeriodFormatException#TimePeriodFormatException(java.lang.String)": -0.043520800012516014,
        "org.jfree.data.time$TimeSeries#TimeSeries(java.lang.Comparable)": 1.446800524375178,
        "org.jfree.data.time$TimeSeries#TimeSeries(java.lang.Comparable,java.lang.String,java.lang.String)": 1.446800524375178,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.RegularTimePeriod,double)": 1.53330208526073,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.RegularTimePeriod,double,boolean)": 1.53330208526073,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.RegularTimePeriod,java.lang.Number)": 1.5013165239804283,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.RegularTimePeriod,java.lang.Number,boolean)": 1.5013165239804283,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.TimeSeriesDataItem)": 1.7294679985788075,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.TimeSeriesDataItem,boolean)": 1.471015445662263,
        "org.jfree.data.time$TimeSeries#addAndOrUpdate(org.jfree.data.time.TimeSeries)": -0.04352080001251596,
        "org.jfree.data.time$TimeSeries#addOrUpdate(org.jfree.data.time.RegularTimePeriod,double)": -0.1021390833582732,
        "org.jfree.data.time$TimeSeries#addOrUpdate(org.jfree.data.time.RegularTimePeriod,java.lang.Number)": -0.13212084383812048,
        "org.jfree.data.time$TimeSeries#addOrUpdate(org.jfree.data.time.TimeSeriesDataItem)": -0.13212084383812048,
        "org.jfree.data.time$TimeSeries#clear()": -0.04352080001251596,
        "org.jfree.data.time$TimeSeries#clone()": -0.09053200142119248,
        "org.jfree.data.time$TimeSeries#createCopy(int,int)": 1.7574299794771004,
        "org.jfree.data.time$TimeSeries#createCopy(org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod)": -0.06257002052289967,
        "org.jfree.data.time$TimeSeries#delete(int,int)": -0.077593062623483,
        "org.jfree.data.time$TimeSeries#delete(int,int,boolean)": -0.077593062623483,
        "org.jfree.data.time$TimeSeries#delete(org.jfree.data.time.RegularTimePeriod)": -0.06257002052289967,
        "org.jfree.data.time$TimeSeries#equals(java.lang.Object)": -0.16565732943544767,
        "org.jfree.data.time$TimeSeries#findBoundsByIteration()": -0.2152544289809975,
        "org.jfree.data.time$TimeSeries#getDataItem(int)": -0.077593062623483,
        "org.jfree.data.time$TimeSeries#getDataItem(org.jfree.data.time.RegularTimePeriod)": -0.04352080001251596,
        "org.jfree.data.time$TimeSeries#getDomainDescription()": -0.16565732943544775,
        "org.jfree.data.time$TimeSeries#getIndex(org.jfree.data.time.RegularTimePeriod)": -0.15775119599709453,
        "org.jfree.data.time$TimeSeries#getItemCount()": 0.10579004993880037,
        "org.jfree.data.time$TimeSeries#getItems()": 0.0,
        "org.jfree.data.time$TimeSeries#getMaxY()": 0.31646236637600056,
        "org.jfree.data.time$TimeSeries#getMaximumItemAge()": -0.18074278953489054,
        "org.jfree.data.time$TimeSeries#getMaximumItemCount()": -0.18074278953489054,
        "org.jfree.data.time$TimeSeries#getMinY()": 0.31646236637600056,
        "org.jfree.data.time$TimeSeries#getNextTimePeriod()": 0.0,
        "org.jfree.data.time$TimeSeries#getRangeDescription()": -0.16565732943544775,
        "org.jfree.data.time$TimeSeries#getRawDataItem(int)": 0.13017830637628058,
        "org.jfree.data.time$TimeSeries#getRawDataItem(org.jfree.data.time.RegularTimePeriod)": 0.0,
        "org.jfree.data.time$TimeSeries#getTimePeriod(int)": 1.4759647440031856,
        "org.jfree.data.time$TimeSeries#getTimePeriodClass()": -0.043520800012516014,
        "org.jfree.data.time$TimeSeries#getTimePeriods()": 0.0,
        "org.jfree.data.time$TimeSeries#getTimePeriodsUniqueToOtherSeries(org.jfree.data.time.TimeSeries)": 0.0,
        "org.jfree.data.time$TimeSeries#getValue(int)": -0.11280010620781185,
        "org.jfree.data.time$TimeSeries#getValue(org.jfree.data.time.RegularTimePeriod)": -0.1021390833582732,
        "org.jfree.data.time$TimeSeries#hashCode()": -0.04352080001251596,
        "org.jfree.data.time$TimeSeries#maxIgnoreNaN(double,double)": 0.1252290080353583,
        "org.jfree.data.time$TimeSeries#minIgnoreNaN(double,double)": 0.1252290080353583,
        "org.jfree.data.time$TimeSeries#removeAgedItems(boolean)": 1.471015445662263,
        "org.jfree.data.time$TimeSeries#removeAgedItems(long,boolean)": -0.077593062623483,
        "org.jfree.data.time$TimeSeries#setDomainDescription(java.lang.String)": 0.0,
        "org.jfree.data.time$TimeSeries#setMaximumItemAge(long)": -0.1021390833582732,
        "org.jfree.data.time$TimeSeries#setMaximumItemCount(int)": -0.1021390833582732,
        "org.jfree.data.time$TimeSeries#setRangeDescription(java.lang.String)": 0.0,
        "org.jfree.data.time$TimeSeries#update(int,java.lang.Number)": -0.06257002052289967,
        "org.jfree.data.time$TimeSeries#update(org.jfree.data.time.RegularTimePeriod,java.lang.Number)": -0.06257002052289967,
        "org.jfree.data.time$TimeSeries#updateBoundsForAddedItem(org.jfree.data.time.TimeSeriesDataItem)": 1.471015445662263,
        "org.jfree.data.time$TimeSeries#updateBoundsForRemovedItem(org.jfree.data.time.TimeSeriesDataItem)": -0.1021390833582732,
        "org.jfree.data.time$TimeSeriesDataItem#TimeSeriesDataItem(org.jfree.data.time.RegularTimePeriod,double)": 1.4859798831724178,
        "org.jfree.data.time$TimeSeriesDataItem#TimeSeriesDataItem(org.jfree.data.time.RegularTimePeriod,java.lang.Number)": 0.11059843046807771,
        "org.jfree.data.time$TimeSeriesDataItem#clone()": 0.1252290080353583,
        "org.jfree.data.time$TimeSeriesDataItem#compareTo(java.lang.Object)": -0.22173017369734918,
        "org.jfree.data.time$TimeSeriesDataItem#equals(java.lang.Object)": -0.14955805143298823,
        "org.jfree.data.time$TimeSeriesDataItem#getPeriod()": 0.1252290080353583,
        "org.jfree.data.time$TimeSeriesDataItem#getValue()": 0.1252290080353583,
        "org.jfree.data.time$TimeSeriesDataItem#hashCode()": -0.04352080001251596,
        "org.jfree.data.time$TimeSeriesDataItem#isSelected()": 0.0,
        "org.jfree.data.time$TimeSeriesDataItem#setSelected(boolean)": 0.0,
        "org.jfree.data.time$TimeSeriesDataItem#setValue(java.lang.Number)": -0.1495580514329884,
        "org.jfree.data.time$Year#Year()": -0.04352080001251596,
        "org.jfree.data.time$Year#Year(int)": 1.2277239370476152,
        "org.jfree.data.time$Year#Year(java.util.Date)": -0.04352080001251596,
        "org.jfree.data.time$Year#Year(java.util.Date,java.util.TimeZone)": -0.1021390833582732,
        "org.jfree.data.time$Year#Year(java.util.Date,java.util.TimeZone,java.util.Locale)": -0.1021390833582732,
        "org.jfree.data.time$Year#compareTo(java.lang.Object)": 1.4563848680949825,
        "org.jfree.data.time$Year#equals(java.lang.Object)": -0.3082298029638131,
        "org.jfree.data.time$Year#getFirstMillisecond()": -0.1950256084270272,
        "org.jfree.data.time$Year#getFirstMillisecond(java.util.Calendar)": -0.12951813703812232,
        "org.jfree.data.time$Year#getLastMillisecond()": -0.1950256084270272,
        "org.jfree.data.time$Year#getLastMillisecond(java.util.Calendar)": -0.12951813703812232,
        "org.jfree.data.time$Year#getSerialIndex()": 0.15553008635352328,
        "org.jfree.data.time$Year#getYear()": 0.07298601861876952,
        "org.jfree.data.time$Year#hashCode()": -0.06257002052289962,
        "org.jfree.data.time$Year#next()": -0.077593062623483,
        "org.jfree.data.time$Year#parseYear(java.lang.String)": -0.077593062623483,
        "org.jfree.data.time$Year#peg(java.util.Calendar)": 1.2162683005887827,
        "org.jfree.data.time$Year#previous()": -0.06257002052289967,
        "org.jfree.data.time$Year#toString()": 0.0
    },
    "Chart-4": {
        "org.jfree.chart$ChartColor#<clinit>()": -0.0430085532708252,
        "org.jfree.chart$ChartColor#ChartColor(int,int,int)": 0.0,
        "org.jfree.chart$ChartColor#createDefaultPaintArray()": 1.3027778843560798,
        "org.jfree.chart$ChartFactory#<clinit>()": 1.5479813889841143,
        "org.jfree.chart$ChartFactory#ChartFactory()": 0.0,
        "org.jfree.chart$ChartFactory#createAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": -0.04748228748077153,
        "org.jfree.chart$ChartFactory#createBarChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": -0.07697162467080897,
        "org.jfree.chart$ChartFactory#createBarChart3D(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": -0.04748228748077153,
        "org.jfree.chart$ChartFactory#createBoxAndWhiskerChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.statistics.BoxAndWhiskerCategoryDataset,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createBoxAndWhiskerChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.statistics.BoxAndWhiskerXYDataset,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createBubbleChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYZDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createCandlestickChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.OHLCDataset,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createGanttChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.IntervalCategoryDataset,boolean,boolean,boolean)": -0.05335904646307371,
        "org.jfree.chart$ChartFactory#createHighLowChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.OHLCDataset,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createHighLowChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.OHLCDataset,org.jfree.chart.axis.Timeline,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createHistogram(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.IntervalXYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createLineChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": -0.06835852491775252,
        "org.jfree.chart$ChartFactory#createLineChart3D(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": -0.04748228748077153,
        "org.jfree.chart$ChartFactory#createMultiplePieChart(java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createMultiplePieChart3D(java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createPieChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,boolean)": 0.15828136928942205,
        "org.jfree.chart$ChartFactory#createPieChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,java.util.Locale)": 0.0,
        "org.jfree.chart$ChartFactory#createPieChart(java.lang.String,org.jfree.data.general.PieDataset,org.jfree.data.general.PieDataset,int,boolean,boolean,boolean,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createPieChart(java.lang.String,org.jfree.data.general.PieDataset,org.jfree.data.general.PieDataset,int,boolean,boolean,boolean,java.util.Locale,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createPieChart3D(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,boolean)": -0.04748228748077153,
        "org.jfree.chart$ChartFactory#createPieChart3D(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,java.util.Locale)": 0.0,
        "org.jfree.chart$ChartFactory#createPolarChart(java.lang.String,org.jfree.data.xy.XYDataset,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createRingChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createRingChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,java.util.Locale)": 0.0,
        "org.jfree.chart$ChartFactory#createScatterPlot(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0.9012045073373454,
        "org.jfree.chart$ChartFactory#createStackedAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": -0.04748228748077153,
        "org.jfree.chart$ChartFactory#createStackedBarChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": -0.05335904646307371,
        "org.jfree.chart$ChartFactory#createStackedBarChart3D(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": -0.04748228748077153,
        "org.jfree.chart$ChartFactory#createStackedXYAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.TableXYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": -0.05335904646307371,
        "org.jfree.chart$ChartFactory#createTimeSeriesChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,boolean,boolean,boolean)": 0.5754923418021299,
        "org.jfree.chart$ChartFactory#createWaferMapChart(java.lang.String,org.jfree.data.general.WaferMapDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createWaterfallChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": -0.040881516174663936,
        "org.jfree.chart$ChartFactory#createWindPlot(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.WindDataset,boolean,boolean,boolean)": 0.0,
        "org.jfree.chart$ChartFactory#createXYAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0.48109265475618,
        "org.jfree.chart$ChartFactory#createXYBarChart(java.lang.String,java.lang.String,boolean,java.lang.String,org.jfree.data.xy.IntervalXYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": -0.04748228748077153,
        "org.jfree.chart$ChartFactory#createXYLineChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0.13859805312612014,
        "org.jfree.chart$ChartFactory#createXYStepAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0.48109265475618,
        "org.jfree.chart$ChartFactory#createXYStepChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)": 0.48109265475618,
        "org.jfree.chart$ChartFactory#getChartTheme()": 0.0,
        "org.jfree.chart$ChartFactory#setChartTheme(org.jfree.chart.ChartTheme)": 0.0,
        "org.jfree.chart$ChartRenderingInfo#ChartRenderingInfo()": -0.14242979300585173,
        "org.jfree.chart$ChartRenderingInfo#ChartRenderingInfo(org.jfree.chart.entity.EntityCollection)": -0.14242979300585173,
        "org.jfree.chart$ChartRenderingInfo#clear()": -0.08099252901602469,
        "org.jfree.chart$ChartRenderingInfo#clone()": -0.02322541398277875,
        "org.jfree.chart$ChartRenderingInfo#equals(java.lang.Object)": -0.04748228748077153,
        "org.jfree.chart$ChartRenderingInfo#getChartArea()": -0.023225413982778775,
        "org.jfree.chart$ChartRenderingInfo#getEntityCollection()": -0.08485741089497001,
        "org.jfree.chart$ChartRenderingInfo#getPlotInfo()": -0.12077360391651748,
        "org.jfree.chart$ChartRenderingInfo#getRenderingSource()": 0.0,
        "org.jfree.chart$ChartRenderingInfo#readObject(java.io.ObjectInputStream)": -0.040881516174663936,
        "org.jfree.chart$ChartRenderingInfo#setChartArea(java.awt.geom.Rectangle2D)": -0.08858541777234352,
        "org.jfree.chart$ChartRenderingInfo#setEntityCollection(org.jfree.chart.entity.EntityCollection)": -0.023225413982778775,
        "org.jfree.chart$ChartRenderingInfo#setRenderingSource(org.jfree.chart.RenderingSource)": -0.08858541777234352,
        "org.jfree.chart$ChartRenderingInfo#writeObject(java.io.ObjectOutputStream)": -0.040881516174663936,
        "org.jfree.chart$JFreeChart#<clinit>()": -0.3282844721838966,
        "org.jfree.chart$JFreeChart#JFreeChart(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)": 0.011959091875609687,
        "org.jfree.chart$JFreeChart#JFreeChart(java.lang.String,org.jfree.chart.plot.Plot)": 0.0,
        "org.jfree.chart$JFreeChart#JFreeChart(org.jfree.chart.plot.Plot)": -0.20882781907361786,
        "org.jfree.chart$JFreeChart#addChangeListener(org.jfree.chart.event.ChartChangeListener)": -0.1398579559676683,
        "org.jfree.chart$JFreeChart#addLegend(org.jfree.chart.title.LegendTitle)": 0.0,
        "org.jfree.chart$JFreeChart#addProgressListener(org.jfree.chart.event.ChartProgressListener)": -0.08099252901602469,
        "org.jfree.chart$JFreeChart#addSubtitle(int,org.jfree.chart.title.Title)": -0.02322541398277875,
        "org.jfree.chart$JFreeChart#addSubtitle(org.jfree.chart.title.Title)": -0.03314780294366223,
        "org.jfree.chart$JFreeChart#clearSubtitles()": 0.0,
        "org.jfree.chart$JFreeChart#clone()": -0.02322541398277875,
        "org.jfree.chart$JFreeChart#createAlignedRectangle2D(org.jfree.chart.util.Size2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment)": -0.21468417828822278,
        "org.jfree.chart$JFreeChart#createBufferedImage(int,int)": -0.04748228748077153,
        "org.jfree.chart$JFreeChart#createBufferedImage(int,int,double,double,org.jfree.chart.ChartRenderingInfo)": 0.0,
        "org.jfree.chart$JFreeChart#createBufferedImage(int,int,int,org.jfree.chart.ChartRenderingInfo)": -0.15240284524136027,
        "org.jfree.chart$JFreeChart#createBufferedImage(int,int,org.jfree.chart.ChartRenderingInfo)": -0.15240284524136027,
        "org.jfree.chart$JFreeChart#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.04748228748077153,
        "org.jfree.chart$JFreeChart#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.ChartRenderingInfo)": -0.21468417828822278,
        "org.jfree.chart$JFreeChart#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.ChartRenderingInfo)": 0.0,
        "org.jfree.chart$JFreeChart#drawTitle(org.jfree.chart.title.Title,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)": -0.21468417828822278,
        "org.jfree.chart$JFreeChart#equals(java.lang.Object)": -0.08485741089496995,
        "org.jfree.chart$JFreeChart#fireChartChanged()": -0.06835852491775252,
        "org.jfree.chart$JFreeChart#getAntiAlias()": 0.0,
        "org.jfree.chart$JFreeChart#getBackgroundImage()": 0.0,
        "org.jfree.chart$JFreeChart#getBackgroundImageAlignment()": 0.0,
        "org.jfree.chart$JFreeChart#getBackgroundImageAlpha()": 0.0,
        "org.jfree.chart$JFreeChart#getBackgroundPaint()": 0.0,
        "org.jfree.chart$JFreeChart#getBorderPaint()": 0.0,
        "org.jfree.chart$JFreeChart#getBorderStroke()": 0.0,
        "org.jfree.chart$JFreeChart#getCategoryPlot()": 0.0,
        "org.jfree.chart$JFreeChart#getLegend()": -0.06369428511586006,
        "org.jfree.chart$JFreeChart#getLegend(int)": -0.06369428511586017,
        "org.jfree.chart$JFreeChart#getPadding()": 0.0,
        "org.jfree.chart$JFreeChart#getPlot()": -0.22543543905589228,
        "org.jfree.chart$JFreeChart#getRenderingHints()": 0.0,
        "org.jfree.chart$JFreeChart#getSubtitle(int)": 0.14622619600482395,
        "org.jfree.chart$JFreeChart#getSubtitleCount()": -0.22543543905589228,
        "org.jfree.chart$JFreeChart#getSubtitles()": -0.023225413982778775,
        "org.jfree.chart$JFreeChart#getTextAntiAlias()": 0.0,
        "org.jfree.chart$JFreeChart#getTitle()": -0.2220981298271533,
        "org.jfree.chart$JFreeChart#getXYPlot()": 0.0,
        "org.jfree.chart$JFreeChart#handleClick(int,int,org.jfree.chart.ChartRenderingInfo)": 0.0,
        "org.jfree.chart$JFreeChart#isBorderVisible()": -0.21468417828822295,
        "org.jfree.chart$JFreeChart#isNotify()": 0.0,
        "org.jfree.chart$JFreeChart#main(java.lang.String[])": 0.0,
        "org.jfree.chart$JFreeChart#notifyListeners(org.jfree.chart.event.ChartChangeEvent)": 0.08757893541589958,
        "org.jfree.chart$JFreeChart#notifyListeners(org.jfree.chart.event.ChartProgressEvent)": -0.21468417828822278,
        "org.jfree.chart$JFreeChart#plotChanged(org.jfree.chart.event.PlotChangeEvent)": 0.09409579586653745,
        "org.jfree.chart$JFreeChart#readObject(java.io.ObjectInputStream)": -0.06835852491775252,
        "org.jfree.chart$JFreeChart#removeChangeListener(org.jfree.chart.event.ChartChangeListener)": -0.02322541398277875,
        "org.jfree.chart$JFreeChart#removeLegend()": -0.05335904646307371,
        "org.jfree.chart$JFreeChart#removeProgressListener(org.jfree.chart.event.ChartProgressListener)": -0.02322541398277875,
        "org.jfree.chart$JFreeChart#removeSubtitle(org.jfree.chart.title.Title)": -0.05335904646307371,
        "org.jfree.chart$JFreeChart#setAntiAlias(boolean)": 0.0,
        "org.jfree.chart$JFreeChart#setBackgroundImage(java.awt.Image)": -0.02322541398277875,
        "org.jfree.chart$JFreeChart#setBackgroundImageAlignment(int)": -0.02322541398277875,
        "org.jfree.chart$JFreeChart#setBackgroundImageAlpha(float)": -0.02322541398277875,
        "org.jfree.chart$JFreeChart#setBackgroundPaint(java.awt.Paint)": 0.0979832688610073,
        "org.jfree.chart$JFreeChart#setBorderPaint(java.awt.Paint)": -0.02322541398277875,
        "org.jfree.chart$JFreeChart#setBorderStroke(java.awt.Stroke)": -0.02322541398277875,
        "org.jfree.chart$JFreeChart#setBorderVisible(boolean)": -0.02322541398277875,
        "org.jfree.chart$JFreeChart#setNotify(boolean)": 0.0,
        "org.jfree.chart$JFreeChart#setPadding(org.jfree.chart.util.RectangleInsets)": -0.02322541398277875,
        "org.jfree.chart$JFreeChart#setRenderingHints(java.awt.RenderingHints)": -0.02322541398277875,
        "org.jfree.chart$JFreeChart#setSubtitles(java.util.List)": 0.0,
        "org.jfree.chart$JFreeChart#setTextAntiAlias(boolean)": 0.0,
        "org.jfree.chart$JFreeChart#setTextAntiAlias(java.lang.Object)": 0.0,
        "org.jfree.chart$JFreeChart#setTitle(java.lang.String)": -0.02322541398277875,
        "org.jfree.chart$JFreeChart#setTitle(org.jfree.chart.title.TextTitle)": -0.058721517117045194,
        "org.jfree.chart$JFreeChart#titleChanged(org.jfree.chart.event.TitleChangeEvent)": 0.10403818810733241,
        "org.jfree.chart$JFreeChart#writeObject(java.io.ObjectOutputStream)": -0.06835852491775252,
        "org.jfree.chart$LegendItem#<clinit>()": -0.24437997130871558,
        "org.jfree.chart$LegendItem#LegendItem(java.lang.String)": -0.040881516174663936,
        "org.jfree.chart$LegendItem#LegendItem(java.lang.String,java.awt.Paint)": -0.05335904646307371,
        "org.jfree.chart$LegendItem#LegendItem(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)": -0.2425907394001254,
        "org.jfree.chart$LegendItem#LegendItem(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint)": -0.10563216592227084,
        "org.jfree.chart$LegendItem#LegendItem(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)": -0.11786391545771334,
        "org.jfree.chart$LegendItem#LegendItem(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Stroke,java.awt.Paint)": -0.02322541398277875,
        "org.jfree.chart$LegendItem#LegendItem(java.text.AttributedString,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)": -0.02322541398277875,
        "org.jfree.chart$LegendItem#LegendItem(java.text.AttributedString,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint)": -0.02322541398277875,
        "org.jfree.chart$LegendItem#LegendItem(java.text.AttributedString,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)": 0.0,
        "org.jfree.chart$LegendItem#LegendItem(java.text.AttributedString,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Stroke,java.awt.Paint)": 0.0,
        "org.jfree.chart$LegendItem#characterIteratorToString(java.text.CharacterIterator)": -0.023225413982778775,
        "org.jfree.chart$LegendItem#clone()": -0.03314780294366223,
        "org.jfree.chart$LegendItem#equals(java.lang.Object)": -0.06835852491775252,
        "org.jfree.chart$LegendItem#getAttributedLabel()": 0.0,
        "org.jfree.chart$LegendItem#getDataset()": -0.1926626738632824,
        "org.jfree.chart$LegendItem#getDatasetIndex()": -0.09909041302239907,
        "org.jfree.chart$LegendItem#getDescription()": 0.0,
        "org.jfree.chart$LegendItem#getFillPaint()": -0.1884818021668302,
        "org.jfree.chart$LegendItem#getFillPaintTransformer()": -0.1884818021668302,
        "org.jfree.chart$LegendItem#getLabel()": -0.2204406704805275,
        "org.jfree.chart$LegendItem#getLabelFont()": -0.1884818021668302,
        "org.jfree.chart$LegendItem#getLabelPaint()": -0.1884818021668302,
        "org.jfree.chart$LegendItem#getLine()": -0.1884818021668302,
        "org.jfree.chart$LegendItem#getLinePaint()": -0.1884818021668302,
        "org.jfree.chart$LegendItem#getLineStroke()": -0.1884818021668302,
        "org.jfree.chart$LegendItem#getOutlinePaint()": -0.1884818021668302,
        "org.jfree.chart$LegendItem#getOutlineStroke()": -0.1884818021668302,
        "org.jfree.chart$LegendItem#getSeriesIndex()": -0.09909041302239907,
        "org.jfree.chart$LegendItem#getSeriesKey()": -0.19057980924246953,
        "org.jfree.chart$LegendItem#getShape()": -0.19057980924246953,
        "org.jfree.chart$LegendItem#getToolTipText()": -0.1884818021668302,
        "org.jfree.chart$LegendItem#getURLText()": -0.1884818021668302,
        "org.jfree.chart$LegendItem#isLineVisible()": -0.1884818021668302,
        "org.jfree.chart$LegendItem#isShapeFilled()": -0.1884818021668302,
        "org.jfree.chart$LegendItem#isShapeOutlineVisible()": -0.1884818021668302,
        "org.jfree.chart$LegendItem#isShapeVisible()": -0.1884818021668302,
        "org.jfree.chart$LegendItem#readObject(java.io.ObjectInputStream)": -0.040881516174663936,
        "org.jfree.chart$LegendItem#setDataset(org.jfree.data.general.Dataset)": -0.2279720133729355,
        "org.jfree.chart$LegendItem#setDatasetIndex(int)": -0.21853251080451352,
        "org.jfree.chart$LegendItem#setDescription(java.lang.String)": 0.0,
        "org.jfree.chart$LegendItem#setFillPaint(java.awt.Paint)": -0.023225413982778775,
        "org.jfree.chart$LegendItem#setFillPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)": -0.11489917188014132,
        "org.jfree.chart$LegendItem#setLabelFont(java.awt.Font)": -0.2204406704805275,
        "org.jfree.chart$LegendItem#setLabelPaint(java.awt.Paint)": -0.03314780294366226,
        "org.jfree.chart$LegendItem#setLine(java.awt.Shape)": 0.0,
        "org.jfree.chart$LegendItem#setLinePaint(java.awt.Paint)": -0.03314780294366226,
        "org.jfree.chart$LegendItem#setLineVisible(boolean)": 0.0,
        "org.jfree.chart$LegendItem#setOutlinePaint(java.awt.Paint)": -0.047482287480771435,
        "org.jfree.chart$LegendItem#setOutlineStroke(java.awt.Stroke)": -0.03314780294366226,
        "org.jfree.chart$LegendItem#setSeriesIndex(int)": -0.2261039330966177,
        "org.jfree.chart$LegendItem#setSeriesKey(java.lang.Comparable)": -0.2261039330966177,
        "org.jfree.chart$LegendItem#setShape(java.awt.Shape)": 0.0,
        "org.jfree.chart$LegendItem#setShapeVisible(boolean)": 0.0,
        "org.jfree.chart$LegendItem#setToolTipText(java.lang.String)": -0.03314780294366226,
        "org.jfree.chart$LegendItem#setURLText(java.lang.String)": -0.03314780294366226,
        "org.jfree.chart$LegendItem#writeObject(java.io.ObjectOutputStream)": -0.040881516174663936,
        "org.jfree.chart$LegendItemCollection#LegendItemCollection()": -0.2298306031183941,
        "org.jfree.chart$LegendItemCollection#add(org.jfree.chart.LegendItem)": -0.20486445012043064,
        "org.jfree.chart$LegendItemCollection#addAll(org.jfree.chart.LegendItemCollection)": -0.047482287480771435,
        "org.jfree.chart$LegendItemCollection#clone()": -0.040881516174663936,
        "org.jfree.chart$LegendItemCollection#equals(java.lang.Object)": -0.06369428511586017,
        "org.jfree.chart$LegendItemCollection#get(int)": -0.19057980924246953,
        "org.jfree.chart$LegendItemCollection#getItemCount()": -0.21661376185026016,
        "org.jfree.chart$LegendItemCollection#iterator()": 0.0,
        "org.jfree.chart$StandardChartTheme#StandardChartTheme(java.lang.String)": 1.542984248949863,
        "org.jfree.chart$StandardChartTheme#apply(org.jfree.chart.JFreeChart)": 0.10403818810733241,
        "org.jfree.chart$StandardChartTheme#applyToAbstractRenderer(org.jfree.chart.renderer.AbstractRenderer)": 0.006093472319622019,
        "org.jfree.chart$StandardChartTheme#applyToBlock(org.jfree.chart.block.Block)": 0.0,
        "org.jfree.chart$StandardChartTheme#applyToBlockContainer(org.jfree.chart.block.BlockContainer)": 0.0,
        "org.jfree.chart$StandardChartTheme#applyToCategoryAxis(org.jfree.chart.axis.CategoryAxis)": -0.18848180216683022,
        "org.jfree.chart$StandardChartTheme#applyToCategoryItemRenderer(org.jfree.chart.renderer.category.CategoryItemRenderer)": -0.18848180216683022,
        "org.jfree.chart$StandardChartTheme#applyToCategoryPlot(org.jfree.chart.plot.CategoryPlot)": -0.18848180216683022,
        "org.jfree.chart$StandardChartTheme#applyToFastScatterPlot(org.jfree.chart.plot.FastScatterPlot)": 0.0,
        "org.jfree.chart$StandardChartTheme#applyToMeterPlot(org.jfree.chart.plot.MeterPlot)": 0.0,
        "org.jfree.chart$StandardChartTheme#applyToMultiplePiePlot(org.jfree.chart.plot.MultiplePiePlot)": 0.0,
        "org.jfree.chart$StandardChartTheme#applyToPeriodAxis(org.jfree.chart.axis.PeriodAxis)": 0.0,
        "org.jfree.chart$StandardChartTheme#applyToPiePlot(org.jfree.chart.plot.PiePlot)": 0.14807161096421226,
        "org.jfree.chart$StandardChartTheme#applyToPlot(org.jfree.chart.plot.Plot)": 0.10403818810733241,
        "org.jfree.chart$StandardChartTheme#applyToPolarPlot(org.jfree.chart.plot.PolarPlot)": 0.0,
        "org.jfree.chart$StandardChartTheme#applyToSpiderWebPlot(org.jfree.chart.plot.SpiderWebPlot)": 0.0,
        "org.jfree.chart$StandardChartTheme#applyToSymbolAxis(org.jfree.chart.axis.SymbolAxis)": 0.0,
        "org.jfree.chart$StandardChartTheme#applyToThermometerPlot(org.jfree.chart.plot.ThermometerPlot)": 0.0,
        "org.jfree.chart$StandardChartTheme#applyToTitle(org.jfree.chart.title.Title)": 0.14622619600482395,
        "org.jfree.chart$StandardChartTheme#applyToValueAxis(org.jfree.chart.axis.ValueAxis)": 0.006093472319622019,
        "org.jfree.chart$StandardChartTheme#applyToXYAnnotation(org.jfree.chart.annotations.XYAnnotation)": 0.0,
        "org.jfree.chart$StandardChartTheme#applyToXYItemRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)": 0.11322188838720187,
        "org.jfree.chart$StandardChartTheme#applyToXYPlot(org.jfree.chart.plot.XYPlot)": 0.11322188838720187,
        "org.jfree.chart$StandardChartTheme#clone()": -0.023225413982778775,
        "org.jfree.chart$StandardChartTheme#createDarknessTheme()": 0.0,
        "org.jfree.chart$StandardChartTheme#createJFreeTheme()": 0.0,
        "org.jfree.chart$StandardChartTheme#createLegacyTheme()": 0.0,
        "org.jfree.chart$StandardChartTheme#equals(java.lang.Object)": -0.040881516174663936,
        "org.jfree.chart$StandardChartTheme#getAxisLabelPaint()": 0.0,
        "org.jfree.chart$StandardChartTheme#getAxisOffset()": 0.0,
        "org.jfree.chart$StandardChartTheme#getBarPainter()": 0.0,
        "org.jfree.chart$StandardChartTheme#getBaselinePaint()": 0.0,
        "org.jfree.chart$StandardChartTheme#getChartBackgroundPaint()": 0.0,
        "org.jfree.chart$StandardChartTheme#getCrosshairPaint()": 0.0,
        "org.jfree.chart$StandardChartTheme#getDomainGridlinePaint()": 0.0,
        "org.jfree.chart$StandardChartTheme#getDrawingSupplier()": 0.10403818810733241,
        "org.jfree.chart$StandardChartTheme#getErrorIndicatorPaint()": 0.0,
        "org.jfree.chart$StandardChartTheme#getExtraLargeFont()": 0.0,
        "org.jfree.chart$StandardChartTheme#getGridBandAlternatePaint()": 0.0,
        "org.jfree.chart$StandardChartTheme#getGridBandPaint()": 0.0,
        "org.jfree.chart$StandardChartTheme#getItemLabelPaint()": 0.0,
        "org.jfree.chart$StandardChartTheme#getLabelLinkPaint()": 0.0,
        "org.jfree.chart$StandardChartTheme#getLabelLinkStyle()": 0.0,
        "org.jfree.chart$StandardChartTheme#getLargeFont()": 0.0,
        "org.jfree.chart$StandardChartTheme#getLegendBackgroundPaint()": 0.0,
        "org.jfree.chart$StandardChartTheme#getLegendItemPaint()": 0.0,
        "org.jfree.chart$StandardChartTheme#getName()": 0.0,
        "org.jfree.chart$StandardChartTheme#getPlotBackgroundPaint()": 0.0,
        "org.jfree.chart$StandardChartTheme#getPlotOutlinePaint()": 0.0,
        "org.jfree.chart$StandardChartTheme#getRangeGridlinePaint()": 0.0,
        "org.jfree.chart$StandardChartTheme#getRegularFont()": 0.0,
        "org.jfree.chart$StandardChartTheme#getShadowPaint()": 0.0,
        "org.jfree.chart$StandardChartTheme#getSmallFont()": 0.0,
        "org.jfree.chart$StandardChartTheme#getSubtitlePaint()": 0.0,
        "org.jfree.chart$StandardChartTheme#getThermometerPaint()": 0.0,
        "org.jfree.chart$StandardChartTheme#getTickLabelPaint()": 0.0,
        "org.jfree.chart$StandardChartTheme#getTitlePaint()": 0.0,
        "org.jfree.chart$StandardChartTheme#getWallPaint()": 0.0,
        "org.jfree.chart$StandardChartTheme#getXYBarPainter()": 0.0,
        "org.jfree.chart$StandardChartTheme#isShadowVisible()": -0.023225413982778775,
        "org.jfree.chart$StandardChartTheme#readObject(java.io.ObjectInputStream)": -0.02322541398277875,
        "org.jfree.chart$StandardChartTheme#setAxisLabelPaint(java.awt.Paint)": -0.023225413982778775,
        "org.jfree.chart$StandardChartTheme#setAxisOffset(org.jfree.chart.util.RectangleInsets)": -0.023225413982778775,
        "org.jfree.chart$StandardChartTheme#setBarPainter(org.jfree.chart.renderer.category.BarPainter)": -0.023225413982778775,
        "org.jfree.chart$StandardChartTheme#setBaselinePaint(java.awt.Paint)": 0.0,
        "org.jfree.chart$StandardChartTheme#setChartBackgroundPaint(java.awt.Paint)": -0.023225413982778775,
        "org.jfree.chart$StandardChartTheme#setCrosshairPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart$StandardChartTheme#setDomainGridlinePaint(java.awt.Paint)": -0.023225413982778775,
        "org.jfree.chart$StandardChartTheme#setDrawingSupplier(org.jfree.chart.plot.DrawingSupplier)": -0.023225413982778775,
        "org.jfree.chart$StandardChartTheme#setErrorIndicatorPaint(java.awt.Paint)": -0.023225413982778775,
        "org.jfree.chart$StandardChartTheme#setExtraLargeFont(java.awt.Font)": -0.023225413982778775,
        "org.jfree.chart$StandardChartTheme#setGridBandAlternatePaint(java.awt.Paint)": -0.023225413982778775,
        "org.jfree.chart$StandardChartTheme#setGridBandPaint(java.awt.Paint)": -0.023225413982778775,
        "org.jfree.chart$StandardChartTheme#setItemLabelPaint(java.awt.Paint)": -0.023225413982778775,
        "org.jfree.chart$StandardChartTheme#setLabelLinkPaint(java.awt.Paint)": -0.023225413982778775,
        "org.jfree.chart$StandardChartTheme#setLabelLinkStyle(org.jfree.chart.plot.PieLabelLinkStyle)": -0.023225413982778775,
        "org.jfree.chart$StandardChartTheme#setLargeFont(java.awt.Font)": -0.023225413982778775,
        "org.jfree.chart$StandardChartTheme#setLegendBackgroundPaint(java.awt.Paint)": -0.023225413982778775,
        "org.jfree.chart$StandardChartTheme#setLegendItemPaint(java.awt.Paint)": -0.023225413982778775,
        "org.jfree.chart$StandardChartTheme#setPlotBackgroundPaint(java.awt.Paint)": -0.023225413982778775,
        "org.jfree.chart$StandardChartTheme#setPlotOutlinePaint(java.awt.Paint)": -0.023225413982778775,
        "org.jfree.chart$StandardChartTheme#setRangeGridlinePaint(java.awt.Paint)": -0.023225413982778775,
        "org.jfree.chart$StandardChartTheme#setRegularFont(java.awt.Font)": -0.023225413982778775,
        "org.jfree.chart$StandardChartTheme#setShadowPaint(java.awt.Paint)": -0.023225413982778775,
        "org.jfree.chart$StandardChartTheme#setShadowVisible(boolean)": -0.023225413982778775,
        "org.jfree.chart$StandardChartTheme#setSmallFont(java.awt.Font)": 0.0,
        "org.jfree.chart$StandardChartTheme#setSubtitlePaint(java.awt.Paint)": -0.023225413982778775,
        "org.jfree.chart$StandardChartTheme#setThermometerPaint(java.awt.Paint)": -0.023225413982778775,
        "org.jfree.chart$StandardChartTheme#setTickLabelPaint(java.awt.Paint)": -0.023225413982778775,
        "org.jfree.chart$StandardChartTheme#setTitlePaint(java.awt.Paint)": -0.023225413982778775,
        "org.jfree.chart$StandardChartTheme#setWallPaint(java.awt.Paint)": -0.023225413982778775,
        "org.jfree.chart$StandardChartTheme#setXYBarPainter(org.jfree.chart.renderer.xy.XYBarPainter)": -0.023225413982778775,
        "org.jfree.chart$StandardChartTheme#writeObject(java.io.ObjectOutputStream)": -0.02322541398277875,
        "org.jfree.chart.axis$Axis#<clinit>()": 1.2884456804920195,
        "org.jfree.chart.axis$Axis#Axis(java.lang.String)": 1.3148586503868471,
        "org.jfree.chart.axis$Axis#addChangeListener(org.jfree.chart.event.AxisChangeListener)": -0.15651828214937988,
        "org.jfree.chart.axis$Axis#clone()": -0.12644166506603405,
        "org.jfree.chart.axis$Axis#createAndAddEntity(double,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": -0.19882458189082772,
        "org.jfree.chart.axis$Axis#drawAxisLine(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.1619353930771307,
        "org.jfree.chart.axis$Axis#drawLabel(java.lang.String,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)": -0.2048644501204305,
        "org.jfree.chart.axis$Axis#equals(java.lang.Object)": -0.2635679882841516,
        "org.jfree.chart.axis$Axis#fireChangeEvent()": -0.009669237293920128,
        "org.jfree.chart.axis$Axis#getAxisLinePaint()": -0.2028641283059316,
        "org.jfree.chart.axis$Axis#getAxisLineStroke()": -0.2028641283059316,
        "org.jfree.chart.axis$Axis#getFixedDimension()": -0.20486445012043064,
        "org.jfree.chart.axis$Axis#getLabel()": -0.22233847708688925,
        "org.jfree.chart.axis$Axis#getLabelAngle()": -0.20486445012043064,
        "org.jfree.chart.axis$Axis#getLabelEnclosure(java.awt.Graphics2D,org.jfree.chart.util.RectangleEdge)": -0.2048644501204305,
        "org.jfree.chart.axis$Axis#getLabelFont()": -0.20486445012043064,
        "org.jfree.chart.axis$Axis#getLabelInsets()": -0.20486445012043064,
        "org.jfree.chart.axis$Axis#getLabelPaint()": -0.20486445012043064,
        "org.jfree.chart.axis$Axis#getLabelToolTip()": 0.0,
        "org.jfree.chart.axis$Axis#getLabelURL()": 0.0,
        "org.jfree.chart.axis$Axis#getMinorTickMarkInsideLength()": 0.0,
        "org.jfree.chart.axis$Axis#getMinorTickMarkOutsideLength()": 0.0,
        "org.jfree.chart.axis$Axis#getPlot()": 0.027765666545139678,
        "org.jfree.chart.axis$Axis#getTickLabelFont()": -0.2068522430598596,
        "org.jfree.chart.axis$Axis#getTickLabelInsets()": -0.20486445012043064,
        "org.jfree.chart.axis$Axis#getTickLabelPaint()": -0.20486445012043064,
        "org.jfree.chart.axis$Axis#getTickMarkInsideLength()": -0.20486445012043064,
        "org.jfree.chart.axis$Axis#getTickMarkOutsideLength()": -0.20486445012043064,
        "org.jfree.chart.axis$Axis#getTickMarkPaint()": -0.20486445012043064,
        "org.jfree.chart.axis$Axis#getTickMarkStroke()": -0.20486445012043064,
        "org.jfree.chart.axis$Axis#hasListener(java.util.EventListener)": -0.03314780294366226,
        "org.jfree.chart.axis$Axis#isAxisLineVisible()": -0.20486445012043064,
        "org.jfree.chart.axis$Axis#isMinorTickMarksVisible()": -0.1967846624615246,
        "org.jfree.chart.axis$Axis#isTickLabelsVisible()": -0.20486445012043064,
        "org.jfree.chart.axis$Axis#isTickMarksVisible()": -0.2068522430598596,
        "org.jfree.chart.axis$Axis#isVisible()": -0.20486445012043064,
        "org.jfree.chart.axis$Axis#notifyListeners(org.jfree.chart.event.AxisChangeEvent)": 1.44599821049979,
        "org.jfree.chart.axis$Axis#readObject(java.io.ObjectInputStream)": -0.14496872595721724,
        "org.jfree.chart.axis$Axis#removeChangeListener(org.jfree.chart.event.AxisChangeListener)": -0.10878808397177664,
        "org.jfree.chart.axis$Axis#setAxisLinePaint(java.awt.Paint)": -0.03314780294366223,
        "org.jfree.chart.axis$Axis#setAxisLineStroke(java.awt.Stroke)": -0.02322541398277875,
        "org.jfree.chart.axis$Axis#setAxisLineVisible(boolean)": -0.05335904646307371,
        "org.jfree.chart.axis$Axis#setFixedDimension(double)": 0.0,
        "org.jfree.chart.axis$Axis#setLabel(java.lang.String)": -0.040881516174663936,
        "org.jfree.chart.axis$Axis#setLabelAngle(double)": 0.0,
        "org.jfree.chart.axis$Axis#setLabelFont(java.awt.Font)": 0.006093472319622019,
        "org.jfree.chart.axis$Axis#setLabelInsets(org.jfree.chart.util.RectangleInsets)": 0.0,
        "org.jfree.chart.axis$Axis#setLabelInsets(org.jfree.chart.util.RectangleInsets,boolean)": 0.0,
        "org.jfree.chart.axis$Axis#setLabelPaint(java.awt.Paint)": 0.006093472319622019,
        "org.jfree.chart.axis$Axis#setLabelToolTip(java.lang.String)": 0.0,
        "org.jfree.chart.axis$Axis#setLabelURL(java.lang.String)": 0.0,
        "org.jfree.chart.axis$Axis#setMinorTickMarkInsideLength(float)": 0.0,
        "org.jfree.chart.axis$Axis#setMinorTickMarkOutsideLength(float)": 0.0,
        "org.jfree.chart.axis$Axis#setMinorTickMarksVisible(boolean)": 0.0,
        "org.jfree.chart.axis$Axis#setPlot(org.jfree.chart.plot.Plot)": 1.419766794089861,
        "org.jfree.chart.axis$Axis#setTickLabelFont(java.awt.Font)": 0.006093472319622019,
        "org.jfree.chart.axis$Axis#setTickLabelInsets(org.jfree.chart.util.RectangleInsets)": 0.0,
        "org.jfree.chart.axis$Axis#setTickLabelPaint(java.awt.Paint)": 0.006093472319622019,
        "org.jfree.chart.axis$Axis#setTickLabelsVisible(boolean)": 0.0,
        "org.jfree.chart.axis$Axis#setTickMarkInsideLength(float)": 0.0,
        "org.jfree.chart.axis$Axis#setTickMarkOutsideLength(float)": 0.0,
        "org.jfree.chart.axis$Axis#setTickMarkPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.axis$Axis#setTickMarkStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.axis$Axis#setTickMarksVisible(boolean)": 0.0,
        "org.jfree.chart.axis$Axis#setVisible(boolean)": 0.0,
        "org.jfree.chart.axis$Axis#writeObject(java.io.ObjectOutputStream)": -0.14496872595721724,
        "org.jfree.chart.axis$AxisCollection#AxisCollection()": -0.19882458189082763,
        "org.jfree.chart.axis$AxisCollection#add(org.jfree.chart.axis.Axis,org.jfree.chart.util.RectangleEdge)": -0.19882458189082772,
        "org.jfree.chart.axis$AxisCollection#getAxesAtBottom()": -0.19882458189082763,
        "org.jfree.chart.axis$AxisCollection#getAxesAtLeft()": -0.19882458189082763,
        "org.jfree.chart.axis$AxisCollection#getAxesAtRight()": -0.19882458189082763,
        "org.jfree.chart.axis$AxisCollection#getAxesAtTop()": -0.19882458189082763,
        "org.jfree.chart.axis$AxisLocation#<clinit>()": -0.18171217336129,
        "org.jfree.chart.axis$AxisLocation#AxisLocation(java.lang.String)": -0.406983627971265,
        "org.jfree.chart.axis$AxisLocation#equals(java.lang.Object)": -0.1292060967094633,
        "org.jfree.chart.axis$AxisLocation#getOpposite()": 0.0,
        "org.jfree.chart.axis$AxisLocation#getOpposite(org.jfree.chart.axis.AxisLocation)": 0.0,
        "org.jfree.chart.axis$AxisLocation#readResolve()": -0.10563216592227084,
        "org.jfree.chart.axis$AxisLocation#toString()": -0.11786391545771324,
        "org.jfree.chart.axis$AxisSpace#AxisSpace()": -0.21468417828822295,
        "org.jfree.chart.axis$AxisSpace#add(double,org.jfree.chart.util.RectangleEdge)": -0.2048644501204305,
        "org.jfree.chart.axis$AxisSpace#clone()": -0.03314780294366226,
        "org.jfree.chart.axis$AxisSpace#ensureAtLeast(double,org.jfree.chart.util.RectangleEdge)": -0.03314780294366223,
        "org.jfree.chart.axis$AxisSpace#ensureAtLeast(org.jfree.chart.axis.AxisSpace)": -0.047482287480771435,
        "org.jfree.chart.axis$AxisSpace#equals(java.lang.Object)": -0.05335904646307377,
        "org.jfree.chart.axis$AxisSpace#expand(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.axis$AxisSpace#getBottom()": -0.03314780294366226,
        "org.jfree.chart.axis$AxisSpace#getLeft()": 0.0,
        "org.jfree.chart.axis$AxisSpace#getRight()": 0.0,
        "org.jfree.chart.axis$AxisSpace#getTop()": -0.03314780294366226,
        "org.jfree.chart.axis$AxisSpace#hashCode()": -0.023225413982778775,
        "org.jfree.chart.axis$AxisSpace#reserved(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$AxisSpace#setBottom(double)": -0.03314780294366226,
        "org.jfree.chart.axis$AxisSpace#setLeft(double)": -0.023225413982778775,
        "org.jfree.chart.axis$AxisSpace#setRight(double)": -0.023225413982778775,
        "org.jfree.chart.axis$AxisSpace#setTop(double)": -0.023225413982778775,
        "org.jfree.chart.axis$AxisSpace#shrink(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)": -0.20486445012043064,
        "org.jfree.chart.axis$AxisSpace#toString()": 0.0,
        "org.jfree.chart.axis$AxisState#AxisState()": -0.20685224305985966,
        "org.jfree.chart.axis$AxisState#AxisState(double)": -0.2068522430598596,
        "org.jfree.chart.axis$AxisState#cursorDown(double)": -0.17554903211743156,
        "org.jfree.chart.axis$AxisState#cursorLeft(double)": -0.2008509521609263,
        "org.jfree.chart.axis$AxisState#cursorRight(double)": 0.0,
        "org.jfree.chart.axis$AxisState#cursorUp(double)": -0.09219207433891574,
        "org.jfree.chart.axis$AxisState#getCursor()": -0.20486445012043064,
        "org.jfree.chart.axis$AxisState#getMax()": -0.16193539307713056,
        "org.jfree.chart.axis$AxisState#getTicks()": -0.2008509521609263,
        "org.jfree.chart.axis$AxisState#moveCursor(double,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$AxisState#setCursor(double)": 0.0,
        "org.jfree.chart.axis$AxisState#setMax(double)": -0.16193539307713056,
        "org.jfree.chart.axis$AxisState#setTicks(java.util.List)": -0.20486445012043064,
        "org.jfree.chart.axis$CategoryAxis#CategoryAxis()": -0.02322541398277875,
        "org.jfree.chart.axis$CategoryAxis#CategoryAxis(java.lang.String)": -0.31220982714733775,
        "org.jfree.chart.axis$CategoryAxis#addCategoryLabelToolTip(java.lang.Comparable,java.lang.String)": -0.040881516174663936,
        "org.jfree.chart.axis$CategoryAxis#calculateCategoryGapSize(int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.149953888022742,
        "org.jfree.chart.axis$CategoryAxis#calculateCategorySize(int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.15958962622971884,
        "org.jfree.chart.axis$CategoryAxis#calculateTextBlockHeight(org.jfree.chart.text.TextBlock,org.jfree.chart.axis.CategoryLabelPosition,java.awt.Graphics2D)": -0.11489917188014133,
        "org.jfree.chart.axis$CategoryAxis#calculateTextBlockWidth(org.jfree.chart.text.TextBlock,org.jfree.chart.axis.CategoryLabelPosition,java.awt.Graphics2D)": -0.08858541777234356,
        "org.jfree.chart.axis$CategoryAxis#clearCategoryLabelToolTips()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#clone()": -0.07277062049397834,
        "org.jfree.chart.axis$CategoryAxis#configure()": -0.2835982877122758,
        "org.jfree.chart.axis$CategoryAxis#createLabel(java.lang.Comparable,float,org.jfree.chart.util.RectangleEdge,java.awt.Graphics2D)": -0.149953888022742,
        "org.jfree.chart.axis$CategoryAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": -0.15240284524136027,
        "org.jfree.chart.axis$CategoryAxis#drawCategoryLabels(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)": -0.1619353930771307,
        "org.jfree.chart.axis$CategoryAxis#drawTickMarks(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState)": -0.15958962622971884,
        "org.jfree.chart.axis$CategoryAxis#equalPaintMaps(java.util.Map,java.util.Map)": -0.1398579559676683,
        "org.jfree.chart.axis$CategoryAxis#equals(java.lang.Object)": -0.14242979300585173,
        "org.jfree.chart.axis$CategoryAxis#getCategoryEnd(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.149953888022742,
        "org.jfree.chart.axis$CategoryAxis#getCategoryJava2DCoordinate(org.jfree.chart.axis.CategoryAnchor,int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.02322541398277875,
        "org.jfree.chart.axis$CategoryAxis#getCategoryLabelPositionOffset()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryLabelPositions()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getCategoryLabelToolTip(java.lang.Comparable)": -0.07697162467080898,
        "org.jfree.chart.axis$CategoryAxis#getCategoryMargin()": -0.1118753905022174,
        "org.jfree.chart.axis$CategoryAxis#getCategoryMiddle(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.149953888022742,
        "org.jfree.chart.axis$CategoryAxis#getCategoryMiddle(java.lang.Comparable,java.util.List,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.149953888022742,
        "org.jfree.chart.axis$CategoryAxis#getCategorySeriesMiddle(int,int,int,int,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getCategorySeriesMiddle(java.lang.Comparable,java.lang.Comparable,org.jfree.data.category.CategoryDataset,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.03314780294366223,
        "org.jfree.chart.axis$CategoryAxis#getCategoryStart(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.149953888022742,
        "org.jfree.chart.axis$CategoryAxis#getLowerMargin()": -0.15958962622971873,
        "org.jfree.chart.axis$CategoryAxis#getMaximumCategoryLabelLines()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getMaximumCategoryLabelWidthRatio()": 0.0,
        "org.jfree.chart.axis$CategoryAxis#getTickLabelFont(java.lang.Comparable)": -0.149953888022742,
        "org.jfree.chart.axis$CategoryAxis#getTickLabelPaint(java.lang.Comparable)": -0.149953888022742,
        "org.jfree.chart.axis$CategoryAxis#getUpperMargin()": -0.15958962622971873,
        "org.jfree.chart.axis$CategoryAxis#hashCode()": -0.17109373778997616,
        "org.jfree.chart.axis$CategoryAxis#readObject(java.io.ObjectInputStream)": -0.08485741089496995,
        "org.jfree.chart.axis$CategoryAxis#readPaintMap(java.io.ObjectInputStream)": -0.08485741089496995,
        "org.jfree.chart.axis$CategoryAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.1619353930771307,
        "org.jfree.chart.axis$CategoryAxis#removeCategoryLabelToolTip(java.lang.Comparable)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)": -0.1619353930771307,
        "org.jfree.chart.axis$CategoryAxis#setCategoryLabelPositionOffset(int)": -0.02322541398277875,
        "org.jfree.chart.axis$CategoryAxis#setCategoryLabelPositions(org.jfree.chart.axis.CategoryLabelPositions)": -0.02322541398277875,
        "org.jfree.chart.axis$CategoryAxis#setCategoryMargin(double)": -0.08485741089496995,
        "org.jfree.chart.axis$CategoryAxis#setLowerMargin(double)": -0.02322541398277875,
        "org.jfree.chart.axis$CategoryAxis#setMaximumCategoryLabelLines(int)": 0.0,
        "org.jfree.chart.axis$CategoryAxis#setMaximumCategoryLabelWidthRatio(float)": -0.02322541398277875,
        "org.jfree.chart.axis$CategoryAxis#setTickLabelFont(java.lang.Comparable,java.awt.Font)": -0.040881516174663936,
        "org.jfree.chart.axis$CategoryAxis#setTickLabelPaint(java.lang.Comparable,java.awt.Paint)": -0.04748228748077153,
        "org.jfree.chart.axis$CategoryAxis#setUpperMargin(double)": -0.02322541398277875,
        "org.jfree.chart.axis$CategoryAxis#writeObject(java.io.ObjectOutputStream)": -0.08485741089496995,
        "org.jfree.chart.axis$CategoryAxis#writePaintMap(java.util.Map,java.io.ObjectOutputStream)": -0.08485741089496995,
        "org.jfree.chart.axis$CategoryAxis3D#CategoryAxis3D()": 0.0,
        "org.jfree.chart.axis$CategoryAxis3D#CategoryAxis3D(java.lang.String)": -0.09219207433891567,
        "org.jfree.chart.axis$CategoryAxis3D#clone()": -0.02322541398277875,
        "org.jfree.chart.axis$CategoryAxis3D#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": -0.040881516174663936,
        "org.jfree.chart.axis$CategoryAxis3D#getCategoryJava2DCoordinate(org.jfree.chart.axis.CategoryAnchor,int,int,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$DateAxis#<clinit>()": 0.6903763788886388,
        "org.jfree.chart.axis$DateAxis#DateAxis()": -0.02322541398277875,
        "org.jfree.chart.axis$DateAxis#DateAxis(java.lang.String)": 0.693057481565939,
        "org.jfree.chart.axis$DateAxis#DateAxis(java.lang.String,java.util.TimeZone)": 0.693057481565939,
        "org.jfree.chart.axis$DateAxis#DateAxis(java.lang.String,java.util.TimeZone,java.util.Locale)": 0.6903763788886388,
        "org.jfree.chart.axis$DateAxis#autoAdjustRange()": 0.6903763788886388,
        "org.jfree.chart.axis$DateAxis#calculateDateForPosition(org.jfree.data.time.RegularTimePeriod,org.jfree.chart.axis.DateTickMarkPosition)": -0.04748228748077153,
        "org.jfree.chart.axis$DateAxis#calculateHighestVisibleTickValue(org.jfree.chart.axis.DateTickUnit)": 0.0,
        "org.jfree.chart.axis$DateAxis#calculateLowestVisibleTickValue(org.jfree.chart.axis.DateTickUnit)": -0.040881516174663936,
        "org.jfree.chart.axis$DateAxis#clone()": -0.02322541398277875,
        "org.jfree.chart.axis$DateAxis#configure()": 0.7662636486098119,
        "org.jfree.chart.axis$DateAxis#correctTickDateForPosition(java.util.Date,org.jfree.chart.axis.DateTickUnit,org.jfree.chart.axis.DateTickMarkPosition)": -0.040881516174663936,
        "org.jfree.chart.axis$DateAxis#createStandardDateTickUnits()": 0.0,
        "org.jfree.chart.axis$DateAxis#createStandardDateTickUnits(java.util.TimeZone)": 0.0,
        "org.jfree.chart.axis$DateAxis#createStandardDateTickUnits(java.util.TimeZone,java.util.Locale)": 0.6903763788886388,
        "org.jfree.chart.axis$DateAxis#dateToJava2D(java.util.Date,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$DateAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": -0.03314780294366223,
        "org.jfree.chart.axis$DateAxis#equals(java.lang.Object)": -0.058721517117045194,
        "org.jfree.chart.axis$DateAxis#estimateMaximumTickLabelHeight(java.awt.Graphics2D,org.jfree.chart.axis.DateTickUnit)": 0.0,
        "org.jfree.chart.axis$DateAxis#estimateMaximumTickLabelWidth(java.awt.Graphics2D,org.jfree.chart.axis.DateTickUnit)": -0.03314780294366223,
        "org.jfree.chart.axis$DateAxis#getDateFormatOverride()": -0.040881516174663846,
        "org.jfree.chart.axis$DateAxis#getMaximumDate()": -0.05335904646307371,
        "org.jfree.chart.axis$DateAxis#getMinimumDate()": -0.05335904646307371,
        "org.jfree.chart.axis$DateAxis#getTickMarkPosition()": 0.0,
        "org.jfree.chart.axis$DateAxis#getTickUnit()": -0.040881516174663846,
        "org.jfree.chart.axis$DateAxis#getTimeZone()": 0.0,
        "org.jfree.chart.axis$DateAxis#getTimeline()": 0.0,
        "org.jfree.chart.axis$DateAxis#hashCode()": -0.040881516174663936,
        "org.jfree.chart.axis$DateAxis#isHiddenValue(long)": -0.040881516174663936,
        "org.jfree.chart.axis$DateAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.02322541398277875,
        "org.jfree.chart.axis$DateAxis#nextStandardDate(java.util.Date,org.jfree.chart.axis.DateTickUnit)": -0.040881516174663936,
        "org.jfree.chart.axis$DateAxis#previousStandardDate(java.util.Date,org.jfree.chart.axis.DateTickUnit)": -0.09569017516582462,
        "org.jfree.chart.axis$DateAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.040881516174663936,
        "org.jfree.chart.axis$DateAxis#refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.040881516174663936,
        "org.jfree.chart.axis$DateAxis#refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.02322541398277875,
        "org.jfree.chart.axis$DateAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.03314780294366223,
        "org.jfree.chart.axis$DateAxis#selectHorizontalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.03314780294366223,
        "org.jfree.chart.axis$DateAxis#selectVerticalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$DateAxis#setDateFormatOverride(java.text.DateFormat)": -0.02322541398277875,
        "org.jfree.chart.axis$DateAxis#setMaximumDate(java.util.Date)": -0.03314780294366223,
        "org.jfree.chart.axis$DateAxis#setMinimumDate(java.util.Date)": -0.03314780294366223,
        "org.jfree.chart.axis$DateAxis#setRange(double,double)": -0.02322541398277875,
        "org.jfree.chart.axis$DateAxis#setRange(java.util.Date,java.util.Date)": -0.09569017516582462,
        "org.jfree.chart.axis$DateAxis#setRange(org.jfree.data.Range)": -0.09909041302239917,
        "org.jfree.chart.axis$DateAxis#setRange(org.jfree.data.Range,boolean,boolean)": 0.6903763788886388,
        "org.jfree.chart.axis$DateAxis#setTickMarkPosition(org.jfree.chart.axis.DateTickMarkPosition)": -0.09219207433891567,
        "org.jfree.chart.axis$DateAxis#setTickUnit(org.jfree.chart.axis.DateTickUnit)": -0.09219207433891567,
        "org.jfree.chart.axis$DateAxis#setTickUnit(org.jfree.chart.axis.DateTickUnit,boolean,boolean)": 0.6903763788886388,
        "org.jfree.chart.axis$DateAxis#setTimeZone(java.util.TimeZone)": 0.0,
        "org.jfree.chart.axis$DateAxis#setTimeline(org.jfree.chart.axis.Timeline)": -0.02322541398277875,
        "org.jfree.chart.axis$DateAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.03314780294366223,
        "org.jfree.chart.axis$DateAxis#zoomRange(double,double)": 0.0,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#DateAxis$DefaultTimeline()": 0.03260311682678976,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#containsDomainRange(java.util.Date,java.util.Date)": 0.0,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#containsDomainRange(long,long)": 0.0,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#containsDomainValue(java.util.Date)": -0.040881516174663846,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#containsDomainValue(long)": 0.0,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#equals(java.lang.Object)": -0.03314780294366226,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#toMillisecond(long)": -0.06369428511586017,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#toTimelineValue(java.util.Date)": 0.0,
        "org.jfree.chart.axis$DateAxis$DefaultTimeline#toTimelineValue(long)": -0.06369428511586017,
        "org.jfree.chart.axis$DateTickMarkPosition#<clinit>()": 0.6825553727210054,
        "org.jfree.chart.axis$DateTickMarkPosition#DateTickMarkPosition(java.lang.String)": 0.024782110659156167,
        "org.jfree.chart.axis$DateTickMarkPosition#equals(java.lang.Object)": -0.058721517117045194,
        "org.jfree.chart.axis$DateTickMarkPosition#readResolve()": -0.040881516174663936,
        "org.jfree.chart.axis$DateTickMarkPosition#toString()": -0.05335904646307377,
        "org.jfree.chart.axis$DateTickUnit#DateTickUnit(org.jfree.chart.axis.DateTickUnitType,int)": -0.09909041302239917,
        "org.jfree.chart.axis$DateTickUnit#DateTickUnit(org.jfree.chart.axis.DateTickUnitType,int,java.text.DateFormat)": 0.6825553727210054,
        "org.jfree.chart.axis$DateTickUnit#DateTickUnit(org.jfree.chart.axis.DateTickUnitType,int,org.jfree.chart.axis.DateTickUnitType,int,java.text.DateFormat)": 0.6825553727210054,
        "org.jfree.chart.axis$DateTickUnit#addToDate(java.util.Date,java.util.TimeZone)": -0.09569017516582462,
        "org.jfree.chart.axis$DateTickUnit#dateToString(java.util.Date)": -0.040881516174663846,
        "org.jfree.chart.axis$DateTickUnit#equals(java.lang.Object)": -0.06835852491775252,
        "org.jfree.chart.axis$DateTickUnit#getCalendarField()": -0.09569017516582462,
        "org.jfree.chart.axis$DateTickUnit#getMillisecondCount(org.jfree.chart.axis.DateTickUnitType,int)": 0.6825553727210054,
        "org.jfree.chart.axis$DateTickUnit#getMultiple()": -0.09569017516582456,
        "org.jfree.chart.axis$DateTickUnit#getRollMultiple()": 0.0,
        "org.jfree.chart.axis$DateTickUnit#getRollUnitType()": 0.0,
        "org.jfree.chart.axis$DateTickUnit#getUnitType()": -0.09569017516582456,
        "org.jfree.chart.axis$DateTickUnit#hashCode()": -0.023225413982778775,
        "org.jfree.chart.axis$DateTickUnit#notNull(java.text.DateFormat)": 0.0,
        "org.jfree.chart.axis$DateTickUnit#rollDate(java.util.Date)": 0.0,
        "org.jfree.chart.axis$DateTickUnit#rollDate(java.util.Date,java.util.TimeZone)": 0.0,
        "org.jfree.chart.axis$DateTickUnit#toString()": 0.0,
        "org.jfree.chart.axis$DateTickUnit#valueToString(double)": 0.0,
        "org.jfree.chart.axis$DateTickUnitType#<clinit>()": 0.6825553727210054,
        "org.jfree.chart.axis$DateTickUnitType#DateTickUnitType(java.lang.String,int)": 0.024782110659156167,
        "org.jfree.chart.axis$DateTickUnitType#equals(java.lang.Object)": 0.6825553727210054,
        "org.jfree.chart.axis$DateTickUnitType#getCalendarField()": -0.09569017516582456,
        "org.jfree.chart.axis$DateTickUnitType#readResolve()": -0.040881516174663936,
        "org.jfree.chart.axis$DateTickUnitType#toString()": 0.024782110659156167,
        "org.jfree.chart.axis$LogAxis#LogAxis()": -0.02322541398277875,
        "org.jfree.chart.axis$LogAxis#LogAxis(java.lang.String)": -0.07277062049397834,
        "org.jfree.chart.axis$LogAxis#autoAdjustRange()": -0.03314780294366223,
        "org.jfree.chart.axis$LogAxis#calculateLog(double)": -0.040881516174663846,
        "org.jfree.chart.axis$LogAxis#calculateValue(double)": -0.040881516174663846,
        "org.jfree.chart.axis$LogAxis#configure()": -0.03314780294366223,
        "org.jfree.chart.axis$LogAxis#createLogTickUnits(java.util.Locale)": -0.07277062049397834,
        "org.jfree.chart.axis$LogAxis#createTickLabel(double)": 0.0,
        "org.jfree.chart.axis$LogAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.axis$LogAxis#equals(java.lang.Object)": -0.04748228748077153,
        "org.jfree.chart.axis$LogAxis#estimateMaximumTickLabelHeight(java.awt.Graphics2D)": 0.0,
        "org.jfree.chart.axis$LogAxis#estimateMaximumTickLabelWidth(java.awt.Graphics2D,org.jfree.chart.axis.TickUnit)": 0.0,
        "org.jfree.chart.axis$LogAxis#exponentLengthToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$LogAxis#getBase()": 0.0,
        "org.jfree.chart.axis$LogAxis#getNumberFormatOverride()": 0.0,
        "org.jfree.chart.axis$LogAxis#getSmallestValue()": 0.0,
        "org.jfree.chart.axis$LogAxis#getTickUnit()": 0.0,
        "org.jfree.chart.axis$LogAxis#hashCode()": -0.02322541398277875,
        "org.jfree.chart.axis$LogAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.02322541398277875,
        "org.jfree.chart.axis$LogAxis#pan(double)": 0.0,
        "org.jfree.chart.axis$LogAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$LogAxis#refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$LogAxis#refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$LogAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$LogAxis#selectHorizontalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$LogAxis#selectVerticalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$LogAxis#setBase(double)": -0.02322541398277875,
        "org.jfree.chart.axis$LogAxis#setNumberFormatOverride(java.text.NumberFormat)": 0.0,
        "org.jfree.chart.axis$LogAxis#setSmallestValue(double)": -0.02322541398277875,
        "org.jfree.chart.axis$LogAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit)": 0.0,
        "org.jfree.chart.axis$LogAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit,boolean,boolean)": 0.0,
        "org.jfree.chart.axis$LogAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$LogAxis#zoomRange(double,double)": 0.0,
        "org.jfree.chart.axis$MarkerAxisBand#MarkerAxisBand(org.jfree.chart.axis.NumberAxis,double,double,double,double,java.awt.Font)": -0.040881516174663846,
        "org.jfree.chart.axis$MarkerAxisBand#addMarker(org.jfree.chart.plot.IntervalMarker)": 0.0,
        "org.jfree.chart.axis$MarkerAxisBand#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,double,double)": 0.0,
        "org.jfree.chart.axis$MarkerAxisBand#drawStringInRect(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.Font,java.lang.String)": 0.0,
        "org.jfree.chart.axis$MarkerAxisBand#equals(java.lang.Object)": -0.040881516174663936,
        "org.jfree.chart.axis$MarkerAxisBand#getHeight(java.awt.Graphics2D)": 0.0,
        "org.jfree.chart.axis$MarkerAxisBand#hashCode()": -0.023225413982778775,
        "org.jfree.chart.axis$NumberAxis#<clinit>()": 1.3557091082270685,
        "org.jfree.chart.axis$NumberAxis#NumberAxis()": -0.04748228748077153,
        "org.jfree.chart.axis$NumberAxis#NumberAxis(java.lang.String)": 1.390431960390424,
        "org.jfree.chart.axis$NumberAxis#autoAdjustRange()": 1.2386275555463127,
        "org.jfree.chart.axis$NumberAxis#calculateHighestVisibleTickValue()": 0.0,
        "org.jfree.chart.axis$NumberAxis#calculateLowestVisibleTickValue()": -0.2008509521609263,
        "org.jfree.chart.axis$NumberAxis#calculateVisibleTickCount()": -0.2008509521609263,
        "org.jfree.chart.axis$NumberAxis#clone()": -0.09569017516582462,
        "org.jfree.chart.axis$NumberAxis#configure()": 0.9941401412913972,
        "org.jfree.chart.axis$NumberAxis#createIntegerTickUnits()": 0.39623524386121006,
        "org.jfree.chart.axis$NumberAxis#createIntegerTickUnits(java.util.Locale)": 0.0,
        "org.jfree.chart.axis$NumberAxis#createStandardTickUnits()": 1.390431960390424,
        "org.jfree.chart.axis$NumberAxis#createStandardTickUnits(java.util.Locale)": 0.0,
        "org.jfree.chart.axis$NumberAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": -0.19266267386328226,
        "org.jfree.chart.axis$NumberAxis#equals(java.lang.Object)": -0.2107914773769589,
        "org.jfree.chart.axis$NumberAxis#estimateMaximumTickLabelHeight(java.awt.Graphics2D)": -0.17554903211743156,
        "org.jfree.chart.axis$NumberAxis#estimateMaximumTickLabelWidth(java.awt.Graphics2D,org.jfree.chart.axis.TickUnit)": -0.14496872595721724,
        "org.jfree.chart.axis$NumberAxis#getAutoRangeIncludesZero()": -0.36547160262591943,
        "org.jfree.chart.axis$NumberAxis#getAutoRangeStickyZero()": -0.36547160262591943,
        "org.jfree.chart.axis$NumberAxis#getMarkerBand()": 0.0,
        "org.jfree.chart.axis$NumberAxis#getNumberFormatOverride()": -0.2008509521609263,
        "org.jfree.chart.axis$NumberAxis#getRangeType()": 0.0,
        "org.jfree.chart.axis$NumberAxis#getTickUnit()": -0.2008509521609263,
        "org.jfree.chart.axis$NumberAxis#hashCode()": -0.20286412830593153,
        "org.jfree.chart.axis$NumberAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.02322541398277875,
        "org.jfree.chart.axis$NumberAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.2008509521609263,
        "org.jfree.chart.axis$NumberAxis#refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.14496872595721724,
        "org.jfree.chart.axis$NumberAxis#refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.17554903211743156,
        "org.jfree.chart.axis$NumberAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.2008509521609263,
        "org.jfree.chart.axis$NumberAxis#selectHorizontalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.14496872595721724,
        "org.jfree.chart.axis$NumberAxis#selectVerticalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.17554903211743156,
        "org.jfree.chart.axis$NumberAxis#setAutoRangeIncludesZero(boolean)": 1.4664084576764271,
        "org.jfree.chart.axis$NumberAxis#setAutoRangeStickyZero(boolean)": -0.04748228748077153,
        "org.jfree.chart.axis$NumberAxis#setMarkerBand(org.jfree.chart.axis.MarkerAxisBand)": 0.0,
        "org.jfree.chart.axis$NumberAxis#setNumberFormatOverride(java.text.NumberFormat)": -0.02322541398277875,
        "org.jfree.chart.axis$NumberAxis#setRangeType(org.jfree.data.RangeType)": -0.02322541398277875,
        "org.jfree.chart.axis$NumberAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit)": -0.02322541398277875,
        "org.jfree.chart.axis$NumberAxis#setTickUnit(org.jfree.chart.axis.NumberTickUnit,boolean,boolean)": -0.20286412830593153,
        "org.jfree.chart.axis$NumberAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.2008509521609263,
        "org.jfree.chart.axis$NumberAxis3D#NumberAxis3D()": 0.0,
        "org.jfree.chart.axis$NumberAxis3D#NumberAxis3D(java.lang.String)": -0.08858541777234356,
        "org.jfree.chart.axis$NumberAxis3D#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": -0.040881516174663936,
        "org.jfree.chart.axis$NumberTick#NumberTick(java.lang.Number,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)": -0.2008509521609263,
        "org.jfree.chart.axis$NumberTick#NumberTick(org.jfree.chart.axis.TickType,double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)": -0.19882458189082772,
        "org.jfree.chart.axis$NumberTick#getNumber()": 0.0,
        "org.jfree.chart.axis$NumberTickUnit#NumberTickUnit(double)": -0.04748228748077153,
        "org.jfree.chart.axis$NumberTickUnit#NumberTickUnit(double,java.text.NumberFormat)": 1.3406687267849096,
        "org.jfree.chart.axis$NumberTickUnit#NumberTickUnit(double,java.text.NumberFormat,int)": 1.3774197922411693,
        "org.jfree.chart.axis$NumberTickUnit#equals(java.lang.Object)": -0.19266267386328226,
        "org.jfree.chart.axis$NumberTickUnit#hashCode()": -0.03314780294366223,
        "org.jfree.chart.axis$NumberTickUnit#toString()": 0.0,
        "org.jfree.chart.axis$NumberTickUnit#valueToString(double)": -0.2008509521609263,
        "org.jfree.chart.axis$PeriodAxis#PeriodAxis(java.lang.String)": -0.05335904646307371,
        "org.jfree.chart.axis$PeriodAxis#PeriodAxis(java.lang.String,org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod)": -0.05335904646307371,
        "org.jfree.chart.axis$PeriodAxis#PeriodAxis(java.lang.String,org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod,java.util.TimeZone,java.util.Locale)": -0.058721517117045194,
        "org.jfree.chart.axis$PeriodAxis#autoAdjustRange()": 0.0,
        "org.jfree.chart.axis$PeriodAxis#clone()": -0.02322541398277875,
        "org.jfree.chart.axis$PeriodAxis#configure()": 0.0,
        "org.jfree.chart.axis$PeriodAxis#createInstance(java.lang.Class,java.util.Date,java.util.TimeZone,java.util.Locale)": -0.02322541398277875,
        "org.jfree.chart.axis$PeriodAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.axis$PeriodAxis#drawTickLabels(int,java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$PeriodAxis#drawTickMarks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$PeriodAxis#drawTickMarksHorizontal(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$PeriodAxis#drawTickMarksVertical(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$PeriodAxis#equals(java.lang.Object)": -0.05335904646307371,
        "org.jfree.chart.axis$PeriodAxis#getAutoRangeTimePeriodClass()": 0.0,
        "org.jfree.chart.axis$PeriodAxis#getFirst()": 0.0,
        "org.jfree.chart.axis$PeriodAxis#getLabelInfo()": 0.0,
        "org.jfree.chart.axis$PeriodAxis#getLast()": 0.0,
        "org.jfree.chart.axis$PeriodAxis#getLocale()": 0.0,
        "org.jfree.chart.axis$PeriodAxis#getMajorTickTimePeriodClass()": 0.0,
        "org.jfree.chart.axis$PeriodAxis#getMinorTickMarkInsideLength()": 0.0,
        "org.jfree.chart.axis$PeriodAxis#getMinorTickMarkOutsideLength()": 0.0,
        "org.jfree.chart.axis$PeriodAxis#getMinorTickMarkPaint()": 0.0,
        "org.jfree.chart.axis$PeriodAxis#getMinorTickMarkStroke()": 0.0,
        "org.jfree.chart.axis$PeriodAxis#getMinorTickTimePeriodClass()": 0.0,
        "org.jfree.chart.axis$PeriodAxis#getRange()": 0.0,
        "org.jfree.chart.axis$PeriodAxis#getTimeZone()": 0.0,
        "org.jfree.chart.axis$PeriodAxis#hashCode()": -0.02322541398277875,
        "org.jfree.chart.axis$PeriodAxis#isMinorTickMarksVisible()": -0.05335904646307377,
        "org.jfree.chart.axis$PeriodAxis#java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$PeriodAxis#readObject(java.io.ObjectInputStream)": -0.02322541398277875,
        "org.jfree.chart.axis$PeriodAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$PeriodAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)": 0.0,
        "org.jfree.chart.axis$PeriodAxis#setAutoRangeTimePeriodClass(java.lang.Class)": -0.03314780294366223,
        "org.jfree.chart.axis$PeriodAxis#setFirst(org.jfree.data.time.RegularTimePeriod)": -0.03314780294366223,
        "org.jfree.chart.axis$PeriodAxis#setLabelInfo(org.jfree.chart.axis.PeriodAxisLabelInfo[])": -0.03314780294366223,
        "org.jfree.chart.axis$PeriodAxis#setLast(org.jfree.data.time.RegularTimePeriod)": -0.03314780294366223,
        "org.jfree.chart.axis$PeriodAxis#setMajorTickTimePeriodClass(java.lang.Class)": -0.02322541398277875,
        "org.jfree.chart.axis$PeriodAxis#setMinorTickMarkInsideLength(float)": 0.0,
        "org.jfree.chart.axis$PeriodAxis#setMinorTickMarkOutsideLength(float)": 0.0,
        "org.jfree.chart.axis$PeriodAxis#setMinorTickMarkPaint(java.awt.Paint)": -0.02322541398277875,
        "org.jfree.chart.axis$PeriodAxis#setMinorTickMarkStroke(java.awt.Stroke)": -0.02322541398277875,
        "org.jfree.chart.axis$PeriodAxis#setMinorTickMarksVisible(boolean)": -0.02322541398277875,
        "org.jfree.chart.axis$PeriodAxis#setMinorTickTimePeriodClass(java.lang.Class)": -0.02322541398277875,
        "org.jfree.chart.axis$PeriodAxis#setRange(org.jfree.data.Range,boolean,boolean)": -0.02322541398277875,
        "org.jfree.chart.axis$PeriodAxis#setTimeZone(java.util.TimeZone)": -0.03314780294366223,
        "org.jfree.chart.axis$PeriodAxis#valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$PeriodAxis#writeObject(java.io.ObjectOutputStream)": -0.02322541398277875,
        "org.jfree.chart.axis$SegmentedTimeline#<clinit>()": -0.16425784449375813,
        "org.jfree.chart.axis$SegmentedTimeline#SegmentedTimeline(long,int,int)": -0.16425784449375813,
        "org.jfree.chart.axis$SegmentedTimeline#addBaseTimelineException(java.util.Date)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#addBaseTimelineException(long)": -0.03314780294366223,
        "org.jfree.chart.axis$SegmentedTimeline#addBaseTimelineExclusions(long,long)": -0.07697162467080897,
        "org.jfree.chart.axis$SegmentedTimeline#addException(java.util.Date)": -0.02322541398277875,
        "org.jfree.chart.axis$SegmentedTimeline#addException(long)": -0.07277062049397834,
        "org.jfree.chart.axis$SegmentedTimeline#addException(long,long)": -0.03314780294366223,
        "org.jfree.chart.axis$SegmentedTimeline#addException(org.jfree.chart.axis.SegmentedTimeline$Segment)": -0.10240183266412545,
        "org.jfree.chart.axis$SegmentedTimeline#addExceptions(java.util.List)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#binarySearchExceptionSegments(org.jfree.chart.axis.SegmentedTimeline$Segment)": -0.11786391545771334,
        "org.jfree.chart.axis$SegmentedTimeline#clone()": -0.023225413982778775,
        "org.jfree.chart.axis$SegmentedTimeline#containsDomainRange(java.util.Date,java.util.Date)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#containsDomainRange(long,long)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#containsDomainValue(java.util.Date)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#containsDomainValue(long)": -0.03314780294366223,
        "org.jfree.chart.axis$SegmentedTimeline#equals(java.lang.Object)": -0.06369428511586006,
        "org.jfree.chart.axis$SegmentedTimeline#equals(java.lang.Object,java.lang.Object)": -0.06369428511586006,
        "org.jfree.chart.axis$SegmentedTimeline#firstMondayAfter1900()": -0.16425784449375813,
        "org.jfree.chart.axis$SegmentedTimeline#getAdjustForDaylightSaving()": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#getBaseTimeline()": -0.040881516174663846,
        "org.jfree.chart.axis$SegmentedTimeline#getDate(long)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#getExceptionSegmentCount(long,long)": -0.10563216592227084,
        "org.jfree.chart.axis$SegmentedTimeline#getExceptionSegments()": -0.09219207433891574,
        "org.jfree.chart.axis$SegmentedTimeline#getGroupSegmentCount()": -0.09219207433891574,
        "org.jfree.chart.axis$SegmentedTimeline#getSegment(java.util.Date)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#getSegment(long)": -0.1398579559676683,
        "org.jfree.chart.axis$SegmentedTimeline#getSegmentSize()": -0.16425784449375813,
        "org.jfree.chart.axis$SegmentedTimeline#getSegmentsExcluded()": -0.1118753905022174,
        "org.jfree.chart.axis$SegmentedTimeline#getSegmentsExcludedSize()": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#getSegmentsGroupSize()": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#getSegmentsIncluded()": -0.09219207433891574,
        "org.jfree.chart.axis$SegmentedTimeline#getSegmentsIncludedSize()": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline#getStartTime()": -0.16425784449375813,
        "org.jfree.chart.axis$SegmentedTimeline#getTime(java.util.Date)": -0.08099252901602472,
        "org.jfree.chart.axis$SegmentedTimeline#getTimeFromLong(long)": -0.09219207433891574,
        "org.jfree.chart.axis$SegmentedTimeline#hashCode()": -0.023225413982778775,
        "org.jfree.chart.axis$SegmentedTimeline#newFifteenMinuteTimeline()": -0.14242979300585173,
        "org.jfree.chart.axis$SegmentedTimeline#newMondayThroughFridayTimeline()": -0.16425784449375821,
        "org.jfree.chart.axis$SegmentedTimeline#setAdjustForDaylightSaving(boolean)": -0.06835852491775252,
        "org.jfree.chart.axis$SegmentedTimeline#setBaseTimeline(org.jfree.chart.axis.SegmentedTimeline)": -0.1619353930771307,
        "org.jfree.chart.axis$SegmentedTimeline#setExceptionSegments(java.util.List)": -0.08099252901602472,
        "org.jfree.chart.axis$SegmentedTimeline#setStartTime(long)": -0.16425784449375813,
        "org.jfree.chart.axis$SegmentedTimeline#toMillisecond(long)": -0.09219207433891567,
        "org.jfree.chart.axis$SegmentedTimeline#toTimelineValue(java.util.Date)": -0.06835852491775252,
        "org.jfree.chart.axis$SegmentedTimeline#toTimelineValue(long)": -0.09219207433891567,
        "org.jfree.chart.axis$SegmentedTimeline$BaseTimelineSegmentRange#SegmentedTimeline$BaseTimelineSegmentRange(org.jfree.chart.axis.SegmentedTimeline,long,long)": -0.07697162467080897,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#SegmentedTimeline$Segment(org.jfree.chart.axis.SegmentedTimeline)": -0.07697162467080898,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#SegmentedTimeline$Segment(org.jfree.chart.axis.SegmentedTimeline,long)": -0.1398579559676683,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#after(org.jfree.chart.axis.SegmentedTimeline$Segment)": -0.09909041302239917,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#before(org.jfree.chart.axis.SegmentedTimeline$Segment)": -0.10240183266412545,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#calculateSegmentNumber(long)": -0.1398579559676683,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#compareTo(java.lang.Object)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#contained(long,long)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#contains(long)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#contains(long,long)": -0.10240183266412539,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#contains(org.jfree.chart.axis.SegmentedTimeline$Segment)": -0.10240183266412545,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#copy()": -0.06835852491775252,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#dec()": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#dec(long)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#getDate()": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#getMillisecond()": -0.07697162467080898,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#getSegmentCount()": -0.0727706204939782,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#getSegmentEnd()": -0.12644166506603405,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#getSegmentNumber()": -0.09219207433891574,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#getSegmentNumberRelativeToGroup()": -0.11786391545771334,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#getSegmentStart()": -0.12644166506603405,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#inExceptionSegments()": -0.11786391545771334,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#inExcludeSegments()": -0.10563216592227084,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#inIncludeSegments()": -0.11786391545771334,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#inc()": -0.11489917188014133,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#inc(long)": -0.11489917188014133,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#intersect(long,long)": -0.0727706204939782,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#moveIndexToEnd()": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline$Segment#moveIndexToStart()": -0.047482287480771435,
        "org.jfree.chart.axis$SegmentedTimeline$SegmentRange#SegmentedTimeline$SegmentRange(org.jfree.chart.axis.SegmentedTimeline,long,long)": -0.07697162467080897,
        "org.jfree.chart.axis$SegmentedTimeline$SegmentRange#getSegmentCount()": -0.05335904646307377,
        "org.jfree.chart.axis$SegmentedTimeline$SegmentRange#inExcludeSegments()": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline$SegmentRange#inIncludeSegments()": -0.07697162467080897,
        "org.jfree.chart.axis$SegmentedTimeline$SegmentRange#inc(long)": 0.0,
        "org.jfree.chart.axis$SegmentedTimeline$SegmentRange#intersect(long,long)": -0.07697162467080897,
        "org.jfree.chart.axis$SymbolAxis#<clinit>()": 1.5380389967433192,
        "org.jfree.chart.axis$SymbolAxis#SymbolAxis(java.lang.String,java.lang.String[])": -0.040881516174663936,
        "org.jfree.chart.axis$SymbolAxis#autoAdjustRange()": -0.040881516174663936,
        "org.jfree.chart.axis$SymbolAxis#draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.axis$SymbolAxis#drawGridBands(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,java.util.List)": 0.0,
        "org.jfree.chart.axis$SymbolAxis#drawGridBandsHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,boolean,java.util.List)": 0.0,
        "org.jfree.chart.axis$SymbolAxis#drawGridBandsVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,boolean,java.util.List)": 0.0,
        "org.jfree.chart.axis$SymbolAxis#equals(java.lang.Object)": -0.040881516174663936,
        "org.jfree.chart.axis$SymbolAxis#getGridBandAlternatePaint()": 0.0,
        "org.jfree.chart.axis$SymbolAxis#getGridBandPaint()": 0.0,
        "org.jfree.chart.axis$SymbolAxis#getSymbols()": 0.0,
        "org.jfree.chart.axis$SymbolAxis#isGridBandsVisible()": 0.0,
        "org.jfree.chart.axis$SymbolAxis#readObject(java.io.ObjectInputStream)": -0.02322541398277875,
        "org.jfree.chart.axis$SymbolAxis#refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$SymbolAxis#refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$SymbolAxis#refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$SymbolAxis#selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.axis$SymbolAxis#setGridBandAlternatePaint(java.awt.Paint)": -0.02322541398277875,
        "org.jfree.chart.axis$SymbolAxis#setGridBandPaint(java.awt.Paint)": -0.02322541398277875,
        "org.jfree.chart.axis$SymbolAxis#setGridBandsVisible(boolean)": -0.02322541398277875,
        "org.jfree.chart.axis$SymbolAxis#valueToString(double)": 0.0,
        "org.jfree.chart.axis$SymbolAxis#writeObject(java.io.ObjectOutputStream)": -0.02322541398277875,
        "org.jfree.chart.axis$Tick#Tick(java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)": -0.22233847708688925,
        "org.jfree.chart.axis$Tick#clone()": -0.03314780294366226,
        "org.jfree.chart.axis$Tick#equals(java.lang.Object)": -0.06835852491775252,
        "org.jfree.chart.axis$Tick#getAngle()": -0.2028641283059316,
        "org.jfree.chart.axis$Tick#getRotationAnchor()": -0.2028641283059316,
        "org.jfree.chart.axis$Tick#getText()": -0.2068522430598596,
        "org.jfree.chart.axis$Tick#getTextAnchor()": -0.2028641283059316,
        "org.jfree.chart.axis$Tick#toString()": 0.0,
        "org.jfree.chart.axis$TickType#<clinit>()": -0.21468417828822278,
        "org.jfree.chart.axis$TickType#TickType(java.lang.String)": -0.21468417828822295,
        "org.jfree.chart.axis$TickType#equals(java.lang.Object)": -0.2107914773769588,
        "org.jfree.chart.axis$TickType#readResolve()": -0.02322541398277875,
        "org.jfree.chart.axis$TickType#toString()": 0.0,
        "org.jfree.chart.axis$TickUnit#TickUnit(double)": -0.0369842574232474,
        "org.jfree.chart.axis$TickUnit#TickUnit(double,int)": 0.03163335461426453,
        "org.jfree.chart.axis$TickUnit#compareTo(java.lang.Object)": 1.3419136209461724,
        "org.jfree.chart.axis$TickUnit#equals(java.lang.Object)": -0.20486445012043064,
        "org.jfree.chart.axis$TickUnit#getMinorTickCount()": -0.2068522430598596,
        "org.jfree.chart.axis$TickUnit#getSize()": -0.0038728166807323605,
        "org.jfree.chart.axis$TickUnit#hashCode()": -0.03314780294366226,
        "org.jfree.chart.axis$TickUnit#valueToString(double)": 0.0,
        "org.jfree.chart.axis$TickUnits#TickUnits()": -0.0038728166807323605,
        "org.jfree.chart.axis$TickUnits#add(org.jfree.chart.axis.TickUnit)": -0.0038728166807323605,
        "org.jfree.chart.axis$TickUnits#clone()": -0.023225413982778775,
        "org.jfree.chart.axis$TickUnits#equals(java.lang.Object)": -0.19473082262498798,
        "org.jfree.chart.axis$TickUnits#get(int)": 0.0,
        "org.jfree.chart.axis$TickUnits#getCeilingTickUnit(double)": -0.2048644501204305,
        "org.jfree.chart.axis$TickUnits#getCeilingTickUnit(org.jfree.chart.axis.TickUnit)": -0.20486445012043064,
        "org.jfree.chart.axis$TickUnits#getLargerTickUnit(org.jfree.chart.axis.TickUnit)": -0.09909041302239907,
        "org.jfree.chart.axis$TickUnits#size()": 0.0,
        "org.jfree.chart.axis$ValueAxis#<clinit>()": 1.3112208568847947,
        "org.jfree.chart.axis$ValueAxis#ValueAxis(java.lang.String,org.jfree.chart.axis.TickUnitSource)": 1.3381834256610112,
        "org.jfree.chart.axis$ValueAxis#calculateAnchorPoint(org.jfree.chart.axis.ValueTick,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.20286412830593153,
        "org.jfree.chart.axis$ValueAxis#centerRange(double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#clone()": -0.10563216592227084,
        "org.jfree.chart.axis$ValueAxis#drawAxisLine(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.20286412830593153,
        "org.jfree.chart.axis$ValueAxis#drawTickMarksAndLabels(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)": -0.20286412830593153,
        "org.jfree.chart.axis$ValueAxis#equals(java.lang.Object)": -0.23167989938015776,
        "org.jfree.chart.axis$ValueAxis#findMaximumTickLabelHeight(java.util.List,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)": -0.149953888022742,
        "org.jfree.chart.axis$ValueAxis#findMaximumTickLabelWidth(java.util.List,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)": -0.17554903211743156,
        "org.jfree.chart.axis$ValueAxis#getAutoRangeMinimumSize()": -0.3736726509017276,
        "org.jfree.chart.axis$ValueAxis#getAutoTickIndex()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getDefaultAutoRange()": -0.18948218926986013,
        "org.jfree.chart.axis$ValueAxis#getDownArrow()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getFixedAutoRange()": -0.3736726509017276,
        "org.jfree.chart.axis$ValueAxis#getLeftArrow()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getLowerBound()": -0.1572196173112387,
        "org.jfree.chart.axis$ValueAxis#getLowerMargin()": -0.3736726509017276,
        "org.jfree.chart.axis$ValueAxis#getMinorTickCount()": -0.2068522430598596,
        "org.jfree.chart.axis$ValueAxis#getRange()": -0.28078118539201474,
        "org.jfree.chart.axis$ValueAxis#getRightArrow()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getStandardTickUnits()": -0.20486445012043064,
        "org.jfree.chart.axis$ValueAxis#getUpArrow()": 0.0,
        "org.jfree.chart.axis$ValueAxis#getUpperBound()": -0.1572196173112387,
        "org.jfree.chart.axis$ValueAxis#getUpperMargin()": -0.3736726509017276,
        "org.jfree.chart.axis$ValueAxis#isAutoRange()": 0.05652277780123638,
        "org.jfree.chart.axis$ValueAxis#isAutoTickUnitSelection()": -0.2068522430598596,
        "org.jfree.chart.axis$ValueAxis#isInverted()": -0.21661376185026016,
        "org.jfree.chart.axis$ValueAxis#isNegativeArrowVisible()": 0.0,
        "org.jfree.chart.axis$ValueAxis#isPositiveArrowVisible()": 0.0,
        "org.jfree.chart.axis$ValueAxis#isVerticalTickLabels()": -0.2068522430598596,
        "org.jfree.chart.axis$ValueAxis#lengthToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.2008509521609263,
        "org.jfree.chart.axis$ValueAxis#pan(double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#readObject(java.io.ObjectInputStream)": -0.13460878683821834,
        "org.jfree.chart.axis$ValueAxis#reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)": -0.2048644501204305,
        "org.jfree.chart.axis$ValueAxis#resizeRange(double)": -0.07277062049397834,
        "org.jfree.chart.axis$ValueAxis#resizeRange(double,double)": -0.07277062049397834,
        "org.jfree.chart.axis$ValueAxis#resizeRange2(double,double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setAutoRange(boolean)": -0.07697162467080897,
        "org.jfree.chart.axis$ValueAxis#setAutoRange(boolean,boolean)": -0.07697162467080897,
        "org.jfree.chart.axis$ValueAxis#setAutoRangeMinimumSize(double)": 0.6877336104857212,
        "org.jfree.chart.axis$ValueAxis#setAutoRangeMinimumSize(double,boolean)": 0.6877336104857212,
        "org.jfree.chart.axis$ValueAxis#setAutoTickIndex(int)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setAutoTickUnitSelection(boolean)": -0.02322541398277875,
        "org.jfree.chart.axis$ValueAxis#setAutoTickUnitSelection(boolean,boolean)": -0.10878808397177664,
        "org.jfree.chart.axis$ValueAxis#setDefaultAutoRange(org.jfree.data.Range)": -0.07697162467080897,
        "org.jfree.chart.axis$ValueAxis#setDownArrow(java.awt.Shape)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setFixedAutoRange(double)": -0.05335904646307371,
        "org.jfree.chart.axis$ValueAxis#setInverted(boolean)": -0.04748228748077153,
        "org.jfree.chart.axis$ValueAxis#setLeftArrow(java.awt.Shape)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setLowerBound(double)": -0.06369428511586006,
        "org.jfree.chart.axis$ValueAxis#setLowerMargin(double)": 0.4944998127861052,
        "org.jfree.chart.axis$ValueAxis#setMinorTickCount(int)": -0.02322541398277875,
        "org.jfree.chart.axis$ValueAxis#setNegativeArrowVisible(boolean)": -0.02322541398277875,
        "org.jfree.chart.axis$ValueAxis#setPositiveArrowVisible(boolean)": -0.02322541398277875,
        "org.jfree.chart.axis$ValueAxis#setRange(double,double)": -0.09909041302239917,
        "org.jfree.chart.axis$ValueAxis#setRange(org.jfree.data.Range)": -0.13460878683821834,
        "org.jfree.chart.axis$ValueAxis#setRange(org.jfree.data.Range,boolean,boolean)": 0.4521870540525195,
        "org.jfree.chart.axis$ValueAxis#setRangeAboutValue(double,double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setRangeWithMargins(double,double)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setRangeWithMargins(org.jfree.data.Range)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setRangeWithMargins(org.jfree.data.Range,boolean,boolean)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setRightArrow(java.awt.Shape)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setStandardTickUnits(org.jfree.chart.axis.TickUnitSource)": 0.4083220342622017,
        "org.jfree.chart.axis$ValueAxis#setUpArrow(java.awt.Shape)": 0.0,
        "org.jfree.chart.axis$ValueAxis#setUpperBound(double)": -0.05335904646307371,
        "org.jfree.chart.axis$ValueAxis#setUpperMargin(double)": 0.4944998127861052,
        "org.jfree.chart.axis$ValueAxis#setVerticalTickLabels(boolean)": -0.02322541398277875,
        "org.jfree.chart.axis$ValueAxis#writeObject(java.io.ObjectOutputStream)": -0.13460878683821834,
        "org.jfree.chart.axis$ValueAxis#zoomRange(double,double)": -0.02322541398277875,
        "org.jfree.chart.axis$ValueTick#ValueTick(double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)": -0.2008509521609263,
        "org.jfree.chart.axis$ValueTick#ValueTick(org.jfree.chart.axis.TickType,double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)": -0.21468417828822278,
        "org.jfree.chart.axis$ValueTick#equals(java.lang.Object)": -0.04748228748077153,
        "org.jfree.chart.axis$ValueTick#getTickType()": -0.2028641283059316,
        "org.jfree.chart.axis$ValueTick#getValue()": -0.2028641283059316,
        "org.jfree.chart.block$AbstractBlock#AbstractBlock()": -0.08823409264971331,
        "org.jfree.chart.block$AbstractBlock#arrange(java.awt.Graphics2D)": -0.03314780294366223,
        "org.jfree.chart.block$AbstractBlock#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$AbstractBlock#calculateTotalHeight(double)": -0.23898786166054273,
        "org.jfree.chart.block$AbstractBlock#calculateTotalWidth(double)": -0.23898786166054273,
        "org.jfree.chart.block$AbstractBlock#clone()": -0.09569017516582462,
        "org.jfree.chart.block$AbstractBlock#drawBorder(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.21468417828822278,
        "org.jfree.chart.block$AbstractBlock#equals(java.lang.Object)": -0.2107914773769589,
        "org.jfree.chart.block$AbstractBlock#getBounds()": -0.19057980924246953,
        "org.jfree.chart.block$AbstractBlock#getContentXOffset()": 0.0,
        "org.jfree.chart.block$AbstractBlock#getContentYOffset()": 0.0,
        "org.jfree.chart.block$AbstractBlock#getFrame()": -0.21274350516707474,
        "org.jfree.chart.block$AbstractBlock#getHeight()": -0.09219207433891574,
        "org.jfree.chart.block$AbstractBlock#getID()": 0.0,
        "org.jfree.chart.block$AbstractBlock#getMargin()": 0.0,
        "org.jfree.chart.block$AbstractBlock#getPadding()": 0.0,
        "org.jfree.chart.block$AbstractBlock#getWidth()": -0.09219207433891574,
        "org.jfree.chart.block$AbstractBlock#readObject(java.io.ObjectInputStream)": -0.11489917188014133,
        "org.jfree.chart.block$AbstractBlock#setBounds(java.awt.geom.Rectangle2D)": -0.2242261581790297,
        "org.jfree.chart.block$AbstractBlock#setFrame(org.jfree.chart.block.BlockFrame)": -0.28207090703506327,
        "org.jfree.chart.block$AbstractBlock#setHeight(double)": -0.14496872595721721,
        "org.jfree.chart.block$AbstractBlock#setID(java.lang.String)": -0.023225413982778775,
        "org.jfree.chart.block$AbstractBlock#setMargin(double,double,double,double)": -0.02322541398277875,
        "org.jfree.chart.block$AbstractBlock#setMargin(org.jfree.chart.util.RectangleInsets)": -0.2835657224933727,
        "org.jfree.chart.block$AbstractBlock#setPadding(double,double,double,double)": -0.2008509521609263,
        "org.jfree.chart.block$AbstractBlock#setPadding(org.jfree.chart.util.RectangleInsets)": -0.3717475931885334,
        "org.jfree.chart.block$AbstractBlock#setWidth(double)": -0.14496872595721721,
        "org.jfree.chart.block$AbstractBlock#toContentConstraint(org.jfree.chart.block.RectangleConstraint)": -0.21853251080451352,
        "org.jfree.chart.block$AbstractBlock#trimBorder(java.awt.geom.Rectangle2D)": -0.21468417828822278,
        "org.jfree.chart.block$AbstractBlock#trimMargin(java.awt.geom.Rectangle2D)": -0.21468417828822278,
        "org.jfree.chart.block$AbstractBlock#trimPadding(java.awt.geom.Rectangle2D)": -0.21468417828822278,
        "org.jfree.chart.block$AbstractBlock#trimToContentHeight(double)": -0.21661376185026004,
        "org.jfree.chart.block$AbstractBlock#trimToContentHeight(org.jfree.data.Range)": -0.21661376185026004,
        "org.jfree.chart.block$AbstractBlock#trimToContentWidth(double)": -0.21661376185026004,
        "org.jfree.chart.block$AbstractBlock#trimToContentWidth(org.jfree.data.Range)": -0.21661376185026004,
        "org.jfree.chart.block$AbstractBlock#writeObject(java.io.ObjectOutputStream)": -0.11489917188014133,
        "org.jfree.chart.block$BlockBorder#<clinit>()": -0.09201533319186588,
        "org.jfree.chart.block$BlockBorder#BlockBorder()": -0.02322541398277875,
        "org.jfree.chart.block$BlockBorder#BlockBorder(double,double,double,double)": 0.0,
        "org.jfree.chart.block$BlockBorder#BlockBorder(double,double,double,double,java.awt.Paint)": 0.0,
        "org.jfree.chart.block$BlockBorder#BlockBorder(java.awt.Paint)": -0.040881516174663936,
        "org.jfree.chart.block$BlockBorder#BlockBorder(org.jfree.chart.util.RectangleInsets,java.awt.Paint)": -0.4181516511263516,
        "org.jfree.chart.block$BlockBorder#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.21468417828822278,
        "org.jfree.chart.block$BlockBorder#equals(java.lang.Object)": -0.21468417828822278,
        "org.jfree.chart.block$BlockBorder#getInsets()": -0.2407934215198817,
        "org.jfree.chart.block$BlockBorder#getPaint()": 0.0,
        "org.jfree.chart.block$BlockBorder#readObject(java.io.ObjectInputStream)": -0.11786391545771334,
        "org.jfree.chart.block$BlockBorder#writeObject(java.io.ObjectOutputStream)": -0.11786391545771334,
        "org.jfree.chart.block$BlockContainer#BlockContainer()": -0.05335904646307371,
        "org.jfree.chart.block$BlockContainer#BlockContainer(org.jfree.chart.block.Arrangement)": 0.0034614875348481094,
        "org.jfree.chart.block$BlockContainer#add(org.jfree.chart.block.Block)": -0.2371738987326198,
        "org.jfree.chart.block$BlockContainer#add(org.jfree.chart.block.Block,java.lang.Object)": -0.2371738987326198,
        "org.jfree.chart.block$BlockContainer#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": -0.22422615817902966,
        "org.jfree.chart.block$BlockContainer#clear()": -0.21853251080451352,
        "org.jfree.chart.block$BlockContainer#clone()": -0.02322541398277875,
        "org.jfree.chart.block$BlockContainer#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.block$BlockContainer#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)": -0.21274350516707477,
        "org.jfree.chart.block$BlockContainer#equals(java.lang.Object)": -0.06369428511586006,
        "org.jfree.chart.block$BlockContainer#getArrangement()": 0.0,
        "org.jfree.chart.block$BlockContainer#getBlocks()": -0.21853251080451352,
        "org.jfree.chart.block$BlockContainer#isEmpty()": -0.21274350516707474,
        "org.jfree.chart.block$BlockContainer#setArrangement(org.jfree.chart.block.Arrangement)": -0.21468417828822295,
        "org.jfree.chart.block$BlockParams#BlockParams()": -0.21468417828822295,
        "org.jfree.chart.block$BlockParams#getGenerateEntities()": -0.21468417828822295,
        "org.jfree.chart.block$BlockParams#getTranslateX()": 0.0,
        "org.jfree.chart.block$BlockParams#getTranslateY()": 0.0,
        "org.jfree.chart.block$BlockParams#setGenerateEntities(boolean)": -0.21468417828822295,
        "org.jfree.chart.block$BlockParams#setTranslateX(double)": 0.0,
        "org.jfree.chart.block$BlockParams#setTranslateY(double)": 0.0,
        "org.jfree.chart.block$BlockResult#BlockResult()": -0.21274350516707474,
        "org.jfree.chart.block$BlockResult#getEntityCollection()": -0.1548243766248829,
        "org.jfree.chart.block$BlockResult#setEntityCollection(org.jfree.chart.entity.EntityCollection)": -0.08099252901602472,
        "org.jfree.chart.block$BorderArrangement#BorderArrangement()": -0.21274350516707474,
        "org.jfree.chart.block$BorderArrangement#add(org.jfree.chart.block.Block,java.lang.Object)": -0.20685224305985966,
        "org.jfree.chart.block$BorderArrangement#arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": -0.1947308226249881,
        "org.jfree.chart.block$BorderArrangement#arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": -0.02322541398277875,
        "org.jfree.chart.block$BorderArrangement#arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,double)": -0.02322541398277875,
        "org.jfree.chart.block$BorderArrangement#arrangeFR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$BorderArrangement#arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)": -0.1905798092424695,
        "org.jfree.chart.block$BorderArrangement#arrangeRR(org.jfree.chart.block.BlockContainer,org.jfree.data.Range,org.jfree.data.Range,java.awt.Graphics2D)": -0.02322541398277875,
        "org.jfree.chart.block$BorderArrangement#clear()": -0.040881516174663846,
        "org.jfree.chart.block$BorderArrangement#equals(java.lang.Object)": -0.058721517117045194,
        "org.jfree.chart.block$CenterArrangement#CenterArrangement()": -0.1884818021668302,
        "org.jfree.chart.block$CenterArrangement#add(org.jfree.chart.block.Block,java.lang.Object)": -0.1884818021668302,
        "org.jfree.chart.block$CenterArrangement#arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": -0.18848180216683022,
        "org.jfree.chart.block$CenterArrangement#arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$CenterArrangement#arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$CenterArrangement#arrangeFR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$CenterArrangement#arrangeNF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$CenterArrangement#arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)": -0.18848180216683022,
        "org.jfree.chart.block$CenterArrangement#arrangeRF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$CenterArrangement#arrangeRN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$CenterArrangement#arrangeRR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$CenterArrangement#clear()": 0.0,
        "org.jfree.chart.block$CenterArrangement#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.block$ColumnArrangement#ColumnArrangement()": -0.2865445345262671,
        "org.jfree.chart.block$ColumnArrangement#ColumnArrangement(org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,double,double)": -0.023225413982778775,
        "org.jfree.chart.block$ColumnArrangement#add(org.jfree.chart.block.Block,java.lang.Object)": -0.023225413982778775,
        "org.jfree.chart.block$ColumnArrangement#arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$ColumnArrangement#arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$ColumnArrangement#arrangeNF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$ColumnArrangement#arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)": 0.0,
        "org.jfree.chart.block$ColumnArrangement#arrangeRF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$ColumnArrangement#arrangeRR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$ColumnArrangement#clear()": 0.0,
        "org.jfree.chart.block$ColumnArrangement#equals(java.lang.Object)": -0.09219207433891574,
        "org.jfree.chart.block$FlowArrangement#FlowArrangement()": 0.03515002560800669,
        "org.jfree.chart.block$FlowArrangement#FlowArrangement(org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,double,double)": -0.29539719950717086,
        "org.jfree.chart.block$FlowArrangement#add(org.jfree.chart.block.Block,java.lang.Object)": -0.19057980924246953,
        "org.jfree.chart.block$FlowArrangement#arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": -0.18848180216683022,
        "org.jfree.chart.block$FlowArrangement#arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$FlowArrangement#arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": -0.05335904646307371,
        "org.jfree.chart.block$FlowArrangement#arrangeFR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": -0.05335904646307371,
        "org.jfree.chart.block$FlowArrangement#arrangeNF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$FlowArrangement#arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)": -0.18848180216683022,
        "org.jfree.chart.block$FlowArrangement#arrangeRF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$FlowArrangement#arrangeRN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.block$FlowArrangement#arrangeRR(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": -0.18848180216683022,
        "org.jfree.chart.block$FlowArrangement#clear()": -0.21274350516707474,
        "org.jfree.chart.block$FlowArrangement#equals(java.lang.Object)": -0.10240183266412539,
        "org.jfree.chart.block$LabelBlock#<clinit>()": -0.19473082262498798,
        "org.jfree.chart.block$LabelBlock#LabelBlock(java.lang.String)": 0.0,
        "org.jfree.chart.block$LabelBlock#LabelBlock(java.lang.String,java.awt.Font)": 0.0,
        "org.jfree.chart.block$LabelBlock#LabelBlock(java.lang.String,java.awt.Font,java.awt.Paint)": -0.1947308226249881,
        "org.jfree.chart.block$LabelBlock#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": -0.18848180216683022,
        "org.jfree.chart.block$LabelBlock#clone()": -0.02322541398277875,
        "org.jfree.chart.block$LabelBlock#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.block$LabelBlock#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)": -0.18848180216683022,
        "org.jfree.chart.block$LabelBlock#equals(java.lang.Object)": -0.040881516174663936,
        "org.jfree.chart.block$LabelBlock#getContentAlignmentPoint()": 0.0,
        "org.jfree.chart.block$LabelBlock#getFont()": 0.0,
        "org.jfree.chart.block$LabelBlock#getPaint()": 0.0,
        "org.jfree.chart.block$LabelBlock#getTextAnchor()": 0.0,
        "org.jfree.chart.block$LabelBlock#getToolTipText()": 0.0,
        "org.jfree.chart.block$LabelBlock#getURLText()": 0.0,
        "org.jfree.chart.block$LabelBlock#readObject(java.io.ObjectInputStream)": -0.02322541398277875,
        "org.jfree.chart.block$LabelBlock#setContentAlignmentPoint(org.jfree.chart.text.TextBlockAnchor)": -0.023225413982778775,
        "org.jfree.chart.block$LabelBlock#setFont(java.awt.Font)": 0.0,
        "org.jfree.chart.block$LabelBlock#setPaint(java.awt.Paint)": 0.0,
        "org.jfree.chart.block$LabelBlock#setTextAnchor(org.jfree.chart.util.RectangleAnchor)": -0.023225413982778775,
        "org.jfree.chart.block$LabelBlock#setToolTipText(java.lang.String)": -0.023225413982778775,
        "org.jfree.chart.block$LabelBlock#setURLText(java.lang.String)": -0.023225413982778775,
        "org.jfree.chart.block$LabelBlock#writeObject(java.io.ObjectOutputStream)": -0.02322541398277875,
        "org.jfree.chart.block$LengthConstraintType#<clinit>()": -0.25145899357977725,
        "org.jfree.chart.block$LengthConstraintType#LengthConstraintType(java.lang.String)": -0.2514589935797771,
        "org.jfree.chart.block$LengthConstraintType#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.block$LengthConstraintType#hashCode()": 0.0,
        "org.jfree.chart.block$LengthConstraintType#readResolve()": 0.0,
        "org.jfree.chart.block$LengthConstraintType#toString()": 0.0,
        "org.jfree.chart.block$LineBorder#LineBorder()": 0.04556388652948436,
        "org.jfree.chart.block$LineBorder#LineBorder(java.awt.Paint,java.awt.Stroke,org.jfree.chart.util.RectangleInsets)": -0.2835657224933727,
        "org.jfree.chart.block$LineBorder#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.21274350516707477,
        "org.jfree.chart.block$LineBorder#equals(java.lang.Object)": -0.07697162467080897,
        "org.jfree.chart.block$LineBorder#getInsets()": -0.21274350516707474,
        "org.jfree.chart.block$LineBorder#getPaint()": -0.1884818021668302,
        "org.jfree.chart.block$LineBorder#getStroke()": -0.1884818021668302,
        "org.jfree.chart.block$LineBorder#readObject(java.io.ObjectInputStream)": -0.06835852491775252,
        "org.jfree.chart.block$LineBorder#writeObject(java.io.ObjectOutputStream)": -0.06835852491775252,
        "org.jfree.chart.block$RectangleConstraint#<clinit>()": -0.25145899357977725,
        "org.jfree.chart.block$RectangleConstraint#RectangleConstraint(double,double)": -0.07277062049397834,
        "org.jfree.chart.block$RectangleConstraint#RectangleConstraint(double,org.jfree.data.Range)": -0.03314780294366223,
        "org.jfree.chart.block$RectangleConstraint#RectangleConstraint(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)": -0.2514589935797771,
        "org.jfree.chart.block$RectangleConstraint#RectangleConstraint(org.jfree.data.Range,double)": -0.02322541398277875,
        "org.jfree.chart.block$RectangleConstraint#RectangleConstraint(org.jfree.data.Range,org.jfree.data.Range)": -0.040881516174663936,
        "org.jfree.chart.block$RectangleConstraint#calculateConstrainedSize(org.jfree.chart.util.Size2D)": -0.09219207433891567,
        "org.jfree.chart.block$RectangleConstraint#getHeight()": -0.24437997130871558,
        "org.jfree.chart.block$RectangleConstraint#getHeightConstraintType()": -0.24616126839271368,
        "org.jfree.chart.block$RectangleConstraint#getHeightRange()": -0.2242261581790297,
        "org.jfree.chart.block$RectangleConstraint#getWidth()": -0.24437997130871558,
        "org.jfree.chart.block$RectangleConstraint#getWidthConstraintType()": -0.24616126839271368,
        "org.jfree.chart.block$RectangleConstraint#getWidthRange()": -0.22233847708688925,
        "org.jfree.chart.block$RectangleConstraint#toFixedHeight(double)": -0.07277062049397834,
        "org.jfree.chart.block$RectangleConstraint#toFixedWidth(double)": -0.09219207433891567,
        "org.jfree.chart.block$RectangleConstraint#toRangeHeight(org.jfree.data.Range)": -0.02322541398277875,
        "org.jfree.chart.block$RectangleConstraint#toRangeWidth(org.jfree.data.Range)": -0.02322541398277875,
        "org.jfree.chart.block$RectangleConstraint#toString()": 0.0,
        "org.jfree.chart.block$RectangleConstraint#toUnconstrainedHeight()": -0.040881516174663936,
        "org.jfree.chart.block$RectangleConstraint#toUnconstrainedWidth()": -0.03314780294366223,
        "org.jfree.chart.entity$AxisEntity#AxisEntity(java.awt.Shape,org.jfree.chart.axis.Axis)": -0.08099252901602469,
        "org.jfree.chart.entity$AxisEntity#AxisEntity(java.awt.Shape,org.jfree.chart.axis.Axis,java.lang.String)": -0.08099252901602469,
        "org.jfree.chart.entity$AxisEntity#AxisEntity(java.awt.Shape,org.jfree.chart.axis.Axis,java.lang.String,java.lang.String)": -0.08099252901602469,
        "org.jfree.chart.entity$AxisEntity#clone()": 0.0,
        "org.jfree.chart.entity$AxisEntity#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.entity$AxisEntity#getAxis()": 0.0,
        "org.jfree.chart.entity$AxisEntity#hashCode()": 0.0,
        "org.jfree.chart.entity$AxisEntity#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.entity$AxisEntity#toString()": 0.0,
        "org.jfree.chart.entity$AxisEntity#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.entity$AxisLabelEntity#AxisLabelEntity(org.jfree.chart.axis.Axis,java.awt.Shape,java.lang.String,java.lang.String)": -0.08099252901602469,
        "org.jfree.chart.entity$AxisLabelEntity#getAxis()": 0.0,
        "org.jfree.chart.entity$AxisLabelEntity#toString()": 0.0,
        "org.jfree.chart.entity$CategoryItemEntity#CategoryItemEntity(java.awt.Shape,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,java.lang.Comparable,java.lang.Comparable)": -0.058721517117045194,
        "org.jfree.chart.entity$CategoryItemEntity#equals(java.lang.Object)": -0.040881516174663936,
        "org.jfree.chart.entity$CategoryItemEntity#getColumnKey()": 0.0,
        "org.jfree.chart.entity$CategoryItemEntity#getDataset()": 0.0,
        "org.jfree.chart.entity$CategoryItemEntity#getRowKey()": 0.0,
        "org.jfree.chart.entity$CategoryItemEntity#setColumnKey(java.lang.Comparable)": -0.023225413982778775,
        "org.jfree.chart.entity$CategoryItemEntity#setDataset(org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.chart.entity$CategoryItemEntity#setRowKey(java.lang.Comparable)": -0.023225413982778775,
        "org.jfree.chart.entity$CategoryItemEntity#toString()": 0.0,
        "org.jfree.chart.entity$ChartEntity#ChartEntity(java.awt.Shape)": -0.09569017516582462,
        "org.jfree.chart.entity$ChartEntity#ChartEntity(java.awt.Shape,java.lang.String)": -0.09569017516582462,
        "org.jfree.chart.entity$ChartEntity#ChartEntity(java.awt.Shape,java.lang.String,java.lang.String)": -0.149953888022742,
        "org.jfree.chart.entity$ChartEntity#clone()": -0.06369428511586017,
        "org.jfree.chart.entity$ChartEntity#equals(java.lang.Object)": -0.11786391545771334,
        "org.jfree.chart.entity$ChartEntity#getArea()": 0.0,
        "org.jfree.chart.entity$ChartEntity#getImageMapAreaTag(org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)": 0.0,
        "org.jfree.chart.entity$ChartEntity#getPolyCoords(java.awt.Shape)": 0.0,
        "org.jfree.chart.entity$ChartEntity#getRectCoords(java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.entity$ChartEntity#getShapeCoords()": 0.0,
        "org.jfree.chart.entity$ChartEntity#getShapeType()": 0.0,
        "org.jfree.chart.entity$ChartEntity#getToolTipText()": 0.0,
        "org.jfree.chart.entity$ChartEntity#getURLText()": 0.0,
        "org.jfree.chart.entity$ChartEntity#hashCode()": 0.0,
        "org.jfree.chart.entity$ChartEntity#readObject(java.io.ObjectInputStream)": -0.06369428511586006,
        "org.jfree.chart.entity$ChartEntity#setArea(java.awt.Shape)": -0.05872151711704521,
        "org.jfree.chart.entity$ChartEntity#setToolTipText(java.lang.String)": -0.09909041302239907,
        "org.jfree.chart.entity$ChartEntity#setURLText(java.lang.String)": -0.09909041302239907,
        "org.jfree.chart.entity$ChartEntity#toString()": 0.0,
        "org.jfree.chart.entity$ChartEntity#writeObject(java.io.ObjectOutputStream)": -0.06369428511586006,
        "org.jfree.chart.entity$JFreeChartEntity#JFreeChartEntity(java.awt.Shape,org.jfree.chart.JFreeChart)": -0.08099252901602469,
        "org.jfree.chart.entity$JFreeChartEntity#JFreeChartEntity(java.awt.Shape,org.jfree.chart.JFreeChart,java.lang.String)": -0.08099252901602469,
        "org.jfree.chart.entity$JFreeChartEntity#JFreeChartEntity(java.awt.Shape,org.jfree.chart.JFreeChart,java.lang.String,java.lang.String)": -0.08099252901602469,
        "org.jfree.chart.entity$JFreeChartEntity#clone()": 0.0,
        "org.jfree.chart.entity$JFreeChartEntity#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.entity$JFreeChartEntity#getChart()": 0.0,
        "org.jfree.chart.entity$JFreeChartEntity#hashCode()": 0.0,
        "org.jfree.chart.entity$JFreeChartEntity#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.entity$JFreeChartEntity#toString()": 0.0,
        "org.jfree.chart.entity$JFreeChartEntity#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.entity$LegendItemEntity#LegendItemEntity(java.awt.Shape)": -0.08858541777234356,
        "org.jfree.chart.entity$LegendItemEntity#clone()": -0.02322541398277875,
        "org.jfree.chart.entity$LegendItemEntity#equals(java.lang.Object)": -0.040881516174663936,
        "org.jfree.chart.entity$LegendItemEntity#getDataset()": 0.0,
        "org.jfree.chart.entity$LegendItemEntity#getSeriesKey()": 0.0,
        "org.jfree.chart.entity$LegendItemEntity#setDataset(org.jfree.data.general.Dataset)": -0.08099252901602472,
        "org.jfree.chart.entity$LegendItemEntity#setSeriesKey(java.lang.Comparable)": -0.08099252901602472,
        "org.jfree.chart.entity$LegendItemEntity#toString()": 0.0,
        "org.jfree.chart.entity$PieSectionEntity#PieSectionEntity(java.awt.Shape,org.jfree.data.general.PieDataset,int,int,java.lang.Comparable,java.lang.String,java.lang.String)": -0.058721517117045194,
        "org.jfree.chart.entity$PieSectionEntity#equals(java.lang.Object)": -0.058721517117045194,
        "org.jfree.chart.entity$PieSectionEntity#getDataset()": 0.0,
        "org.jfree.chart.entity$PieSectionEntity#getPieIndex()": 0.0,
        "org.jfree.chart.entity$PieSectionEntity#getSectionIndex()": 0.0,
        "org.jfree.chart.entity$PieSectionEntity#getSectionKey()": 0.0,
        "org.jfree.chart.entity$PieSectionEntity#hashCode()": 0.0,
        "org.jfree.chart.entity$PieSectionEntity#setDataset(org.jfree.data.general.PieDataset)": -0.023225413982778775,
        "org.jfree.chart.entity$PieSectionEntity#setPieIndex(int)": -0.023225413982778775,
        "org.jfree.chart.entity$PieSectionEntity#setSectionIndex(int)": -0.023225413982778775,
        "org.jfree.chart.entity$PieSectionEntity#setSectionKey(java.lang.Comparable)": -0.023225413982778775,
        "org.jfree.chart.entity$PieSectionEntity#toString()": 0.0,
        "org.jfree.chart.entity$PlotEntity#PlotEntity(java.awt.Shape,org.jfree.chart.plot.Plot)": 0.0,
        "org.jfree.chart.entity$PlotEntity#PlotEntity(java.awt.Shape,org.jfree.chart.plot.Plot,java.lang.String)": 0.0,
        "org.jfree.chart.entity$PlotEntity#PlotEntity(java.awt.Shape,org.jfree.chart.plot.Plot,java.lang.String,java.lang.String)": -0.08099252901602469,
        "org.jfree.chart.entity$PlotEntity#clone()": 0.0,
        "org.jfree.chart.entity$PlotEntity#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.entity$PlotEntity#getPlot()": 0.0,
        "org.jfree.chart.entity$PlotEntity#hashCode()": 0.0,
        "org.jfree.chart.entity$PlotEntity#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.entity$PlotEntity#toString()": 0.0,
        "org.jfree.chart.entity$PlotEntity#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.entity$TitleEntity#TitleEntity(java.awt.Shape,org.jfree.chart.title.Title)": -0.07697162467080897,
        "org.jfree.chart.entity$TitleEntity#TitleEntity(java.awt.Shape,org.jfree.chart.title.Title,java.lang.String)": -0.07697162467080897,
        "org.jfree.chart.entity$TitleEntity#TitleEntity(java.awt.Shape,org.jfree.chart.title.Title,java.lang.String,java.lang.String)": -0.08099252901602469,
        "org.jfree.chart.entity$TitleEntity#clone()": 0.0,
        "org.jfree.chart.entity$TitleEntity#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.entity$TitleEntity#getTitle()": 0.0,
        "org.jfree.chart.entity$TitleEntity#hashCode()": 0.0,
        "org.jfree.chart.entity$TitleEntity#readObject(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.entity$TitleEntity#toString()": 0.0,
        "org.jfree.chart.entity$TitleEntity#writeObject(java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.entity$XYItemEntity#XYItemEntity(java.awt.Shape,org.jfree.data.xy.XYDataset,int,int,java.lang.String,java.lang.String)": -0.040881516174663936,
        "org.jfree.chart.entity$XYItemEntity#equals(java.lang.Object)": -0.040881516174663936,
        "org.jfree.chart.entity$XYItemEntity#getDataset()": 0.0,
        "org.jfree.chart.entity$XYItemEntity#getItem()": 0.0,
        "org.jfree.chart.entity$XYItemEntity#getSeriesIndex()": 0.0,
        "org.jfree.chart.entity$XYItemEntity#setDataset(org.jfree.data.xy.XYDataset)": 0.0,
        "org.jfree.chart.entity$XYItemEntity#setItem(int)": -0.023225413982778775,
        "org.jfree.chart.entity$XYItemEntity#setSeriesIndex(int)": -0.023225413982778775,
        "org.jfree.chart.entity$XYItemEntity#toString()": 0.0,
        "org.jfree.chart.event$AxisChangeEvent#AxisChangeEvent(org.jfree.chart.axis.Axis)": 1.44599821049979,
        "org.jfree.chart.event$AxisChangeEvent#getAxis()": -0.047482287480771435,
        "org.jfree.chart.event$ChartChangeEvent#ChartChangeEvent(java.lang.Object)": 0.9611553043957505,
        "org.jfree.chart.event$ChartChangeEvent#ChartChangeEvent(java.lang.Object,org.jfree.chart.JFreeChart)": 0.0,
        "org.jfree.chart.event$ChartChangeEvent#ChartChangeEvent(java.lang.Object,org.jfree.chart.JFreeChart,org.jfree.chart.event.ChartChangeEventType)": -0.3846311332311546,
        "org.jfree.chart.event$ChartChangeEvent#getChart()": 0.0,
        "org.jfree.chart.event$ChartChangeEvent#getType()": 0.0,
        "org.jfree.chart.event$ChartChangeEvent#setChart(org.jfree.chart.JFreeChart)": -0.23204052206794815,
        "org.jfree.chart.event$ChartChangeEvent#setType(org.jfree.chart.event.ChartChangeEventType)": 0.03292619430079269,
        "org.jfree.chart.event$ChartChangeEventType#<clinit>()": 0.9611553043957505,
        "org.jfree.chart.event$ChartChangeEventType#ChartChangeEventType(java.lang.String)": -0.3846311332311546,
        "org.jfree.chart.event$ChartChangeEventType#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.event$ChartChangeEventType#hashCode()": 0.0,
        "org.jfree.chart.event$ChartChangeEventType#readResolve()": 0.0,
        "org.jfree.chart.event$ChartChangeEventType#toString()": 0.0,
        "org.jfree.chart.event$ChartProgressEvent#ChartProgressEvent(java.lang.Object,org.jfree.chart.JFreeChart,int,int)": -0.21468417828822295,
        "org.jfree.chart.event$ChartProgressEvent#getChart()": 0.0,
        "org.jfree.chart.event$ChartProgressEvent#getPercent()": 0.0,
        "org.jfree.chart.event$ChartProgressEvent#getType()": 0.0,
        "org.jfree.chart.event$ChartProgressEvent#setChart(org.jfree.chart.JFreeChart)": 0.0,
        "org.jfree.chart.event$ChartProgressEvent#setPercent(int)": 0.0,
        "org.jfree.chart.event$ChartProgressEvent#setType(int)": 0.0,
        "org.jfree.chart.event$MarkerChangeEvent#MarkerChangeEvent(org.jfree.chart.plot.Marker)": -0.15240284524136027,
        "org.jfree.chart.event$MarkerChangeEvent#getMarker()": -0.10240183266412539,
        "org.jfree.chart.event$PlotChangeEvent#PlotChangeEvent(org.jfree.chart.plot.Plot)": 1.3233935187544685,
        "org.jfree.chart.event$PlotChangeEvent#getPlot()": 0.0,
        "org.jfree.chart.event$RendererChangeEvent#RendererChangeEvent(java.lang.Object)": 0.1995493369612512,
        "org.jfree.chart.event$RendererChangeEvent#RendererChangeEvent(java.lang.Object,boolean)": 0.1995493369612512,
        "org.jfree.chart.event$RendererChangeEvent#getRenderer()": -0.023225413982778775,
        "org.jfree.chart.event$RendererChangeEvent#getSeriesVisibilityChanged()": -0.11722780398748896,
        "org.jfree.chart.event$TitleChangeEvent#TitleChangeEvent(org.jfree.chart.title.Title)": -0.010483435610937328,
        "org.jfree.chart.event$TitleChangeEvent#getTitle()": 0.0,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#AbstractPieItemLabelGenerator(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)": -0.1547270607211206,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#clone()": -0.07697162467080897,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#createItemArray(org.jfree.data.general.PieDataset,java.lang.Comparable)": -0.040881516174663936,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#equals(java.lang.Object)": -0.13460878683821834,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)": -0.040881516174663936,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#getLabelFormat()": 0.0,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#getNumberFormat()": -0.040881516174663846,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#getPercentFormat()": -0.023225413982778775,
        "org.jfree.chart.labels$AbstractPieItemLabelGenerator#hashCode()": -0.03314780294366226,
        "org.jfree.chart.labels$AbstractXYItemLabelGenerator#AbstractXYItemLabelGenerator()": 0.0,
        "org.jfree.chart.labels$AbstractXYItemLabelGenerator#AbstractXYItemLabelGenerator(java.lang.String,java.text.DateFormat,java.text.DateFormat)": -0.05335904646307371,
        "org.jfree.chart.labels$AbstractXYItemLabelGenerator#AbstractXYItemLabelGenerator(java.lang.String,java.text.DateFormat,java.text.NumberFormat)": -0.03314780294366223,
        "org.jfree.chart.labels$AbstractXYItemLabelGenerator#AbstractXYItemLabelGenerator(java.lang.String,java.text.NumberFormat,java.text.DateFormat)": 0.0,
        "org.jfree.chart.labels$AbstractXYItemLabelGenerator#AbstractXYItemLabelGenerator(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)": -0.026577951790807363,
        "org.jfree.chart.labels$AbstractXYItemLabelGenerator#clone()": -0.058721517117045194,
        "org.jfree.chart.labels$AbstractXYItemLabelGenerator#createItemArray(org.jfree.data.xy.XYDataset,int,int)": -0.02322541398277875,
        "org.jfree.chart.labels$AbstractXYItemLabelGenerator#equals(java.lang.Object)": -0.13725155524113583,
        "org.jfree.chart.labels$AbstractXYItemLabelGenerator#generateLabelString(org.jfree.data.xy.XYDataset,int,int)": 0.0,
        "org.jfree.chart.labels$AbstractXYItemLabelGenerator#getFormatString()": -0.023225413982778775,
        "org.jfree.chart.labels$AbstractXYItemLabelGenerator#getNullYString()": 0.0,
        "org.jfree.chart.labels$AbstractXYItemLabelGenerator#getXDateFormat()": -0.023225413982778775,
        "org.jfree.chart.labels$AbstractXYItemLabelGenerator#getXFormat()": -0.023225413982778775,
        "org.jfree.chart.labels$AbstractXYItemLabelGenerator#getYDateFormat()": -0.023225413982778775,
        "org.jfree.chart.labels$AbstractXYItemLabelGenerator#getYFormat()": -0.023225413982778775,
        "org.jfree.chart.labels$AbstractXYItemLabelGenerator#hashCode()": -0.05335904646307377,
        "org.jfree.chart.labels$ItemLabelAnchor#<clinit>()": 0.09650498911507288,
        "org.jfree.chart.labels$ItemLabelAnchor#ItemLabelAnchor(java.lang.String)": -0.5612682729467762,
        "org.jfree.chart.labels$ItemLabelAnchor#equals(java.lang.Object)": -0.38377211483745677,
        "org.jfree.chart.labels$ItemLabelAnchor#readResolve()": -0.22233847708688936,
        "org.jfree.chart.labels$ItemLabelAnchor#toString()": -0.2261039330966177,
        "org.jfree.chart.labels$ItemLabelPosition#ItemLabelPosition()": -0.058721517117045194,
        "org.jfree.chart.labels$ItemLabelPosition#ItemLabelPosition(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.chart.text.TextAnchor)": 0.10068101335501822,
        "org.jfree.chart.labels$ItemLabelPosition#ItemLabelPosition(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)": -0.5591814042860215,
        "org.jfree.chart.labels$ItemLabelPosition#equals(java.lang.Object)": -0.3768065856655308,
        "org.jfree.chart.labels$ItemLabelPosition#getAngle()": 0.0,
        "org.jfree.chart.labels$ItemLabelPosition#getItemLabelAnchor()": 0.0,
        "org.jfree.chart.labels$ItemLabelPosition#getRotationAnchor()": 0.0,
        "org.jfree.chart.labels$ItemLabelPosition#getTextAnchor()": 0.0,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#StandardPieSectionLabelGenerator()": 0.08163721900278167,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#StandardPieSectionLabelGenerator(java.lang.String)": -0.02322541398277875,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#StandardPieSectionLabelGenerator(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)": 0.08163721900278167,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#StandardPieSectionLabelGenerator(java.lang.String,java.util.Locale)": 0.0,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#StandardPieSectionLabelGenerator(java.util.Locale)": 0.0,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#clone()": -0.07277062049397834,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#equals(java.lang.Object)": -0.12363179132537455,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#generateAttributedSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)": 0.0,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)": -0.040881516174663936,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#getAttributedLabel(int)": 0.0,
        "org.jfree.chart.labels$StandardPieSectionLabelGenerator#setAttributedLabel(int,java.text.AttributedString)": -0.02322541398277875,
        "org.jfree.chart.labels$StandardPieToolTipGenerator#StandardPieToolTipGenerator()": 0.13859805312612014,
        "org.jfree.chart.labels$StandardPieToolTipGenerator#StandardPieToolTipGenerator(java.lang.String)": 0.1355742717481964,
        "org.jfree.chart.labels$StandardPieToolTipGenerator#StandardPieToolTipGenerator(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)": 0.1355742717481964,
        "org.jfree.chart.labels$StandardPieToolTipGenerator#StandardPieToolTipGenerator(java.lang.String,java.util.Locale)": 0.1355742717481964,
        "org.jfree.chart.labels$StandardPieToolTipGenerator#StandardPieToolTipGenerator(java.util.Locale)": 0.0,
        "org.jfree.chart.labels$StandardPieToolTipGenerator#clone()": -0.02322541398277875,
        "org.jfree.chart.labels$StandardPieToolTipGenerator#generateToolTip(org.jfree.data.general.PieDataset,java.lang.Comparable)": 0.0,
        "org.jfree.chart.labels$StandardXYSeriesLabelGenerator#StandardXYSeriesLabelGenerator()": -0.03314780294366223,
        "org.jfree.chart.labels$StandardXYSeriesLabelGenerator#StandardXYSeriesLabelGenerator(java.lang.String)": -0.28052165283175556,
        "org.jfree.chart.labels$StandardXYSeriesLabelGenerator#clone()": -0.1548243766248829,
        "org.jfree.chart.labels$StandardXYSeriesLabelGenerator#createItemArray(org.jfree.data.xy.XYDataset,int)": -0.12644166506603402,
        "org.jfree.chart.labels$StandardXYSeriesLabelGenerator#equals(java.lang.Object)": -0.31375569128140013,
        "org.jfree.chart.labels$StandardXYSeriesLabelGenerator#generateLabel(org.jfree.data.xy.XYDataset,int)": -0.12644166506603402,
        "org.jfree.chart.labels$StandardXYSeriesLabelGenerator#hashCode()": -0.023225413982778775,
        "org.jfree.chart.labels$StandardXYToolTipGenerator#StandardXYToolTipGenerator()": 0.6501791563376325,
        "org.jfree.chart.labels$StandardXYToolTipGenerator#StandardXYToolTipGenerator(java.lang.String,java.text.DateFormat,java.text.DateFormat)": -0.03314780294366223,
        "org.jfree.chart.labels$StandardXYToolTipGenerator#StandardXYToolTipGenerator(java.lang.String,java.text.DateFormat,java.text.NumberFormat)": -0.03314780294366223,
        "org.jfree.chart.labels$StandardXYToolTipGenerator#StandardXYToolTipGenerator(java.lang.String,java.text.NumberFormat,java.text.DateFormat)": 0.0,
        "org.jfree.chart.labels$StandardXYToolTipGenerator#StandardXYToolTipGenerator(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)": 0.6034395384976053,
        "org.jfree.chart.labels$StandardXYToolTipGenerator#clone()": -0.04748228748077153,
        "org.jfree.chart.labels$StandardXYToolTipGenerator#equals(java.lang.Object)": -0.11489917188014133,
        "org.jfree.chart.labels$StandardXYToolTipGenerator#generateToolTip(org.jfree.data.xy.XYDataset,int,int)": 0.0,
        "org.jfree.chart.labels$StandardXYToolTipGenerator#getTimeSeriesInstance()": -0.02322541398277875,
        "org.jfree.chart.plot$AbstractPieLabelDistributor#AbstractPieLabelDistributor()": -0.13201762829287575,
        "org.jfree.chart.plot$AbstractPieLabelDistributor#addPieLabelRecord(org.jfree.chart.plot.PieLabelRecord)": -0.03314780294366226,
        "org.jfree.chart.plot$AbstractPieLabelDistributor#clear()": -0.03314780294366226,
        "org.jfree.chart.plot$AbstractPieLabelDistributor#getItemCount()": -0.03314780294366226,
        "org.jfree.chart.plot$AbstractPieLabelDistributor#getPieLabelRecord(int)": -0.03314780294366226,
        "org.jfree.chart.plot$CategoryPlot#<clinit>()": -0.30126626791827926,
        "org.jfree.chart.plot$CategoryPlot#CategoryPlot()": -0.08858541777234356,
        "org.jfree.chart.plot$CategoryPlot#CategoryPlot(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)": -0.30126626791827926,
        "org.jfree.chart.plot$CategoryPlot#addAnnotation(org.jfree.chart.annotations.CategoryAnnotation)": -0.03314780294366223,
        "org.jfree.chart.plot$CategoryPlot#addAnnotation(org.jfree.chart.annotations.CategoryAnnotation,boolean)": -0.03314780294366223,
        "org.jfree.chart.plot$CategoryPlot#addDomainMarker(int,org.jfree.chart.plot.CategoryMarker,org.jfree.chart.util.Layer)": -0.04748228748077153,
        "org.jfree.chart.plot$CategoryPlot#addDomainMarker(int,org.jfree.chart.plot.CategoryMarker,org.jfree.chart.util.Layer,boolean)": -0.04748228748077153,
        "org.jfree.chart.plot$CategoryPlot#addDomainMarker(org.jfree.chart.plot.CategoryMarker)": -0.03314780294366223,
        "org.jfree.chart.plot$CategoryPlot#addDomainMarker(org.jfree.chart.plot.CategoryMarker,org.jfree.chart.util.Layer)": -0.04748228748077153,
        "org.jfree.chart.plot$CategoryPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": -0.06835852491775252,
        "org.jfree.chart.plot$CategoryPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)": -0.06835852491775252,
        "org.jfree.chart.plot$CategoryPlot#addRangeMarker(org.jfree.chart.plot.Marker)": -0.03314780294366223,
        "org.jfree.chart.plot$CategoryPlot#addRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": -0.06835852491775252,
        "org.jfree.chart.plot$CategoryPlot#calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.15958962622971884,
        "org.jfree.chart.plot$CategoryPlot#calculateDomainAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)": -0.15958962622971884,
        "org.jfree.chart.plot$CategoryPlot#calculateRangeAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)": -0.1619353930771307,
        "org.jfree.chart.plot$CategoryPlot#checkAxisIndices(java.util.List)": -0.30126626791827915,
        "org.jfree.chart.plot$CategoryPlot#clearAnnotations()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#clearDomainAxes()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#clearDomainMarkers()": -0.03314780294366223,
        "org.jfree.chart.plot$CategoryPlot#clearDomainMarkers(int)": -0.03314780294366223,
        "org.jfree.chart.plot$CategoryPlot#clearRangeAxes()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#clearRangeMarkers()": -0.05335904646307371,
        "org.jfree.chart.plot$CategoryPlot#clearRangeMarkers(int)": -0.03314780294366223,
        "org.jfree.chart.plot$CategoryPlot#clone()": -0.05335904646307371,
        "org.jfree.chart.plot$CategoryPlot#cloneMarkerMap(java.util.Map)": -0.05335904646307371,
        "org.jfree.chart.plot$CategoryPlot#configureDomainAxes()": -0.30126626791827926,
        "org.jfree.chart.plot$CategoryPlot#configureRangeAxes()": -0.30126626791827926,
        "org.jfree.chart.plot$CategoryPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)": -0.30126626791827926,
        "org.jfree.chart.plot$CategoryPlot#datasetsMappedToDomainAxis(int)": -0.15958962622971884,
        "org.jfree.chart.plot$CategoryPlot#datasetsMappedToRangeAxis(int)": -0.2835982877122757,
        "org.jfree.chart.plot$CategoryPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)": -0.1619353930771307,
        "org.jfree.chart.plot$CategoryPlot#drawAnnotations(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)": -0.15958962622971884,
        "org.jfree.chart.plot$CategoryPlot#drawAxes(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)": -0.15958962622971884,
        "org.jfree.chart.plot$CategoryPlot#drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.15240284524136027,
        "org.jfree.chart.plot$CategoryPlot#drawDomainCrosshair(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation,int,java.lang.Comparable,java.lang.Comparable,java.awt.Stroke,java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#drawDomainGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.15958962622971884,
        "org.jfree.chart.plot$CategoryPlot#drawDomainMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.util.Layer)": -0.15958962622971884,
        "org.jfree.chart.plot$CategoryPlot#drawRangeCrosshair(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation,double,org.jfree.chart.axis.ValueAxis,java.awt.Stroke,java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#drawRangeGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)": -0.15958962622971884,
        "org.jfree.chart.plot$CategoryPlot#drawRangeLine(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,java.awt.Stroke,java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#drawRangeMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.util.Layer)": -0.15958962622971884,
        "org.jfree.chart.plot$CategoryPlot#drawZeroRangeBaseline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.15958962622971884,
        "org.jfree.chart.plot$CategoryPlot#equals(java.lang.Object)": -0.14242979300585173,
        "org.jfree.chart.plot$CategoryPlot#getAnchorValue()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getAnnotations()": -0.15958962622971873,
        "org.jfree.chart.plot$CategoryPlot#getAxisOffset()": -0.023225413982778775,
        "org.jfree.chart.plot$CategoryPlot#getCategories()": -0.02322541398277875,
        "org.jfree.chart.plot$CategoryPlot#getCategoriesForAxis(org.jfree.chart.axis.CategoryAxis)": -0.15958962622971884,
        "org.jfree.chart.plot$CategoryPlot#getColumnRenderingOrder()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getCrosshairDatasetIndex()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDataRange(org.jfree.chart.axis.ValueAxis)": -0.2835982877122757,
        "org.jfree.chart.plot$CategoryPlot#getDataset()": -0.040881516174663936,
        "org.jfree.chart.plot$CategoryPlot#getDataset(int)": -0.30126626791827926,
        "org.jfree.chart.plot$CategoryPlot#getDatasetCount()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDatasetRenderingOrder()": -0.15958962622971873,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxis()": -0.058721517117045194,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxis(int)": -0.24616126839271374,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisCount()": -0.18848180216683022,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisEdge()": -0.14496872595721724,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisEdge(int)": -0.1619353930771307,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisForDataset(int)": -0.1619353930771307,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisIndex(org.jfree.chart.axis.CategoryAxis)": -0.02322541398277875,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisLocation()": -0.1619353930771307,
        "org.jfree.chart.plot$CategoryPlot#getDomainAxisLocation(int)": -0.1619353930771307,
        "org.jfree.chart.plot$CategoryPlot#getDomainCrosshairColumnKey()": -0.15958962622971873,
        "org.jfree.chart.plot$CategoryPlot#getDomainCrosshairPaint()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainCrosshairRowKey()": -0.15958962622971873,
        "org.jfree.chart.plot$CategoryPlot#getDomainCrosshairStroke()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDomainGridlinePaint()": -0.023225413982778775,
        "org.jfree.chart.plot$CategoryPlot#getDomainGridlinePosition()": -0.023225413982778775,
        "org.jfree.chart.plot$CategoryPlot#getDomainGridlineStroke()": -0.023225413982778775,
        "org.jfree.chart.plot$CategoryPlot#getDomainMarkers(int,org.jfree.chart.util.Layer)": -0.15958962622971884,
        "org.jfree.chart.plot$CategoryPlot#getDomainMarkers(org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getDrawSharedDomainAxis()": -0.023225413982778775,
        "org.jfree.chart.plot$CategoryPlot#getFixedDomainAxisSpace()": -0.03314780294366226,
        "org.jfree.chart.plot$CategoryPlot#getFixedLegendItems()": -0.040881516174663846,
        "org.jfree.chart.plot$CategoryPlot#getFixedRangeAxisSpace()": -0.03314780294366226,
        "org.jfree.chart.plot$CategoryPlot#getIndexOf(org.jfree.chart.renderer.category.CategoryItemRenderer)": -0.02322541398277875,
        "org.jfree.chart.plot$CategoryPlot#getLegendItems()": -0.1619353930771307,
        "org.jfree.chart.plot$CategoryPlot#getOrientation()": -0.17992904973948343,
        "org.jfree.chart.plot$CategoryPlot#getPlotType()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxis()": -0.21468417828822278,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxis(int)": -0.30126626791827926,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisCount()": -0.18848180216683022,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisEdge()": -0.15958962622971884,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisEdge(int)": -0.1619353930771307,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisForDataset(int)": -0.1619353930771307,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisIndex(org.jfree.chart.axis.ValueAxis)": -0.02322541398277875,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisLocation()": -0.02322541398277875,
        "org.jfree.chart.plot$CategoryPlot#getRangeAxisLocation(int)": -0.1619353930771307,
        "org.jfree.chart.plot$CategoryPlot#getRangeCrosshairPaint()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeCrosshairStroke()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeCrosshairValue()": -0.15958962622971873,
        "org.jfree.chart.plot$CategoryPlot#getRangeGridlinePaint()": -0.15958962622971873,
        "org.jfree.chart.plot$CategoryPlot#getRangeGridlineStroke()": -0.15958962622971873,
        "org.jfree.chart.plot$CategoryPlot#getRangeMarkers(int,org.jfree.chart.util.Layer)": -0.15958962622971884,
        "org.jfree.chart.plot$CategoryPlot#getRangeMarkers(org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeMinorGridlinePaint()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeMinorGridlineStroke()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeZeroBaselinePaint()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRangeZeroBaselineStroke()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getRenderer()": -0.2048644501204305,
        "org.jfree.chart.plot$CategoryPlot#getRenderer(int)": -0.2371738987326198,
        "org.jfree.chart.plot$CategoryPlot#getRendererCount()": -0.18848180216683022,
        "org.jfree.chart.plot$CategoryPlot#getRendererForDataset(org.jfree.data.category.CategoryDataset)": -0.2835982877122757,
        "org.jfree.chart.plot$CategoryPlot#getRowRenderingOrder()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#getWeight()": -0.03314780294366226,
        "org.jfree.chart.plot$CategoryPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#indexOf(org.jfree.data.category.CategoryDataset)": -0.058721517117045194,
        "org.jfree.chart.plot$CategoryPlot#isDomainCrosshairVisible()": -0.15958962622971873,
        "org.jfree.chart.plot$CategoryPlot#isDomainGridlinesVisible()": -0.15958962622971873,
        "org.jfree.chart.plot$CategoryPlot#isDomainPannable()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#isDomainZoomable()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#isRangeCrosshairLockedOnData()": -0.05872151711704521,
        "org.jfree.chart.plot$CategoryPlot#isRangeCrosshairVisible()": -0.16193539307713056,
        "org.jfree.chart.plot$CategoryPlot#isRangeGridlinesVisible()": -0.15958962622971873,
        "org.jfree.chart.plot$CategoryPlot#isRangeMinorGridlinesVisible()": -0.15240284524136039,
        "org.jfree.chart.plot$CategoryPlot#isRangePannable()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#isRangeZeroBaselineVisible()": -0.16193539307713056,
        "org.jfree.chart.plot$CategoryPlot#isRangeZoomable()": 0.0,
        "org.jfree.chart.plot$CategoryPlot#mapDatasetToDomainAxes(int,java.util.List)": -0.30126626791827926,
        "org.jfree.chart.plot$CategoryPlot#mapDatasetToDomainAxis(int,int)": -0.30126626791827926,
        "org.jfree.chart.plot$CategoryPlot#mapDatasetToRangeAxes(int,java.util.List)": -0.30126626791827926,
        "org.jfree.chart.plot$CategoryPlot#mapDatasetToRangeAxis(int,int)": -0.30126626791827926,
        "org.jfree.chart.plot$CategoryPlot#panDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#panRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#readObject(java.io.ObjectInputStream)": -0.06835852491775252,
        "org.jfree.chart.plot$CategoryPlot#removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": -0.02322541398277875,
        "org.jfree.chart.plot$CategoryPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)": -0.02322541398277875,
        "org.jfree.chart.plot$CategoryPlot#removeDomainMarker(org.jfree.chart.plot.Marker)": -0.02322541398277875,
        "org.jfree.chart.plot$CategoryPlot#removeDomainMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": -0.02322541398277875,
        "org.jfree.chart.plot$CategoryPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": -0.02322541398277875,
        "org.jfree.chart.plot$CategoryPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)": -0.02322541398277875,
        "org.jfree.chart.plot$CategoryPlot#removeRangeMarker(org.jfree.chart.plot.Marker)": -0.02322541398277875,
        "org.jfree.chart.plot$CategoryPlot#removeRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": -0.02322541398277875,
        "org.jfree.chart.plot$CategoryPlot#render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.CategoryCrosshairState)": -0.15958962622971884,
        "org.jfree.chart.plot$CategoryPlot#rendererChanged(org.jfree.chart.event.RendererChangeEvent)": -0.1947308226249881,
        "org.jfree.chart.plot$CategoryPlot#setAnchorValue(double)": -0.02322541398277875,
        "org.jfree.chart.plot$CategoryPlot#setAnchorValue(double,boolean)": -0.02322541398277875,
        "org.jfree.chart.plot$CategoryPlot#setAxisOffset(org.jfree.chart.util.RectangleInsets)": -0.1905798092424695,
        "org.jfree.chart.plot$CategoryPlot#setColumnRenderingOrder(org.jfree.chart.util.SortOrder)": -0.07277062049397834,
        "org.jfree.chart.plot$CategoryPlot#setCrosshairDatasetIndex(int)": -0.02322541398277875,
        "org.jfree.chart.plot$CategoryPlot#setCrosshairDatasetIndex(int,boolean)": -0.1619353930771307,
        "org.jfree.chart.plot$CategoryPlot#setDataset(int,org.jfree.data.category.CategoryDataset)": -0.11786391545771334,
        "org.jfree.chart.plot$CategoryPlot#setDataset(org.jfree.data.category.CategoryDataset)": -0.09219207433891567,
        "org.jfree.chart.plot$CategoryPlot#setDatasetRenderingOrder(org.jfree.chart.plot.DatasetRenderingOrder)": -0.02322541398277875,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxes(org.jfree.chart.axis.CategoryAxis[])": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxis(int,org.jfree.chart.axis.CategoryAxis)": -0.08485741089496995,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxis(int,org.jfree.chart.axis.CategoryAxis,boolean)": -0.08485741089496995,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxis(org.jfree.chart.axis.CategoryAxis)": -0.06835852491775252,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation)": -0.02322541398277875,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)": -0.30126626791827926,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxisLocation(org.jfree.chart.axis.AxisLocation)": -0.02322541398277875,
        "org.jfree.chart.plot$CategoryPlot#setDomainAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)": -0.30126626791827926,
        "org.jfree.chart.plot$CategoryPlot#setDomainCrosshairColumnKey(java.lang.Comparable)": -0.02322541398277875,
        "org.jfree.chart.plot$CategoryPlot#setDomainCrosshairColumnKey(java.lang.Comparable,boolean)": -0.1619353930771307,
        "org.jfree.chart.plot$CategoryPlot#setDomainCrosshairPaint(java.awt.Paint)": -0.02322541398277875,
        "org.jfree.chart.plot$CategoryPlot#setDomainCrosshairRowKey(java.lang.Comparable)": -0.02322541398277875,
        "org.jfree.chart.plot$CategoryPlot#setDomainCrosshairRowKey(java.lang.Comparable,boolean)": -0.1619353930771307,
        "org.jfree.chart.plot$CategoryPlot#setDomainCrosshairStroke(java.awt.Stroke)": -0.023225413982778775,
        "org.jfree.chart.plot$CategoryPlot#setDomainCrosshairVisible(boolean)": -0.02322541398277875,
        "org.jfree.chart.plot$CategoryPlot#setDomainGridlinePaint(java.awt.Paint)": -0.1905798092424695,
        "org.jfree.chart.plot$CategoryPlot#setDomainGridlinePosition(org.jfree.chart.axis.CategoryAnchor)": -0.02322541398277875,
        "org.jfree.chart.plot$CategoryPlot#setDomainGridlineStroke(java.awt.Stroke)": -0.02322541398277875,
        "org.jfree.chart.plot$CategoryPlot#setDomainGridlinesVisible(boolean)": -0.07277062049397834,
        "org.jfree.chart.plot$CategoryPlot#setDrawSharedDomainAxis(boolean)": -0.02322541398277875,
        "org.jfree.chart.plot$CategoryPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace)": -0.03314780294366223,
        "org.jfree.chart.plot$CategoryPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)": -0.040881516174663936,
        "org.jfree.chart.plot$CategoryPlot#setFixedLegendItems(org.jfree.chart.LegendItemCollection)": -0.03314780294366223,
        "org.jfree.chart.plot$CategoryPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace)": -0.03314780294366223,
        "org.jfree.chart.plot$CategoryPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)": -0.040881516174663936,
        "org.jfree.chart.plot$CategoryPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)": -0.22044067048052746,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxes(org.jfree.chart.axis.ValueAxis[])": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis)": -0.08858541777234356,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis,boolean)": -0.08858541777234356,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxis(org.jfree.chart.axis.ValueAxis)": -0.07277062049397834,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation)": -0.02322541398277875,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)": -0.30126626791827926,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxisLocation(org.jfree.chart.axis.AxisLocation)": -0.02322541398277875,
        "org.jfree.chart.plot$CategoryPlot#setRangeAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)": -0.30126626791827926,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairLockedOnData(boolean)": -0.02322541398277875,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairPaint(java.awt.Paint)": -0.03314780294366223,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairStroke(java.awt.Stroke)": -0.02322541398277875,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairValue(double)": -0.02322541398277875,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairValue(double,boolean)": -0.1619353930771307,
        "org.jfree.chart.plot$CategoryPlot#setRangeCrosshairVisible(boolean)": -0.02322541398277875,
        "org.jfree.chart.plot$CategoryPlot#setRangeGridlinePaint(java.awt.Paint)": -0.1905798092424695,
        "org.jfree.chart.plot$CategoryPlot#setRangeGridlineStroke(java.awt.Stroke)": -0.02322541398277875,
        "org.jfree.chart.plot$CategoryPlot#setRangeGridlinesVisible(boolean)": -0.02322541398277875,
        "org.jfree.chart.plot$CategoryPlot#setRangeMinorGridlinePaint(java.awt.Paint)": -0.02322541398277875,
        "org.jfree.chart.plot$CategoryPlot#setRangeMinorGridlineStroke(java.awt.Stroke)": -0.02322541398277875,
        "org.jfree.chart.plot$CategoryPlot#setRangeMinorGridlinesVisible(boolean)": -0.02322541398277875,
        "org.jfree.chart.plot$CategoryPlot#setRangePannable(boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRangeZeroBaselinePaint(java.awt.Paint)": -0.1905798092424695,
        "org.jfree.chart.plot$CategoryPlot#setRangeZeroBaselineStroke(java.awt.Stroke)": -0.02322541398277875,
        "org.jfree.chart.plot$CategoryPlot#setRangeZeroBaselineVisible(boolean)": -0.02322541398277875,
        "org.jfree.chart.plot$CategoryPlot#setRenderer(int,org.jfree.chart.renderer.category.CategoryItemRenderer)": -0.04748228748077153,
        "org.jfree.chart.plot$CategoryPlot#setRenderer(int,org.jfree.chart.renderer.category.CategoryItemRenderer,boolean)": -0.058721517117045194,
        "org.jfree.chart.plot$CategoryPlot#setRenderer(org.jfree.chart.renderer.category.CategoryItemRenderer)": -0.040881516174663936,
        "org.jfree.chart.plot$CategoryPlot#setRenderer(org.jfree.chart.renderer.category.CategoryItemRenderer,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRenderers(org.jfree.chart.renderer.category.CategoryItemRenderer[])": 0.0,
        "org.jfree.chart.plot$CategoryPlot#setRowRenderingOrder(org.jfree.chart.util.SortOrder)": -0.05335904646307371,
        "org.jfree.chart.plot$CategoryPlot#setWeight(int)": -0.08099252901602469,
        "org.jfree.chart.plot$CategoryPlot#writeObject(java.io.ObjectOutputStream)": -0.06835852491775252,
        "org.jfree.chart.plot$CategoryPlot#zoom(double)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#zoomDomainAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$CategoryPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)": 0.0,
        "org.jfree.chart.plot$CombinedDomainXYPlot#CombinedDomainXYPlot()": -0.02322541398277875,
        "org.jfree.chart.plot$CombinedDomainXYPlot#CombinedDomainXYPlot(org.jfree.chart.axis.ValueAxis)": -0.058721517117045194,
        "org.jfree.chart.plot$CombinedDomainXYPlot#add(org.jfree.chart.plot.XYPlot)": -0.02322541398277875,
        "org.jfree.chart.plot$CombinedDomainXYPlot#add(org.jfree.chart.plot.XYPlot,int)": -0.05335904646307371,
        "org.jfree.chart.plot$CombinedDomainXYPlot#calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.02322541398277875,
        "org.jfree.chart.plot$CombinedDomainXYPlot#clone()": -0.02322541398277875,
        "org.jfree.chart.plot$CombinedDomainXYPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)": -0.02322541398277875,
        "org.jfree.chart.plot$CombinedDomainXYPlot#equals(java.lang.Object)": -0.05335904646307371,
        "org.jfree.chart.plot$CombinedDomainXYPlot#findSubplot(org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$CombinedDomainXYPlot#getDataRange(org.jfree.chart.axis.ValueAxis)": -0.05335904646307371,
        "org.jfree.chart.plot$CombinedDomainXYPlot#getGap()": 0.0,
        "org.jfree.chart.plot$CombinedDomainXYPlot#getLegendItems()": -0.02322541398277875,
        "org.jfree.chart.plot$CombinedDomainXYPlot#getPlotType()": 0.0,
        "org.jfree.chart.plot$CombinedDomainXYPlot#getSubplots()": -0.03314780294366226,
        "org.jfree.chart.plot$CombinedDomainXYPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$CombinedDomainXYPlot#plotChanged(org.jfree.chart.event.PlotChangeEvent)": -0.02322541398277875,
        "org.jfree.chart.plot$CombinedDomainXYPlot#remove(org.jfree.chart.plot.XYPlot)": -0.02322541398277875,
        "org.jfree.chart.plot$CombinedDomainXYPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace)": 0.0,
        "org.jfree.chart.plot$CombinedDomainXYPlot#setFixedRangeAxisSpaceForSubplots(org.jfree.chart.axis.AxisSpace)": -0.02322541398277875,
        "org.jfree.chart.plot$CombinedDomainXYPlot#setGap(double)": -0.04748228748077153,
        "org.jfree.chart.plot$CombinedDomainXYPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)": -0.04748228748077153,
        "org.jfree.chart.plot$CombinedDomainXYPlot#setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)": 0.0,
        "org.jfree.chart.plot$CombinedDomainXYPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$CombinedDomainXYPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$CombinedDomainXYPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)": 0.0,
        "org.jfree.chart.plot$CombinedRangeXYPlot#CombinedRangeXYPlot()": -0.02322541398277875,
        "org.jfree.chart.plot$CombinedRangeXYPlot#CombinedRangeXYPlot(org.jfree.chart.axis.ValueAxis)": -0.05335904646307371,
        "org.jfree.chart.plot$CombinedRangeXYPlot#add(org.jfree.chart.plot.XYPlot)": -0.02322541398277875,
        "org.jfree.chart.plot$CombinedRangeXYPlot#add(org.jfree.chart.plot.XYPlot,int)": -0.05335904646307371,
        "org.jfree.chart.plot$CombinedRangeXYPlot#calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.02322541398277875,
        "org.jfree.chart.plot$CombinedRangeXYPlot#clone()": -0.02322541398277875,
        "org.jfree.chart.plot$CombinedRangeXYPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)": -0.02322541398277875,
        "org.jfree.chart.plot$CombinedRangeXYPlot#equals(java.lang.Object)": -0.05335904646307371,
        "org.jfree.chart.plot$CombinedRangeXYPlot#findSubplot(org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$CombinedRangeXYPlot#getDataRange(org.jfree.chart.axis.ValueAxis)": -0.05335904646307371,
        "org.jfree.chart.plot$CombinedRangeXYPlot#getGap()": 0.0,
        "org.jfree.chart.plot$CombinedRangeXYPlot#getLegendItems()": -0.02322541398277875,
        "org.jfree.chart.plot$CombinedRangeXYPlot#getPlotType()": 0.0,
        "org.jfree.chart.plot$CombinedRangeXYPlot#getSubplots()": -0.03314780294366226,
        "org.jfree.chart.plot$CombinedRangeXYPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$CombinedRangeXYPlot#plotChanged(org.jfree.chart.event.PlotChangeEvent)": -0.02322541398277875,
        "org.jfree.chart.plot$CombinedRangeXYPlot#remove(org.jfree.chart.plot.XYPlot)": -0.02322541398277875,
        "org.jfree.chart.plot$CombinedRangeXYPlot#setFixedDomainAxisSpaceForSubplots(org.jfree.chart.axis.AxisSpace)": -0.02322541398277875,
        "org.jfree.chart.plot$CombinedRangeXYPlot#setGap(double)": -0.047482287480771435,
        "org.jfree.chart.plot$CombinedRangeXYPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)": -0.04748228748077153,
        "org.jfree.chart.plot$CombinedRangeXYPlot#setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)": 0.0,
        "org.jfree.chart.plot$CombinedRangeXYPlot#zoomDomainAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$CombinedRangeXYPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$CombinedRangeXYPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)": 0.0,
        "org.jfree.chart.plot$CrosshairState#CrosshairState()": -0.19882458189082772,
        "org.jfree.chart.plot$CrosshairState#CrosshairState(boolean)": -0.19882458189082763,
        "org.jfree.chart.plot$CrosshairState#getAnchor()": -0.05872151711704521,
        "org.jfree.chart.plot$CrosshairState#getAnchorX()": 0.0,
        "org.jfree.chart.plot$CrosshairState#getAnchorY()": 0.0,
        "org.jfree.chart.plot$CrosshairState#getCrosshairDistance()": 0.0,
        "org.jfree.chart.plot$CrosshairState#getCrosshairX()": -0.10563216592227098,
        "org.jfree.chart.plot$CrosshairState#getCrosshairY()": -0.19882458189082763,
        "org.jfree.chart.plot$CrosshairState#getDatasetIndex()": -0.15958962622971873,
        "org.jfree.chart.plot$CrosshairState#getDomainAxisIndex()": -0.10563216592227098,
        "org.jfree.chart.plot$CrosshairState#getRangeAxisIndex()": -0.10563216592227098,
        "org.jfree.chart.plot$CrosshairState#setAnchor(java.awt.geom.Point2D)": -0.19882458189082763,
        "org.jfree.chart.plot$CrosshairState#setAnchorX(double)": -0.19882458189082763,
        "org.jfree.chart.plot$CrosshairState#setAnchorY(double)": -0.19882458189082763,
        "org.jfree.chart.plot$CrosshairState#setCrosshairDistance(double)": -0.19882458189082763,
        "org.jfree.chart.plot$CrosshairState#setCrosshairX(double)": -0.10563216592227098,
        "org.jfree.chart.plot$CrosshairState#setCrosshairY(double)": -0.19882458189082763,
        "org.jfree.chart.plot$CrosshairState#setDatasetIndex(int)": 0.0,
        "org.jfree.chart.plot$CrosshairState#updateCrosshairPoint(double,double,double,double,org.jfree.chart.plot.PlotOrientation)": 0.0,
        "org.jfree.chart.plot$CrosshairState#updateCrosshairPoint(double,double,int,int,double,double,org.jfree.chart.plot.PlotOrientation)": 0.0,
        "org.jfree.chart.plot$CrosshairState#updateCrosshairX(double)": 0.0,
        "org.jfree.chart.plot$CrosshairState#updateCrosshairX(double,int)": 0.0,
        "org.jfree.chart.plot$CrosshairState#updateCrosshairY(double)": 0.0,
        "org.jfree.chart.plot$CrosshairState#updateCrosshairY(double,int)": 0.0,
        "org.jfree.chart.plot$DatasetRenderingOrder#<clinit>()": 1.3970102586901234,
        "org.jfree.chart.plot$DatasetRenderingOrder#DatasetRenderingOrder(java.lang.String)": 0.05122382106321843,
        "org.jfree.chart.plot$DatasetRenderingOrder#equals(java.lang.Object)": -0.09909041302239917,
        "org.jfree.chart.plot$DatasetRenderingOrder#hashCode()": 0.0,
        "org.jfree.chart.plot$DatasetRenderingOrder#readResolve()": -0.09909041302239917,
        "org.jfree.chart.plot$DatasetRenderingOrder#toString()": -0.09909041302239907,
        "org.jfree.chart.plot$DefaultDrawingSupplier#<clinit>()": 1.3027778843560798,
        "org.jfree.chart.plot$DefaultDrawingSupplier#DefaultDrawingSupplier()": 1.3027778843560798,
        "org.jfree.chart.plot$DefaultDrawingSupplier#DefaultDrawingSupplier(java.awt.Paint[],java.awt.Paint[],java.awt.Paint[],java.awt.Stroke[],java.awt.Stroke[],java.awt.Shape[])": 1.3027778843560798,
        "org.jfree.chart.plot$DefaultDrawingSupplier#DefaultDrawingSupplier(java.awt.Paint[],java.awt.Paint[],java.awt.Stroke[],java.awt.Stroke[],java.awt.Shape[])": -0.040881516174663936,
        "org.jfree.chart.plot$DefaultDrawingSupplier#clone()": -0.2684477268873375,
        "org.jfree.chart.plot$DefaultDrawingSupplier#createStandardSeriesShapes()": 1.3027778843560798,
        "org.jfree.chart.plot$DefaultDrawingSupplier#equalShapes(java.awt.Shape[],java.awt.Shape[])": -0.25145899357977725,
        "org.jfree.chart.plot$DefaultDrawingSupplier#equals(java.lang.Object)": -0.25320997272164997,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextFillPaint()": -0.023225413982778775,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextOutlinePaint()": -0.03314780294366226,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextOutlineStroke()": -0.023225413982778775,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextPaint()": -0.2335200924796732,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextShape()": -0.11489917188014132,
        "org.jfree.chart.plot$DefaultDrawingSupplier#getNextStroke()": -0.16193539307713056,
        "org.jfree.chart.plot$DefaultDrawingSupplier#intArray(double,double,double)": -0.0430085532708252,
        "org.jfree.chart.plot$DefaultDrawingSupplier#intArray(double,double,double,double)": -0.0430085532708252,
        "org.jfree.chart.plot$DefaultDrawingSupplier#readObject(java.io.ObjectInputStream)": -0.14747628571562693,
        "org.jfree.chart.plot$DefaultDrawingSupplier#writeObject(java.io.ObjectOutputStream)": -0.14747628571562693,
        "org.jfree.chart.plot$IntervalMarker#IntervalMarker(double,double)": -0.06369428511586006,
        "org.jfree.chart.plot$IntervalMarker#IntervalMarker(double,double,java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$IntervalMarker#IntervalMarker(double,double,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)": -0.06369428511586006,
        "org.jfree.chart.plot$IntervalMarker#clone()": -0.02322541398277875,
        "org.jfree.chart.plot$IntervalMarker#equals(java.lang.Object)": -0.06369428511586006,
        "org.jfree.chart.plot$IntervalMarker#getEndValue()": -0.040881516174663846,
        "org.jfree.chart.plot$IntervalMarker#getGradientPaintTransformer()": 0.0,
        "org.jfree.chart.plot$IntervalMarker#getStartValue()": -0.040881516174663846,
        "org.jfree.chart.plot$IntervalMarker#setEndValue(double)": -0.02322541398277875,
        "org.jfree.chart.plot$IntervalMarker#setGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)": -0.02322541398277875,
        "org.jfree.chart.plot$IntervalMarker#setStartValue(double)": -0.02322541398277875,
        "org.jfree.chart.plot$Marker#Marker()": -0.14747628571562693,
        "org.jfree.chart.plot$Marker#Marker(java.awt.Paint)": -0.14747628571562693,
        "org.jfree.chart.plot$Marker#Marker(java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)": -0.1777481410776118,
        "org.jfree.chart.plot$Marker#addChangeListener(org.jfree.chart.event.MarkerChangeListener)": -0.1424297930058518,
        "org.jfree.chart.plot$Marker#clone()": -0.040881516174663846,
        "org.jfree.chart.plot$Marker#equals(java.lang.Object)": -0.10240183266412545,
        "org.jfree.chart.plot$Marker#getAlpha()": -0.047482287480771435,
        "org.jfree.chart.plot$Marker#getLabel()": -0.040881516174663846,
        "org.jfree.chart.plot$Marker#getLabelAnchor()": -0.040881516174663846,
        "org.jfree.chart.plot$Marker#getLabelFont()": -0.023225413982778775,
        "org.jfree.chart.plot$Marker#getLabelOffset()": -0.023225413982778775,
        "org.jfree.chart.plot$Marker#getLabelOffsetType()": -0.023225413982778775,
        "org.jfree.chart.plot$Marker#getLabelPaint()": -0.023225413982778775,
        "org.jfree.chart.plot$Marker#getLabelTextAnchor()": -0.023225413982778775,
        "org.jfree.chart.plot$Marker#getListeners(java.lang.Class)": -0.05872151711704521,
        "org.jfree.chart.plot$Marker#getOutlinePaint()": -0.03314780294366226,
        "org.jfree.chart.plot$Marker#getOutlineStroke()": -0.03314780294366226,
        "org.jfree.chart.plot$Marker#getPaint()": -0.047482287480771435,
        "org.jfree.chart.plot$Marker#getStroke()": -0.047482287480771435,
        "org.jfree.chart.plot$Marker#notifyListeners(org.jfree.chart.event.MarkerChangeEvent)": -0.15240284524136027,
        "org.jfree.chart.plot$Marker#readObject(java.io.ObjectInputStream)": -0.058721517117045194,
        "org.jfree.chart.plot$Marker#removeChangeListener(org.jfree.chart.event.MarkerChangeListener)": -0.05872151711704521,
        "org.jfree.chart.plot$Marker#setAlpha(float)": -0.03314780294366223,
        "org.jfree.chart.plot$Marker#setLabel(java.lang.String)": -0.03314780294366223,
        "org.jfree.chart.plot$Marker#setLabelAnchor(org.jfree.chart.util.RectangleAnchor)": -0.03314780294366223,
        "org.jfree.chart.plot$Marker#setLabelFont(java.awt.Font)": -0.03314780294366223,
        "org.jfree.chart.plot$Marker#setLabelOffset(org.jfree.chart.util.RectangleInsets)": -0.03314780294366223,
        "org.jfree.chart.plot$Marker#setLabelOffsetType(org.jfree.chart.util.LengthAdjustmentType)": -0.10878808397177664,
        "org.jfree.chart.plot$Marker#setLabelPaint(java.awt.Paint)": -0.03314780294366223,
        "org.jfree.chart.plot$Marker#setLabelTextAnchor(org.jfree.chart.text.TextAnchor)": -0.03314780294366223,
        "org.jfree.chart.plot$Marker#setOutlinePaint(java.awt.Paint)": -0.03314780294366223,
        "org.jfree.chart.plot$Marker#setOutlineStroke(java.awt.Stroke)": -0.03314780294366223,
        "org.jfree.chart.plot$Marker#setPaint(java.awt.Paint)": -0.05335904646307371,
        "org.jfree.chart.plot$Marker#setStroke(java.awt.Stroke)": -0.03314780294366223,
        "org.jfree.chart.plot$Marker#writeObject(java.io.ObjectOutputStream)": -0.058721517117045194,
        "org.jfree.chart.plot$MultiplePiePlot#MultiplePiePlot()": -0.040881516174663936,
        "org.jfree.chart.plot$MultiplePiePlot#MultiplePiePlot(org.jfree.data.category.CategoryDataset)": -0.05335904646307371,
        "org.jfree.chart.plot$MultiplePiePlot#clone()": -0.02322541398277875,
        "org.jfree.chart.plot$MultiplePiePlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#equals(java.lang.Object)": -0.04748228748077153,
        "org.jfree.chart.plot$MultiplePiePlot#getAggregatedItemsKey()": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#getAggregatedItemsPaint()": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#getDataExtractOrder()": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#getDataset()": -0.03314780294366226,
        "org.jfree.chart.plot$MultiplePiePlot#getLegendItemShape()": -0.023225413982778775,
        "org.jfree.chart.plot$MultiplePiePlot#getLegendItems()": -0.02322541398277875,
        "org.jfree.chart.plot$MultiplePiePlot#getLimit()": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#getPieChart()": -0.023225413982778775,
        "org.jfree.chart.plot$MultiplePiePlot#getPlotType()": 0.0,
        "org.jfree.chart.plot$MultiplePiePlot#prefetchSectionPaints()": -0.02322541398277875,
        "org.jfree.chart.plot$MultiplePiePlot#readObject(java.io.ObjectInputStream)": -0.02322541398277875,
        "org.jfree.chart.plot$MultiplePiePlot#setAggregatedItemsKey(java.lang.Comparable)": -0.02322541398277875,
        "org.jfree.chart.plot$MultiplePiePlot#setAggregatedItemsPaint(java.awt.Paint)": -0.03314780294366223,
        "org.jfree.chart.plot$MultiplePiePlot#setDataExtractOrder(org.jfree.chart.util.TableOrder)": -0.02322541398277875,
        "org.jfree.chart.plot$MultiplePiePlot#setDataset(org.jfree.data.category.CategoryDataset)": -0.05335904646307371,
        "org.jfree.chart.plot$MultiplePiePlot#setLegendItemShape(java.awt.Shape)": -0.03314780294366223,
        "org.jfree.chart.plot$MultiplePiePlot#setLimit(double)": -0.02322541398277875,
        "org.jfree.chart.plot$MultiplePiePlot#setPieChart(org.jfree.chart.JFreeChart)": -0.02322541398277875,
        "org.jfree.chart.plot$MultiplePiePlot#writeObject(java.io.ObjectOutputStream)": -0.02322541398277875,
        "org.jfree.chart.plot$PieLabelDistributor#PieLabelDistributor(int)": 0.093253826317099,
        "org.jfree.chart.plot$PieLabelDistributor#adjustDownwards(double,double)": -0.02322541398277875,
        "org.jfree.chart.plot$PieLabelDistributor#adjustInwards()": 0.0,
        "org.jfree.chart.plot$PieLabelDistributor#adjustUpwards(double,double)": -0.02322541398277875,
        "org.jfree.chart.plot$PieLabelDistributor#distributeLabels(double,double)": -0.03314780294366223,
        "org.jfree.chart.plot$PieLabelDistributor#isOverlap()": -0.03314780294366223,
        "org.jfree.chart.plot$PieLabelDistributor#sort()": -0.03314780294366226,
        "org.jfree.chart.plot$PieLabelDistributor#spreadEvenly(double,double)": -0.02322541398277875,
        "org.jfree.chart.plot$PieLabelDistributor#toString()": 0.0,
        "org.jfree.chart.plot$PieLabelLinkStyle#<clinit>()": 1.5108947514180828,
        "org.jfree.chart.plot$PieLabelLinkStyle#PieLabelLinkStyle(java.lang.String)": 0.16510831379117807,
        "org.jfree.chart.plot$PieLabelLinkStyle#equals(java.lang.Object)": -0.12644166506603402,
        "org.jfree.chart.plot$PieLabelLinkStyle#hashCode()": 0.0,
        "org.jfree.chart.plot$PieLabelLinkStyle#readResolve()": -0.06369428511586006,
        "org.jfree.chart.plot$PieLabelLinkStyle#toString()": -0.08099252901602472,
        "org.jfree.chart.plot$PiePlot#<clinit>()": 0.093253826317099,
        "org.jfree.chart.plot$PiePlot#PiePlot()": -0.08099252901602469,
        "org.jfree.chart.plot$PiePlot#PiePlot(org.jfree.data.general.PieDataset)": 0.093253826317099,
        "org.jfree.chart.plot$PiePlot#clearSectionOutlinePaints(boolean)": 0.0,
        "org.jfree.chart.plot$PiePlot#clearSectionOutlineStrokes(boolean)": 0.0,
        "org.jfree.chart.plot$PiePlot#clearSectionPaints(boolean)": 0.14807161096421226,
        "org.jfree.chart.plot$PiePlot#clone()": -0.06835852491775252,
        "org.jfree.chart.plot$PiePlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)": -0.02322541398277875,
        "org.jfree.chart.plot$PiePlot#drawItem(java.awt.Graphics2D,int,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState,int)": -0.02322541398277875,
        "org.jfree.chart.plot$PiePlot#drawLabels(java.awt.Graphics2D,java.util.List,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState)": -0.03314780294366223,
        "org.jfree.chart.plot$PiePlot#drawLeftLabel(java.awt.Graphics2D,org.jfree.chart.plot.PiePlotState,org.jfree.chart.plot.PieLabelRecord)": -0.03314780294366223,
        "org.jfree.chart.plot$PiePlot#drawLeftLabels(org.jfree.data.KeyedValues,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,float,org.jfree.chart.plot.PiePlotState)": -0.03314780294366223,
        "org.jfree.chart.plot$PiePlot#drawPie(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)": -0.02322541398277875,
        "org.jfree.chart.plot$PiePlot#drawRightLabel(java.awt.Graphics2D,org.jfree.chart.plot.PiePlotState,org.jfree.chart.plot.PieLabelRecord)": -0.03314780294366223,
        "org.jfree.chart.plot$PiePlot#drawRightLabels(org.jfree.data.KeyedValues,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,float,org.jfree.chart.plot.PiePlotState)": -0.03314780294366223,
        "org.jfree.chart.plot$PiePlot#drawSimpleLabels(java.awt.Graphics2D,java.util.List,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState)": 0.0,
        "org.jfree.chart.plot$PiePlot#equals(java.lang.Object)": -0.11489917188014133,
        "org.jfree.chart.plot$PiePlot#getArcBounds(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,double,double,double)": -0.023225413982778775,
        "org.jfree.chart.plot$PiePlot#getAutoPopulateSectionOutlinePaint()": -0.08043017690390815,
        "org.jfree.chart.plot$PiePlot#getAutoPopulateSectionOutlineStroke()": -0.08043017690390815,
        "org.jfree.chart.plot$PiePlot#getAutoPopulateSectionPaint()": -0.08043017690390815,
        "org.jfree.chart.plot$PiePlot#getBaseSectionOutlinePaint()": 0.0,
        "org.jfree.chart.plot$PiePlot#getBaseSectionOutlineStroke()": 0.0,
        "org.jfree.chart.plot$PiePlot#getBaseSectionPaint()": -0.023225413982778775,
        "org.jfree.chart.plot$PiePlot#getDataset()": -0.05872151711704521,
        "org.jfree.chart.plot$PiePlot#getDirection()": -0.023225413982778775,
        "org.jfree.chart.plot$PiePlot#getExplodePercent(java.lang.Comparable)": -0.03314780294366226,
        "org.jfree.chart.plot$PiePlot#getIgnoreNullValues()": 0.0,
        "org.jfree.chart.plot$PiePlot#getIgnoreZeroValues()": 0.0,
        "org.jfree.chart.plot$PiePlot#getInteriorGap()": -0.040881516174663846,
        "org.jfree.chart.plot$PiePlot#getLabelBackgroundPaint()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLabelDistributor()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLabelFont()": -0.03314780294366226,
        "org.jfree.chart.plot$PiePlot#getLabelGap()": -0.03314780294366226,
        "org.jfree.chart.plot$PiePlot#getLabelGenerator()": -0.03314780294366226,
        "org.jfree.chart.plot$PiePlot#getLabelLinkDepth()": -0.03314780294366226,
        "org.jfree.chart.plot$PiePlot#getLabelLinkMargin()": -0.03314780294366226,
        "org.jfree.chart.plot$PiePlot#getLabelLinkPaint()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLabelLinkStroke()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLabelLinkStyle()": -0.03314780294366226,
        "org.jfree.chart.plot$PiePlot#getLabelLinksVisible()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLabelOutlinePaint()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLabelOutlineStroke()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLabelPadding()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLabelPaint()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLabelShadowPaint()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLegendItemShape()": -0.040881516174663846,
        "org.jfree.chart.plot$PiePlot#getLegendItems()": -0.04748228748077153,
        "org.jfree.chart.plot$PiePlot#getLegendLabelGenerator()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLegendLabelToolTipGenerator()": 0.0,
        "org.jfree.chart.plot$PiePlot#getLegendLabelURLGenerator()": -0.023225413982778775,
        "org.jfree.chart.plot$PiePlot#getMaximumExplodePercent()": -0.040881516174663936,
        "org.jfree.chart.plot$PiePlot#getMaximumLabelWidth()": -0.03314780294366226,
        "org.jfree.chart.plot$PiePlot#getMinimumArcAngleToDraw()": -0.03314780294366226,
        "org.jfree.chart.plot$PiePlot#getPieIndex()": 0.0,
        "org.jfree.chart.plot$PiePlot#getPlotType()": 0.0,
        "org.jfree.chart.plot$PiePlot#getSectionKey(int)": -0.03314780294366223,
        "org.jfree.chart.plot$PiePlot#getSectionOutlinePaint(java.lang.Comparable)": 0.0,
        "org.jfree.chart.plot$PiePlot#getSectionOutlineStroke(java.lang.Comparable)": 0.0,
        "org.jfree.chart.plot$PiePlot#getSectionOutlinesVisible()": 0.0,
        "org.jfree.chart.plot$PiePlot#getSectionPaint(java.lang.Comparable)": -0.02322541398277875,
        "org.jfree.chart.plot$PiePlot#getShadowPaint()": 0.0,
        "org.jfree.chart.plot$PiePlot#getShadowXOffset()": 0.0,
        "org.jfree.chart.plot$PiePlot#getShadowYOffset()": 0.0,
        "org.jfree.chart.plot$PiePlot#getSimpleLabelOffset()": 0.0,
        "org.jfree.chart.plot$PiePlot#getSimpleLabels()": -0.023225413982778775,
        "org.jfree.chart.plot$PiePlot#getStartAngle()": -0.040881516174663846,
        "org.jfree.chart.plot$PiePlot#getToolTipGenerator()": 0.0,
        "org.jfree.chart.plot$PiePlot#getURLGenerator()": -0.023225413982778775,
        "org.jfree.chart.plot$PiePlot#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlot,java.lang.Integer,org.jfree.chart.plot.PlotRenderingInfo)": -0.040881516174663936,
        "org.jfree.chart.plot$PiePlot#isCircular()": -0.040881516174663846,
        "org.jfree.chart.plot$PiePlot#lookupSectionOutlinePaint(java.lang.Comparable)": -0.040881516174663936,
        "org.jfree.chart.plot$PiePlot#lookupSectionOutlinePaint(java.lang.Comparable,boolean)": -0.040881516174663936,
        "org.jfree.chart.plot$PiePlot#lookupSectionOutlineStroke(java.lang.Comparable)": -0.040881516174663936,
        "org.jfree.chart.plot$PiePlot#lookupSectionOutlineStroke(java.lang.Comparable,boolean)": -0.040881516174663936,
        "org.jfree.chart.plot$PiePlot#lookupSectionPaint(java.lang.Comparable)": -0.040881516174663936,
        "org.jfree.chart.plot$PiePlot#lookupSectionPaint(java.lang.Comparable,boolean)": -0.040881516174663936,
        "org.jfree.chart.plot$PiePlot#readObject(java.io.ObjectInputStream)": -0.058721517117045194,
        "org.jfree.chart.plot$PiePlot#setAutoPopulateSectionOutlinePaint(boolean)": -0.02322541398277875,
        "org.jfree.chart.plot$PiePlot#setAutoPopulateSectionOutlineStroke(boolean)": -0.02322541398277875,
        "org.jfree.chart.plot$PiePlot#setAutoPopulateSectionPaint(boolean)": -0.02322541398277875,
        "org.jfree.chart.plot$PiePlot#setBaseSectionOutlinePaint(java.awt.Paint)": -0.02322541398277875,
        "org.jfree.chart.plot$PiePlot#setBaseSectionOutlineStroke(java.awt.Stroke)": -0.02322541398277875,
        "org.jfree.chart.plot$PiePlot#setBaseSectionPaint(java.awt.Paint)": -0.03314780294366223,
        "org.jfree.chart.plot$PiePlot#setCircular(boolean)": -0.02322541398277875,
        "org.jfree.chart.plot$PiePlot#setCircular(boolean,boolean)": -0.06369428511586006,
        "org.jfree.chart.plot$PiePlot#setDataset(org.jfree.data.general.PieDataset)": -0.03314780294366223,
        "org.jfree.chart.plot$PiePlot#setDirection(org.jfree.chart.util.Rotation)": -0.02322541398277875,
        "org.jfree.chart.plot$PiePlot#setExplodePercent(java.lang.Comparable,double)": -0.02322541398277875,
        "org.jfree.chart.plot$PiePlot#setIgnoreNullValues(boolean)": -0.06369428511586006,
        "org.jfree.chart.plot$PiePlot#setIgnoreZeroValues(boolean)": -0.03314780294366223,
        "org.jfree.chart.plot$PiePlot#setInteriorGap(double)": -0.02322541398277875,
        "org.jfree.chart.plot$PiePlot#setLabelBackgroundPaint(java.awt.Paint)": -0.02322541398277875,
        "org.jfree.chart.plot$PiePlot#setLabelDistributor(org.jfree.chart.plot.AbstractPieLabelDistributor)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLabelFont(java.awt.Font)": 0.14484127770606686,
        "org.jfree.chart.plot$PiePlot#setLabelGap(double)": -0.02322541398277875,
        "org.jfree.chart.plot$PiePlot#setLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator)": 0.15478326846251309,
        "org.jfree.chart.plot$PiePlot#setLabelLinkMargin(double)": -0.02322541398277875,
        "org.jfree.chart.plot$PiePlot#setLabelLinkPaint(java.awt.Paint)": 0.14484127770606686,
        "org.jfree.chart.plot$PiePlot#setLabelLinkStroke(java.awt.Stroke)": -0.02322541398277875,
        "org.jfree.chart.plot$PiePlot#setLabelLinkStyle(org.jfree.chart.plot.PieLabelLinkStyle)": 0.14484127770606686,
        "org.jfree.chart.plot$PiePlot#setLabelLinksVisible(boolean)": -0.02322541398277875,
        "org.jfree.chart.plot$PiePlot#setLabelOutlinePaint(java.awt.Paint)": -0.02322541398277875,
        "org.jfree.chart.plot$PiePlot#setLabelOutlineStroke(java.awt.Stroke)": -0.02322541398277875,
        "org.jfree.chart.plot$PiePlot#setLabelPadding(org.jfree.chart.util.RectangleInsets)": 0.0,
        "org.jfree.chart.plot$PiePlot#setLabelPaint(java.awt.Paint)": -0.02322541398277875,
        "org.jfree.chart.plot$PiePlot#setLabelShadowPaint(java.awt.Paint)": -0.02322541398277875,
        "org.jfree.chart.plot$PiePlot#setLegendItemShape(java.awt.Shape)": -0.03314780294366223,
        "org.jfree.chart.plot$PiePlot#setLegendLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator)": -0.040881516174663936,
        "org.jfree.chart.plot$PiePlot#setLegendLabelToolTipGenerator(org.jfree.chart.labels.PieSectionLabelGenerator)": -0.03314780294366223,
        "org.jfree.chart.plot$PiePlot#setLegendLabelURLGenerator(org.jfree.chart.urls.PieURLGenerator)": -0.03314780294366223,
        "org.jfree.chart.plot$PiePlot#setMaximumLabelWidth(double)": -0.02322541398277875,
        "org.jfree.chart.plot$PiePlot#setMinimumArcAngleToDraw(double)": -0.023225413982778775,
        "org.jfree.chart.plot$PiePlot#setPieIndex(int)": -0.023225413982778775,
        "org.jfree.chart.plot$PiePlot#setSectionOutlinePaint(java.lang.Comparable,java.awt.Paint)": -0.02322541398277875,
        "org.jfree.chart.plot$PiePlot#setSectionOutlineStroke(java.lang.Comparable,java.awt.Stroke)": -0.02322541398277875,
        "org.jfree.chart.plot$PiePlot#setSectionOutlinesVisible(boolean)": -0.02322541398277875,
        "org.jfree.chart.plot$PiePlot#setSectionPaint(java.lang.Comparable,java.awt.Paint)": -0.02322541398277875,
        "org.jfree.chart.plot$PiePlot#setShadowPaint(java.awt.Paint)": -0.02322541398277875,
        "org.jfree.chart.plot$PiePlot#setShadowXOffset(double)": -0.02322541398277875,
        "org.jfree.chart.plot$PiePlot#setShadowYOffset(double)": -0.02322541398277875,
        "org.jfree.chart.plot$PiePlot#setSimpleLabelOffset(org.jfree.chart.util.RectangleInsets)": 0.0,
        "org.jfree.chart.plot$PiePlot#setSimpleLabels(boolean)": 0.0,
        "org.jfree.chart.plot$PiePlot#setStartAngle(double)": -0.02322541398277875,
        "org.jfree.chart.plot$PiePlot#setToolTipGenerator(org.jfree.chart.labels.PieToolTipGenerator)": 0.15138303060593855,
        "org.jfree.chart.plot$PiePlot#setURLGenerator(org.jfree.chart.urls.PieURLGenerator)": -0.05335904646307371,
        "org.jfree.chart.plot$PiePlot#writeObject(java.io.ObjectOutputStream)": -0.058721517117045194,
        "org.jfree.chart.plot$PiePlot3D#PiePlot3D()": -0.02322541398277875,
        "org.jfree.chart.plot$PiePlot3D#PiePlot3D(org.jfree.data.general.PieDataset)": -0.058721517117045194,
        "org.jfree.chart.plot$PiePlot3D#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)": -0.03314780294366223,
        "org.jfree.chart.plot$PiePlot3D#drawSide(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Arc2D,java.awt.geom.Area,java.awt.geom.Area,java.awt.Paint,java.awt.Paint,java.awt.Stroke,boolean,boolean)": -0.02322541398277875,
        "org.jfree.chart.plot$PiePlot3D#equals(java.lang.Object)": -0.04748228748077153,
        "org.jfree.chart.plot$PiePlot3D#getDarkerSides()": -0.023225413982778775,
        "org.jfree.chart.plot$PiePlot3D#getDepthFactor()": 0.0,
        "org.jfree.chart.plot$PiePlot3D#getPlotType()": 0.0,
        "org.jfree.chart.plot$PiePlot3D#isAngleAtBack(double)": -0.023225413982778775,
        "org.jfree.chart.plot$PiePlot3D#isAngleAtFront(double)": -0.023225413982778775,
        "org.jfree.chart.plot$PiePlot3D#setDarkerSides(boolean)": -0.02322541398277875,
        "org.jfree.chart.plot$PiePlot3D#setDepthFactor(double)": -0.02322541398277875,
        "org.jfree.chart.plot$Plot#<clinit>()": 1.310010871519605,
        "org.jfree.chart.plot$Plot#Plot()": 1.310010871519605,
        "org.jfree.chart.plot$Plot#addChangeListener(org.jfree.chart.event.PlotChangeListener)": -0.020093694828667838,
        "org.jfree.chart.plot$Plot#axisChanged(org.jfree.chart.event.AxisChangeEvent)": -0.01138521584051002,
        "org.jfree.chart.plot$Plot#clone()": -0.13460878683821834,
        "org.jfree.chart.plot$Plot#createAndAddEntity(java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,java.lang.String,java.lang.String)": -0.19882458189082772,
        "org.jfree.chart.plot$Plot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)": -0.09219207433891567,
        "org.jfree.chart.plot$Plot#drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.05335904646307371,
        "org.jfree.chart.plot$Plot#drawBackgroundImage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.2028641283059316,
        "org.jfree.chart.plot$Plot#drawNoDataMessage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.08099252901602469,
        "org.jfree.chart.plot$Plot#drawOutline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.2028641283059316,
        "org.jfree.chart.plot$Plot#equals(java.lang.Object)": -0.2425907394001254,
        "org.jfree.chart.plot$Plot#fillBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.05335904646307371,
        "org.jfree.chart.plot$Plot#fillBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation)": -0.20286412830593153,
        "org.jfree.chart.plot$Plot#fireChangeEvent()": -0.04163398544864054,
        "org.jfree.chart.plot$Plot#getBackgroundAlpha()": -0.040881516174663846,
        "org.jfree.chart.plot$Plot#getBackgroundImage()": -0.040881516174663846,
        "org.jfree.chart.plot$Plot#getBackgroundImageAlignment()": 0.0,
        "org.jfree.chart.plot$Plot#getBackgroundImageAlpha()": 0.0,
        "org.jfree.chart.plot$Plot#getBackgroundPaint()": -0.2220981298271533,
        "org.jfree.chart.plot$Plot#getDatasetGroup()": 0.0,
        "org.jfree.chart.plot$Plot#getDrawingSupplier()": 0.013385398188714384,
        "org.jfree.chart.plot$Plot#getForegroundAlpha()": -0.2088278190736177,
        "org.jfree.chart.plot$Plot#getInsets()": -0.21468417828822295,
        "org.jfree.chart.plot$Plot#getLegendItems()": -0.023225413982778775,
        "org.jfree.chart.plot$Plot#getNoDataMessage()": 0.0,
        "org.jfree.chart.plot$Plot#getNoDataMessageFont()": 0.0,
        "org.jfree.chart.plot$Plot#getNoDataMessagePaint()": 0.0,
        "org.jfree.chart.plot$Plot#getOutlinePaint()": -0.040881516174663846,
        "org.jfree.chart.plot$Plot#getOutlineStroke()": -0.040881516174663846,
        "org.jfree.chart.plot$Plot#getParent()": 0.02648000587633159,
        "org.jfree.chart.plot$Plot#getRectX(double,double,double,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.plot$Plot#getRectY(double,double,double,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.plot$Plot#getRootPlot()": 0.0,
        "org.jfree.chart.plot$Plot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$Plot#isNotify()": -0.07697162467080898,
        "org.jfree.chart.plot$Plot#isOutlineVisible()": -0.15958962622971873,
        "org.jfree.chart.plot$Plot#isSubplot()": 0.0,
        "org.jfree.chart.plot$Plot#markerChanged(org.jfree.chart.event.MarkerChangeEvent)": 0.0,
        "org.jfree.chart.plot$Plot#notifyListeners(org.jfree.chart.event.PlotChangeEvent)": 1.3233935187544685,
        "org.jfree.chart.plot$Plot#readObject(java.io.ObjectInputStream)": -0.14242979300585173,
        "org.jfree.chart.plot$Plot#removeChangeListener(org.jfree.chart.event.PlotChangeListener)": -0.04748228748077153,
        "org.jfree.chart.plot$Plot#resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)": -0.20286412830593153,
        "org.jfree.chart.plot$Plot#resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)": -0.20286412830593153,
        "org.jfree.chart.plot$Plot#setBackgroundAlpha(float)": -0.02322541398277875,
        "org.jfree.chart.plot$Plot#setBackgroundImage(java.awt.Image)": -0.02322541398277875,
        "org.jfree.chart.plot$Plot#setBackgroundImageAlignment(int)": -0.02322541398277875,
        "org.jfree.chart.plot$Plot#setBackgroundImageAlpha(float)": -0.02322541398277875,
        "org.jfree.chart.plot$Plot#setBackgroundPaint(java.awt.Paint)": 0.09573859174700268,
        "org.jfree.chart.plot$Plot#setDatasetGroup(org.jfree.data.general.DatasetGroup)": -0.047482287480771435,
        "org.jfree.chart.plot$Plot#setDrawingSupplier(org.jfree.chart.plot.DrawingSupplier)": 0.10236656197792927,
        "org.jfree.chart.plot$Plot#setDrawingSupplier(org.jfree.chart.plot.DrawingSupplier,boolean)": 0.0,
        "org.jfree.chart.plot$Plot#setForegroundAlpha(float)": -0.05335904646307371,
        "org.jfree.chart.plot$Plot#setInsets(org.jfree.chart.util.RectangleInsets)": 0.10299715791271077,
        "org.jfree.chart.plot$Plot#setInsets(org.jfree.chart.util.RectangleInsets,boolean)": 0.09088381739861887,
        "org.jfree.chart.plot$Plot#setNoDataMessage(java.lang.String)": -0.02322541398277875,
        "org.jfree.chart.plot$Plot#setNoDataMessageFont(java.awt.Font)": -0.02322541398277875,
        "org.jfree.chart.plot$Plot#setNoDataMessagePaint(java.awt.Paint)": -0.02322541398277875,
        "org.jfree.chart.plot$Plot#setNotify(boolean)": -0.07697162467080897,
        "org.jfree.chart.plot$Plot#setOutlinePaint(java.awt.Paint)": 0.10236656197792927,
        "org.jfree.chart.plot$Plot#setOutlineStroke(java.awt.Stroke)": -0.02322541398277875,
        "org.jfree.chart.plot$Plot#setOutlineVisible(boolean)": -0.02322541398277875,
        "org.jfree.chart.plot$Plot#setParent(org.jfree.chart.plot.Plot)": -0.1118753905022174,
        "org.jfree.chart.plot$Plot#writeObject(java.io.ObjectOutputStream)": -0.14242979300585173,
        "org.jfree.chart.plot$Plot#zoom(double)": 0.0,
        "org.jfree.chart.plot$PlotOrientation#<clinit>()": 1.3852044867239315,
        "org.jfree.chart.plot$PlotOrientation#PlotOrientation(java.lang.String)": 0.03941804909702673,
        "org.jfree.chart.plot$PlotOrientation#equals(java.lang.Object)": -0.10563216592227084,
        "org.jfree.chart.plot$PlotOrientation#hashCode()": 0.0,
        "org.jfree.chart.plot$PlotOrientation#readResolve()": -0.10240183266412545,
        "org.jfree.chart.plot$PlotOrientation#toString()": -0.10563216592227098,
        "org.jfree.chart.plot$PlotRenderingInfo#PlotRenderingInfo(org.jfree.chart.ChartRenderingInfo)": -0.20486445012043064,
        "org.jfree.chart.plot$PlotRenderingInfo#addSubplotInfo(org.jfree.chart.plot.PlotRenderingInfo)": -0.023225413982778775,
        "org.jfree.chart.plot$PlotRenderingInfo#clone()": -0.023225413982778775,
        "org.jfree.chart.plot$PlotRenderingInfo#equals(java.lang.Object)": -0.058721517117045194,
        "org.jfree.chart.plot$PlotRenderingInfo#getDataArea()": -0.03314780294366226,
        "org.jfree.chart.plot$PlotRenderingInfo#getOwner()": -0.16425784449375813,
        "org.jfree.chart.plot$PlotRenderingInfo#getPlotArea()": -0.023225413982778775,
        "org.jfree.chart.plot$PlotRenderingInfo#getSubplotCount()": -0.023225413982778775,
        "org.jfree.chart.plot$PlotRenderingInfo#getSubplotIndex(java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$PlotRenderingInfo#getSubplotInfo(int)": -0.023225413982778775,
        "org.jfree.chart.plot$PlotRenderingInfo#readObject(java.io.ObjectInputStream)": -0.040881516174663936,
        "org.jfree.chart.plot$PlotRenderingInfo#setDataArea(java.awt.geom.Rectangle2D)": -0.16883622462555614,
        "org.jfree.chart.plot$PlotRenderingInfo#setPlotArea(java.awt.geom.Rectangle2D)": -0.16655784954853114,
        "org.jfree.chart.plot$PlotRenderingInfo#writeObject(java.io.ObjectOutputStream)": -0.040881516174663936,
        "org.jfree.chart.plot$PlotState#PlotState()": -0.047482287480771435,
        "org.jfree.chart.plot$PlotState#getSharedAxisStates()": -0.047482287480771435,
        "org.jfree.chart.plot$PolarPlot#<clinit>()": -0.040881516174663936,
        "org.jfree.chart.plot$PolarPlot#PolarPlot()": -0.040881516174663936,
        "org.jfree.chart.plot$PolarPlot#PolarPlot(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.PolarItemRenderer)": -0.040881516174663936,
        "org.jfree.chart.plot$PolarPlot#addCornerTextItem(java.lang.String)": -0.03314780294366223,
        "org.jfree.chart.plot$PolarPlot#clearCornerTextItems()": 0.0,
        "org.jfree.chart.plot$PolarPlot#clone()": -0.02322541398277875,
        "org.jfree.chart.plot$PolarPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)": 0.0,
        "org.jfree.chart.plot$PolarPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$PolarPlot#drawAxis(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$PolarPlot#drawCornerTextItems(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$PolarPlot#drawGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List,java.util.List)": 0.0,
        "org.jfree.chart.plot$PolarPlot#equals(java.lang.Object)": -0.040881516174663936,
        "org.jfree.chart.plot$PolarPlot#getAngleGridlinePaint()": 0.0,
        "org.jfree.chart.plot$PolarPlot#getAngleGridlineStroke()": 0.0,
        "org.jfree.chart.plot$PolarPlot#getAngleLabelFont()": 0.0,
        "org.jfree.chart.plot$PolarPlot#getAngleLabelPaint()": 0.0,
        "org.jfree.chart.plot$PolarPlot#getAngleTickUnit()": 0.0,
        "org.jfree.chart.plot$PolarPlot#getAxis()": -0.023225413982778775,
        "org.jfree.chart.plot$PolarPlot#getDataRange(org.jfree.chart.axis.ValueAxis)": -0.03314780294366223,
        "org.jfree.chart.plot$PolarPlot#getDataset()": 0.0,
        "org.jfree.chart.plot$PolarPlot#getLegendItems()": 0.0,
        "org.jfree.chart.plot$PolarPlot#getMaxRadius()": 0.0,
        "org.jfree.chart.plot$PolarPlot#getOrientation()": 0.0,
        "org.jfree.chart.plot$PolarPlot#getPlotType()": 0.0,
        "org.jfree.chart.plot$PolarPlot#getRadiusGridlinePaint()": 0.0,
        "org.jfree.chart.plot$PolarPlot#getRadiusGridlineStroke()": 0.0,
        "org.jfree.chart.plot$PolarPlot#getRenderer()": 0.0,
        "org.jfree.chart.plot$PolarPlot#getSeriesCount()": 0.0,
        "org.jfree.chart.plot$PolarPlot#isAngleGridlinesVisible()": 0.0,
        "org.jfree.chart.plot$PolarPlot#isAngleLabelsVisible()": 0.0,
        "org.jfree.chart.plot$PolarPlot#isDomainZoomable()": 0.0,
        "org.jfree.chart.plot$PolarPlot#isRadiusGridlinesVisible()": 0.0,
        "org.jfree.chart.plot$PolarPlot#isRangeZoomable()": 0.0,
        "org.jfree.chart.plot$PolarPlot#readObject(java.io.ObjectInputStream)": -0.02322541398277875,
        "org.jfree.chart.plot$PolarPlot#refreshAngleTicks()": 0.0,
        "org.jfree.chart.plot$PolarPlot#removeCornerTextItem(java.lang.String)": 0.0,
        "org.jfree.chart.plot$PolarPlot#render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$PolarPlot#rendererChanged(org.jfree.chart.event.RendererChangeEvent)": 0.0,
        "org.jfree.chart.plot$PolarPlot#setAngleGridlinePaint(java.awt.Paint)": -0.03314780294366223,
        "org.jfree.chart.plot$PolarPlot#setAngleGridlineStroke(java.awt.Stroke)": -0.02322541398277875,
        "org.jfree.chart.plot$PolarPlot#setAngleGridlinesVisible(boolean)": -0.02322541398277875,
        "org.jfree.chart.plot$PolarPlot#setAngleLabelFont(java.awt.Font)": -0.02322541398277875,
        "org.jfree.chart.plot$PolarPlot#setAngleLabelPaint(java.awt.Paint)": -0.03314780294366223,
        "org.jfree.chart.plot$PolarPlot#setAngleLabelsVisible(boolean)": -0.02322541398277875,
        "org.jfree.chart.plot$PolarPlot#setAngleTickUnit(org.jfree.chart.axis.TickUnit)": -0.02322541398277875,
        "org.jfree.chart.plot$PolarPlot#setAxis(org.jfree.chart.axis.ValueAxis)": -0.02322541398277875,
        "org.jfree.chart.plot$PolarPlot#setDataset(org.jfree.data.xy.XYDataset)": 0.0,
        "org.jfree.chart.plot$PolarPlot#setRadiusGridlinePaint(java.awt.Paint)": -0.03314780294366223,
        "org.jfree.chart.plot$PolarPlot#setRadiusGridlineStroke(java.awt.Stroke)": -0.02322541398277875,
        "org.jfree.chart.plot$PolarPlot#setRadiusGridlinesVisible(boolean)": -0.02322541398277875,
        "org.jfree.chart.plot$PolarPlot#setRenderer(org.jfree.chart.renderer.PolarItemRenderer)": 0.0,
        "org.jfree.chart.plot$PolarPlot#translateValueThetaRadiusToJava2D(double,double,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.plot$PolarPlot#writeObject(java.io.ObjectOutputStream)": -0.02322541398277875,
        "org.jfree.chart.plot$PolarPlot#zoom(double)": 0.0,
        "org.jfree.chart.plot$PolarPlot#zoomDomainAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$PolarPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$PolarPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)": 0.0,
        "org.jfree.chart.plot$PolarPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$PolarPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$PolarPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)": 0.0,
        "org.jfree.chart.plot$RingPlot#RingPlot()": -0.02322541398277875,
        "org.jfree.chart.plot$RingPlot#RingPlot(org.jfree.data.general.PieDataset)": -0.04748228748077153,
        "org.jfree.chart.plot$RingPlot#drawItem(java.awt.Graphics2D,int,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState,int)": 0.0,
        "org.jfree.chart.plot$RingPlot#equals(java.lang.Object)": -0.04748228748077153,
        "org.jfree.chart.plot$RingPlot#extendLine(java.awt.geom.Line2D,double,double)": 0.0,
        "org.jfree.chart.plot$RingPlot#getInnerSeparatorExtension()": 0.0,
        "org.jfree.chart.plot$RingPlot#getLabelLinkDepth()": 0.0,
        "org.jfree.chart.plot$RingPlot#getOuterSeparatorExtension()": 0.0,
        "org.jfree.chart.plot$RingPlot#getSectionDepth()": 0.0,
        "org.jfree.chart.plot$RingPlot#getSeparatorPaint()": 0.0,
        "org.jfree.chart.plot$RingPlot#getSeparatorStroke()": 0.0,
        "org.jfree.chart.plot$RingPlot#getSeparatorsVisible()": 0.0,
        "org.jfree.chart.plot$RingPlot#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlot,java.lang.Integer,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$RingPlot#readObject(java.io.ObjectInputStream)": -0.02322541398277875,
        "org.jfree.chart.plot$RingPlot#setInnerSeparatorExtension(double)": -0.02322541398277875,
        "org.jfree.chart.plot$RingPlot#setOuterSeparatorExtension(double)": -0.02322541398277875,
        "org.jfree.chart.plot$RingPlot#setSectionDepth(double)": -0.02322541398277875,
        "org.jfree.chart.plot$RingPlot#setSeparatorPaint(java.awt.Paint)": -0.040881516174663936,
        "org.jfree.chart.plot$RingPlot#setSeparatorStroke(java.awt.Stroke)": -0.02322541398277875,
        "org.jfree.chart.plot$RingPlot#setSeparatorsVisible(boolean)": -0.02322541398277875,
        "org.jfree.chart.plot$RingPlot#writeObject(java.io.ObjectOutputStream)": -0.02322541398277875,
        "org.jfree.chart.plot$SeriesRenderingOrder#<clinit>()": 1.56679002727835,
        "org.jfree.chart.plot$SeriesRenderingOrder#SeriesRenderingOrder(java.lang.String)": 0.22100358965144518,
        "org.jfree.chart.plot$SeriesRenderingOrder#equals(java.lang.Object)": -0.06835852491775252,
        "org.jfree.chart.plot$SeriesRenderingOrder#hashCode()": 0.0,
        "org.jfree.chart.plot$SeriesRenderingOrder#readResolve()": -0.06835852491775252,
        "org.jfree.chart.plot$SeriesRenderingOrder#toString()": -0.06835852491775252,
        "org.jfree.chart.plot$ValueMarker#ValueMarker(double)": -0.14747628571562693,
        "org.jfree.chart.plot$ValueMarker#ValueMarker(double,java.awt.Paint,java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$ValueMarker#ValueMarker(double,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)": -0.02322541398277875,
        "org.jfree.chart.plot$ValueMarker#equals(java.lang.Object)": -0.11786391545771334,
        "org.jfree.chart.plot$ValueMarker#getValue()": -0.05335904646307377,
        "org.jfree.chart.plot$ValueMarker#setValue(double)": -0.03314780294366223,
        "org.jfree.chart.plot$XYPlot#<clinit>()": 1.56679002727835,
        "org.jfree.chart.plot$XYPlot#XYPlot()": -0.11187539050221756,
        "org.jfree.chart.plot$XYPlot#XYPlot(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)": 1.56679002727835,
        "org.jfree.chart.plot$XYPlot#addAnnotation(org.jfree.chart.annotations.XYAnnotation)": -0.08099252901602469,
        "org.jfree.chart.plot$XYPlot#addAnnotation(org.jfree.chart.annotations.XYAnnotation,boolean)": -0.08099252901602469,
        "org.jfree.chart.plot$XYPlot#addDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": -0.040881516174663936,
        "org.jfree.chart.plot$XYPlot#addDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)": -0.040881516174663936,
        "org.jfree.chart.plot$XYPlot#addDomainMarker(org.jfree.chart.plot.Marker)": -0.03314780294366223,
        "org.jfree.chart.plot$XYPlot#addDomainMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": -0.040881516174663936,
        "org.jfree.chart.plot$XYPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": -0.04748228748077153,
        "org.jfree.chart.plot$XYPlot#addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)": -0.04748228748077153,
        "org.jfree.chart.plot$XYPlot#addRangeMarker(org.jfree.chart.plot.Marker)": -0.040881516174663936,
        "org.jfree.chart.plot$XYPlot#addRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": -0.04748228748077153,
        "org.jfree.chart.plot$XYPlot#calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.10563216592227084,
        "org.jfree.chart.plot$XYPlot#calculateDomainAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)": -0.10563216592227084,
        "org.jfree.chart.plot$XYPlot#calculateRangeAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)": -0.10878808397177664,
        "org.jfree.chart.plot$XYPlot#canSelectByPoint()": 0.0,
        "org.jfree.chart.plot$XYPlot#canSelectByRegion()": 0.0,
        "org.jfree.chart.plot$XYPlot#checkAxisIndices(java.util.List)": 0.22100358965144518,
        "org.jfree.chart.plot$XYPlot#clearAnnotations()": 0.0,
        "org.jfree.chart.plot$XYPlot#clearDomainAxes()": 0.0,
        "org.jfree.chart.plot$XYPlot#clearDomainMarkers()": -0.03314780294366223,
        "org.jfree.chart.plot$XYPlot#clearDomainMarkers(int)": -0.03314780294366223,
        "org.jfree.chart.plot$XYPlot#clearRangeAxes()": 0.0,
        "org.jfree.chart.plot$XYPlot#clearRangeMarkers()": -0.03314780294366223,
        "org.jfree.chart.plot$XYPlot#clearRangeMarkers(int)": -0.03314780294366223,
        "org.jfree.chart.plot$XYPlot#clearSelection()": 0.0,
        "org.jfree.chart.plot$XYPlot#clone()": -0.06835852491775252,
        "org.jfree.chart.plot$XYPlot#configureDomainAxes()": 1.56679002727835,
        "org.jfree.chart.plot$XYPlot#configureRangeAxes()": 1.56679002727835,
        "org.jfree.chart.plot$XYPlot#convertToDataSpace(java.awt.geom.GeneralPath,java.awt.geom.Rectangle2D,org.jfree.data.xy.XYDataset)": 0.0,
        "org.jfree.chart.plot$XYPlot#datasetChanged(org.jfree.data.general.DatasetChangeEvent)": 1.56679002727835,
        "org.jfree.chart.plot$XYPlot#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)": -0.10878808397177664,
        "org.jfree.chart.plot$XYPlot#drawAnnotations(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)": -0.10563216592227084,
        "org.jfree.chart.plot$XYPlot#drawAxes(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)": -0.10563216592227084,
        "org.jfree.chart.plot$XYPlot#drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.10563216592227084,
        "org.jfree.chart.plot$XYPlot#drawDomainCrosshair(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation,double,org.jfree.chart.axis.ValueAxis,java.awt.Stroke,java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawDomainGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)": -0.10563216592227084,
        "org.jfree.chart.plot$XYPlot#drawDomainMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.util.Layer)": -0.10563216592227084,
        "org.jfree.chart.plot$XYPlot#drawDomainTickBands(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)": -0.10563216592227084,
        "org.jfree.chart.plot$XYPlot#drawHorizontalLine(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,java.awt.Stroke,java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawQuadrants(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.10563216592227084,
        "org.jfree.chart.plot$XYPlot#drawRangeCrosshair(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation,double,org.jfree.chart.axis.ValueAxis,java.awt.Stroke,java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawRangeGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)": -0.10563216592227084,
        "org.jfree.chart.plot$XYPlot#drawRangeMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.util.Layer)": -0.10563216592227084,
        "org.jfree.chart.plot$XYPlot#drawRangeTickBands(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)": -0.10563216592227084,
        "org.jfree.chart.plot$XYPlot#drawVerticalLine(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,java.awt.Stroke,java.awt.Paint)": 0.0,
        "org.jfree.chart.plot$XYPlot#drawZeroDomainBaseline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.10563216592227084,
        "org.jfree.chart.plot$XYPlot#drawZeroRangeBaseline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.10563216592227084,
        "org.jfree.chart.plot$XYPlot#equals(java.lang.Object)": 0.11128058925071518,
        "org.jfree.chart.plot$XYPlot#findSelectionStateForDataset(org.jfree.data.xy.XYDataset,java.lang.Object)": 0.0,
        "org.jfree.chart.plot$XYPlot#getAnnotations()": -0.11465596694930542,
        "org.jfree.chart.plot$XYPlot#getAxisOffset()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDataRange(org.jfree.chart.axis.ValueAxis)": 1.5995593295194723,
        "org.jfree.chart.plot$XYPlot#getDataset()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDataset(int)": 1.56679002727835,
        "org.jfree.chart.plot$XYPlot#getDatasetCount()": 0.06199164146150749,
        "org.jfree.chart.plot$XYPlot#getDatasetRenderingOrder()": -0.10563216592227098,
        "org.jfree.chart.plot$XYPlot#getDatasetsMappedToDomainAxis(java.lang.Integer)": 1.6014674891954863,
        "org.jfree.chart.plot$XYPlot#getDatasetsMappedToRangeAxis(java.lang.Integer)": 0.03385968177807767,
        "org.jfree.chart.plot$XYPlot#getDomainAxis()": -0.13460878683821834,
        "org.jfree.chart.plot$XYPlot#getDomainAxis(int)": 0.0396819662513788,
        "org.jfree.chart.plot$XYPlot#getDomainAxisCount()": 0.11322188838720187,
        "org.jfree.chart.plot$XYPlot#getDomainAxisEdge()": -0.10878808397177664,
        "org.jfree.chart.plot$XYPlot#getDomainAxisEdge(int)": -0.10563216592227084,
        "org.jfree.chart.plot$XYPlot#getDomainAxisForDataset(int)": 0.06199164146150749,
        "org.jfree.chart.plot$XYPlot#getDomainAxisIndex(org.jfree.chart.axis.ValueAxis)": 1.5995593295194723,
        "org.jfree.chart.plot$XYPlot#getDomainAxisLocation()": -0.10878808397177664,
        "org.jfree.chart.plot$XYPlot#getDomainAxisLocation(int)": -0.10563216592227084,
        "org.jfree.chart.plot$XYPlot#getDomainCrosshairPaint()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainCrosshairStroke()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainCrosshairValue()": -0.10563216592227098,
        "org.jfree.chart.plot$XYPlot#getDomainGridlinePaint()": -0.10240183266412539,
        "org.jfree.chart.plot$XYPlot#getDomainGridlineStroke()": -0.10240183266412539,
        "org.jfree.chart.plot$XYPlot#getDomainMarkers(int,org.jfree.chart.util.Layer)": -0.10563216592227084,
        "org.jfree.chart.plot$XYPlot#getDomainMarkers(org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainMinorGridlinePaint()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainMinorGridlineStroke()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainTickBandPaint()": -0.10563216592227098,
        "org.jfree.chart.plot$XYPlot#getDomainZeroBaselinePaint()": 0.0,
        "org.jfree.chart.plot$XYPlot#getDomainZeroBaselineStroke()": 0.0,
        "org.jfree.chart.plot$XYPlot#getFixedDomainAxisSpace()": -0.023225413982778775,
        "org.jfree.chart.plot$XYPlot#getFixedLegendItems()": -0.03314780294366226,
        "org.jfree.chart.plot$XYPlot#getFixedRangeAxisSpace()": -0.023225413982778775,
        "org.jfree.chart.plot$XYPlot#getIndexOf(org.jfree.chart.renderer.xy.XYItemRenderer)": 0.07054439388885442,
        "org.jfree.chart.plot$XYPlot#getLegendItems()": -0.10878808397177664,
        "org.jfree.chart.plot$XYPlot#getOrientation()": -0.13985795596766826,
        "org.jfree.chart.plot$XYPlot#getPlotType()": 0.0,
        "org.jfree.chart.plot$XYPlot#getQuadrantOrigin()": -0.023225413982778775,
        "org.jfree.chart.plot$XYPlot#getQuadrantPaint(int)": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeAxis()": -0.14496872595721724,
        "org.jfree.chart.plot$XYPlot#getRangeAxis(int)": 0.06623489592939188,
        "org.jfree.chart.plot$XYPlot#getRangeAxisCount()": 0.11322188838720187,
        "org.jfree.chart.plot$XYPlot#getRangeAxisEdge()": -0.10563216592227084,
        "org.jfree.chart.plot$XYPlot#getRangeAxisEdge(int)": -0.10878808397177664,
        "org.jfree.chart.plot$XYPlot#getRangeAxisForDataset(int)": -0.10878808397177664,
        "org.jfree.chart.plot$XYPlot#getRangeAxisIndex(org.jfree.chart.axis.ValueAxis)": 1.5995593295194723,
        "org.jfree.chart.plot$XYPlot#getRangeAxisLocation()": -0.10563216592227084,
        "org.jfree.chart.plot$XYPlot#getRangeAxisLocation(int)": -0.10878808397177664,
        "org.jfree.chart.plot$XYPlot#getRangeCrosshairPaint()": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeCrosshairStroke()": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeCrosshairValue()": -0.10563216592227098,
        "org.jfree.chart.plot$XYPlot#getRangeGridlinePaint()": -0.10563216592227098,
        "org.jfree.chart.plot$XYPlot#getRangeGridlineStroke()": -0.10563216592227098,
        "org.jfree.chart.plot$XYPlot#getRangeMarkers(int,org.jfree.chart.util.Layer)": -0.10563216592227084,
        "org.jfree.chart.plot$XYPlot#getRangeMarkers(org.jfree.chart.util.Layer)": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeMinorGridlinePaint()": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeMinorGridlineStroke()": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeTickBandPaint()": -0.10563216592227098,
        "org.jfree.chart.plot$XYPlot#getRangeZeroBaselinePaint()": 0.0,
        "org.jfree.chart.plot$XYPlot#getRangeZeroBaselineStroke()": 0.0,
        "org.jfree.chart.plot$XYPlot#getRenderer()": 1.6750312740427828,
        "org.jfree.chart.plot$XYPlot#getRenderer(int)": 1.6191490478390738,
        "org.jfree.chart.plot$XYPlot#getRendererCount()": 0.04760931532240618,
        "org.jfree.chart.plot$XYPlot#getRendererForDataset(org.jfree.data.xy.XYDataset)": 1.6111721809263821,
        "org.jfree.chart.plot$XYPlot#getSeriesCount()": 0.0,
        "org.jfree.chart.plot$XYPlot#getSeriesRenderingOrder()": -0.09219207433891574,
        "org.jfree.chart.plot$XYPlot#getWeight()": -0.03314780294366226,
        "org.jfree.chart.plot$XYPlot#handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)": 0.0,
        "org.jfree.chart.plot$XYPlot#indexOf(org.jfree.data.xy.XYDataset)": -0.02322541398277875,
        "org.jfree.chart.plot$XYPlot#isDomainCrosshairLockedOnData()": 0.0,
        "org.jfree.chart.plot$XYPlot#isDomainCrosshairVisible()": -0.10563216592227098,
        "org.jfree.chart.plot$XYPlot#isDomainGridlinesVisible()": -0.10563216592227098,
        "org.jfree.chart.plot$XYPlot#isDomainMinorGridlinesVisible()": -0.10563216592227098,
        "org.jfree.chart.plot$XYPlot#isDomainPannable()": 0.0,
        "org.jfree.chart.plot$XYPlot#isDomainZeroBaselineVisible()": -0.10563216592227098,
        "org.jfree.chart.plot$XYPlot#isDomainZoomable()": -0.08099252901602472,
        "org.jfree.chart.plot$XYPlot#isRangeCrosshairLockedOnData()": 0.0,
        "org.jfree.chart.plot$XYPlot#isRangeCrosshairVisible()": -0.10878808397177675,
        "org.jfree.chart.plot$XYPlot#isRangeGridlinesVisible()": -0.10563216592227098,
        "org.jfree.chart.plot$XYPlot#isRangeMinorGridlinesVisible()": -0.09569017516582456,
        "org.jfree.chart.plot$XYPlot#isRangePannable()": 0.0,
        "org.jfree.chart.plot$XYPlot#isRangeZeroBaselineVisible()": -0.10563216592227098,
        "org.jfree.chart.plot$XYPlot#isRangeZoomable()": -0.08099252901602472,
        "org.jfree.chart.plot$XYPlot#mapDatasetToDomainAxes(int,java.util.List)": 1.56679002727835,
        "org.jfree.chart.plot$XYPlot#mapDatasetToDomainAxis(int,int)": 1.56679002727835,
        "org.jfree.chart.plot$XYPlot#mapDatasetToRangeAxes(int,java.util.List)": -0.002736529093312255,
        "org.jfree.chart.plot$XYPlot#mapDatasetToRangeAxis(int,int)": -0.002736529093312255,
        "org.jfree.chart.plot$XYPlot#panDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$XYPlot#panRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": 0.0,
        "org.jfree.chart.plot$XYPlot#readObject(java.io.ObjectInputStream)": -0.06835852491775252,
        "org.jfree.chart.plot$XYPlot#removeAnnotation(org.jfree.chart.annotations.XYAnnotation)": -0.02322541398277875,
        "org.jfree.chart.plot$XYPlot#removeAnnotation(org.jfree.chart.annotations.XYAnnotation,boolean)": -0.02322541398277875,
        "org.jfree.chart.plot$XYPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": -0.02322541398277875,
        "org.jfree.chart.plot$XYPlot#removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)": -0.02322541398277875,
        "org.jfree.chart.plot$XYPlot#removeDomainMarker(org.jfree.chart.plot.Marker)": -0.02322541398277875,
        "org.jfree.chart.plot$XYPlot#removeDomainMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": -0.02322541398277875,
        "org.jfree.chart.plot$XYPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": -0.02322541398277875,
        "org.jfree.chart.plot$XYPlot#removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer,boolean)": -0.02322541398277875,
        "org.jfree.chart.plot$XYPlot#removeRangeMarker(org.jfree.chart.plot.Marker)": -0.02322541398277875,
        "org.jfree.chart.plot$XYPlot#removeRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.util.Layer)": -0.02322541398277875,
        "org.jfree.chart.plot$XYPlot#render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.CrosshairState)": -0.10563216592227084,
        "org.jfree.chart.plot$XYPlot#rendererChanged(org.jfree.chart.event.RendererChangeEvent)": 0.10804365062248597,
        "org.jfree.chart.plot$XYPlot#select(double,double,java.awt.geom.Rectangle2D,org.jfree.chart.RenderingSource)": 0.0,
        "org.jfree.chart.plot$XYPlot#select(java.awt.geom.GeneralPath,java.awt.geom.Rectangle2D,org.jfree.chart.RenderingSource)": 0.0,
        "org.jfree.chart.plot$XYPlot#setAxisOffset(org.jfree.chart.util.RectangleInsets)": 0.11061548766066939,
        "org.jfree.chart.plot$XYPlot#setDataset(int,org.jfree.data.xy.XYDataset)": -0.09219207433891567,
        "org.jfree.chart.plot$XYPlot#setDataset(org.jfree.data.xy.XYDataset)": -0.03314780294366223,
        "org.jfree.chart.plot$XYPlot#setDatasetRenderingOrder(org.jfree.chart.plot.DatasetRenderingOrder)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainAxes(org.jfree.chart.axis.ValueAxis[])": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainAxis(int,org.jfree.chart.axis.ValueAxis)": -0.08485741089496995,
        "org.jfree.chart.plot$XYPlot#setDomainAxis(int,org.jfree.chart.axis.ValueAxis,boolean)": -0.08485741089496995,
        "org.jfree.chart.plot$XYPlot#setDomainAxis(org.jfree.chart.axis.ValueAxis)": -0.058721517117045194,
        "org.jfree.chart.plot$XYPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation)": -0.03314780294366223,
        "org.jfree.chart.plot$XYPlot#setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)": -0.03314780294366223,
        "org.jfree.chart.plot$XYPlot#setDomainAxisLocation(org.jfree.chart.axis.AxisLocation)": -0.02322541398277875,
        "org.jfree.chart.plot$XYPlot#setDomainAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainCrosshairLockedOnData(boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainCrosshairPaint(java.awt.Paint)": 0.11322188838720187,
        "org.jfree.chart.plot$XYPlot#setDomainCrosshairStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainCrosshairValue(double)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainCrosshairValue(double,boolean)": -0.10563216592227084,
        "org.jfree.chart.plot$XYPlot#setDomainCrosshairVisible(boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainGridlinePaint(java.awt.Paint)": 0.11061548766066939,
        "org.jfree.chart.plot$XYPlot#setDomainGridlineStroke(java.awt.Stroke)": -0.02322541398277875,
        "org.jfree.chart.plot$XYPlot#setDomainGridlinesVisible(boolean)": -0.02322541398277875,
        "org.jfree.chart.plot$XYPlot#setDomainMinorGridlinePaint(java.awt.Paint)": -0.02322541398277875,
        "org.jfree.chart.plot$XYPlot#setDomainMinorGridlineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainMinorGridlinesVisible(boolean)": -0.02322541398277875,
        "org.jfree.chart.plot$XYPlot#setDomainPannable(boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainTickBandPaint(java.awt.Paint)": -0.02322541398277875,
        "org.jfree.chart.plot$XYPlot#setDomainZeroBaselinePaint(java.awt.Paint)": 0.11322188838720187,
        "org.jfree.chart.plot$XYPlot#setDomainZeroBaselineStroke(java.awt.Stroke)": 0.0,
        "org.jfree.chart.plot$XYPlot#setDomainZeroBaselineVisible(boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace)": 0.0,
        "org.jfree.chart.plot$XYPlot#setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)": -0.02322541398277875,
        "org.jfree.chart.plot$XYPlot#setFixedLegendItems(org.jfree.chart.LegendItemCollection)": -0.03314780294366223,
        "org.jfree.chart.plot$XYPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace)": 0.0,
        "org.jfree.chart.plot$XYPlot#setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)": -0.02322541398277875,
        "org.jfree.chart.plot$XYPlot#setOrientation(org.jfree.chart.plot.PlotOrientation)": 0.09088381739861887,
        "org.jfree.chart.plot$XYPlot#setQuadrantOrigin(java.awt.geom.Point2D)": -0.03314780294366223,
        "org.jfree.chart.plot$XYPlot#setQuadrantPaint(int,java.awt.Paint)": -0.03314780294366223,
        "org.jfree.chart.plot$XYPlot#setRangeAxes(org.jfree.chart.axis.ValueAxis[])": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis)": -0.06835852491775252,
        "org.jfree.chart.plot$XYPlot#setRangeAxis(int,org.jfree.chart.axis.ValueAxis,boolean)": -0.06835852491775252,
        "org.jfree.chart.plot$XYPlot#setRangeAxis(org.jfree.chart.axis.ValueAxis)": -0.08099252901602469,
        "org.jfree.chart.plot$XYPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation)": -0.03314780294366223,
        "org.jfree.chart.plot$XYPlot#setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)": -0.07697162467080897,
        "org.jfree.chart.plot$XYPlot#setRangeAxisLocation(org.jfree.chart.axis.AxisLocation)": -0.07277062049397834,
        "org.jfree.chart.plot$XYPlot#setRangeAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeCrosshairLockedOnData(boolean)": -0.02322541398277875,
        "org.jfree.chart.plot$XYPlot#setRangeCrosshairPaint(java.awt.Paint)": 0.11061548766066939,
        "org.jfree.chart.plot$XYPlot#setRangeCrosshairStroke(java.awt.Stroke)": -0.02322541398277875,
        "org.jfree.chart.plot$XYPlot#setRangeCrosshairValue(double)": -0.02322541398277875,
        "org.jfree.chart.plot$XYPlot#setRangeCrosshairValue(double,boolean)": -0.10878808397177664,
        "org.jfree.chart.plot$XYPlot#setRangeCrosshairVisible(boolean)": -0.02322541398277875,
        "org.jfree.chart.plot$XYPlot#setRangeGridlinePaint(java.awt.Paint)": 0.11061548766066939,
        "org.jfree.chart.plot$XYPlot#setRangeGridlineStroke(java.awt.Stroke)": -0.02322541398277875,
        "org.jfree.chart.plot$XYPlot#setRangeGridlinesVisible(boolean)": -0.02322541398277875,
        "org.jfree.chart.plot$XYPlot#setRangeMinorGridlinePaint(java.awt.Paint)": -0.02322541398277875,
        "org.jfree.chart.plot$XYPlot#setRangeMinorGridlineStroke(java.awt.Stroke)": -0.02322541398277875,
        "org.jfree.chart.plot$XYPlot#setRangeMinorGridlinesVisible(boolean)": -0.02322541398277875,
        "org.jfree.chart.plot$XYPlot#setRangePannable(boolean)": 0.0,
        "org.jfree.chart.plot$XYPlot#setRangeTickBandPaint(java.awt.Paint)": -0.02322541398277875,
        "org.jfree.chart.plot$XYPlot#setRangeZeroBaselinePaint(java.awt.Paint)": 0.11061548766066939,
        "org.jfree.chart.plot$XYPlot#setRangeZeroBaselineStroke(java.awt.Stroke)": -0.02322541398277875,
        "org.jfree.chart.plot$XYPlot#setRangeZeroBaselineVisible(boolean)": -0.02322541398277875,
        "org.jfree.chart.plot$XYPlot#setRenderer(int,org.jfree.chart.renderer.xy.XYItemRenderer)": 0.15828136928942205,
        "org.jfree.chart.plot$XYPlot#setRenderer(int,org.jfree.chart.renderer.xy.XYItemRenderer,boolean)": 0.15828136928942205,
        "org.jfree.chart.plot$XYPlot#setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)": 0.1821149187105852,
        "org.jfree.chart.plot$XYPlot#setRenderers(org.jfree.chart.renderer.xy.XYItemRenderer[])": 0.0,
        "org.jfree.chart.plot$XYPlot#setSeriesRenderingOrder(org.jfree.chart.plot.SeriesRenderingOrder)": 0.0,
        "org.jfree.chart.plot$XYPlot#setWeight(int)": -0.08099252901602469,
        "org.jfree.chart.plot$XYPlot#writeObject(java.io.ObjectOutputStream)": -0.06835852491775252,
        "org.jfree.chart.plot$XYPlot#zoomDomainAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": -0.02322541398277875,
        "org.jfree.chart.plot$XYPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": -0.03314780294366223,
        "org.jfree.chart.plot$XYPlot#zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)": -0.058721517117045194,
        "org.jfree.chart.plot$XYPlot#zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": -0.02322541398277875,
        "org.jfree.chart.plot$XYPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)": -0.03314780294366223,
        "org.jfree.chart.plot$XYPlot#zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)": -0.058721517117045194,
        "org.jfree.chart.renderer$AbstractRenderer#<clinit>()": -0.2698466989984164,
        "org.jfree.chart.renderer$AbstractRenderer#AbstractRenderer()": 0.10068101335501822,
        "org.jfree.chart.renderer$AbstractRenderer#addChangeListener(org.jfree.chart.event.RendererChangeListener)": -0.1360667911058178,
        "org.jfree.chart.renderer$AbstractRenderer#calculateLabelAnchorPoint(org.jfree.chart.labels.ItemLabelAnchor,double,double,org.jfree.chart.plot.PlotOrientation)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#clearSeriesPaints(boolean)": 0.006093472319622019,
        "org.jfree.chart.renderer$AbstractRenderer#clearSeriesStrokes(boolean)": 0.006093472319622019,
        "org.jfree.chart.renderer$AbstractRenderer#clone()": -0.21661376185026004,
        "org.jfree.chart.renderer$AbstractRenderer#equals(java.lang.Object)": -0.45668445883915415,
        "org.jfree.chart.renderer$AbstractRenderer#fireChangeEvent()": 0.1995493369612512,
        "org.jfree.chart.renderer$AbstractRenderer#getAutoPopulateSeriesFillPaint()": -0.023225413982778775,
        "org.jfree.chart.renderer$AbstractRenderer#getAutoPopulateSeriesOutlinePaint()": -0.023225413982778775,
        "org.jfree.chart.renderer$AbstractRenderer#getAutoPopulateSeriesOutlineStroke()": -0.023225413982778775,
        "org.jfree.chart.renderer$AbstractRenderer#getAutoPopulateSeriesPaint()": -0.22095927937435086,
        "org.jfree.chart.renderer$AbstractRenderer#getAutoPopulateSeriesShape()": -0.023225413982778775,
        "org.jfree.chart.renderer$AbstractRenderer#getAutoPopulateSeriesStroke()": -0.22095927937435086,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseCreateEntities()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseFillPaint()": -0.023225413982778775,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseItemLabelFont()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseItemLabelPaint()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseItemLabelsVisible()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseLegendShape()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseLegendTextFont()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseLegendTextPaint()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseNegativeItemLabelPosition()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseOutlinePaint()": -0.023225413982778775,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseOutlineStroke()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getBasePaint()": -0.023225413982778775,
        "org.jfree.chart.renderer$AbstractRenderer#getBasePositiveItemLabelPosition()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseSeriesVisible()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseSeriesVisibleInLegend()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseShape()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getBaseStroke()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getDataBoundsIncludesVisibleSeriesOnly()": -0.3052909235753711,
        "org.jfree.chart.renderer$AbstractRenderer#getDefaultEntityRadius()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getItemCreateEntity(int,int,boolean)": -0.040881516174663936,
        "org.jfree.chart.renderer$AbstractRenderer#getItemFillPaint(int,int,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getItemLabelAnchorOffset()": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getItemLabelFont(int,int,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getItemLabelPaint(int,int,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getItemOutlinePaint(int,int,boolean)": -0.05335904646307371,
        "org.jfree.chart.renderer$AbstractRenderer#getItemOutlineStroke(int,int,boolean)": -0.07277062049397834,
        "org.jfree.chart.renderer$AbstractRenderer#getItemPaint(int,int,boolean)": -0.17554903211743156,
        "org.jfree.chart.renderer$AbstractRenderer#getItemShape(int,int,boolean)": -0.058721517117045194,
        "org.jfree.chart.renderer$AbstractRenderer#getItemStroke(int,int,boolean)": -0.14242979300585173,
        "org.jfree.chart.renderer$AbstractRenderer#getItemVisible(int,int)": -0.14747628571562693,
        "org.jfree.chart.renderer$AbstractRenderer#getLegendShape(int)": -0.19882458189082772,
        "org.jfree.chart.renderer$AbstractRenderer#getLegendTextFont(int)": -0.21853251080451352,
        "org.jfree.chart.renderer$AbstractRenderer#getLegendTextPaint(int)": -0.21853251080451352,
        "org.jfree.chart.renderer$AbstractRenderer#getNegativeItemLabelPosition(int,int,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getPositiveItemLabelPosition(int,int,boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesCreateEntities(int)": -0.040881516174663936,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesFillPaint(int)": -0.02322541398277875,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesItemLabelFont(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesItemLabelPaint(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesItemLabelsVisible(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesNegativeItemLabelPosition(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesOutlinePaint(int)": -0.17333111269940368,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesOutlineStroke(int)": -0.1947308226249881,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesPaint(int)": -0.22233847708688936,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesPositiveItemLabelPosition(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesShape(int)": -0.11187539050221756,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesStroke(int)": -0.15958962622971884,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesVisible(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getSeriesVisibleInLegend(int)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#getTreatLegendShapeAsLine()": -0.03314780294366226,
        "org.jfree.chart.renderer$AbstractRenderer#hasListener(java.util.EventListener)": -0.040881516174663846,
        "org.jfree.chart.renderer$AbstractRenderer#hashCode()": -0.17774814107761183,
        "org.jfree.chart.renderer$AbstractRenderer#isItemLabelVisible(int,int,boolean)": -0.09219207433891567,
        "org.jfree.chart.renderer$AbstractRenderer#isSeriesItemLabelsVisible(int)": -0.09219207433891567,
        "org.jfree.chart.renderer$AbstractRenderer#isSeriesVisible(int)": -0.299684717284328,
        "org.jfree.chart.renderer$AbstractRenderer#isSeriesVisibleInLegend(int)": -0.2008509521609263,
        "org.jfree.chart.renderer$AbstractRenderer#lookupLegendShape(int)": -0.19882458189082772,
        "org.jfree.chart.renderer$AbstractRenderer#lookupLegendTextFont(int)": -0.21853251080451352,
        "org.jfree.chart.renderer$AbstractRenderer#lookupLegendTextPaint(int)": -0.21853251080451352,
        "org.jfree.chart.renderer$AbstractRenderer#lookupSeriesFillPaint(int)": -0.02322541398277875,
        "org.jfree.chart.renderer$AbstractRenderer#lookupSeriesOutlinePaint(int)": -0.17333111269940368,
        "org.jfree.chart.renderer$AbstractRenderer#lookupSeriesOutlineStroke(int)": -0.1947308226249881,
        "org.jfree.chart.renderer$AbstractRenderer#lookupSeriesPaint(int)": -0.22233847708688936,
        "org.jfree.chart.renderer$AbstractRenderer#lookupSeriesShape(int)": -0.11187539050221756,
        "org.jfree.chart.renderer$AbstractRenderer#lookupSeriesStroke(int)": -0.15958962622971884,
        "org.jfree.chart.renderer$AbstractRenderer#notifyListeners(org.jfree.chart.event.RendererChangeEvent)": 0.1995493369612512,
        "org.jfree.chart.renderer$AbstractRenderer#readObject(java.io.ObjectInputStream)": -0.21853251080451352,
        "org.jfree.chart.renderer$AbstractRenderer#removeChangeListener(org.jfree.chart.event.RendererChangeListener)": 0.197114397165264,
        "org.jfree.chart.renderer$AbstractRenderer#setAutoPopulateSeriesFillPaint(boolean)": -0.023225413982778775,
        "org.jfree.chart.renderer$AbstractRenderer#setAutoPopulateSeriesOutlinePaint(boolean)": -0.023225413982778775,
        "org.jfree.chart.renderer$AbstractRenderer#setAutoPopulateSeriesOutlineStroke(boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setAutoPopulateSeriesPaint(boolean)": -0.023225413982778775,
        "org.jfree.chart.renderer$AbstractRenderer#setAutoPopulateSeriesShape(boolean)": -0.040881516174663846,
        "org.jfree.chart.renderer$AbstractRenderer#setAutoPopulateSeriesStroke(boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseCreateEntities(boolean)": -0.03314780294366223,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseCreateEntities(boolean,boolean)": -0.03314780294366223,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseFillPaint(java.awt.Paint)": -0.03314780294366223,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseFillPaint(java.awt.Paint,boolean)": -0.03314780294366223,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseItemLabelFont(java.awt.Font)": 0.0025386664801487005,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseItemLabelFont(java.awt.Font,boolean)": 0.0025386664801487005,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseItemLabelPaint(java.awt.Paint)": 0.0025386664801487005,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseItemLabelPaint(java.awt.Paint,boolean)": 0.0025386664801487005,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseItemLabelsVisible(boolean)": -0.040881516174663936,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseItemLabelsVisible(boolean,boolean)": -0.040881516174663936,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseLegendShape(java.awt.Shape)": -0.4216680743772659,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseLegendTextFont(java.awt.Font)": -0.040881516174663936,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseLegendTextPaint(java.awt.Paint)": -0.04748228748077153,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseNegativeItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition)": -0.2335200924796732,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseNegativeItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition,boolean)": -0.2335200924796732,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseOutlinePaint(java.awt.Paint)": -0.08099252901602469,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseOutlinePaint(java.awt.Paint,boolean)": -0.08099252901602469,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseOutlineStroke(java.awt.Stroke)": -0.040881516174663936,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseOutlineStroke(java.awt.Stroke,boolean)": -0.040881516174663936,
        "org.jfree.chart.renderer$AbstractRenderer#setBasePaint(java.awt.Paint)": -0.05335904646307371,
        "org.jfree.chart.renderer$AbstractRenderer#setBasePaint(java.awt.Paint,boolean)": -0.05335904646307371,
        "org.jfree.chart.renderer$AbstractRenderer#setBasePositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition)": -0.2335200924796732,
        "org.jfree.chart.renderer$AbstractRenderer#setBasePositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition,boolean)": -0.2335200924796732,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseSeriesVisible(boolean)": -0.03314780294366223,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseSeriesVisible(boolean,boolean)": -0.03314780294366223,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseSeriesVisibleInLegend(boolean)": -0.03314780294366223,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseSeriesVisibleInLegend(boolean,boolean)": -0.03314780294366223,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseShape(java.awt.Shape)": -0.058721517117045194,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseShape(java.awt.Shape,boolean)": -0.058721517117045194,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseStroke(java.awt.Stroke)": -0.040881516174663936,
        "org.jfree.chart.renderer$AbstractRenderer#setBaseStroke(java.awt.Stroke,boolean)": -0.040881516174663936,
        "org.jfree.chart.renderer$AbstractRenderer#setDataBoundsIncludesVisibleSeriesOnly(boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#setDefaultEntityRadius(int)": -0.03314780294366226,
        "org.jfree.chart.renderer$AbstractRenderer#setItemLabelAnchorOffset(double)": -0.02322541398277875,
        "org.jfree.chart.renderer$AbstractRenderer#setLegendShape(int,java.awt.Shape)": -0.03314780294366223,
        "org.jfree.chart.renderer$AbstractRenderer#setLegendTextFont(int,java.awt.Font)": -0.03314780294366223,
        "org.jfree.chart.renderer$AbstractRenderer#setLegendTextPaint(int,java.awt.Paint)": -0.03314780294366223,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesCreateEntities(int,java.lang.Boolean)": -0.03314780294366223,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesCreateEntities(int,java.lang.Boolean,boolean)": -0.03314780294366223,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesFillPaint(int,java.awt.Paint)": -0.04748228748077153,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesFillPaint(int,java.awt.Paint,boolean)": -0.05335904646307371,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesItemLabelFont(int,java.awt.Font)": -0.03314780294366223,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesItemLabelFont(int,java.awt.Font,boolean)": -0.03314780294366223,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesItemLabelPaint(int,java.awt.Paint)": -0.040881516174663936,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesItemLabelPaint(int,java.awt.Paint,boolean)": -0.040881516174663936,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesItemLabelsVisible(int,boolean)": -0.02322541398277875,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesItemLabelsVisible(int,java.lang.Boolean)": -0.04748228748077153,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesItemLabelsVisible(int,java.lang.Boolean,boolean)": -0.04748228748077153,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesNegativeItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition)": -0.040881516174663936,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesNegativeItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition,boolean)": -0.040881516174663936,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesOutlinePaint(int,java.awt.Paint)": -0.04748228748077153,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesOutlinePaint(int,java.awt.Paint,boolean)": -0.05335904646307371,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesOutlineStroke(int,java.awt.Stroke)": -0.04748228748077153,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesOutlineStroke(int,java.awt.Stroke,boolean)": -0.04748228748077153,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesPaint(int,java.awt.Paint)": -0.06369428511586006,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesPaint(int,java.awt.Paint,boolean)": -0.23535136632974052,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesPositiveItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition)": -0.040881516174663936,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesPositiveItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition,boolean)": -0.040881516174663936,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesShape(int,java.awt.Shape)": -0.040881516174663936,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesShape(int,java.awt.Shape,boolean)": -0.12077360391651751,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesStroke(int,java.awt.Stroke)": -0.04748228748077153,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesStroke(int,java.awt.Stroke,boolean)": -0.16883622462555603,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesVisible(int,java.lang.Boolean)": -0.040881516174663936,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesVisible(int,java.lang.Boolean,boolean)": -0.040881516174663936,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesVisibleInLegend(int,java.lang.Boolean)": -0.05335904646307371,
        "org.jfree.chart.renderer$AbstractRenderer#setSeriesVisibleInLegend(int,java.lang.Boolean,boolean)": -0.05335904646307371,
        "org.jfree.chart.renderer$AbstractRenderer#setTreatLegendShapeAsLine(boolean)": 0.0,
        "org.jfree.chart.renderer$AbstractRenderer#writeObject(java.io.ObjectOutputStream)": -0.21853251080451352,
        "org.jfree.chart.renderer$RendererState#RendererState(org.jfree.chart.plot.PlotRenderingInfo)": -0.18423854769894565,
        "org.jfree.chart.renderer$RendererState#getEntityCollection()": -0.149953888022742,
        "org.jfree.chart.renderer$RendererState#getInfo()": -0.10240183266412539,
        "org.jfree.chart.renderer$RendererUtilities#RendererUtilities()": 0.0,
        "org.jfree.chart.renderer$RendererUtilities#findLiveItems(org.jfree.data.xy.XYDataset,int,double,double)": -0.07697162467080897,
        "org.jfree.chart.renderer$RendererUtilities#findLiveItemsLowerBound(org.jfree.data.xy.XYDataset,int,double,double)": -0.08858541777234356,
        "org.jfree.chart.renderer$RendererUtilities#findLiveItemsUpperBound(org.jfree.data.xy.XYDataset,int,double,double)": -0.08858541777234356,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#AbstractCategoryItemRenderer()": -0.47933127321509045,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#addAnnotation(org.jfree.chart.annotations.CategoryAnnotation)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#addAnnotation(org.jfree.chart.annotations.CategoryAnnotation,org.jfree.chart.util.Layer)": -0.02322541398277875,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#addEntity(org.jfree.chart.entity.EntityCollection,java.awt.Shape,org.jfree.data.category.CategoryDataset,int,int,boolean)": -0.040881516174663936,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#addEntity(org.jfree.chart.entity.EntityCollection,java.awt.Shape,org.jfree.data.category.CategoryDataset,int,int,boolean,double,double)": -0.040881516174663936,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#calculateDomainMarkerTextAnchorPoint(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleInsets,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.RectangleAnchor)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#calculateRangeMarkerTextAnchorPoint(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleInsets,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.RectangleAnchor)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#clone()": -0.13460878683821834,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#createState(org.jfree.chart.plot.PlotRenderingInfo)": -0.14496872595721721,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#drawAnnotations(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.util.Layer,org.jfree.chart.plot.PlotRenderingInfo)": -0.15958962622971884,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#drawBackground(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)": -0.15240284524136027,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#drawDomainLine(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,double,java.awt.Paint,java.awt.Stroke)": -0.02322541398277875,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#drawDomainMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.plot.CategoryMarker,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#drawItemLabel(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,org.jfree.data.category.CategoryDataset,int,int,boolean,double,double,boolean)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#drawOutline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)": -0.15240284524136027,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#drawRangeLine(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,java.awt.Paint,java.awt.Stroke)": -0.1548243766248829,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)": -0.03314780294366223,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#equals(java.lang.Object)": -0.2819610032566807,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#findRangeBounds(org.jfree.data.category.CategoryDataset)": -0.23167989938015776,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#findRangeBounds(org.jfree.data.category.CategoryDataset,boolean)": -0.24079342151988165,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getBaseItemLabelGenerator()": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getBaseToolTipGenerator()": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getBaseURLGenerator()": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getColumnCount()": -0.13985795596766826,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getDomainAxis(org.jfree.chart.plot.CategoryPlot,int)": -0.12363179132537455,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getDrawingSupplier()": -0.17554903211743156,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getItemLabelGenerator(int,int,boolean)": -0.09909041302239917,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getItemMiddle(java.lang.Comparable,java.lang.Comparable,org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getLegendItem(int,int)": -0.040881516174663936,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getLegendItemLabelGenerator()": -0.16425784449375813,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getLegendItemToolTipGenerator()": -0.16425784449375813,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getLegendItemURLGenerator()": -0.16425784449375813,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getLegendItems()": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getPassCount()": -0.12920609670946326,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getPlot()": -0.17554903211743156,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getRangeAxis(org.jfree.chart.plot.CategoryPlot,int)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getRowCount()": -0.08099252901602472,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getSeriesItemLabelGenerator(int)": -0.02322541398277875,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getSeriesToolTipGenerator(int)": -0.08858541777234356,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getSeriesURLGenerator(int)": -0.02322541398277875,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getToolTipGenerator(int,int,boolean)": -0.08858541777234356,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#getURLGenerator(int,int,boolean)": -0.08858541777234356,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#hashCode()": -0.11187539050221756,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)": -0.14496872595721724,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation)": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#removeAnnotations()": 0.0,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setBaseItemLabelGenerator(org.jfree.chart.labels.CategoryItemLabelGenerator)": -0.05335904646307371,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setBaseItemLabelGenerator(org.jfree.chart.labels.CategoryItemLabelGenerator,boolean)": -0.05335904646307371,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setBaseToolTipGenerator(org.jfree.chart.labels.CategoryToolTipGenerator)": -0.1905798092424695,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setBaseToolTipGenerator(org.jfree.chart.labels.CategoryToolTipGenerator,boolean)": -0.1905798092424695,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.CategoryURLGenerator)": -0.16883622462555603,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.CategoryURLGenerator,boolean)": -0.16883622462555603,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setLegendItemLabelGenerator(org.jfree.chart.labels.CategorySeriesLabelGenerator)": -0.03314780294366223,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setLegendItemToolTipGenerator(org.jfree.chart.labels.CategorySeriesLabelGenerator)": -0.03314780294366223,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setLegendItemURLGenerator(org.jfree.chart.labels.CategorySeriesLabelGenerator)": -0.03314780294366223,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setPlot(org.jfree.chart.plot.CategoryPlot)": -0.2803182073762154,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setSeriesItemLabelGenerator(int,org.jfree.chart.labels.CategoryItemLabelGenerator)": -0.04748228748077153,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setSeriesItemLabelGenerator(int,org.jfree.chart.labels.CategoryItemLabelGenerator,boolean)": -0.04748228748077153,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setSeriesToolTipGenerator(int,org.jfree.chart.labels.CategoryToolTipGenerator)": -0.08099252901602469,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setSeriesToolTipGenerator(int,org.jfree.chart.labels.CategoryToolTipGenerator,boolean)": -0.08099252901602469,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setSeriesURLGenerator(int,org.jfree.chart.urls.CategoryURLGenerator)": -0.08485741089496995,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#setSeriesURLGenerator(int,org.jfree.chart.urls.CategoryURLGenerator,boolean)": -0.08485741089496995,
        "org.jfree.chart.renderer.category$AbstractCategoryItemRenderer#updateCrosshairValues(org.jfree.chart.plot.CategoryCrosshairState,java.lang.Comparable,java.lang.Comparable,double,int,double,double,org.jfree.chart.plot.PlotOrientation)": -0.058721517117045194,
        "org.jfree.chart.renderer.category$BarRenderer#<clinit>()": 1.3839023843489393,
        "org.jfree.chart.renderer.category$BarRenderer#BarRenderer()": -0.34238045500088676,
        "org.jfree.chart.renderer.category$BarRenderer#calculateBarL0L1(double)": -0.040881516174663936,
        "org.jfree.chart.renderer.category$BarRenderer#calculateBarW0(org.jfree.chart.plot.CategoryPlot,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.renderer.category.CategoryItemRendererState,int,int)": -0.04748228748077153,
        "org.jfree.chart.renderer.category$BarRenderer#calculateBarWidth(org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,int,org.jfree.chart.renderer.category.CategoryItemRendererState)": -0.08099252901602469,
        "org.jfree.chart.renderer.category$BarRenderer#calculateLabelAnchorPoint(org.jfree.chart.labels.ItemLabelAnchor,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#calculateSeriesWidth(double,org.jfree.chart.axis.CategoryAxis,int,int)": -0.04748228748077153,
        "org.jfree.chart.renderer.category$BarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,boolean,int)": -0.03314780294366223,
        "org.jfree.chart.renderer.category$BarRenderer#drawItemLabelForBar(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.data.category.CategoryDataset,int,int,boolean,org.jfree.chart.labels.CategoryItemLabelGenerator,java.awt.geom.Rectangle2D,boolean)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#equals(java.lang.Object)": -0.19882458189082772,
        "org.jfree.chart.renderer.category$BarRenderer#findRangeBounds(org.jfree.data.category.CategoryDataset,boolean)": -0.17554903211743156,
        "org.jfree.chart.renderer.category$BarRenderer#getBarPainter()": -0.047482287480771435,
        "org.jfree.chart.renderer.category$BarRenderer#getBase()": -0.05872151711704521,
        "org.jfree.chart.renderer.category$BarRenderer#getDefaultBarPainter()": -0.34238045500088676,
        "org.jfree.chart.renderer.category$BarRenderer#getDefaultShadowsVisible()": -0.34238045500088676,
        "org.jfree.chart.renderer.category$BarRenderer#getGradientPaintTransformer()": -0.06369428511586017,
        "org.jfree.chart.renderer.category$BarRenderer#getIncludeBaseInRange()": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#getItemMargin()": -0.05872151711704521,
        "org.jfree.chart.renderer.category$BarRenderer#getLegendItem(int,int)": -0.10563216592227084,
        "org.jfree.chart.renderer.category$BarRenderer#getLowerClip()": -0.0727706204939782,
        "org.jfree.chart.renderer.category$BarRenderer#getMaximumBarWidth()": -0.09569017516582456,
        "org.jfree.chart.renderer.category$BarRenderer#getMinimumBarLength()": -0.05335904646307377,
        "org.jfree.chart.renderer.category$BarRenderer#getNegativeItemLabelPositionFallback()": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#getPositiveItemLabelPositionFallback()": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#getShadowPaint()": -0.05335904646307377,
        "org.jfree.chart.renderer.category$BarRenderer#getShadowXOffset()": -0.05335904646307377,
        "org.jfree.chart.renderer.category$BarRenderer#getShadowYOffset()": -0.05335904646307377,
        "org.jfree.chart.renderer.category$BarRenderer#getShadowsVisible()": -0.05335904646307377,
        "org.jfree.chart.renderer.category$BarRenderer#getUpperClip()": -0.0727706204939782,
        "org.jfree.chart.renderer.category$BarRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)": -0.09569017516582462,
        "org.jfree.chart.renderer.category$BarRenderer#isDrawBarOutline()": -0.10878808397177675,
        "org.jfree.chart.renderer.category$BarRenderer#isInternalAnchor(org.jfree.chart.labels.ItemLabelAnchor)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#readObject(java.io.ObjectInputStream)": -0.10878808397177664,
        "org.jfree.chart.renderer.category$BarRenderer#setBarPainter(org.jfree.chart.renderer.category.BarPainter)": -0.14747628571562693,
        "org.jfree.chart.renderer.category$BarRenderer#setBase(double)": -0.02322541398277875,
        "org.jfree.chart.renderer.category$BarRenderer#setDefaultBarPainter(org.jfree.chart.renderer.category.BarPainter)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#setDefaultShadowsVisible(boolean)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer#setDrawBarOutline(boolean)": -0.02322541398277875,
        "org.jfree.chart.renderer.category$BarRenderer#setGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)": -0.07697162467080897,
        "org.jfree.chart.renderer.category$BarRenderer#setIncludeBaseInRange(boolean)": -0.08485741089496995,
        "org.jfree.chart.renderer.category$BarRenderer#setItemMargin(double)": -0.02322541398277875,
        "org.jfree.chart.renderer.category$BarRenderer#setMaximumBarWidth(double)": -0.02322541398277875,
        "org.jfree.chart.renderer.category$BarRenderer#setMinimumBarLength(double)": -0.07697162467080897,
        "org.jfree.chart.renderer.category$BarRenderer#setNegativeItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)": -0.10563216592227084,
        "org.jfree.chart.renderer.category$BarRenderer#setPositiveItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)": -0.10563216592227084,
        "org.jfree.chart.renderer.category$BarRenderer#setShadowPaint(java.awt.Paint)": -0.14496872595721724,
        "org.jfree.chart.renderer.category$BarRenderer#setShadowVisible(boolean)": -0.14496872595721724,
        "org.jfree.chart.renderer.category$BarRenderer#setShadowXOffset(double)": -0.02322541398277875,
        "org.jfree.chart.renderer.category$BarRenderer#setShadowYOffset(double)": -0.02322541398277875,
        "org.jfree.chart.renderer.category$BarRenderer#writeObject(java.io.ObjectOutputStream)": -0.10878808397177664,
        "org.jfree.chart.renderer.category$BarRenderer3D#<clinit>()": 1.5001024773442637,
        "org.jfree.chart.renderer.category$BarRenderer3D#BarRenderer3D()": -0.149953888022742,
        "org.jfree.chart.renderer.category$BarRenderer3D#BarRenderer3D(double,double)": -0.15240284524136027,
        "org.jfree.chart.renderer.category$BarRenderer3D#drawBackground(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)": -0.03314780294366223,
        "org.jfree.chart.renderer.category$BarRenderer3D#drawDomainGridline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,double)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer3D#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,boolean,int)": -0.02322541398277875,
        "org.jfree.chart.renderer.category$BarRenderer3D#drawOutline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)": -0.03314780294366223,
        "org.jfree.chart.renderer.category$BarRenderer3D#drawRangeGridline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer3D#drawRangeLine(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,java.awt.Paint,java.awt.Stroke)": -0.03314780294366223,
        "org.jfree.chart.renderer.category$BarRenderer3D#drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.renderer.category$BarRenderer3D#equals(java.lang.Object)": -0.06835852491775252,
        "org.jfree.chart.renderer.category$BarRenderer3D#getWallPaint()": -0.03314780294366226,
        "org.jfree.chart.renderer.category$BarRenderer3D#getXOffset()": -0.03314780294366226,
        "org.jfree.chart.renderer.category$BarRenderer3D#getYOffset()": -0.03314780294366226,
        "org.jfree.chart.renderer.category$BarRenderer3D#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)": -0.03314780294366223,
        "org.jfree.chart.renderer.category$BarRenderer3D#readObject(java.io.ObjectInputStream)": -0.03314780294366223,
        "org.jfree.chart.renderer.category$BarRenderer3D#setWallPaint(java.awt.Paint)": -0.07697162467080897,
        "org.jfree.chart.renderer.category$BarRenderer3D#writeObject(java.io.ObjectOutputStream)": -0.03314780294366223,
        "org.jfree.chart.renderer.category$GradientBarPainter#GradientBarPainter()": 1.3839023843489393,
        "org.jfree.chart.renderer.category$GradientBarPainter#GradientBarPainter(double,double,double)": 0.03292619430079269,
        "org.jfree.chart.renderer.category$GradientBarPainter#createShadow(java.awt.geom.RectangularShape,double,double,org.jfree.chart.util.RectangleEdge,boolean)": -0.05335904646307371,
        "org.jfree.chart.renderer.category$GradientBarPainter#equals(java.lang.Object)": -0.2107914773769588,
        "org.jfree.chart.renderer.category$GradientBarPainter#hashCode()": -0.023225413982778775,
        "org.jfree.chart.renderer.category$GradientBarPainter#paintBar(java.awt.Graphics2D,org.jfree.chart.renderer.category.BarRenderer,int,int,boolean,java.awt.geom.RectangularShape,org.jfree.chart.util.RectangleEdge)": -0.058721517117045194,
        "org.jfree.chart.renderer.category$GradientBarPainter#paintBarShadow(java.awt.Graphics2D,org.jfree.chart.renderer.category.BarRenderer,int,int,boolean,java.awt.geom.RectangularShape,org.jfree.chart.util.RectangleEdge,boolean)": -0.05335904646307371,
        "org.jfree.chart.renderer.category$GradientBarPainter#splitHorizontalBar(java.awt.geom.RectangularShape,double,double,double)": -0.040881516174663846,
        "org.jfree.chart.renderer.category$GradientBarPainter#splitVerticalBar(java.awt.geom.RectangularShape,double,double,double)": -0.040881516174663846,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#AbstractXYItemRenderer()": 0.38499246369394907,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#addAnnotation(org.jfree.chart.annotations.XYAnnotation)": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#addAnnotation(org.jfree.chart.annotations.XYAnnotation,org.jfree.chart.util.Layer)": -0.040881516174663936,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#addEntity(org.jfree.chart.entity.EntityCollection,java.awt.Shape,org.jfree.data.xy.XYDataset,int,int,boolean,double,double)": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#calculateDomainMarkerTextAnchorPoint(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleInsets,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.RectangleAnchor)": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#calculateRangeMarkerTextAnchorPoint(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleInsets,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.RectangleAnchor)": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#clone()": -0.15240284524136027,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#drawAnnotations(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.util.Layer,org.jfree.chart.plot.PlotRenderingInfo)": -0.10563216592227084,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#drawDomainGridLine(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double)": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#drawDomainLine(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,java.awt.Paint,java.awt.Stroke)": -0.10240183266412545,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#drawDomainMarker(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)": -0.02322541398277875,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#drawItemLabel(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,org.jfree.data.xy.XYDataset,int,int,boolean,double,double,boolean)": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#drawRangeLine(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,java.awt.Paint,java.awt.Stroke)": -0.10563216592227084,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)": -0.02322541398277875,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#equals(java.lang.Object)": -0.30754642616014044,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#fillDomainGridBand(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,double)": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#fillRangeGridBand(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,double)": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#findDomainBounds(org.jfree.data.xy.XYDataset)": 0.05368878116681306,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#findDomainBounds(org.jfree.data.xy.XYDataset,boolean)": 0.05368878116681306,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#findRangeBounds(org.jfree.data.xy.XYDataset)": 0.07054439388885442,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#findRangeBounds(org.jfree.data.xy.XYDataset,boolean)": 0.06623489592939188,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#getAnnotations()": -0.1816502540414968,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#getBaseItemLabelGenerator()": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#getBaseToolTipGenerator()": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#getBaseURLGenerator()": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#getDrawingSupplier()": -0.12644166506603402,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#getItemLabelGenerator(int,int,boolean)": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#getLegendItem(int,int)": -0.03314780294366223,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#getLegendItemLabelGenerator()": -0.12077360391651748,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#getLegendItemToolTipGenerator()": -0.12644166506603405,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#getLegendItemURLGenerator()": -0.12644166506603405,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#getLegendItems()": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#getPassCount()": -0.05872151711704521,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#getPlot()": -0.16746068484491958,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#getSeriesItemLabelGenerator(int)": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#getSeriesToolTipGenerator(int)": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#getSeriesURLGenerator(int)": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#getToolTipGenerator(int,int,boolean)": -0.03314780294366223,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#getURLGenerator(int,int,boolean)": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)": -0.03314780294366223,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#removeAnnotation(org.jfree.chart.annotations.XYAnnotation)": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#removeAnnotations()": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#setBaseItemLabelGenerator(org.jfree.chart.labels.XYItemLabelGenerator)": -0.02322541398277875,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#setBaseItemLabelGenerator(org.jfree.chart.labels.XYItemLabelGenerator,boolean)": -0.02322541398277875,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#setBaseToolTipGenerator(org.jfree.chart.labels.XYToolTipGenerator)": 0.48744939125332176,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#setBaseToolTipGenerator(org.jfree.chart.labels.XYToolTipGenerator,boolean)": 0.48744939125332176,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.XYURLGenerator)": 0.5123492390237839,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#setBaseURLGenerator(org.jfree.chart.urls.XYURLGenerator,boolean)": 0.5123492390237839,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#setLegendItemLabelGenerator(org.jfree.chart.labels.XYSeriesLabelGenerator)": -0.040881516174663936,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#setLegendItemToolTipGenerator(org.jfree.chart.labels.XYSeriesLabelGenerator)": -0.040881516174663936,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#setLegendItemURLGenerator(org.jfree.chart.labels.XYSeriesLabelGenerator)": -0.040881516174663936,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#setPlot(org.jfree.chart.plot.XYPlot)": -0.1952386814621647,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#setSeriesItemLabelGenerator(int,org.jfree.chart.labels.XYItemLabelGenerator)": -0.03314780294366223,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#setSeriesItemLabelGenerator(int,org.jfree.chart.labels.XYItemLabelGenerator,boolean)": 0.0,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#setSeriesToolTipGenerator(int,org.jfree.chart.labels.XYToolTipGenerator)": -0.04748228748077153,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#setSeriesToolTipGenerator(int,org.jfree.chart.labels.XYToolTipGenerator,boolean)": -0.04748228748077153,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#setSeriesURLGenerator(int,org.jfree.chart.urls.XYURLGenerator)": -0.02322541398277875,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#setSeriesURLGenerator(int,org.jfree.chart.urls.XYURLGenerator,boolean)": -0.02322541398277875,
        "org.jfree.chart.renderer.xy$AbstractXYItemRenderer#updateCrosshairValues(org.jfree.chart.plot.CrosshairState,double,double,int,int,double,double,org.jfree.chart.plot.PlotOrientation)": -0.09219207433891567,
        "org.jfree.chart.renderer.xy$GradientXYBarPainter#GradientXYBarPainter()": 1.5016317919239301,
        "org.jfree.chart.renderer.xy$GradientXYBarPainter#GradientXYBarPainter(double,double,double)": 0.14975199308815712,
        "org.jfree.chart.renderer.xy$GradientXYBarPainter#createShadow(java.awt.geom.RectangularShape,double,double,org.jfree.chart.util.RectangleEdge,boolean)": -0.02322541398277875,
        "org.jfree.chart.renderer.xy$GradientXYBarPainter#equals(java.lang.Object)": -0.12920609670946326,
        "org.jfree.chart.renderer.xy$GradientXYBarPainter#hashCode()": -0.023225413982778775,
        "org.jfree.chart.renderer.xy$GradientXYBarPainter#paintBar(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYBarRenderer,int,int,boolean,java.awt.geom.RectangularShape,org.jfree.chart.util.RectangleEdge)": -0.02322541398277875,
        "org.jfree.chart.renderer.xy$GradientXYBarPainter#paintBarShadow(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYBarRenderer,int,int,boolean,java.awt.geom.RectangularShape,org.jfree.chart.util.RectangleEdge,boolean)": -0.02322541398277875,
        "org.jfree.chart.renderer.xy$GradientXYBarPainter#splitHorizontalBar(java.awt.geom.RectangularShape,double,double,double)": 0.0,
        "org.jfree.chart.renderer.xy$GradientXYBarPainter#splitVerticalBar(java.awt.geom.RectangularShape,double,double,double)": -0.023225413982778775,
        "org.jfree.chart.renderer.xy$XYAreaRenderer#XYAreaRenderer()": -0.06369428511586006,
        "org.jfree.chart.renderer.xy$XYAreaRenderer#XYAreaRenderer(int)": -0.06369428511586006,
        "org.jfree.chart.renderer.xy$XYAreaRenderer#XYAreaRenderer(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)": -0.09219207433891567,
        "org.jfree.chart.renderer.xy$XYAreaRenderer#clone()": -0.03314780294366223,
        "org.jfree.chart.renderer.xy$XYAreaRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,boolean,int)": -0.02322541398277875,
        "org.jfree.chart.renderer.xy$XYAreaRenderer#equals(java.lang.Object)": -0.06835852491775252,
        "org.jfree.chart.renderer.xy$XYAreaRenderer#getGradientTransformer()": 0.0,
        "org.jfree.chart.renderer.xy$XYAreaRenderer#getLegendArea()": 0.0,
        "org.jfree.chart.renderer.xy$XYAreaRenderer#getLegendItem(int,int)": -0.04748228748077153,
        "org.jfree.chart.renderer.xy$XYAreaRenderer#getPlotArea()": -0.040881516174663846,
        "org.jfree.chart.renderer.xy$XYAreaRenderer#getPlotLines()": -0.040881516174663846,
        "org.jfree.chart.renderer.xy$XYAreaRenderer#getPlotShapes()": -0.040881516174663846,
        "org.jfree.chart.renderer.xy$XYAreaRenderer#getUseFillPaint()": 0.0,
        "org.jfree.chart.renderer.xy$XYAreaRenderer#hashCode()": -0.03314780294366223,
        "org.jfree.chart.renderer.xy$XYAreaRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)": -0.02322541398277875,
        "org.jfree.chart.renderer.xy$XYAreaRenderer#isOutline()": -0.03314780294366226,
        "org.jfree.chart.renderer.xy$XYAreaRenderer#readObject(java.io.ObjectInputStream)": -0.03314780294366223,
        "org.jfree.chart.renderer.xy$XYAreaRenderer#setGradientTransformer(org.jfree.chart.util.GradientPaintTransformer)": 0.0,
        "org.jfree.chart.renderer.xy$XYAreaRenderer#setLegendArea(java.awt.Shape)": -0.03314780294366223,
        "org.jfree.chart.renderer.xy$XYAreaRenderer#setOutline(boolean)": -0.02322541398277875,
        "org.jfree.chart.renderer.xy$XYAreaRenderer#setUseFillPaint(boolean)": 0.0,
        "org.jfree.chart.renderer.xy$XYAreaRenderer#writeObject(java.io.ObjectOutputStream)": -0.03314780294366223,
        "org.jfree.chart.renderer.xy$XYAreaRenderer$XYAreaRendererState#XYAreaRenderer$XYAreaRendererState(org.jfree.chart.plot.PlotRenderingInfo)": -0.02322541398277875,
        "org.jfree.chart.renderer.xy$XYBarRenderer#<clinit>()": -0.14496872595721724,
        "org.jfree.chart.renderer.xy$XYBarRenderer#XYBarRenderer()": -0.10563216592227084,
        "org.jfree.chart.renderer.xy$XYBarRenderer#XYBarRenderer(double)": -0.14496872595721724,
        "org.jfree.chart.renderer.xy$XYBarRenderer#calculateLabelAnchorPoint(org.jfree.chart.labels.ItemLabelAnchor,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation)": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#clone()": -0.06835852491775252,
        "org.jfree.chart.renderer.xy$XYBarRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,boolean,int)": -0.02322541398277875,
        "org.jfree.chart.renderer.xy$XYBarRenderer#drawItemLabelForBar(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,boolean,org.jfree.chart.labels.XYItemLabelGenerator,java.awt.geom.Rectangle2D,boolean)": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#equals(java.lang.Object)": -0.11187539050221756,
        "org.jfree.chart.renderer.xy$XYBarRenderer#findDomainBounds(org.jfree.data.xy.XYDataset)": -0.07277062049397834,
        "org.jfree.chart.renderer.xy$XYBarRenderer#findRangeBounds(org.jfree.data.xy.XYDataset)": -0.058721517117045194,
        "org.jfree.chart.renderer.xy$XYBarRenderer#getBarAlignmentFactor()": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#getBarPainter()": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#getBase()": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#getDefaultBarPainter()": -0.14496872595721724,
        "org.jfree.chart.renderer.xy$XYBarRenderer#getDefaultShadowsVisible()": -0.14496872595721724,
        "org.jfree.chart.renderer.xy$XYBarRenderer#getGradientPaintTransformer()": -0.03314780294366226,
        "org.jfree.chart.renderer.xy$XYBarRenderer#getLegendBar()": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#getLegendItem(int,int)": -0.03314780294366223,
        "org.jfree.chart.renderer.xy$XYBarRenderer#getMargin()": -0.023225413982778775,
        "org.jfree.chart.renderer.xy$XYBarRenderer#getNegativeItemLabelPositionFallback()": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#getPositiveItemLabelPositionFallback()": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#getShadowXOffset()": -0.023225413982778775,
        "org.jfree.chart.renderer.xy$XYBarRenderer#getShadowYOffset()": -0.023225413982778775,
        "org.jfree.chart.renderer.xy$XYBarRenderer#getShadowsVisible()": -0.023225413982778775,
        "org.jfree.chart.renderer.xy$XYBarRenderer#getUseYInterval()": -0.023225413982778775,
        "org.jfree.chart.renderer.xy$XYBarRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)": -0.02322541398277875,
        "org.jfree.chart.renderer.xy$XYBarRenderer#isDrawBarOutline()": -0.03314780294366226,
        "org.jfree.chart.renderer.xy$XYBarRenderer#isInternalAnchor(org.jfree.chart.labels.ItemLabelAnchor)": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#readObject(java.io.ObjectInputStream)": -0.05335904646307371,
        "org.jfree.chart.renderer.xy$XYBarRenderer#setBarAlignmentFactor(double)": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#setBarPainter(org.jfree.chart.renderer.xy.XYBarPainter)": -0.05335904646307371,
        "org.jfree.chart.renderer.xy$XYBarRenderer#setBase(double)": -0.02322541398277875,
        "org.jfree.chart.renderer.xy$XYBarRenderer#setDefaultBarPainter(org.jfree.chart.renderer.xy.XYBarPainter)": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#setDefaultShadowsVisible(boolean)": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer#setDrawBarOutline(boolean)": -0.02322541398277875,
        "org.jfree.chart.renderer.xy$XYBarRenderer#setGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)": -0.02322541398277875,
        "org.jfree.chart.renderer.xy$XYBarRenderer#setLegendBar(java.awt.Shape)": -0.03314780294366223,
        "org.jfree.chart.renderer.xy$XYBarRenderer#setMargin(double)": -0.02322541398277875,
        "org.jfree.chart.renderer.xy$XYBarRenderer#setNegativeItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)": -0.06835852491775252,
        "org.jfree.chart.renderer.xy$XYBarRenderer#setPositiveItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)": -0.07277062049397834,
        "org.jfree.chart.renderer.xy$XYBarRenderer#setShadowVisible(boolean)": -0.05335904646307371,
        "org.jfree.chart.renderer.xy$XYBarRenderer#setShadowXOffset(double)": -0.02322541398277875,
        "org.jfree.chart.renderer.xy$XYBarRenderer#setShadowYOffset(double)": -0.02322541398277875,
        "org.jfree.chart.renderer.xy$XYBarRenderer#setUseYInterval(boolean)": -0.03314780294366223,
        "org.jfree.chart.renderer.xy$XYBarRenderer#writeObject(java.io.ObjectOutputStream)": -0.05335904646307371,
        "org.jfree.chart.renderer.xy$XYBarRenderer$XYBarRendererState#XYBarRenderer$XYBarRendererState(org.jfree.chart.renderer.xy.XYBarRenderer,org.jfree.chart.plot.PlotRenderingInfo)": -0.02322541398277875,
        "org.jfree.chart.renderer.xy$XYBarRenderer$XYBarRendererState#getG2Base()": 0.0,
        "org.jfree.chart.renderer.xy$XYBarRenderer$XYBarRendererState#setG2Base(double)": -0.023225413982778775,
        "org.jfree.chart.renderer.xy$XYItemRendererState#XYItemRendererState(org.jfree.chart.plot.PlotRenderingInfo)": -0.09219207433891567,
        "org.jfree.chart.renderer.xy$XYItemRendererState#endSeriesPass(org.jfree.data.xy.XYDataset,int,int,int,int,int)": -0.09219207433891574,
        "org.jfree.chart.renderer.xy$XYItemRendererState#getCrosshairState()": -0.07697162467080898,
        "org.jfree.chart.renderer.xy$XYItemRendererState#getFirstItemIndex()": 0.0,
        "org.jfree.chart.renderer.xy$XYItemRendererState#getLastItemIndex()": 0.0,
        "org.jfree.chart.renderer.xy$XYItemRendererState#getProcessVisibleItemsOnly()": -0.09219207433891574,
        "org.jfree.chart.renderer.xy$XYItemRendererState#getSelectionState()": -0.09219207433891574,
        "org.jfree.chart.renderer.xy$XYItemRendererState#setCrosshairState(org.jfree.chart.plot.XYCrosshairState)": 0.0,
        "org.jfree.chart.renderer.xy$XYItemRendererState#setProcessVisibleItemsOnly(boolean)": -0.047482287480771435,
        "org.jfree.chart.renderer.xy$XYItemRendererState#setSelectionState(org.jfree.data.xy.XYDatasetSelectionState)": 0.0,
        "org.jfree.chart.renderer.xy$XYItemRendererState#startSeriesPass(org.jfree.data.xy.XYDataset,int,int,int,int,int)": -0.09219207433891574,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#XYLineAndShapeRenderer()": 0.3336163690405531,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#XYLineAndShapeRenderer(boolean,boolean)": 0.3608081635139072,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#clone()": -0.06369428511586006,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,boolean,int)": -0.04748228748077153,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#drawPrimaryLine(org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,boolean,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D)": -0.04748228748077153,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#drawPrimaryLineAsPath(org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,boolean,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#drawShape1(java.awt.Graphics2D,int,int,int,boolean,java.awt.Shape)": -0.03314780294366223,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#drawShape2(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,boolean,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.CrosshairState,org.jfree.chart.entity.EntityCollection)": -0.04748228748077153,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#equals(java.lang.Object)": -0.14242979300585173,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#getBaseLinesVisible()": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#getBaseShapesFilled()": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#getBaseShapesVisible()": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#getDrawOutlines()": -0.023225413982778775,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#getDrawSeriesLineAsPath()": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#getItemLineVisible(int,int)": -0.06835852491775252,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#getItemShapeFilled(int,int)": -0.06835852491775252,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#getItemShapeVisible(int,int)": -0.06835852491775252,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#getLegendItem(int,int)": -0.06835852491775252,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#getLegendLine()": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#getPassCount()": -0.05872151711704521,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#getSeriesLinesVisible(int)": -0.06835852491775252,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#getSeriesShapesFilled(int)": -0.06835852491775252,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#getSeriesShapesVisible(int)": -0.06835852491775252,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#getUseFillPaint()": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#getUseOutlinePaint()": -0.03314780294366226,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)": -0.058721517117045194,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#isItemPass(int)": -0.047482287480771435,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#isLinePass(int)": -0.047482287480771435,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#readObject(java.io.ObjectInputStream)": -0.07277062049397834,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#setBaseLinesVisible(boolean)": -0.02322541398277875,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#setBaseShapesFilled(boolean)": -0.02322541398277875,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#setBaseShapesVisible(boolean)": 0.4127341298384275,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#setDrawOutlines(boolean)": -0.02322541398277875,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#setDrawSeriesLineAsPath(boolean)": -0.058721517117045194,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#setLegendLine(java.awt.Shape)": -0.040881516174663936,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#setSeriesLinesVisible(int,boolean)": -0.03314780294366223,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#setSeriesLinesVisible(int,java.lang.Boolean)": -0.03314780294366223,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#setSeriesShapesFilled(int,boolean)": -0.03314780294366223,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#setSeriesShapesFilled(int,java.lang.Boolean)": -0.03314780294366223,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#setSeriesShapesVisible(int,boolean)": -0.03314780294366223,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#setSeriesShapesVisible(int,java.lang.Boolean)": -0.03314780294366223,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#setUseFillPaint(boolean)": -0.02322541398277875,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#setUseOutlinePaint(boolean)": -0.02322541398277875,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer#writeObject(java.io.ObjectOutputStream)": -0.07277062049397834,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer$State#XYLineAndShapeRenderer$State(org.jfree.chart.plot.PlotRenderingInfo)": -0.058721517117045194,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer$State#isLastPointGood()": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer$State#setLastPointGood(boolean)": 0.0,
        "org.jfree.chart.renderer.xy$XYLineAndShapeRenderer$State#startSeriesPass(org.jfree.data.xy.XYDataset,int,int,int,int,int)": -0.058721517117045194,
        "org.jfree.chart.renderer.xy$XYStepAreaRenderer#XYStepAreaRenderer()": -0.058721517117045194,
        "org.jfree.chart.renderer.xy$XYStepAreaRenderer#XYStepAreaRenderer(int)": -0.058721517117045194,
        "org.jfree.chart.renderer.xy$XYStepAreaRenderer#XYStepAreaRenderer(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)": 0.4223711376391348,
        "org.jfree.chart.renderer.xy$XYStepAreaRenderer#clone()": -0.02322541398277875,
        "org.jfree.chart.renderer.xy$XYStepAreaRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,boolean,int)": -0.02322541398277875,
        "org.jfree.chart.renderer.xy$XYStepAreaRenderer#equals(java.lang.Object)": -0.04748228748077153,
        "org.jfree.chart.renderer.xy$XYStepAreaRenderer#getPlotArea()": -0.023225413982778775,
        "org.jfree.chart.renderer.xy$XYStepAreaRenderer#getRangeBase()": -0.023225413982778775,
        "org.jfree.chart.renderer.xy$XYStepAreaRenderer#getShapesVisible()": -0.023225413982778775,
        "org.jfree.chart.renderer.xy$XYStepAreaRenderer#initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)": -0.02322541398277875,
        "org.jfree.chart.renderer.xy$XYStepAreaRenderer#isOutline()": -0.023225413982778775,
        "org.jfree.chart.renderer.xy$XYStepAreaRenderer#isShapesFilled()": 0.0,
        "org.jfree.chart.renderer.xy$XYStepAreaRenderer#restrictValueToDataArea(double,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D)": -0.02322541398277875,
        "org.jfree.chart.renderer.xy$XYStepAreaRenderer#setOutline(boolean)": -0.02322541398277875,
        "org.jfree.chart.renderer.xy$XYStepAreaRenderer#setPlotArea(boolean)": -0.02322541398277875,
        "org.jfree.chart.renderer.xy$XYStepAreaRenderer#setRangeBase(double)": -0.02322541398277875,
        "org.jfree.chart.renderer.xy$XYStepAreaRenderer#setShapesFilled(boolean)": -0.02322541398277875,
        "org.jfree.chart.renderer.xy$XYStepAreaRenderer#setShapesVisible(boolean)": -0.02322541398277875,
        "org.jfree.chart.renderer.xy$XYStepRenderer#XYStepRenderer()": -0.06369428511586006,
        "org.jfree.chart.renderer.xy$XYStepRenderer#XYStepRenderer(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)": 0.41739836964031996,
        "org.jfree.chart.renderer.xy$XYStepRenderer#clone()": -0.02322541398277875,
        "org.jfree.chart.renderer.xy$XYStepRenderer#drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,boolean,int)": -0.03314780294366223,
        "org.jfree.chart.renderer.xy$XYStepRenderer#drawLine(java.awt.Graphics2D,java.awt.geom.Line2D,double,double,double,double)": -0.03314780294366226,
        "org.jfree.chart.renderer.xy$XYStepRenderer#equals(java.lang.Object)": -0.04748228748077153,
        "org.jfree.chart.renderer.xy$XYStepRenderer#getStepPoint()": -0.03314780294366226,
        "org.jfree.chart.renderer.xy$XYStepRenderer#hashCode()": -0.02322541398277875,
        "org.jfree.chart.renderer.xy$XYStepRenderer#setStepPoint(double)": -0.040881516174663936,
        "org.jfree.chart.resources$JFreeChartResources#<clinit>()": -0.3282844721838966,
        "org.jfree.chart.resources$JFreeChartResources#JFreeChartResources()": -0.3282844721838966,
        "org.jfree.chart.resources$JFreeChartResources#getContents()": -0.0021481542494109357,
        "org.jfree.chart.text$G2TextMeasurer#G2TextMeasurer(java.awt.Graphics2D)": -0.1884818021668302,
        "org.jfree.chart.text$G2TextMeasurer#getStringWidth(java.lang.String,int,int)": -0.18848180216683022,
        "org.jfree.chart.text$TextAnchor#<clinit>()": -0.015129076885706971,
        "org.jfree.chart.text$TextAnchor#TextAnchor(java.lang.String)": -0.6729023389475561,
        "org.jfree.chart.text$TextAnchor#equals(java.lang.Object)": -0.4373978389914317,
        "org.jfree.chart.text$TextAnchor#hashCode()": -0.06369428511586017,
        "org.jfree.chart.text$TextAnchor#readResolve()": -0.25320997272164997,
        "org.jfree.chart.text$TextAnchor#toString()": 0.0,
        "org.jfree.chart.text$TextBlock#TextBlock()": -0.23167989938015776,
        "org.jfree.chart.text$TextBlock#addLine(java.lang.String,java.awt.Font,java.awt.Paint)": -0.22422615817902966,
        "org.jfree.chart.text$TextBlock#addLine(org.jfree.chart.text.TextLine)": -0.2279720133729355,
        "org.jfree.chart.text$TextBlock#calculateBounds(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextBlockAnchor,float,float,double)": -0.149953888022742,
        "org.jfree.chart.text$TextBlock#calculateDimensions(java.awt.Graphics2D)": -0.21274350516707477,
        "org.jfree.chart.text$TextBlock#calculateOffsets(org.jfree.chart.text.TextBlockAnchor,double,double)": -0.21274350516707477,
        "org.jfree.chart.text$TextBlock#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextBlockAnchor)": -0.21274350516707477,
        "org.jfree.chart.text$TextBlock#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextBlockAnchor,float,float,double)": -0.21274350516707477,
        "org.jfree.chart.text$TextBlock#equals(java.lang.Object)": -0.047482287480771435,
        "org.jfree.chart.text$TextBlock#getLastLine()": -0.047482287480771435,
        "org.jfree.chart.text$TextBlock#getLineAlignment()": 0.0,
        "org.jfree.chart.text$TextBlock#getLines()": 0.0,
        "org.jfree.chart.text$TextBlock#hashCode()": -0.023225413982778775,
        "org.jfree.chart.text$TextBlock#setLineAlignment(org.jfree.chart.util.HorizontalAlignment)": -0.13192768416091805,
        "org.jfree.chart.text$TextBlockAnchor#<clinit>()": -0.3669416060672317,
        "org.jfree.chart.text$TextBlockAnchor#TextBlockAnchor(java.lang.String)": -0.3669416060672317,
        "org.jfree.chart.text$TextBlockAnchor#equals(java.lang.Object)": -0.12363179132537461,
        "org.jfree.chart.text$TextBlockAnchor#hashCode()": -0.040881516174663846,
        "org.jfree.chart.text$TextBlockAnchor#readResolve()": -0.09909041302239917,
        "org.jfree.chart.text$TextBlockAnchor#toString()": 0.0,
        "org.jfree.chart.text$TextFragment#<clinit>()": -0.2279720133729355,
        "org.jfree.chart.text$TextFragment#TextFragment(java.lang.String)": 0.0,
        "org.jfree.chart.text$TextFragment#TextFragment(java.lang.String,java.awt.Font)": -0.03314780294366223,
        "org.jfree.chart.text$TextFragment#TextFragment(java.lang.String,java.awt.Font,java.awt.Paint)": -0.22797201337293552,
        "org.jfree.chart.text$TextFragment#TextFragment(java.lang.String,java.awt.Font,java.awt.Paint,float)": -0.2279720133729355,
        "org.jfree.chart.text$TextFragment#calculateBaselineOffset(java.awt.Graphics2D,org.jfree.chart.text.TextAnchor)": -0.21274350516707477,
        "org.jfree.chart.text$TextFragment#calculateDimensions(java.awt.Graphics2D)": -0.21274350516707477,
        "org.jfree.chart.text$TextFragment#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,float,float,double)": -0.21274350516707477,
        "org.jfree.chart.text$TextFragment#equals(java.lang.Object)": -0.05872151711704521,
        "org.jfree.chart.text$TextFragment#getBaselineOffset()": 0.0,
        "org.jfree.chart.text$TextFragment#getFont()": -0.047482287480771435,
        "org.jfree.chart.text$TextFragment#getPaint()": -0.047482287480771435,
        "org.jfree.chart.text$TextFragment#getText()": -0.047482287480771435,
        "org.jfree.chart.text$TextFragment#hashCode()": -0.023225413982778775,
        "org.jfree.chart.text$TextFragment#readObject(java.io.ObjectInputStream)": -0.03314780294366223,
        "org.jfree.chart.text$TextFragment#writeObject(java.io.ObjectOutputStream)": -0.03314780294366223,
        "org.jfree.chart.text$TextLine#TextLine()": 0.0,
        "org.jfree.chart.text$TextLine#TextLine(java.lang.String)": -0.03314780294366223,
        "org.jfree.chart.text$TextLine#TextLine(java.lang.String,java.awt.Font)": -0.03314780294366223,
        "org.jfree.chart.text$TextLine#TextLine(java.lang.String,java.awt.Font,java.awt.Paint)": -0.22422615817902966,
        "org.jfree.chart.text$TextLine#addFragment(org.jfree.chart.text.TextFragment)": -0.047482287480771435,
        "org.jfree.chart.text$TextLine#calculateBaselineOffset(java.awt.Graphics2D,org.jfree.chart.text.TextAnchor)": -0.21274350516707477,
        "org.jfree.chart.text$TextLine#calculateDimensions(java.awt.Graphics2D)": -0.21274350516707477,
        "org.jfree.chart.text$TextLine#draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,float,float,double)": -0.21274350516707477,
        "org.jfree.chart.text$TextLine#equals(java.lang.Object)": -0.03314780294366226,
        "org.jfree.chart.text$TextLine#getFirstTextFragment()": 0.0,
        "org.jfree.chart.text$TextLine#getLastTextFragment()": -0.047482287480771435,
        "org.jfree.chart.text$TextLine#hashCode()": -0.023225413982778775,
        "org.jfree.chart.text$TextLine#removeFragment(org.jfree.chart.text.TextFragment)": -0.047482287480771435,
        "org.jfree.chart.text$TextUtilities#<clinit>()": -0.22044067048052746,
        "org.jfree.chart.text$TextUtilities#TextUtilities()": 0.0,
        "org.jfree.chart.text$TextUtilities#calculateRotatedStringBounds(java.lang.String,java.awt.Graphics2D,float,float,double,float,float)": -0.02322541398277875,
        "org.jfree.chart.text$TextUtilities#calculateRotatedStringBounds(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)": -0.02322541398277875,
        "org.jfree.chart.text$TextUtilities#createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint)": -0.1947308226249881,
        "org.jfree.chart.text$TextUtilities#createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,int,org.jfree.chart.text.TextMeasurer)": -0.18848180216683022,
        "org.jfree.chart.text$TextUtilities#createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,org.jfree.chart.text.TextMeasurer)": -0.03314780294366223,
        "org.jfree.chart.text$TextUtilities#deriveRotationAnchorOffsets(java.awt.Graphics2D,java.lang.String,org.jfree.chart.text.TextAnchor)": -0.2048644501204305,
        "org.jfree.chart.text$TextUtilities#deriveTextBoundsAnchorOffsets(java.awt.Graphics2D,java.lang.String,org.jfree.chart.text.TextAnchor)": -0.21468417828822278,
        "org.jfree.chart.text$TextUtilities#deriveTextBoundsAnchorOffsets(java.awt.Graphics2D,java.lang.String,org.jfree.chart.text.TextAnchor,java.awt.geom.Rectangle2D)": -0.02322541398277875,
        "org.jfree.chart.text$TextUtilities#drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)": -0.02322541398277875,
        "org.jfree.chart.text$TextUtilities#drawRotatedString(java.lang.String,java.awt.Graphics2D,double,float,float)": 0.0,
        "org.jfree.chart.text$TextUtilities#drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,double,float,float)": -0.21468417828822278,
        "org.jfree.chart.text$TextUtilities#drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,float,float)": -0.21274350516707477,
        "org.jfree.chart.text$TextUtilities#drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)": -0.2048644501204305,
        "org.jfree.chart.text$TextUtilities#getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)": -0.21468417828822278,
        "org.jfree.chart.text$TextUtilities#getUseFontMetricsGetStringBounds()": 0.0,
        "org.jfree.chart.text$TextUtilities#isUseDrawRotatedStringWorkaround()": 0.0,
        "org.jfree.chart.text$TextUtilities#nextLineBreak(java.lang.String,int,float,java.text.BreakIterator,org.jfree.chart.text.TextMeasurer)": -0.18848180216683022,
        "org.jfree.chart.text$TextUtilities#setUseDrawRotatedStringWorkaround(boolean)": 0.0,
        "org.jfree.chart.text$TextUtilities#setUseFontMetricsGetStringBounds(boolean)": 0.0,
        "org.jfree.chart.title$LegendGraphic#LegendGraphic(java.awt.Shape,java.awt.Paint)": -0.19882458189082772,
        "org.jfree.chart.title$LegendGraphic#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": -0.18848180216683022,
        "org.jfree.chart.title$LegendGraphic#arrangeNN(java.awt.Graphics2D)": -0.18848180216683022,
        "org.jfree.chart.title$LegendGraphic#clone()": -0.03314780294366223,
        "org.jfree.chart.title$LegendGraphic#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.18848180216683022,
        "org.jfree.chart.title$LegendGraphic#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)": -0.18848180216683022,
        "org.jfree.chart.title$LegendGraphic#equals(java.lang.Object)": -0.05335904646307371,
        "org.jfree.chart.title$LegendGraphic#getFillPaint()": 0.0,
        "org.jfree.chart.title$LegendGraphic#getFillPaintTransformer()": 0.0,
        "org.jfree.chart.title$LegendGraphic#getLine()": -0.08858541777234352,
        "org.jfree.chart.title$LegendGraphic#getLinePaint()": 0.0,
        "org.jfree.chart.title$LegendGraphic#getLineStroke()": 0.0,
        "org.jfree.chart.title$LegendGraphic#getOutlinePaint()": 0.0,
        "org.jfree.chart.title$LegendGraphic#getOutlineStroke()": 0.0,
        "org.jfree.chart.title$LegendGraphic#getShape()": 0.0,
        "org.jfree.chart.title$LegendGraphic#getShapeAnchor()": 0.0,
        "org.jfree.chart.title$LegendGraphic#getShapeLocation()": 0.0,
        "org.jfree.chart.title$LegendGraphic#hashCode()": -0.02322541398277875,
        "org.jfree.chart.title$LegendGraphic#isLineVisible()": -0.023225413982778775,
        "org.jfree.chart.title$LegendGraphic#isShapeFilled()": -0.023225413982778775,
        "org.jfree.chart.title$LegendGraphic#isShapeOutlineVisible()": -0.023225413982778775,
        "org.jfree.chart.title$LegendGraphic#isShapeVisible()": -0.023225413982778775,
        "org.jfree.chart.title$LegendGraphic#readObject(java.io.ObjectInputStream)": -0.02322541398277875,
        "org.jfree.chart.title$LegendGraphic#setFillPaint(java.awt.Paint)": -0.023225413982778775,
        "org.jfree.chart.title$LegendGraphic#setFillPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)": -0.19057980924246953,
        "org.jfree.chart.title$LegendGraphic#setLine(java.awt.Shape)": -0.1926626738632824,
        "org.jfree.chart.title$LegendGraphic#setLinePaint(java.awt.Paint)": -0.19057980924246953,
        "org.jfree.chart.title$LegendGraphic#setLineStroke(java.awt.Stroke)": -0.19057980924246953,
        "org.jfree.chart.title$LegendGraphic#setLineVisible(boolean)": -0.19057980924246953,
        "org.jfree.chart.title$LegendGraphic#setOutlinePaint(java.awt.Paint)": -0.19057980924246953,
        "org.jfree.chart.title$LegendGraphic#setOutlineStroke(java.awt.Stroke)": -0.1926626738632824,
        "org.jfree.chart.title$LegendGraphic#setShape(java.awt.Shape)": -0.023225413982778775,
        "org.jfree.chart.title$LegendGraphic#setShapeAnchor(org.jfree.chart.util.RectangleAnchor)": -0.19057980924246953,
        "org.jfree.chart.title$LegendGraphic#setShapeFilled(boolean)": -0.19057980924246953,
        "org.jfree.chart.title$LegendGraphic#setShapeLocation(org.jfree.chart.util.RectangleAnchor)": -0.19057980924246953,
        "org.jfree.chart.title$LegendGraphic#setShapeOutlineVisible(boolean)": -0.19057980924246953,
        "org.jfree.chart.title$LegendGraphic#setShapeVisible(boolean)": -0.19057980924246953,
        "org.jfree.chart.title$LegendGraphic#writeObject(java.io.ObjectOutputStream)": -0.02322541398277875,
        "org.jfree.chart.title$LegendItemBlockContainer#LegendItemBlockContainer(org.jfree.chart.block.Arrangement,org.jfree.data.general.Dataset,java.lang.Comparable)": -0.18848180216683022,
        "org.jfree.chart.title$LegendItemBlockContainer#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)": -0.18848180216683022,
        "org.jfree.chart.title$LegendItemBlockContainer#getDataset()": 0.0,
        "org.jfree.chart.title$LegendItemBlockContainer#getSeriesKey()": 0.0,
        "org.jfree.chart.title$LegendItemBlockContainer#getToolTipText()": -0.07697162467080898,
        "org.jfree.chart.title$LegendItemBlockContainer#getURLText()": -0.07697162467080898,
        "org.jfree.chart.title$LegendItemBlockContainer#setToolTipText(java.lang.String)": -0.1884818021668302,
        "org.jfree.chart.title$LegendItemBlockContainer#setURLText(java.lang.String)": -0.1884818021668302,
        "org.jfree.chart.title$LegendTitle#<clinit>()": 0.04107939956045721,
        "org.jfree.chart.title$LegendTitle#LegendTitle(org.jfree.chart.LegendItemSource)": 0.04107939956045721,
        "org.jfree.chart.title$LegendTitle#LegendTitle(org.jfree.chart.LegendItemSource,org.jfree.chart.block.Arrangement,org.jfree.chart.block.Arrangement)": 0.04107939956045721,
        "org.jfree.chart.title$LegendTitle#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": -0.21274350516707477,
        "org.jfree.chart.title$LegendTitle#createLegendItemBlock(org.jfree.chart.LegendItem)": -0.18848180216683022,
        "org.jfree.chart.title$LegendTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.title$LegendTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)": -0.21274350516707477,
        "org.jfree.chart.title$LegendTitle#equals(java.lang.Object)": -0.09909041302239917,
        "org.jfree.chart.title$LegendTitle#fetchLegendItems()": -0.21274350516707477,
        "org.jfree.chart.title$LegendTitle#getBackgroundPaint()": -0.17991012192966163,
        "org.jfree.chart.title$LegendTitle#getItemContainer()": 0.0,
        "org.jfree.chart.title$LegendTitle#getItemFont()": 0.0,
        "org.jfree.chart.title$LegendTitle#getItemLabelPadding()": 0.0,
        "org.jfree.chart.title$LegendTitle#getItemPaint()": 0.0,
        "org.jfree.chart.title$LegendTitle#getLegendItemGraphicAnchor()": -0.1884818021668302,
        "org.jfree.chart.title$LegendTitle#getLegendItemGraphicEdge()": 0.0,
        "org.jfree.chart.title$LegendTitle#getLegendItemGraphicLocation()": -0.1884818021668302,
        "org.jfree.chart.title$LegendTitle#getLegendItemGraphicPadding()": 0.0,
        "org.jfree.chart.title$LegendTitle#getSources()": -0.03314780294366226,
        "org.jfree.chart.title$LegendTitle#getWrapper()": -0.17991012192966163,
        "org.jfree.chart.title$LegendTitle#readObject(java.io.ObjectInputStream)": -0.06835852491775252,
        "org.jfree.chart.title$LegendTitle#setBackgroundPaint(java.awt.Paint)": 0.0440654108994223,
        "org.jfree.chart.title$LegendTitle#setItemFont(java.awt.Font)": 0.1443768997430604,
        "org.jfree.chart.title$LegendTitle#setItemLabelPadding(org.jfree.chart.util.RectangleInsets)": 0.0,
        "org.jfree.chart.title$LegendTitle#setItemPaint(java.awt.Paint)": 0.14622619600482395,
        "org.jfree.chart.title$LegendTitle#setLegendItemGraphicAnchor(org.jfree.chart.util.RectangleAnchor)": -0.023225413982778775,
        "org.jfree.chart.title$LegendTitle#setLegendItemGraphicEdge(org.jfree.chart.util.RectangleEdge)": -0.02322541398277875,
        "org.jfree.chart.title$LegendTitle#setLegendItemGraphicLocation(org.jfree.chart.util.RectangleAnchor)": -0.023225413982778775,
        "org.jfree.chart.title$LegendTitle#setLegendItemGraphicPadding(org.jfree.chart.util.RectangleInsets)": 0.0,
        "org.jfree.chart.title$LegendTitle#setSources(org.jfree.chart.LegendItemSource[])": 0.0,
        "org.jfree.chart.title$LegendTitle#setWrapper(org.jfree.chart.block.BlockContainer)": 0.0,
        "org.jfree.chart.title$LegendTitle#writeObject(java.io.ObjectOutputStream)": -0.06835852491775252,
        "org.jfree.chart.title$PaintScaleLegend#PaintScaleLegend(org.jfree.chart.renderer.PaintScale,org.jfree.chart.axis.ValueAxis)": -0.04748228748077153,
        "org.jfree.chart.title$PaintScaleLegend#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": 0.0,
        "org.jfree.chart.title$PaintScaleLegend#arrangeRR(java.awt.Graphics2D,org.jfree.data.Range,org.jfree.data.Range)": 0.0,
        "org.jfree.chart.title$PaintScaleLegend#axisChanged(org.jfree.chart.event.AxisChangeEvent)": -0.04748228748077153,
        "org.jfree.chart.title$PaintScaleLegend#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.title$PaintScaleLegend#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)": 0.0,
        "org.jfree.chart.title$PaintScaleLegend#equals(java.lang.Object)": -0.04748228748077153,
        "org.jfree.chart.title$PaintScaleLegend#getAxis()": 0.0,
        "org.jfree.chart.title$PaintScaleLegend#getAxisLocation()": 0.0,
        "org.jfree.chart.title$PaintScaleLegend#getAxisOffset()": 0.0,
        "org.jfree.chart.title$PaintScaleLegend#getBackgroundPaint()": 0.0,
        "org.jfree.chart.title$PaintScaleLegend#getScale()": 0.0,
        "org.jfree.chart.title$PaintScaleLegend#getStripOutlinePaint()": 0.0,
        "org.jfree.chart.title$PaintScaleLegend#getStripOutlineStroke()": 0.0,
        "org.jfree.chart.title$PaintScaleLegend#getStripWidth()": 0.0,
        "org.jfree.chart.title$PaintScaleLegend#getSubdivisionCount()": 0.0,
        "org.jfree.chart.title$PaintScaleLegend#isStripOutlineVisible()": -0.023225413982778775,
        "org.jfree.chart.title$PaintScaleLegend#readObject(java.io.ObjectInputStream)": -0.02322541398277875,
        "org.jfree.chart.title$PaintScaleLegend#setAxis(org.jfree.chart.axis.ValueAxis)": -0.02322541398277875,
        "org.jfree.chart.title$PaintScaleLegend#setAxisLocation(org.jfree.chart.axis.AxisLocation)": -0.02322541398277875,
        "org.jfree.chart.title$PaintScaleLegend#setAxisOffset(double)": -0.02322541398277875,
        "org.jfree.chart.title$PaintScaleLegend#setBackgroundPaint(java.awt.Paint)": -0.02322541398277875,
        "org.jfree.chart.title$PaintScaleLegend#setScale(org.jfree.chart.renderer.PaintScale)": -0.02322541398277875,
        "org.jfree.chart.title$PaintScaleLegend#setStripOutlinePaint(java.awt.Paint)": -0.02322541398277875,
        "org.jfree.chart.title$PaintScaleLegend#setStripOutlineStroke(java.awt.Stroke)": -0.02322541398277875,
        "org.jfree.chart.title$PaintScaleLegend#setStripOutlineVisible(boolean)": -0.02322541398277875,
        "org.jfree.chart.title$PaintScaleLegend#setStripWidth(double)": -0.02322541398277875,
        "org.jfree.chart.title$PaintScaleLegend#setSubdivisionCount(int)": -0.02322541398277875,
        "org.jfree.chart.title$PaintScaleLegend#writeObject(java.io.ObjectOutputStream)": -0.02322541398277875,
        "org.jfree.chart.title$TextTitle#<clinit>()": 0.06075945698925829,
        "org.jfree.chart.title$TextTitle#TextTitle()": -0.07277062049397834,
        "org.jfree.chart.title$TextTitle#TextTitle(java.lang.String)": -0.12077360391651751,
        "org.jfree.chart.title$TextTitle#TextTitle(java.lang.String,java.awt.Font)": 0.09738698111079942,
        "org.jfree.chart.title$TextTitle#TextTitle(java.lang.String,java.awt.Font,java.awt.Paint,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)": 0.06075945698925829,
        "org.jfree.chart.title$TextTitle#arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)": -0.13192768416091805,
        "org.jfree.chart.title$TextTitle#arrangeFN(java.awt.Graphics2D,double)": 0.0,
        "org.jfree.chart.title$TextTitle#arrangeNN(java.awt.Graphics2D)": 0.0,
        "org.jfree.chart.title$TextTitle#arrangeRN(java.awt.Graphics2D,org.jfree.data.Range)": 0.0,
        "org.jfree.chart.title$TextTitle#arrangeRR(java.awt.Graphics2D,org.jfree.data.Range,org.jfree.data.Range)": -0.13192768416091805,
        "org.jfree.chart.title$TextTitle#clone()": -0.04748228748077153,
        "org.jfree.chart.title$TextTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.title$TextTitle#draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)": -0.13192768416091805,
        "org.jfree.chart.title$TextTitle#drawHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": -0.13192768416091805,
        "org.jfree.chart.title$TextTitle#drawVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.title$TextTitle#equals(java.lang.Object)": -0.14242979300585173,
        "org.jfree.chart.title$TextTitle#getBackgroundPaint()": 0.0,
        "org.jfree.chart.title$TextTitle#getExpandToFitSpace()": -0.023225413982778775,
        "org.jfree.chart.title$TextTitle#getFont()": 0.0,
        "org.jfree.chart.title$TextTitle#getMaximumLinesToDisplay()": 0.0,
        "org.jfree.chart.title$TextTitle#getPaint()": 0.0,
        "org.jfree.chart.title$TextTitle#getText()": 0.0,
        "org.jfree.chart.title$TextTitle#getTextAlignment()": 0.0,
        "org.jfree.chart.title$TextTitle#getToolTipText()": 0.0,
        "org.jfree.chart.title$TextTitle#getURLText()": 0.0,
        "org.jfree.chart.title$TextTitle#hashCode()": -0.05335904646307371,
        "org.jfree.chart.title$TextTitle#readObject(java.io.ObjectInputStream)": -0.08858541777234356,
        "org.jfree.chart.title$TextTitle#setBackgroundPaint(java.awt.Paint)": -0.03314780294366223,
        "org.jfree.chart.title$TextTitle#setExpandToFitSpace(boolean)": -0.02322541398277875,
        "org.jfree.chart.title$TextTitle#setFont(java.awt.Font)": 0.10070087887859343,
        "org.jfree.chart.title$TextTitle#setMaximumLinesToDisplay(int)": -0.02322541398277875,
        "org.jfree.chart.title$TextTitle#setPaint(java.awt.Paint)": 0.10070087887859343,
        "org.jfree.chart.title$TextTitle#setText(java.lang.String)": -0.06369428511586006,
        "org.jfree.chart.title$TextTitle#setTextAlignment(org.jfree.chart.util.HorizontalAlignment)": -0.02322541398277875,
        "org.jfree.chart.title$TextTitle#setToolTipText(java.lang.String)": -0.02322541398277875,
        "org.jfree.chart.title$TextTitle#setURLText(java.lang.String)": -0.02322541398277875,
        "org.jfree.chart.title$TextTitle#writeObject(java.io.ObjectOutputStream)": -0.08858541777234356,
        "org.jfree.chart.title$Title#<clinit>()": -0.03763792955207167,
        "org.jfree.chart.title$Title#Title()": 0.027815173818288255,
        "org.jfree.chart.title$Title#Title(org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment)": 0.0,
        "org.jfree.chart.title$Title#Title(org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)": -0.03763792955207167,
        "org.jfree.chart.title$Title#addChangeListener(org.jfree.chart.event.TitleChangeListener)": 0.011959091875609687,
        "org.jfree.chart.title$Title#clone()": -0.06835852491775252,
        "org.jfree.chart.title$Title#equals(java.lang.Object)": -0.16655784954853112,
        "org.jfree.chart.title$Title#getHorizontalAlignment()": -0.21468417828822295,
        "org.jfree.chart.title$Title#getNotify()": 0.0,
        "org.jfree.chart.title$Title#getPosition()": -0.21468417828822295,
        "org.jfree.chart.title$Title#getVerticalAlignment()": 0.0,
        "org.jfree.chart.title$Title#hashCode()": -0.07277062049397834,
        "org.jfree.chart.title$Title#isVisible()": -0.21468417828822295,
        "org.jfree.chart.title$Title#notifyListeners(org.jfree.chart.event.TitleChangeEvent)": -0.010483435610937328,
        "org.jfree.chart.title$Title#readObject(java.io.ObjectInputStream)": -0.09569017516582456,
        "org.jfree.chart.title$Title#removeChangeListener(org.jfree.chart.event.TitleChangeListener)": -0.02322541398277875,
        "org.jfree.chart.title$Title#setHorizontalAlignment(org.jfree.chart.util.HorizontalAlignment)": -0.02322541398277875,
        "org.jfree.chart.title$Title#setNotify(boolean)": 0.0,
        "org.jfree.chart.title$Title#setPosition(org.jfree.chart.util.RectangleEdge)": 0.04556388652948436,
        "org.jfree.chart.title$Title#setVerticalAlignment(org.jfree.chart.util.VerticalAlignment)": -0.02322541398277875,
        "org.jfree.chart.title$Title#setVisible(boolean)": -0.02322541398277875,
        "org.jfree.chart.title$Title#writeObject(java.io.ObjectOutputStream)": -0.09569017516582456,
        "org.jfree.chart.ui$BasicProjectInfo#BasicProjectInfo()": -0.0021481542494109357,
        "org.jfree.chart.ui$BasicProjectInfo#BasicProjectInfo(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.jfree.chart.ui$BasicProjectInfo#BasicProjectInfo(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.jfree.chart.ui$BasicProjectInfo#addLibrary(org.jfree.chart.ui.Library)": 0.0,
        "org.jfree.chart.ui$BasicProjectInfo#addOptionalLibrary(java.lang.String)": 0.0,
        "org.jfree.chart.ui$BasicProjectInfo#addOptionalLibrary(org.jfree.chart.ui.Library)": 0.0,
        "org.jfree.chart.ui$BasicProjectInfo#getCopyright()": 0.0,
        "org.jfree.chart.ui$BasicProjectInfo#getLibraries()": 0.0,
        "org.jfree.chart.ui$BasicProjectInfo#getOptionalLibraries()": 0.0,
        "org.jfree.chart.ui$BasicProjectInfo#setCopyright(java.lang.String)": -0.3282844721838966,
        "org.jfree.chart.ui$BasicProjectInfo#setInfo(java.lang.String)": -0.0021481542494109357,
        "org.jfree.chart.ui$BasicProjectInfo#setLicenceName(java.lang.String)": -0.0021481542494109357,
        "org.jfree.chart.ui$BasicProjectInfo#setName(java.lang.String)": -0.0021481542494109357,
        "org.jfree.chart.ui$BasicProjectInfo#setVersion(java.lang.String)": -0.0021481542494109357,
        "org.jfree.chart.ui$Contributor#Contributor(java.lang.String,java.lang.String)": -0.3282844721838966,
        "org.jfree.chart.ui$Contributor#getEmail()": 0.0,
        "org.jfree.chart.ui$Contributor#getName()": 0.0,
        "org.jfree.chart.ui$Library#Library()": -0.3282844721838966,
        "org.jfree.chart.ui$Library#Library(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.jfree.chart.ui$Library#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.ui$Library#getInfo()": 0.0,
        "org.jfree.chart.ui$Library#getLicenceName()": 0.0,
        "org.jfree.chart.ui$Library#getName()": 0.0,
        "org.jfree.chart.ui$Library#getVersion()": 0.0,
        "org.jfree.chart.ui$Library#hashCode()": 0.0,
        "org.jfree.chart.ui$Library#setInfo(java.lang.String)": -0.3282844721838966,
        "org.jfree.chart.ui$Library#setLicenceName(java.lang.String)": -0.3282844721838966,
        "org.jfree.chart.ui$Library#setName(java.lang.String)": -0.3282844721838966,
        "org.jfree.chart.ui$Library#setVersion(java.lang.String)": -0.3282844721838966,
        "org.jfree.chart.ui$Licences#Licences()": -0.3282844721838966,
        "org.jfree.chart.ui$Licences#getGPL()": 0.0,
        "org.jfree.chart.ui$Licences#getInstance()": -0.0021481542494109357,
        "org.jfree.chart.ui$Licences#getLGPL()": -0.3282844721838966,
        "org.jfree.chart.ui$ProjectInfo#ProjectInfo()": -0.0021481542494109357,
        "org.jfree.chart.ui$ProjectInfo#ProjectInfo(java.lang.String,java.lang.String,java.lang.String,java.awt.Image,java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.jfree.chart.ui$ProjectInfo#getContributors()": 0.0,
        "org.jfree.chart.ui$ProjectInfo#getLicenceText()": 0.0,
        "org.jfree.chart.ui$ProjectInfo#getLogo()": -0.08099252901602472,
        "org.jfree.chart.ui$ProjectInfo#setContributors(java.util.List)": -0.3282844721838966,
        "org.jfree.chart.ui$ProjectInfo#setLicenceText(java.lang.String)": -0.3282844721838966,
        "org.jfree.chart.ui$ProjectInfo#setLogo(java.awt.Image)": -0.3282844721838966,
        "org.jfree.chart.ui$ProjectInfo#toString()": 0.0,
        "org.jfree.chart.urls$StandardXYURLGenerator#StandardXYURLGenerator()": 0.6821750463875971,
        "org.jfree.chart.urls$StandardXYURLGenerator#StandardXYURLGenerator(java.lang.String)": -0.03314780294366223,
        "org.jfree.chart.urls$StandardXYURLGenerator#StandardXYURLGenerator(java.lang.String,java.lang.String,java.lang.String)": 0.0717451655051906,
        "org.jfree.chart.urls$StandardXYURLGenerator#equals(java.lang.Object)": -0.03314780294366223,
        "org.jfree.chart.urls$StandardXYURLGenerator#generateURL(org.jfree.data.xy.XYDataset,int,int)": 0.0,
        "org.jfree.chart.util$AbstractObjectList#AbstractObjectList()": 0.9917918573240861,
        "org.jfree.chart.util$AbstractObjectList#AbstractObjectList(int)": 0.9917918573240861,
        "org.jfree.chart.util$AbstractObjectList#AbstractObjectList(int,int)": -0.3539945803028187,
        "org.jfree.chart.util$AbstractObjectList#clear()": -0.21917798229035276,
        "org.jfree.chart.util$AbstractObjectList#clone()": -0.2407934215198817,
        "org.jfree.chart.util$AbstractObjectList#equals(java.lang.Object)": -0.5087791431152051,
        "org.jfree.chart.util$AbstractObjectList#get(int)": -0.00884343724381742,
        "org.jfree.chart.util$AbstractObjectList#hashCode()": -0.18209233597250823,
        "org.jfree.chart.util$AbstractObjectList#indexOf(java.lang.Object)": 0.09044144753563821,
        "org.jfree.chart.util$AbstractObjectList#readObject(java.io.ObjectInputStream)": -0.2443799713087157,
        "org.jfree.chart.util$AbstractObjectList#set(int,java.lang.Object)": -0.007603011965893747,
        "org.jfree.chart.util$AbstractObjectList#size()": -0.22906988606419565,
        "org.jfree.chart.util$AbstractObjectList#writeObject(java.io.ObjectOutputStream)": -0.2443799713087157,
        "org.jfree.chart.util$BooleanList#BooleanList()": 0.09650498911507288,
        "org.jfree.chart.util$BooleanList#equals(java.lang.Object)": -0.4604950966890522,
        "org.jfree.chart.util$BooleanList#getBoolean(int)": -0.299684717284328,
        "org.jfree.chart.util$BooleanList#hashCode()": -0.1799290497394833,
        "org.jfree.chart.util$BooleanList#setBoolean(int,java.lang.Boolean)": -0.11489917188014133,
        "org.jfree.chart.util$GradientPaintTransformType#<clinit>()": -0.49538176555014335,
        "org.jfree.chart.util$GradientPaintTransformType#GradientPaintTransformType(java.lang.String)": -0.49538176555014335,
        "org.jfree.chart.util$GradientPaintTransformType#equals(java.lang.Object)": -0.14496872595721721,
        "org.jfree.chart.util$GradientPaintTransformType#hashCode()": -0.023225413982778775,
        "org.jfree.chart.util$GradientPaintTransformType#readResolve()": -0.14242979300585173,
        "org.jfree.chart.util$GradientPaintTransformType#toString()": 0.0,
        "org.jfree.chart.util$HorizontalAlignment#<clinit>()": -0.06134103986821353,
        "org.jfree.chart.util$HorizontalAlignment#HorizontalAlignment(java.lang.String)": -0.38747735780269926,
        "org.jfree.chart.util$HorizontalAlignment#equals(java.lang.Object)": -0.1118753905022174,
        "org.jfree.chart.util$HorizontalAlignment#hashCode()": -0.0727706204939782,
        "org.jfree.chart.util$HorizontalAlignment#readResolve()": -0.11187539050221756,
        "org.jfree.chart.util$HorizontalAlignment#toString()": 0.0,
        "org.jfree.chart.util$Layer#<clinit>()": -0.23535136632974052,
        "org.jfree.chart.util$Layer#Layer(java.lang.String)": -0.23535136632974063,
        "org.jfree.chart.util$Layer#equals(java.lang.Object)": -0.2068522430598596,
        "org.jfree.chart.util$Layer#hashCode()": 0.0,
        "org.jfree.chart.util$Layer#readResolve()": 0.0,
        "org.jfree.chart.util$Layer#toString()": 0.0,
        "org.jfree.chart.util$LengthAdjustmentType#<clinit>()": -0.1777481410776118,
        "org.jfree.chart.util$LengthAdjustmentType#LengthAdjustmentType(java.lang.String)": -0.17774814107761183,
        "org.jfree.chart.util$LengthAdjustmentType#equals(java.lang.Object)": -0.09909041302239907,
        "org.jfree.chart.util$LengthAdjustmentType#hashCode()": 0.0,
        "org.jfree.chart.util$LengthAdjustmentType#readResolve()": -0.058721517117045194,
        "org.jfree.chart.util$LengthAdjustmentType#toString()": 0.0,
        "org.jfree.chart.util$LineUtilities#LineUtilities()": 0.0,
        "org.jfree.chart.util$LineUtilities#clipLine(java.awt.geom.Line2D,java.awt.geom.Rectangle2D)": -0.05335904646307377,
        "org.jfree.chart.util$LogFormat#LogFormat()": -0.07277062049397834,
        "org.jfree.chart.util$LogFormat#LogFormat(double,java.lang.String,boolean)": -0.08858541777234356,
        "org.jfree.chart.util$LogFormat#LogFormat(double,java.lang.String,java.lang.String,boolean)": -0.08858541777234352,
        "org.jfree.chart.util$LogFormat#calculateLog(double)": 0.0,
        "org.jfree.chart.util$LogFormat#clone()": -0.023225413982778775,
        "org.jfree.chart.util$LogFormat#equals(java.lang.Object)": -0.06369428511586017,
        "org.jfree.chart.util$LogFormat#format(double,java.lang.StringBuffer,java.text.FieldPosition)": 0.0,
        "org.jfree.chart.util$LogFormat#format(long,java.lang.StringBuffer,java.text.FieldPosition)": 0.0,
        "org.jfree.chart.util$LogFormat#getExponentFormat()": 0.0,
        "org.jfree.chart.util$LogFormat#parse(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.jfree.chart.util$LogFormat#setExponentFormat(java.text.NumberFormat)": -0.023225413982778775,
        "org.jfree.chart.util$ObjectList#ObjectList()": 1.0127764197303386,
        "org.jfree.chart.util$ObjectList#ObjectList(int)": 0.0,
        "org.jfree.chart.util$ObjectList#get(int)": 1.3826021610085681,
        "org.jfree.chart.util$ObjectList#indexOf(java.lang.Object)": 1.4362278851625432,
        "org.jfree.chart.util$ObjectList#set(int,java.lang.Object)": 1.3813038032970062,
        "org.jfree.chart.util$ObjectUtilities#<clinit>()": -1.0649846226933293,
        "org.jfree.chart.util$ObjectUtilities#ObjectUtilities()": 0.0,
        "org.jfree.chart.util$ObjectUtilities#clone(java.lang.Object)": -0.32597510714193556,
        "org.jfree.chart.util$ObjectUtilities#convertName(java.lang.String,java.lang.Class)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#deepClone(java.util.Collection)": -0.22797201337293552,
        "org.jfree.chart.util$ObjectUtilities#equal(java.lang.Object,java.lang.Object)": -1.0003432222647037,
        "org.jfree.chart.util$ObjectUtilities#getClassLoader()": 0.0,
        "org.jfree.chart.util$ObjectUtilities#getClassLoader(java.lang.Class)": -0.22044067048052746,
        "org.jfree.chart.util$ObjectUtilities#getClassLoaderSource()": 0.0,
        "org.jfree.chart.util$ObjectUtilities#getResource(java.lang.String,java.lang.Class)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#getResourceAsStream(java.lang.String,java.lang.Class)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#getResourceRelative(java.lang.String,java.lang.Class)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#getResourceRelativeAsStream(java.lang.String,java.lang.Class)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#hashCode(java.lang.Object)": -0.08099252901602469,
        "org.jfree.chart.util$ObjectUtilities#isJDK14()": -0.22044067048052746,
        "org.jfree.chart.util$ObjectUtilities#loadAndInstantiate(java.lang.String,java.lang.Class)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#loadAndInstantiate(java.lang.String,java.lang.Class,java.lang.Class)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#parseVersions(java.lang.String)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#setClassLoader(java.lang.ClassLoader)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#setClassLoaderSource(java.lang.String)": 0.0,
        "org.jfree.chart.util$PaintList#PaintList()": 0.09025795772980894,
        "org.jfree.chart.util$PaintList#equals(java.lang.Object)": -0.4668133185642533,
        "org.jfree.chart.util$PaintList#getPaint(int)": -0.25145899357977725,
        "org.jfree.chart.util$PaintList#hashCode()": -0.1799290497394833,
        "org.jfree.chart.util$PaintList#readObject(java.io.ObjectInputStream)": -0.22233847708688936,
        "org.jfree.chart.util$PaintList#setPaint(int,java.awt.Paint)": -0.25669032185593854,
        "org.jfree.chart.util$PaintList#writeObject(java.io.ObjectOutputStream)": -0.22233847708688936,
        "org.jfree.chart.util$PaintMap#PaintMap()": -0.1481291236810409,
        "org.jfree.chart.util$PaintMap#clear()": -0.07719984364576256,
        "org.jfree.chart.util$PaintMap#clone()": -0.023225413982778775,
        "org.jfree.chart.util$PaintMap#containsKey(java.lang.Comparable)": 0.0,
        "org.jfree.chart.util$PaintMap#equals(java.lang.Object)": -0.09909041302239917,
        "org.jfree.chart.util$PaintMap#getPaint(java.lang.Comparable)": -0.08099252901602472,
        "org.jfree.chart.util$PaintMap#put(java.lang.Comparable,java.awt.Paint)": -0.07697162467080898,
        "org.jfree.chart.util$PaintMap#readObject(java.io.ObjectInputStream)": -0.06835852491775252,
        "org.jfree.chart.util$PaintMap#writeObject(java.io.ObjectOutputStream)": -0.06835852491775252,
        "org.jfree.chart.util$PaintUtilities#PaintUtilities()": 0.0,
        "org.jfree.chart.util$PaintUtilities#colorToString(java.awt.Color)": 0.0,
        "org.jfree.chart.util$PaintUtilities#equal(java.awt.Paint,java.awt.Paint)": -0.7880663405650354,
        "org.jfree.chart.util$PaintUtilities#stringToColor(java.lang.String)": 0.0,
        "org.jfree.chart.util$RectangleAnchor#<clinit>()": -0.11564247003976406,
        "org.jfree.chart.util$RectangleAnchor#RectangleAnchor(java.lang.String)": -0.4417787879742498,
        "org.jfree.chart.util$RectangleAnchor#coordinates(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleAnchor)": -0.18848180216683022,
        "org.jfree.chart.util$RectangleAnchor#createRectangle(org.jfree.chart.util.Size2D,double,double,org.jfree.chart.util.RectangleAnchor)": -0.03314780294366223,
        "org.jfree.chart.util$RectangleAnchor#equals(java.lang.Object)": -0.1884818021668302,
        "org.jfree.chart.util$RectangleAnchor#hashCode()": -0.040881516174663846,
        "org.jfree.chart.util$RectangleAnchor#readResolve()": -0.13460878683821834,
        "org.jfree.chart.util$RectangleAnchor#toString()": 0.0,
        "org.jfree.chart.util$RectangleEdge#<clinit>()": -0.050885868774506335,
        "org.jfree.chart.util$RectangleEdge#RectangleEdge(java.lang.String)": -0.37702218670899196,
        "org.jfree.chart.util$RectangleEdge#coordinate(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)": -0.04748228748077153,
        "org.jfree.chart.util$RectangleEdge#equals(java.lang.Object)": -0.1926626738632824,
        "org.jfree.chart.util$RectangleEdge#hashCode()": -0.0727706204939782,
        "org.jfree.chart.util$RectangleEdge#isLeftOrRight(org.jfree.chart.util.RectangleEdge)": -0.21274350516707477,
        "org.jfree.chart.util$RectangleEdge#isTopOrBottom(org.jfree.chart.util.RectangleEdge)": -0.22610393309661758,
        "org.jfree.chart.util$RectangleEdge#opposite(org.jfree.chart.util.RectangleEdge)": 0.0,
        "org.jfree.chart.util$RectangleEdge#readResolve()": -0.09569017516582462,
        "org.jfree.chart.util$RectangleEdge#toString()": 0.0,
        "org.jfree.chart.util$RectangleInsets#<clinit>()": 1.0873528878992031,
        "org.jfree.chart.util$RectangleInsets#RectangleInsets()": 0.0,
        "org.jfree.chart.util$RectangleInsets#RectangleInsets(double,double,double,double)": 1.1220095378592734,
        "org.jfree.chart.util$RectangleInsets#RectangleInsets(org.jfree.chart.util.UnitType,double,double,double,double)": -0.25843354972770183,
        "org.jfree.chart.util$RectangleInsets#calculateBottomInset(double)": -0.21853251080451352,
        "org.jfree.chart.util$RectangleInsets#calculateBottomOutset(double)": -0.24079342151988165,
        "org.jfree.chart.util$RectangleInsets#calculateLeftInset(double)": -0.21853251080451352,
        "org.jfree.chart.util$RectangleInsets#calculateLeftOutset(double)": -0.24079342151988165,
        "org.jfree.chart.util$RectangleInsets#calculateRightInset(double)": -0.21853251080451352,
        "org.jfree.chart.util$RectangleInsets#calculateRightOutset(double)": -0.24079342151988165,
        "org.jfree.chart.util$RectangleInsets#calculateTopInset(double)": -0.21853251080451352,
        "org.jfree.chart.util$RectangleInsets#calculateTopOutset(double)": -0.24079342151988165,
        "org.jfree.chart.util$RectangleInsets#createAdjustedRectangle(java.awt.geom.Rectangle2D,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.LengthAdjustmentType)": 0.0,
        "org.jfree.chart.util$RectangleInsets#createInsetRectangle(java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.util$RectangleInsets#createInsetRectangle(java.awt.geom.Rectangle2D,boolean,boolean)": 0.0,
        "org.jfree.chart.util$RectangleInsets#createOutsetRectangle(java.awt.geom.Rectangle2D)": -0.2048644501204305,
        "org.jfree.chart.util$RectangleInsets#createOutsetRectangle(java.awt.geom.Rectangle2D,boolean,boolean)": -0.2048644501204305,
        "org.jfree.chart.util$RectangleInsets#equals(java.lang.Object)": -0.35579175987173833,
        "org.jfree.chart.util$RectangleInsets#extendHeight(double)": -0.23898786166054273,
        "org.jfree.chart.util$RectangleInsets#extendWidth(double)": -0.23898786166054273,
        "org.jfree.chart.util$RectangleInsets#getBottom()": -0.20486445012043064,
        "org.jfree.chart.util$RectangleInsets#getLeft()": -0.20486445012043064,
        "org.jfree.chart.util$RectangleInsets#getRight()": -0.20486445012043064,
        "org.jfree.chart.util$RectangleInsets#getTop()": -0.20486445012043064,
        "org.jfree.chart.util$RectangleInsets#getUnitType()": 0.0,
        "org.jfree.chart.util$RectangleInsets#hashCode()": 0.0,
        "org.jfree.chart.util$RectangleInsets#toString()": 0.0,
        "org.jfree.chart.util$RectangleInsets#trim(java.awt.geom.Rectangle2D)": -0.21468417828822278,
        "org.jfree.chart.util$RectangleInsets#trimHeight(double)": -0.21661376185026004,
        "org.jfree.chart.util$RectangleInsets#trimWidth(double)": -0.21661376185026004,
        "org.jfree.chart.util$ResourceBundleWrapper#ResourceBundleWrapper()": 0.0,
        "org.jfree.chart.util$ResourceBundleWrapper#getBundle(java.lang.String)": -0.05971272895910318,
        "org.jfree.chart.util$ResourceBundleWrapper#getBundle(java.lang.String,java.util.Locale)": 0.0,
        "org.jfree.chart.util$ResourceBundleWrapper#getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader)": 0.0,
        "org.jfree.chart.util$ResourceBundleWrapper#removeCodeBase(java.net.URL,java.net.URLClassLoader)": 0.0,
        "org.jfree.chart.util$Rotation#<clinit>()": 0.08391559407980659,
        "org.jfree.chart.util$Rotation#Rotation(java.lang.String,double)": -0.14135586053016833,
        "org.jfree.chart.util$Rotation#equals(java.lang.Object)": -0.0727706204939782,
        "org.jfree.chart.util$Rotation#getFactor()": -0.040881516174663846,
        "org.jfree.chart.util$Rotation#hashCode()": 0.0,
        "org.jfree.chart.util$Rotation#readResolve()": -0.06369428511586006,
        "org.jfree.chart.util$Rotation#toString()": 0.0,
        "org.jfree.chart.util$SerialUtilities#SerialUtilities()": 0.0,
        "org.jfree.chart.util$SerialUtilities#isSerializable(java.lang.Class)": -0.35405075739375436,
        "org.jfree.chart.util$SerialUtilities#readAttributedString(java.io.ObjectInputStream)": -0.05872151711704521,
        "org.jfree.chart.util$SerialUtilities#readImage(java.io.ObjectInputStream)": 0.0,
        "org.jfree.chart.util$SerialUtilities#readPaint(java.io.ObjectInputStream)": -0.365521099693321,
        "org.jfree.chart.util$SerialUtilities#readPoint2D(java.io.ObjectInputStream)": -0.06835852491775252,
        "org.jfree.chart.util$SerialUtilities#readShape(java.io.ObjectInputStream)": -0.3214228229907712,
        "org.jfree.chart.util$SerialUtilities#readStroke(java.io.ObjectInputStream)": -0.33497739956276096,
        "org.jfree.chart.util$SerialUtilities#writeAttributedString(java.text.AttributedString,java.io.ObjectOutputStream)": -0.05872151711704521,
        "org.jfree.chart.util$SerialUtilities#writeImage(java.awt.Image,java.io.ObjectOutputStream)": 0.0,
        "org.jfree.chart.util$SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)": -0.3655210996933209,
        "org.jfree.chart.util$SerialUtilities#writePoint2D(java.awt.geom.Point2D,java.io.ObjectOutputStream)": -0.06835852491775252,
        "org.jfree.chart.util$SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)": -0.3214228229907712,
        "org.jfree.chart.util$SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)": -0.33497739956276096,
        "org.jfree.chart.util$ShapeList#ShapeList()": 0.09754813850752675,
        "org.jfree.chart.util$ShapeList#clone()": -0.21853251080451352,
        "org.jfree.chart.util$ShapeList#equals(java.lang.Object)": -0.4604950966890522,
        "org.jfree.chart.util$ShapeList#getShape(int)": -0.2008509521609263,
        "org.jfree.chart.util$ShapeList#hashCode()": 0.0,
        "org.jfree.chart.util$ShapeList#readObject(java.io.ObjectInputStream)": -0.22044067048052746,
        "org.jfree.chart.util$ShapeList#setShape(int,java.awt.Shape)": -0.1292060967094633,
        "org.jfree.chart.util$ShapeList#writeObject(java.io.ObjectOutputStream)": -0.22044067048052746,
        "org.jfree.chart.util$ShapeUtilities#<clinit>()": -0.641961778636909,
        "org.jfree.chart.util$ShapeUtilities#ShapeUtilities()": 0.0,
        "org.jfree.chart.util$ShapeUtilities#clipLine(java.awt.geom.Line2D,java.awt.geom.Rectangle2D)": -0.023225413982778775,
        "org.jfree.chart.util$ShapeUtilities#clone(java.awt.Shape)": -0.26185865946884773,
        "org.jfree.chart.util$ShapeUtilities#contains(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#createDiagonalCross(float,float)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#createDiamond(float)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#createDownTriangle(float)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#createLineRegion(java.awt.geom.Line2D,float)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#createRegularCross(float,float)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#createTranslatedShape(java.awt.Shape,double,double)": -0.06369428511586017,
        "org.jfree.chart.util$ShapeUtilities#createTranslatedShape(java.awt.Shape,org.jfree.chart.util.RectangleAnchor,double,double)": -0.18848180216683022,
        "org.jfree.chart.util$ShapeUtilities#createUpTriangle(float)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#drawRotatedShape(java.awt.Graphics2D,java.awt.Shape,double,float,float)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#equal(java.awt.Polygon,java.awt.Polygon)": -0.2532099727216499,
        "org.jfree.chart.util$ShapeUtilities#equal(java.awt.Shape,java.awt.Shape)": -0.5585603136132606,
        "org.jfree.chart.util$ShapeUtilities#equal(java.awt.geom.Arc2D,java.awt.geom.Arc2D)": -0.040881516174663846,
        "org.jfree.chart.util$ShapeUtilities#equal(java.awt.geom.Ellipse2D,java.awt.geom.Ellipse2D)": -0.2669671310174395,
        "org.jfree.chart.util$ShapeUtilities#equal(java.awt.geom.GeneralPath,java.awt.geom.GeneralPath)": -0.10240183266412539,
        "org.jfree.chart.util$ShapeUtilities#equal(java.awt.geom.Line2D,java.awt.geom.Line2D)": -0.21468417828822295,
        "org.jfree.chart.util$ShapeUtilities#getPointInRectangle(double,double,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#intersects(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)": -0.023225413982778775,
        "org.jfree.chart.util$ShapeUtilities#isPointInRect(double,double,java.awt.geom.Rectangle2D)": -0.023225413982778775,
        "org.jfree.chart.util$ShapeUtilities#rotateShape(java.awt.Shape,double,float,float)": -0.149953888022742,
        "org.jfree.chart.util$Size2D#Size2D()": -0.23898786166054273,
        "org.jfree.chart.util$Size2D#Size2D(double,double)": -0.2514589935797771,
        "org.jfree.chart.util$Size2D#clone()": 0.0,
        "org.jfree.chart.util$Size2D#equals(java.lang.Object)": 0.0,
        "org.jfree.chart.util$Size2D#getHeight()": -0.24259073940012543,
        "org.jfree.chart.util$Size2D#getWidth()": -0.24437997130871558,
        "org.jfree.chart.util$Size2D#setHeight(double)": 0.0,
        "org.jfree.chart.util$Size2D#setWidth(double)": 0.0,
        "org.jfree.chart.util$Size2D#toString()": 0.0,
        "org.jfree.chart.util$StandardGradientPaintTransformer#StandardGradientPaintTransformer()": -0.49415566375902076,
        "org.jfree.chart.util$StandardGradientPaintTransformer#StandardGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformType)": -0.49538176555014335,
        "org.jfree.chart.util$StandardGradientPaintTransformer#clone()": -0.07697162467080898,
        "org.jfree.chart.util$StandardGradientPaintTransformer#equals(java.lang.Object)": -0.25495370681162277,
        "org.jfree.chart.util$StandardGradientPaintTransformer#getType()": 0.0,
        "org.jfree.chart.util$StandardGradientPaintTransformer#hashCode()": -0.02322541398277875,
        "org.jfree.chart.util$StandardGradientPaintTransformer#transform(java.awt.GradientPaint,java.awt.Shape)": -0.02322541398277875,
        "org.jfree.chart.util$StrokeList#StrokeList()": 0.09233805362606018,
        "org.jfree.chart.util$StrokeList#clone()": -0.22044067048052746,
        "org.jfree.chart.util$StrokeList#equals(java.lang.Object)": -0.4642908917729315,
        "org.jfree.chart.util$StrokeList#getStroke(int)": -0.21661376185026004,
        "org.jfree.chart.util$StrokeList#hashCode()": -0.1799290497394833,
        "org.jfree.chart.util$StrokeList#readObject(java.io.ObjectInputStream)": -0.22233847708688936,
        "org.jfree.chart.util$StrokeList#setStroke(int,java.awt.Stroke)": -0.18209233597250823,
        "org.jfree.chart.util$StrokeList#writeObject(java.io.ObjectOutputStream)": -0.22233847708688936,
        "org.jfree.chart.util$StrokeMap#StrokeMap()": -0.14589174877161334,
        "org.jfree.chart.util$StrokeMap#clear()": 0.0,
        "org.jfree.chart.util$StrokeMap#clone()": -0.023225413982778775,
        "org.jfree.chart.util$StrokeMap#containsKey(java.lang.Comparable)": 0.0,
        "org.jfree.chart.util$StrokeMap#equals(java.lang.Object)": -0.09909041302239917,
        "org.jfree.chart.util$StrokeMap#getStroke(java.lang.Comparable)": -0.0727706204939782,
        "org.jfree.chart.util$StrokeMap#put(java.lang.Comparable,java.awt.Stroke)": -0.05872151711704521,
        "org.jfree.chart.util$StrokeMap#readObject(java.io.ObjectInputStream)": -0.06835852491775252,
        "org.jfree.chart.util$StrokeMap#writeObject(java.io.ObjectOutputStream)": -0.06835852491775252,
        "org.jfree.chart.util$UnitType#<clinit>()": 1.0800822722504515,
        "org.jfree.chart.util$UnitType#UnitType(java.lang.String)": -0.26570416537645347,
        "org.jfree.chart.util$UnitType#equals(java.lang.Object)": -0.2204406704805275,
        "org.jfree.chart.util$UnitType#hashCode()": 0.0,
        "org.jfree.chart.util$UnitType#readResolve()": -0.22044067048052746,
        "org.jfree.chart.util$UnitType#toString()": 0.0,
        "org.jfree.chart.util$VerticalAlignment#<clinit>()": -0.04825258668266656,
        "org.jfree.chart.util$VerticalAlignment#VerticalAlignment(java.lang.String)": -0.3743889046171524,
        "org.jfree.chart.util$VerticalAlignment#equals(java.lang.Object)": -0.10240183266412539,
        "org.jfree.chart.util$VerticalAlignment#hashCode()": -0.0727706204939782,
        "org.jfree.chart.util$VerticalAlignment#readResolve()": -0.10240183266412545,
        "org.jfree.chart.util$VerticalAlignment#toString()": 0.0,
        "org.jfree.data$DefaultKeyedValues#DefaultKeyedValues()": -0.4238154642664628,
        "org.jfree.data$DefaultKeyedValues#addValue(java.lang.Comparable,double)": -0.05335904646307371,
        "org.jfree.data$DefaultKeyedValues#addValue(java.lang.Comparable,java.lang.Number)": -0.10563216592227084,
        "org.jfree.data$DefaultKeyedValues#clear()": -0.06835852491775252,
        "org.jfree.data$DefaultKeyedValues#clone()": -0.08485741089497001,
        "org.jfree.data$DefaultKeyedValues#equals(java.lang.Object)": -0.03314780294366223,
        "org.jfree.data$DefaultKeyedValues#getIndex(java.lang.Comparable)": -0.41219584997306885,
        "org.jfree.data$DefaultKeyedValues#getItemCount()": -0.12644166506603405,
        "org.jfree.data$DefaultKeyedValues#getKey(int)": -0.10240183266412539,
        "org.jfree.data$DefaultKeyedValues#getKeys()": -0.05872151711704521,
        "org.jfree.data$DefaultKeyedValues#getValue(int)": -0.3740017895002099,
        "org.jfree.data$DefaultKeyedValues#getValue(java.lang.Comparable)": -0.08485741089496995,
        "org.jfree.data$DefaultKeyedValues#hashCode()": 0.0,
        "org.jfree.data$DefaultKeyedValues#insertValue(int,java.lang.Comparable,double)": -0.02322541398277875,
        "org.jfree.data$DefaultKeyedValues#insertValue(int,java.lang.Comparable,java.lang.Number)": -0.02322541398277875,
        "org.jfree.data$DefaultKeyedValues#rebuildIndex()": -0.05872151711704521,
        "org.jfree.data$DefaultKeyedValues#removeValue(int)": -0.05335904646307371,
        "org.jfree.data$DefaultKeyedValues#removeValue(java.lang.Comparable)": -0.05335904646307371,
        "org.jfree.data$DefaultKeyedValues#setValue(java.lang.Comparable,double)": 0.0,
        "org.jfree.data$DefaultKeyedValues#setValue(java.lang.Comparable,java.lang.Number)": -0.18562417202272288,
        "org.jfree.data$DefaultKeyedValues#sortByKeys(org.jfree.chart.util.SortOrder)": -0.03314780294366223,
        "org.jfree.data$DefaultKeyedValues#sortByValues(org.jfree.chart.util.SortOrder)": -0.03314780294366223,
        "org.jfree.data$DomainOrder#<clinit>()": -0.10563216592227084,
        "org.jfree.data$DomainOrder#DomainOrder(java.lang.String)": -0.10563216592227098,
        "org.jfree.data$DomainOrder#equals(java.lang.Object)": -0.040881516174663936,
        "org.jfree.data$DomainOrder#hashCode()": -0.023225413982778775,
        "org.jfree.data$DomainOrder#readResolve()": -0.02322541398277875,
        "org.jfree.data$DomainOrder#toString()": -0.03314780294366226,
        "org.jfree.data$Range#Range(double,double)": -0.15011422191099622,
        "org.jfree.data$Range#combine(org.jfree.data.Range,org.jfree.data.Range)": 1.4376157760371822,
        "org.jfree.data$Range#constrain(double)": -0.13192768416091805,
        "org.jfree.data$Range#contains(double)": -0.277015751050137,
        "org.jfree.data$Range#equals(java.lang.Object)": -0.29170477523261495,
        "org.jfree.data$Range#expand(org.jfree.data.Range,double,double)": -0.02322541398277875,
        "org.jfree.data$Range#expandToInclude(org.jfree.data.Range,double)": -0.1398579559676683,
        "org.jfree.data$Range#getCentralValue()": -0.0727706204939782,
        "org.jfree.data$Range#getLength()": -0.08485741089497001,
        "org.jfree.data$Range#getLowerBound()": -0.020268738920770447,
        "org.jfree.data$Range#getUpperBound()": -0.02151665867996614,
        "org.jfree.data$Range#hashCode()": -0.023225413982778775,
        "org.jfree.data$Range#intersects(double,double)": -0.047482287480771435,
        "org.jfree.data$Range#intersects(org.jfree.data.Range)": 0.0,
        "org.jfree.data$Range#scale(org.jfree.data.Range,double)": -0.02322541398277875,
        "org.jfree.data$Range#shift(org.jfree.data.Range,double)": -0.03314780294366223,
        "org.jfree.data$Range#shift(org.jfree.data.Range,double,boolean)": -0.03314780294366223,
        "org.jfree.data$Range#shiftWithNoZeroCrossing(double,double)": -0.03314780294366226,
        "org.jfree.data$Range#toString()": 0.0,
        "org.jfree.data$RangeType#<clinit>()": 1.3865084817006794,
        "org.jfree.data$RangeType#RangeType(java.lang.String)": 0.040722044073774444,
        "org.jfree.data$RangeType#equals(java.lang.Object)": -0.2107914773769589,
        "org.jfree.data$RangeType#hashCode()": -0.023225413982778775,
        "org.jfree.data$RangeType#readResolve()": -0.12644166506603402,
        "org.jfree.data$RangeType#toString()": -0.13192768416091805,
        "org.jfree.data$UnknownKeyException#UnknownKeyException(java.lang.String)": -0.10878808397177675,
        "org.jfree.data.general$AbstractDataset#AbstractDataset()": 0.9779072382142383,
        "org.jfree.data.general$AbstractDataset#addChangeListener(org.jfree.data.general.DatasetChangeListener)": -0.022392918872436218,
        "org.jfree.data.general$AbstractDataset#clone()": -0.17109373778997616,
        "org.jfree.data.general$AbstractDataset#fireDatasetChanged()": 1.0596261746505653,
        "org.jfree.data.general$AbstractDataset#getGroup()": -0.047482287480771435,
        "org.jfree.data.general$AbstractDataset#hasListener(java.util.EventListener)": -0.040881516174663846,
        "org.jfree.data.general$AbstractDataset#notifyListeners(org.jfree.data.general.DatasetChangeEvent)": 1.012574224490774,
        "org.jfree.data.general$AbstractDataset#readObject(java.io.ObjectInputStream)": -0.21468417828822295,
        "org.jfree.data.general$AbstractDataset#removeChangeListener(org.jfree.data.general.DatasetChangeListener)": -0.09569017516582456,
        "org.jfree.data.general$AbstractDataset#setGroup(org.jfree.data.general.DatasetGroup)": 0.0,
        "org.jfree.data.general$AbstractDataset#validateObject()": -0.21468417828822278,
        "org.jfree.data.general$AbstractDataset#writeObject(java.io.ObjectOutputStream)": -0.21468417828822295,
        "org.jfree.data.general$AbstractSeriesDataset#AbstractSeriesDataset()": 1.2429831741604584,
        "org.jfree.data.general$AbstractSeriesDataset#indexOf(java.lang.Comparable)": -0.20685224305985966,
        "org.jfree.data.general$AbstractSeriesDataset#seriesChanged(org.jfree.data.general.SeriesChangeEvent)": -0.07697162467080897,
        "org.jfree.data.general$DatasetChangeEvent#DatasetChangeEvent(java.lang.Object,org.jfree.data.general.Dataset)": -0.34502483849843524,
        "org.jfree.data.general$DatasetChangeEvent#getDataset()": 0.0,
        "org.jfree.data.general$DatasetGroup#DatasetGroup()": -0.3688678424231534,
        "org.jfree.data.general$DatasetGroup#DatasetGroup(java.lang.String)": 0.0,
        "org.jfree.data.general$DatasetGroup#clone()": 0.0,
        "org.jfree.data.general$DatasetGroup#equals(java.lang.Object)": -0.023225413982778775,
        "org.jfree.data.general$DatasetGroup#getID()": 0.0,
        "org.jfree.data.general$DatasetUtilities#DatasetUtilities()": 0.0,
        "org.jfree.data.general$DatasetUtilities#calculatePieDatasetTotal(org.jfree.data.general.PieDataset)": -0.05335904646307371,
        "org.jfree.data.general$DatasetUtilities#calculateStackTotal(org.jfree.data.xy.TableXYDataset,int)": 0.0,
        "org.jfree.data.general$DatasetUtilities#createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues)": 0.0,
        "org.jfree.data.general$DatasetUtilities#createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double[][])": -0.03314780294366226,
        "org.jfree.data.general$DatasetUtilities#createCategoryDataset(java.lang.String,java.lang.String,double[][])": 0.0,
        "org.jfree.data.general$DatasetUtilities#createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][])": -0.15240284524136039,
        "org.jfree.data.general$DatasetUtilities#createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double)": -0.02322541398277875,
        "org.jfree.data.general$DatasetUtilities#createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int)": -0.02322541398277875,
        "org.jfree.data.general$DatasetUtilities#createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,int)": 0.0,
        "org.jfree.data.general$DatasetUtilities#createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,java.lang.Comparable)": 0.0,
        "org.jfree.data.general$DatasetUtilities#createPieDatasetForRow(org.jfree.data.category.CategoryDataset,int)": 0.0,
        "org.jfree.data.general$DatasetUtilities#createPieDatasetForRow(org.jfree.data.category.CategoryDataset,java.lang.Comparable)": 0.0,
        "org.jfree.data.general$DatasetUtilities#findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset)": -0.04748228748077153,
        "org.jfree.data.general$DatasetUtilities#findDomainBounds(org.jfree.data.xy.XYDataset)": 1.779118483825336,
        "org.jfree.data.general$DatasetUtilities#findDomainBounds(org.jfree.data.xy.XYDataset,boolean)": 1.7175981673358747,
        "org.jfree.data.general$DatasetUtilities#findDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean)": 0.05368878116681306,
        "org.jfree.data.general$DatasetUtilities#findMaximumDomainValue(org.jfree.data.xy.XYDataset)": -0.02322541398277875,
        "org.jfree.data.general$DatasetUtilities#findMaximumRangeValue(org.jfree.data.category.CategoryDataset)": -0.040881516174663936,
        "org.jfree.data.general$DatasetUtilities#findMaximumRangeValue(org.jfree.data.xy.XYDataset)": -0.02322541398277875,
        "org.jfree.data.general$DatasetUtilities#findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset)": -0.040881516174663846,
        "org.jfree.data.general$DatasetUtilities#findMinimumDomainValue(org.jfree.data.xy.XYDataset)": -0.02322541398277875,
        "org.jfree.data.general$DatasetUtilities#findMinimumRangeValue(org.jfree.data.category.CategoryDataset)": -0.03314780294366223,
        "org.jfree.data.general$DatasetUtilities#findMinimumRangeValue(org.jfree.data.xy.XYDataset)": -0.02322541398277875,
        "org.jfree.data.general$DatasetUtilities#findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset)": -0.03314780294366226,
        "org.jfree.data.general$DatasetUtilities#findRangeBounds(org.jfree.data.category.CategoryDataset)": -0.02322541398277875,
        "org.jfree.data.general$DatasetUtilities#findRangeBounds(org.jfree.data.category.CategoryDataset,boolean)": -0.02322541398277875,
        "org.jfree.data.general$DatasetUtilities#findRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean)": -0.23898786166054273,
        "org.jfree.data.general$DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset)": -0.040881516174663936,
        "org.jfree.data.general$DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset,boolean)": -0.08485741089496995,
        "org.jfree.data.general$DatasetUtilities#findRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean)": 0.06838110765582947,
        "org.jfree.data.general$DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset)": -0.07697162467080897,
        "org.jfree.data.general$DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double)": -0.09569017516582462,
        "org.jfree.data.general$DatasetUtilities#findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap)": -0.04748228748077153,
        "org.jfree.data.general$DatasetUtilities#findStackedRangeBounds(org.jfree.data.xy.TableXYDataset)": -0.058721517117045194,
        "org.jfree.data.general$DatasetUtilities#findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double)": -0.058721517117045194,
        "org.jfree.data.general$DatasetUtilities#isEmptyOrNull(org.jfree.data.category.CategoryDataset)": -0.16193539307713056,
        "org.jfree.data.general$DatasetUtilities#isEmptyOrNull(org.jfree.data.general.PieDataset)": -0.040881516174663936,
        "org.jfree.data.general$DatasetUtilities#isEmptyOrNull(org.jfree.data.xy.XYDataset)": -0.10878808397177664,
        "org.jfree.data.general$DatasetUtilities#iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean)": 0.0,
        "org.jfree.data.general$DatasetUtilities#iterateDomainBounds(org.jfree.data.xy.XYDataset)": -0.03314780294366223,
        "org.jfree.data.general$DatasetUtilities#iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean)": 0.15828136928942205,
        "org.jfree.data.general$DatasetUtilities#iterateRangeBounds(org.jfree.data.category.CategoryDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean)": -0.04748228748077153,
        "org.jfree.data.general$DatasetUtilities#iterateRangeBounds(org.jfree.data.xy.XYDataset)": -0.04748228748077153,
        "org.jfree.data.general$DatasetUtilities#iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean)": -0.09219207433891567,
        "org.jfree.data.general$DatasetUtilities#iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean)": 0.05368878116681306,
        "org.jfree.data.general$DatasetUtilities#iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean)": -0.2425907394001254,
        "org.jfree.data.general$DatasetUtilities#iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean)": 0.06199164146150749,
        "org.jfree.data.general$DatasetUtilities#iterateXYRangeBounds(org.jfree.data.xy.XYDataset)": 0.0,
        "org.jfree.data.general$DatasetUtilities#sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable)": -0.02322541398277875,
        "org.jfree.data.general$DatasetUtilities#sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable)": -0.02322541398277875,
        "org.jfree.data.general$DefaultPieDataset#DefaultPieDataset()": 0.09807059838697743,
        "org.jfree.data.general$DefaultPieDataset#DefaultPieDataset(org.jfree.data.KeyedValues)": 0.0,
        "org.jfree.data.general$DefaultPieDataset#clear()": -0.02322541398277875,
        "org.jfree.data.general$DefaultPieDataset#clone()": -0.04748228748077153,
        "org.jfree.data.general$DefaultPieDataset#equals(java.lang.Object)": -0.07697162467080897,
        "org.jfree.data.general$DefaultPieDataset#getIndex(java.lang.Comparable)": -0.040881516174663936,
        "org.jfree.data.general$DefaultPieDataset#getItemCount()": -0.09569017516582462,
        "org.jfree.data.general$DefaultPieDataset#getKey(int)": -0.07277062049397834,
        "org.jfree.data.general$DefaultPieDataset#getKeys()": -0.05335904646307371,
        "org.jfree.data.general$DefaultPieDataset#getValue(int)": -0.06369428511586006,
        "org.jfree.data.general$DefaultPieDataset#getValue(java.lang.Comparable)": -0.05335904646307371,
        "org.jfree.data.general$DefaultPieDataset#hashCode()": 0.0,
        "org.jfree.data.general$DefaultPieDataset#insertValue(int,java.lang.Comparable,double)": 0.0,
        "org.jfree.data.general$DefaultPieDataset#insertValue(int,java.lang.Comparable,java.lang.Number)": 0.0,
        "org.jfree.data.general$DefaultPieDataset#remove(java.lang.Comparable)": 0.0,
        "org.jfree.data.general$DefaultPieDataset#setValue(java.lang.Comparable,double)": -0.08099252901602469,
        "org.jfree.data.general$DefaultPieDataset#setValue(java.lang.Comparable,java.lang.Number)": 0.11854575946741966,
        "org.jfree.data.general$DefaultPieDataset#sortByKeys(org.jfree.chart.util.SortOrder)": 0.0,
        "org.jfree.data.general$DefaultPieDataset#sortByValues(org.jfree.chart.util.SortOrder)": 0.0,
        "org.jfree.data.general$Series#Series(java.lang.Comparable)": 1.1919149281619106,
        "org.jfree.data.general$Series#Series(java.lang.Comparable,java.lang.String)": -0.1124974473719659,
        "org.jfree.data.general$Series#addChangeListener(org.jfree.data.general.SeriesChangeListener)": 0.07016587382926129,
        "org.jfree.data.general$Series#addPropertyChangeListener(java.beans.PropertyChangeListener)": 0.0,
        "org.jfree.data.general$Series#clone()": -0.13985795596766826,
        "org.jfree.data.general$Series#equals(java.lang.Object)": -0.26014268092225784,
        "org.jfree.data.general$Series#firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)": -0.023225413982778775,
        "org.jfree.data.general$Series#fireSeriesChanged()": 1.2246251618693207,
        "org.jfree.data.general$Series#getDescription()": -0.24437997130871558,
        "org.jfree.data.general$Series#getKey()": -0.3626714009345038,
        "org.jfree.data.general$Series#getNotify()": 0.0,
        "org.jfree.data.general$Series#hashCode()": -0.04748228748077153,
        "org.jfree.data.general$Series#isEmpty()": -0.05335904646307371,
        "org.jfree.data.general$Series#notifyListeners(org.jfree.data.general.SeriesChangeEvent)": 1.2116112723249395,
        "org.jfree.data.general$Series#removeChangeListener(org.jfree.data.general.SeriesChangeListener)": -0.10878808397177675,
        "org.jfree.data.general$Series#removePropertyChangeListener(java.beans.PropertyChangeListener)": 0.0,
        "org.jfree.data.general$Series#setDescription(java.lang.String)": -0.06369428511586017,
        "org.jfree.data.general$Series#setKey(java.lang.Comparable)": -0.05335904646307377,
        "org.jfree.data.general$Series#setNotify(boolean)": 0.0,
        "org.jfree.data.general$SeriesChangeEvent#SeriesChangeEvent(java.lang.Object)": 1.2246251618693207,
        "org.jfree.data.general$SeriesChangeEvent#SeriesChangeEvent(java.lang.Object,org.jfree.data.general.SeriesChangeInfo)": -0.0797872136645558,
        "org.jfree.data.general$SeriesChangeEvent#getSummary()": 0.0,
        "org.jfree.data.general$SeriesChangeEvent#setSummary(org.jfree.data.general.SeriesChangeInfo)": 0.0,
        "org.jfree.data.general$SeriesException#SeriesException(java.lang.String)": -0.040881516174663846,
        "org.jfree.data.time$DateRange#DateRange()": 0.6903763788886388,
        "org.jfree.data.time$DateRange#DateRange(double,double)": -0.03314780294366223,
        "org.jfree.data.time$DateRange#DateRange(java.util.Date,java.util.Date)": 0.6800164397696399,
        "org.jfree.data.time$DateRange#DateRange(org.jfree.data.Range)": 0.0,
        "org.jfree.data.time$DateRange#getLowerDate()": -0.06369428511586017,
        "org.jfree.data.time$DateRange#getLowerMillis()": -0.040881516174663846,
        "org.jfree.data.time$DateRange#getUpperDate()": -0.06369428511586017,
        "org.jfree.data.time$DateRange#getUpperMillis()": -0.040881516174663846,
        "org.jfree.data.time$DateRange#toString()": 0.0,
        "org.jfree.data.time$Day#<clinit>()": -0.3157047844968485,
        "org.jfree.data.time$Day#Day()": 0.16561603273336775,
        "org.jfree.data.time$Day#Day(int,int,int)": -0.2835982877122757,
        "org.jfree.data.time$Day#Day(java.util.Date)": 0.15828136928942205,
        "org.jfree.data.time$Day#Day(java.util.Date,java.util.TimeZone)": 0.10299715791271077,
        "org.jfree.data.time$Day#Day(org.jfree.data.time.SerialDate)": 0.16188802585599416,
        "org.jfree.data.time$Day#compareTo(java.lang.Object)": 0.17770282313435937,
        "org.jfree.data.time$Day#equals(java.lang.Object)": -0.12644166506603402,
        "org.jfree.data.time$Day#getDayOfMonth()": -0.25145899357977725,
        "org.jfree.data.time$Day#getFirstMillisecond()": -0.09909041302239907,
        "org.jfree.data.time$Day#getFirstMillisecond(java.util.Calendar)": -0.08450395593442325,
        "org.jfree.data.time$Day#getLastMillisecond()": -0.09909041302239907,
        "org.jfree.data.time$Day#getLastMillisecond(java.util.Calendar)": -0.08450395593442325,
        "org.jfree.data.time$Day#getMonth()": -0.25145899357977725,
        "org.jfree.data.time$Day#getSerialDate()": -0.11204956622277291,
        "org.jfree.data.time$Day#getSerialIndex()": 0.16188802585599416,
        "org.jfree.data.time$Day#getYear()": -0.247934777148189,
        "org.jfree.data.time$Day#hashCode()": -0.058721517117045194,
        "org.jfree.data.time$Day#next()": 0.14484127770606686,
        "org.jfree.data.time$Day#parseDay(java.lang.String)": -0.03314780294366223,
        "org.jfree.data.time$Day#peg(java.util.Calendar)": -0.08450395593442325,
        "org.jfree.data.time$Day#previous()": -0.04748228748077153,
        "org.jfree.data.time$Day#toString()": 0.0,
        "org.jfree.data.time$Month#Month()": -0.02322541398277875,
        "org.jfree.data.time$Month#Month(int,int)": -0.13725155524113583,
        "org.jfree.data.time$Month#Month(int,org.jfree.data.time.Year)": -0.02322541398277875,
        "org.jfree.data.time$Month#Month(java.util.Date)": -0.02322541398277875,
        "org.jfree.data.time$Month#Month(java.util.Date,java.util.TimeZone)": -0.02322541398277875,
        "org.jfree.data.time$Month#Month(java.util.Date,java.util.TimeZone,java.util.Locale)": -0.06369428511586006,
        "org.jfree.data.time$Month#compareTo(java.lang.Object)": -0.040881516174663936,
        "org.jfree.data.time$Month#equals(java.lang.Object)": -0.06369428511586017,
        "org.jfree.data.time$Month#evaluateAsYear(java.lang.String)": -0.02322541398277875,
        "org.jfree.data.time$Month#findSeparator(java.lang.String)": -0.023225413982778775,
        "org.jfree.data.time$Month#getFirstMillisecond()": -0.05335904646307377,
        "org.jfree.data.time$Month#getFirstMillisecond(java.util.Calendar)": -0.13985795596766826,
        "org.jfree.data.time$Month#getLastMillisecond()": -0.05335904646307377,
        "org.jfree.data.time$Month#getLastMillisecond(java.util.Calendar)": -0.1398579559676683,
        "org.jfree.data.time$Month#getMonth()": -0.06369428511586017,
        "org.jfree.data.time$Month#getSerialIndex()": -0.047482287480771435,
        "org.jfree.data.time$Month#getYear()": -0.03314780294366223,
        "org.jfree.data.time$Month#getYearValue()": -0.040881516174663846,
        "org.jfree.data.time$Month#hashCode()": -0.023225413982778775,
        "org.jfree.data.time$Month#next()": -0.040881516174663936,
        "org.jfree.data.time$Month#parseMonth(java.lang.String)": -0.02322541398277875,
        "org.jfree.data.time$Month#peg(java.util.Calendar)": -0.1398579559676683,
        "org.jfree.data.time$Month#previous()": -0.04748228748077153,
        "org.jfree.data.time$Month#toString()": 0.0,
        "org.jfree.data.time$RegularTimePeriod#RegularTimePeriod()": -0.5205154109818841,
        "org.jfree.data.time$RegularTimePeriod#createInstance(java.lang.Class,java.util.Date,java.util.TimeZone)": -0.03314780294366226,
        "org.jfree.data.time$RegularTimePeriod#downsize(java.lang.Class)": -0.05872151711704521,
        "org.jfree.data.time$RegularTimePeriod#getEnd()": -0.11489917188014133,
        "org.jfree.data.time$RegularTimePeriod#getMiddleMillisecond()": -0.10878808397177664,
        "org.jfree.data.time$RegularTimePeriod#getMiddleMillisecond(java.util.Calendar)": -0.02322541398277875,
        "org.jfree.data.time$RegularTimePeriod#getStart()": -0.11489917188014133,
        "org.jfree.data.time$RegularTimePeriod#toString()": 0.0,
        "org.jfree.data.time$SerialDate#<clinit>()": -0.383134707675663,
        "org.jfree.data.time$SerialDate#SerialDate()": -0.3097754105443981,
        "org.jfree.data.time$SerialDate#addDays(int,org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$SerialDate#addMonths(int,org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$SerialDate#addYears(int,org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$SerialDate#createInstance(int)": 0.16188802585599416,
        "org.jfree.data.time$SerialDate#createInstance(int,int,int)": -0.08450395593442325,
        "org.jfree.data.time$SerialDate#createInstance(java.util.Date)": 0.0,
        "org.jfree.data.time$SerialDate#getDescription()": 0.0,
        "org.jfree.data.time$SerialDate#getEndOfCurrentMonth(org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$SerialDate#getFollowingDayOfWeek(int)": 0.0,
        "org.jfree.data.time$SerialDate#getFollowingDayOfWeek(int,org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$SerialDate#getMonths()": 0.0,
        "org.jfree.data.time$SerialDate#getMonths(boolean)": 0.0,
        "org.jfree.data.time$SerialDate#getNearestDayOfWeek(int)": 0.0,
        "org.jfree.data.time$SerialDate#getNearestDayOfWeek(int,org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$SerialDate#getPreviousDayOfWeek(int)": 0.0,
        "org.jfree.data.time$SerialDate#getPreviousDayOfWeek(int,org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$SerialDate#isLeapYear(int)": -0.3082842146637423,
        "org.jfree.data.time$SerialDate#isValidMonthCode(int)": 0.0,
        "org.jfree.data.time$SerialDate#isValidWeekInMonthCode(int)": 0.0,
        "org.jfree.data.time$SerialDate#isValidWeekdayCode(int)": 0.0,
        "org.jfree.data.time$SerialDate#lastDayOfMonth(int,int)": -0.15786325306568819,
        "org.jfree.data.time$SerialDate#leapYearCount(int)": -0.3097754105443981,
        "org.jfree.data.time$SerialDate#monthCodeToQuarter(int)": -0.040881516174663846,
        "org.jfree.data.time$SerialDate#monthCodeToString(int)": 0.0,
        "org.jfree.data.time$SerialDate#monthCodeToString(int,boolean)": 0.0,
        "org.jfree.data.time$SerialDate#relativeToString(int)": 0.0,
        "org.jfree.data.time$SerialDate#setDescription(java.lang.String)": 0.0,
        "org.jfree.data.time$SerialDate#stringToMonthCode(java.lang.String)": -0.02322541398277875,
        "org.jfree.data.time$SerialDate#stringToWeekdayCode(java.lang.String)": 0.0,
        "org.jfree.data.time$SerialDate#toString()": 0.0,
        "org.jfree.data.time$SerialDate#weekInMonthToString(int)": 0.0,
        "org.jfree.data.time$SerialDate#weekdayCodeToString(int)": 0.0,
        "org.jfree.data.time$SpreadsheetDate#SpreadsheetDate(int)": 0.16188802585599416,
        "org.jfree.data.time$SpreadsheetDate#SpreadsheetDate(int,int,int)": -0.08450395593442325,
        "org.jfree.data.time$SpreadsheetDate#calcSerial(int,int,int)": -0.08450395593442325,
        "org.jfree.data.time$SpreadsheetDate#compare(org.jfree.data.time.SerialDate)": 0.17770282313435937,
        "org.jfree.data.time$SpreadsheetDate#compareTo(java.lang.Object)": 0.0,
        "org.jfree.data.time$SpreadsheetDate#equals(java.lang.Object)": -0.11489917188014133,
        "org.jfree.data.time$SpreadsheetDate#getDayOfMonth()": -0.3097754105443981,
        "org.jfree.data.time$SpreadsheetDate#getDayOfWeek()": 0.0,
        "org.jfree.data.time$SpreadsheetDate#getMonth()": -0.3097754105443981,
        "org.jfree.data.time$SpreadsheetDate#getYYYY()": -0.3097754105443981,
        "org.jfree.data.time$SpreadsheetDate#hashCode()": -0.058721517117045194,
        "org.jfree.data.time$SpreadsheetDate#isAfter(org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$SpreadsheetDate#isBefore(org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$SpreadsheetDate#isInRange(org.jfree.data.time.SerialDate,org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$SpreadsheetDate#isInRange(org.jfree.data.time.SerialDate,org.jfree.data.time.SerialDate,int)": 0.0,
        "org.jfree.data.time$SpreadsheetDate#isOn(org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$SpreadsheetDate#isOnOrAfter(org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$SpreadsheetDate#isOnOrBefore(org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$SpreadsheetDate#toDate()": 0.0,
        "org.jfree.data.time$SpreadsheetDate#toSerial()": -0.16746068484491958,
        "org.jfree.data.time$TimePeriodAnchor#<clinit>()": 0.09807059838697743,
        "org.jfree.data.time$TimePeriodAnchor#TimePeriodAnchor(java.lang.String)": -0.12720085622299757,
        "org.jfree.data.time$TimePeriodAnchor#equals(java.lang.Object)": -0.07697162467080898,
        "org.jfree.data.time$TimePeriodAnchor#hashCode()": -0.023225413982778775,
        "org.jfree.data.time$TimePeriodAnchor#readResolve()": -0.058721517117045194,
        "org.jfree.data.time$TimePeriodAnchor#toString()": 0.0,
        "org.jfree.data.time$TimeSeries#TimeSeries(java.lang.Comparable)": 0.07054439388885442,
        "org.jfree.data.time$TimeSeries#TimeSeries(java.lang.Comparable,java.lang.String,java.lang.String)": 0.07054439388885442,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.RegularTimePeriod,double)": 0.11061548766066939,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.RegularTimePeriod,double,boolean)": 0.11061548766066939,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.RegularTimePeriod,java.lang.Number)": -0.1572196173112387,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.RegularTimePeriod,java.lang.Number,boolean)": -0.1572196173112387,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.TimeSeriesDataItem)": -0.04748228748077153,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.TimeSeriesDataItem,boolean)": 0.08163721900278167,
        "org.jfree.data.time$TimeSeries#addAndOrUpdate(org.jfree.data.time.TimeSeries)": -0.02322541398277875,
        "org.jfree.data.time$TimeSeries#addOrUpdate(org.jfree.data.time.RegularTimePeriod,double)": -0.05335904646307371,
        "org.jfree.data.time$TimeSeries#addOrUpdate(org.jfree.data.time.RegularTimePeriod,java.lang.Number)": -0.06835852491775252,
        "org.jfree.data.time$TimeSeries#addOrUpdate(org.jfree.data.time.TimeSeriesDataItem)": -0.06835852491775252,
        "org.jfree.data.time$TimeSeries#clear()": -0.02322541398277875,
        "org.jfree.data.time$TimeSeries#clone()": -0.04748228748077153,
        "org.jfree.data.time$TimeSeries#createCopy(int,int)": -0.03314780294366223,
        "org.jfree.data.time$TimeSeries#createCopy(org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod)": -0.03314780294366223,
        "org.jfree.data.time$TimeSeries#delete(int,int)": -0.040881516174663936,
        "org.jfree.data.time$TimeSeries#delete(int,int,boolean)": -0.040881516174663936,
        "org.jfree.data.time$TimeSeries#delete(org.jfree.data.time.RegularTimePeriod)": -0.03314780294366223,
        "org.jfree.data.time$TimeSeries#equals(java.lang.Object)": -0.08485741089496995,
        "org.jfree.data.time$TimeSeries#findBoundsByIteration()": -0.10878808397177664,
        "org.jfree.data.time$TimeSeries#getDataItem(int)": -0.040881516174663936,
        "org.jfree.data.time$TimeSeries#getDataItem(org.jfree.data.time.RegularTimePeriod)": -0.02322541398277875,
        "org.jfree.data.time$TimeSeries#getDomainDescription()": -0.08485741089497001,
        "org.jfree.data.time$TimeSeries#getIndex(org.jfree.data.time.RegularTimePeriod)": -0.08099252901602469,
        "org.jfree.data.time$TimeSeries#getItemCount()": -0.152546152059249,
        "org.jfree.data.time$TimeSeries#getItems()": 0.0,
        "org.jfree.data.time$TimeSeries#getMaxY()": -0.07697162467080898,
        "org.jfree.data.time$TimeSeries#getMaximumItemAge()": -0.09219207433891574,
        "org.jfree.data.time$TimeSeries#getMaximumItemCount()": -0.09219207433891574,
        "org.jfree.data.time$TimeSeries#getMinY()": -0.07697162467080898,
        "org.jfree.data.time$TimeSeries#getNextTimePeriod()": 0.0,
        "org.jfree.data.time$TimeSeries#getRangeDescription()": -0.08485741089497001,
        "org.jfree.data.time$TimeSeries#getRawDataItem(int)": -0.14135586053016833,
        "org.jfree.data.time$TimeSeries#getRawDataItem(org.jfree.data.time.RegularTimePeriod)": 0.0,
        "org.jfree.data.time$TimeSeries#getTimePeriod(int)": 0.08391559407980659,
        "org.jfree.data.time$TimeSeries#getTimePeriodClass()": -0.023225413982778775,
        "org.jfree.data.time$TimeSeries#getTimePeriods()": 0.0,
        "org.jfree.data.time$TimeSeries#getTimePeriodsUniqueToOtherSeries(org.jfree.data.time.TimeSeries)": 0.0,
        "org.jfree.data.time$TimeSeries#getValue(int)": -0.05335904646307371,
        "org.jfree.data.time$TimeSeries#getValue(org.jfree.data.time.RegularTimePeriod)": -0.05335904646307371,
        "org.jfree.data.time$TimeSeries#hashCode()": -0.02322541398277875,
        "org.jfree.data.time$TimeSeries#maxIgnoreNaN(double,double)": -0.14363423560719332,
        "org.jfree.data.time$TimeSeries#minIgnoreNaN(double,double)": -0.14363423560719332,
        "org.jfree.data.time$TimeSeries#removeAgedItems(boolean)": 0.08163721900278167,
        "org.jfree.data.time$TimeSeries#removeAgedItems(long,boolean)": -0.040881516174663936,
        "org.jfree.data.time$TimeSeries#setDomainDescription(java.lang.String)": 0.0,
        "org.jfree.data.time$TimeSeries#setMaximumItemAge(long)": -0.05335904646307371,
        "org.jfree.data.time$TimeSeries#setMaximumItemCount(int)": -0.05335904646307371,
        "org.jfree.data.time$TimeSeries#setRangeDescription(java.lang.String)": 0.0,
        "org.jfree.data.time$TimeSeries#update(int,java.lang.Number)": -0.03314780294366223,
        "org.jfree.data.time$TimeSeries#update(org.jfree.data.time.RegularTimePeriod,java.lang.Number)": -0.03314780294366223,
        "org.jfree.data.time$TimeSeries#updateBoundsForAddedItem(org.jfree.data.time.TimeSeriesDataItem)": 0.08163721900278167,
        "org.jfree.data.time$TimeSeries#updateBoundsForRemovedItem(org.jfree.data.time.TimeSeriesDataItem)": -0.05335904646307371,
        "org.jfree.data.time$TimeSeriesCollection#TimeSeriesCollection()": 0.17770282313435937,
        "org.jfree.data.time$TimeSeriesCollection#TimeSeriesCollection(java.util.TimeZone)": 0.0,
        "org.jfree.data.time$TimeSeriesCollection#TimeSeriesCollection(org.jfree.data.time.TimeSeries)": -0.04748228748077153,
        "org.jfree.data.time$TimeSeriesCollection#TimeSeriesCollection(org.jfree.data.time.TimeSeries,java.util.TimeZone)": 0.16188802585599416,
        "org.jfree.data.time$TimeSeriesCollection#addSeries(org.jfree.data.time.TimeSeries)": 0.1917519265112925,
        "org.jfree.data.time$TimeSeriesCollection#clearSelection()": 0.0,
        "org.jfree.data.time$TimeSeriesCollection#clone()": -0.02322541398277875,
        "org.jfree.data.time$TimeSeriesCollection#equals(java.lang.Object)": -0.058721517117045194,
        "org.jfree.data.time$TimeSeriesCollection#getDomainBounds(boolean)": 0.22724802964555896,
        "org.jfree.data.time$TimeSeriesCollection#getDomainBounds(java.util.List,boolean)": 0.0,
        "org.jfree.data.time$TimeSeriesCollection#getDomainLowerBound(boolean)": 0.0,
        "org.jfree.data.time$TimeSeriesCollection#getDomainOrder()": 0.0,
        "org.jfree.data.time$TimeSeriesCollection#getDomainUpperBound(boolean)": 0.0,
        "org.jfree.data.time$TimeSeriesCollection#getEndX(int,int)": 0.0,
        "org.jfree.data.time$TimeSeriesCollection#getEndY(int,int)": 0.0,
        "org.jfree.data.time$TimeSeriesCollection#getItemCount(int)": 0.0,
        "org.jfree.data.time$TimeSeriesCollection#getRangeBounds(java.util.List,org.jfree.data.Range,boolean)": 0.0,
        "org.jfree.data.time$TimeSeriesCollection#getSeries()": 0.0,
        "org.jfree.data.time$TimeSeriesCollection#getSeries(int)": -0.058721517117045194,
        "org.jfree.data.time$TimeSeriesCollection#getSeries(java.lang.Comparable)": 0.0,
        "org.jfree.data.time$TimeSeriesCollection#getSeriesCount()": -0.05872151711704521,
        "org.jfree.data.time$TimeSeriesCollection#getSeriesKey(int)": -0.02322541398277875,
        "org.jfree.data.time$TimeSeriesCollection#getStartX(int,int)": 0.0,
        "org.jfree.data.time$TimeSeriesCollection#getStartY(int,int)": 0.0,
        "org.jfree.data.time$TimeSeriesCollection#getSurroundingItems(int,long)": -0.02322541398277875,
        "org.jfree.data.time$TimeSeriesCollection#getX(int,int)": -0.02322541398277875,
        "org.jfree.data.time$TimeSeriesCollection#getX(org.jfree.data.time.RegularTimePeriod)": -0.02322541398277875,
        "org.jfree.data.time$TimeSeriesCollection#getXPosition()": 0.0,
        "org.jfree.data.time$TimeSeriesCollection#getXValue(int,int)": 0.0,
        "org.jfree.data.time$TimeSeriesCollection#getY(int,int)": 0.0,
        "org.jfree.data.time$TimeSeriesCollection#hashCode()": 0.0,
        "org.jfree.data.time$TimeSeriesCollection#indexOf(org.jfree.data.time.TimeSeries)": -0.023225413982778775,
        "org.jfree.data.time$TimeSeriesCollection#isSelected(int,int)": 0.0,
        "org.jfree.data.time$TimeSeriesCollection#removeAllSeries()": 0.0,
        "org.jfree.data.time$TimeSeriesCollection#removeSeries(int)": -0.02322541398277875,
        "org.jfree.data.time$TimeSeriesCollection#removeSeries(org.jfree.data.time.TimeSeries)": -0.04748228748077153,
        "org.jfree.data.time$TimeSeriesCollection#setSelected(int,int,boolean)": 0.0,
        "org.jfree.data.time$TimeSeriesCollection#setSelected(int,int,boolean,boolean)": 0.0,
        "org.jfree.data.time$TimeSeriesCollection#setXPosition(org.jfree.data.time.TimePeriodAnchor)": -0.02322541398277875,
        "org.jfree.data.time$TimeSeriesDataItem#TimeSeriesDataItem(org.jfree.data.time.RegularTimePeriod,double)": 0.088538050551207,
        "org.jfree.data.time$TimeSeriesDataItem#TimeSeriesDataItem(org.jfree.data.time.RegularTimePeriod,java.lang.Number)": -0.15034704309906874,
        "org.jfree.data.time$TimeSeriesDataItem#clone()": -0.14363423560719332,
        "org.jfree.data.time$TimeSeriesDataItem#compareTo(java.lang.Object)": -0.11187539050221756,
        "org.jfree.data.time$TimeSeriesDataItem#equals(java.lang.Object)": -0.07697162467080897,
        "org.jfree.data.time$TimeSeriesDataItem#getPeriod()": -0.14363423560719332,
        "org.jfree.data.time$TimeSeriesDataItem#getValue()": -0.14363423560719332,
        "org.jfree.data.time$TimeSeriesDataItem#hashCode()": -0.02322541398277875,
        "org.jfree.data.time$TimeSeriesDataItem#isSelected()": 0.0,
        "org.jfree.data.time$TimeSeriesDataItem#setSelected(boolean)": 0.0,
        "org.jfree.data.time$TimeSeriesDataItem#setValue(java.lang.Number)": -0.07697162467080898,
        "org.jfree.data.time$Year#Year()": -0.02322541398277875,
        "org.jfree.data.time$Year#Year(int)": -0.27866981801241875,
        "org.jfree.data.time$Year#Year(java.util.Date)": -0.02322541398277875,
        "org.jfree.data.time$Year#Year(java.util.Date,java.util.TimeZone)": -0.05335904646307371,
        "org.jfree.data.time$Year#Year(java.util.Date,java.util.TimeZone,java.util.Locale)": -0.05335904646307371,
        "org.jfree.data.time$Year#compareTo(java.lang.Object)": -0.1777481410776118,
        "org.jfree.data.time$Year#equals(java.lang.Object)": -0.15240284524136039,
        "org.jfree.data.time$Year#getFirstMillisecond()": -0.09909041302239907,
        "org.jfree.data.time$Year#getFirstMillisecond(java.util.Calendar)": -0.2835982877122758,
        "org.jfree.data.time$Year#getLastMillisecond()": -0.09909041302239907,
        "org.jfree.data.time$Year#getLastMillisecond(java.util.Calendar)": -0.2835982877122758,
        "org.jfree.data.time$Year#getSerialIndex()": -0.15721961731123857,
        "org.jfree.data.time$Year#getYear()": -0.19473082262498798,
        "org.jfree.data.time$Year#hashCode()": -0.03314780294366226,
        "org.jfree.data.time$Year#next()": -0.040881516174663936,
        "org.jfree.data.time$Year#parseYear(java.lang.String)": -0.040881516174663936,
        "org.jfree.data.time$Year#peg(java.util.Calendar)": -0.2835982877122757,
        "org.jfree.data.time$Year#previous()": -0.03314780294366223,
        "org.jfree.data.time$Year#toString()": 0.0,
        "org.jfree.data.xy$AbstractIntervalXYDataset#AbstractIntervalXYDataset()": 1.3473772296714337,
        "org.jfree.data.xy$AbstractIntervalXYDataset#getEndXValue(int,int)": -0.06369428511586006,
        "org.jfree.data.xy$AbstractIntervalXYDataset#getEndYValue(int,int)": -0.040881516174663936,
        "org.jfree.data.xy$AbstractIntervalXYDataset#getStartXValue(int,int)": -0.06369428511586006,
        "org.jfree.data.xy$AbstractIntervalXYDataset#getStartYValue(int,int)": -0.040881516174663936,
        "org.jfree.data.xy$AbstractXYDataset#AbstractXYDataset()": 1.3015768082463335,
        "org.jfree.data.xy$AbstractXYDataset#getDomainOrder()": -0.058721517117045194,
        "org.jfree.data.xy$AbstractXYDataset#getSelectionState()": 0.0,
        "org.jfree.data.xy$AbstractXYDataset#getXValue(int,int)": -0.1947308226249881,
        "org.jfree.data.xy$AbstractXYDataset#getYValue(int,int)": -0.1905798092424695,
        "org.jfree.data.xy$AbstractXYDataset#setSelectionState(org.jfree.data.xy.XYDatasetSelectionState)": 1.5065257209240173,
        "org.jfree.data.xy$DefaultXYDataset#DefaultXYDataset()": 0.10299715791271077,
        "org.jfree.data.xy$DefaultXYDataset#addSeries(java.lang.Comparable,double[][])": -0.11187539050221756,
        "org.jfree.data.xy$DefaultXYDataset#clone()": -0.03314780294366223,
        "org.jfree.data.xy$DefaultXYDataset#equals(java.lang.Object)": -0.05872151711704521,
        "org.jfree.data.xy$DefaultXYDataset#getDomainOrder()": -0.040881516174663936,
        "org.jfree.data.xy$DefaultXYDataset#getItemCount(int)": -0.07277062049397834,
        "org.jfree.data.xy$DefaultXYDataset#getSeriesCount()": -0.09842980230701177,
        "org.jfree.data.xy$DefaultXYDataset#getSeriesKey(int)": -0.05335904646307371,
        "org.jfree.data.xy$DefaultXYDataset#getX(int,int)": 0.0,
        "org.jfree.data.xy$DefaultXYDataset#getXValue(int,int)": -0.07697162467080898,
        "org.jfree.data.xy$DefaultXYDataset#getY(int,int)": 0.0,
        "org.jfree.data.xy$DefaultXYDataset#getYValue(int,int)": -0.040881516174663846,
        "org.jfree.data.xy$DefaultXYDataset#hashCode()": 0.0,
        "org.jfree.data.xy$DefaultXYDataset#indexOf(java.lang.Comparable)": -0.1118753905022174,
        "org.jfree.data.xy$DefaultXYDataset#removeSeries(java.lang.Comparable)": 0.0,
        "org.jfree.data.xy$IntervalXYDelegate#IntervalXYDelegate(org.jfree.data.xy.XYDataset)": -0.08099252901602469,
        "org.jfree.data.xy$IntervalXYDelegate#IntervalXYDelegate(org.jfree.data.xy.XYDataset,boolean)": 0.14776615025365097,
        "org.jfree.data.xy$IntervalXYDelegate#calculateIntervalForSeries(int)": -0.06369428511586006,
        "org.jfree.data.xy$IntervalXYDelegate#clone()": -0.03314780294366226,
        "org.jfree.data.xy$IntervalXYDelegate#datasetChanged(org.jfree.data.general.DatasetChangeEvent)": 1.4066856595726414,
        "org.jfree.data.xy$IntervalXYDelegate#equals(java.lang.Object)": -0.09909041302239907,
        "org.jfree.data.xy$IntervalXYDelegate#getDomainBounds(boolean)": 1.6305586097823852,
        "org.jfree.data.xy$IntervalXYDelegate#getDomainLowerBound(boolean)": -0.02322541398277875,
        "org.jfree.data.xy$IntervalXYDelegate#getDomainUpperBound(boolean)": -0.02322541398277875,
        "org.jfree.data.xy$IntervalXYDelegate#getEndX(int,int)": -0.040881516174663936,
        "org.jfree.data.xy$IntervalXYDelegate#getEndXValue(int,int)": 0.0,
        "org.jfree.data.xy$IntervalXYDelegate#getFixedIntervalWidth()": 0.0,
        "org.jfree.data.xy$IntervalXYDelegate#getIntervalPositionFactor()": 0.33715360093857033,
        "org.jfree.data.xy$IntervalXYDelegate#getIntervalWidth()": 1.5998267216777387,
        "org.jfree.data.xy$IntervalXYDelegate#getStartX(int,int)": -0.040881516174663936,
        "org.jfree.data.xy$IntervalXYDelegate#getStartXValue(int,int)": 0.0,
        "org.jfree.data.xy$IntervalXYDelegate#hashCode()": 0.0,
        "org.jfree.data.xy$IntervalXYDelegate#isAutoWidth()": 0.33715360093857033,
        "org.jfree.data.xy$IntervalXYDelegate#recalculateInterval()": -0.06369428511586006,
        "org.jfree.data.xy$IntervalXYDelegate#setAutoWidth(boolean)": -0.06835852491775252,
        "org.jfree.data.xy$IntervalXYDelegate#setFixedIntervalWidth(double)": -0.06699008532055291,
        "org.jfree.data.xy$IntervalXYDelegate#setIntervalPositionFactor(double)": -0.05872151711704521,
        "org.jfree.data.xy$XYDataItem#XYDataItem(double,double)": -0.040881516174663936,
        "org.jfree.data.xy$XYDataItem#XYDataItem(java.lang.Number,java.lang.Number)": 0.13182857753749083,
        "org.jfree.data.xy$XYDataItem#clone()": 0.13497774604269025,
        "org.jfree.data.xy$XYDataItem#compareTo(java.lang.Object)": 1.4492164950819875,
        "org.jfree.data.xy$XYDataItem#equals(java.lang.Object)": -0.10878808397177664,
        "org.jfree.data.xy$XYDataItem#getX()": 0.15592580658475402,
        "org.jfree.data.xy$XYDataItem#getXValue()": 0.1365592966766414,
        "org.jfree.data.xy$XYDataItem#getY()": 0.1365592966766414,
        "org.jfree.data.xy$XYDataItem#getYValue()": 0.1365592966766414,
        "org.jfree.data.xy$XYDataItem#hashCode()": -0.023225413982778775,
        "org.jfree.data.xy$XYDataItem#isSelected()": 0.0,
        "org.jfree.data.xy$XYDataItem#setSelected(boolean)": 0.0,
        "org.jfree.data.xy$XYDataItem#setY(double)": 0.0,
        "org.jfree.data.xy$XYDataItem#setY(java.lang.Number)": -0.0727706204939782,
        "org.jfree.data.xy$XYDataItem#toString()": 0.0,
        "org.jfree.data.xy$XYSeries#XYSeries(java.lang.Comparable)": 1.4474581411203604,
        "org.jfree.data.xy$XYSeries#XYSeries(java.lang.Comparable,boolean)": 0.0,
        "org.jfree.data.xy$XYSeries#XYSeries(java.lang.Comparable,boolean,boolean)": 1.3867073075528,
        "org.jfree.data.xy$XYSeries#add(double,double)": 1.4056065270896094,
        "org.jfree.data.xy$XYSeries#add(double,double,boolean)": 0.0,
        "org.jfree.data.xy$XYSeries#add(double,java.lang.Number)": -0.11489917188014133,
        "org.jfree.data.xy$XYSeries#add(double,java.lang.Number,boolean)": 0.0,
        "org.jfree.data.xy$XYSeries#add(java.lang.Number,java.lang.Number)": -0.1292060967094633,
        "org.jfree.data.xy$XYSeries#add(java.lang.Number,java.lang.Number,boolean)": 1.404005683818264,
        "org.jfree.data.xy$XYSeries#add(org.jfree.data.xy.XYDataItem)": -0.03314780294366223,
        "org.jfree.data.xy$XYSeries#add(org.jfree.data.xy.XYDataItem,boolean)": 1.4008186945977084,
        "org.jfree.data.xy$XYSeries#addOrUpdate(double,double)": -0.03314780294366223,
        "org.jfree.data.xy$XYSeries#addOrUpdate(java.lang.Number,java.lang.Number)": -0.04748228748077153,
        "org.jfree.data.xy$XYSeries#addOrUpdate(org.jfree.data.xy.XYDataItem)": -0.04748228748077153,
        "org.jfree.data.xy$XYSeries#clear()": -0.03314780294366223,
        "org.jfree.data.xy$XYSeries#clone()": -0.058721517117045194,
        "org.jfree.data.xy$XYSeries#createCopy(int,int)": 0.0,
        "org.jfree.data.xy$XYSeries#delete(int,int)": -0.02322541398277875,
        "org.jfree.data.xy$XYSeries#equals(java.lang.Object)": -0.11187539050221756,
        "org.jfree.data.xy$XYSeries#findBoundsByIteration()": -0.09219207433891567,
        "org.jfree.data.xy$XYSeries#getAllowDuplicateXValues()": -0.1346087868382182,
        "org.jfree.data.xy$XYSeries#getAutoSort()": -0.047482287480771435,
        "org.jfree.data.xy$XYSeries#getDataItem(int)": 0.0,
        "org.jfree.data.xy$XYSeries#getItemCount()": 0.13497774604269025,
        "org.jfree.data.xy$XYSeries#getItems()": 0.0,
        "org.jfree.data.xy$XYSeries#getMaxX()": 0.3513866030659994,
        "org.jfree.data.xy$XYSeries#getMaxY()": -0.09569017516582456,
        "org.jfree.data.xy$XYSeries#getMaximumItemCount()": -0.023225413982778775,
        "org.jfree.data.xy$XYSeries#getMinX()": 0.3513866030659994,
        "org.jfree.data.xy$XYSeries#getMinY()": -0.09569017516582456,
        "org.jfree.data.xy$XYSeries#getRawDataItem(int)": -0.24970063961815026,
        "org.jfree.data.xy$XYSeries#getX(int)": -0.22044067048052746,
        "org.jfree.data.xy$XYSeries#getY(int)": -0.20882781907361786,
        "org.jfree.data.xy$XYSeries#hashCode()": -0.02322541398277875,
        "org.jfree.data.xy$XYSeries#indexOf(java.lang.Number)": -0.10878808397177664,
        "org.jfree.data.xy$XYSeries#maxIgnoreNaN(double,double)": 0.1365592966766414,
        "org.jfree.data.xy$XYSeries#minIgnoreNaN(double,double)": 0.1365592966766414,
        "org.jfree.data.xy$XYSeries#remove(int)": -0.05335904646307371,
        "org.jfree.data.xy$XYSeries#remove(java.lang.Number)": -0.04748228748077153,
        "org.jfree.data.xy$XYSeries#setMaximumItemCount(int)": -0.04748228748077153,
        "org.jfree.data.xy$XYSeries#toArray()": -0.03314780294366223,
        "org.jfree.data.xy$XYSeries#update(java.lang.Number,java.lang.Number)": -0.040881516174663936,
        "org.jfree.data.xy$XYSeries#updateBoundsForAddedItem(org.jfree.data.xy.XYDataItem)": 1.3992324174158097,
        "org.jfree.data.xy$XYSeries#updateBoundsForRemovedItem(org.jfree.data.xy.XYDataItem)": -0.06369428511586006,
        "org.jfree.data.xy$XYSeries#updateByIndex(int,java.lang.Number)": -0.058721517117045194,
        "org.jfree.data.xy$XYSeriesCollection#XYSeriesCollection()": 0.38076151917714185,
        "org.jfree.data.xy$XYSeriesCollection#XYSeriesCollection(org.jfree.data.xy.XYSeries)": 1.4765786576132482,
        "org.jfree.data.xy$XYSeriesCollection#addSeries(org.jfree.data.xy.XYSeries)": 0.4021612291027262,
        "org.jfree.data.xy$XYSeriesCollection#clearSelection()": 0.0,
        "org.jfree.data.xy$XYSeriesCollection#clone()": -0.02322541398277875,
        "org.jfree.data.xy$XYSeriesCollection#equals(java.lang.Object)": -0.05335904646307371,
        "org.jfree.data.xy$XYSeriesCollection#getDomainBounds(boolean)": 1.6401956175830925,
        "org.jfree.data.xy$XYSeriesCollection#getDomainLowerBound(boolean)": -0.02322541398277875,
        "org.jfree.data.xy$XYSeriesCollection#getDomainOrder()": -0.03314780294366223,
        "org.jfree.data.xy$XYSeriesCollection#getDomainUpperBound(boolean)": -0.02322541398277875,
        "org.jfree.data.xy$XYSeriesCollection#getEndX(int,int)": -0.02322541398277875,
        "org.jfree.data.xy$XYSeriesCollection#getEndY(int,int)": -0.040881516174663936,
        "org.jfree.data.xy$XYSeriesCollection#getIntervalPositionFactor()": -0.02322541398277875,
        "org.jfree.data.xy$XYSeriesCollection#getIntervalWidth()": -0.02322541398277875,
        "org.jfree.data.xy$XYSeriesCollection#getItemCount(int)": -0.1548243766248829,
        "org.jfree.data.xy$XYSeriesCollection#getRangeBounds(boolean)": -0.04748228748077153,
        "org.jfree.data.xy$XYSeriesCollection#getRangeLowerBound(boolean)": -0.02322541398277875,
        "org.jfree.data.xy$XYSeriesCollection#getRangeUpperBound(boolean)": -0.02322541398277875,
        "org.jfree.data.xy$XYSeriesCollection#getSeries()": 0.0,
        "org.jfree.data.xy$XYSeriesCollection#getSeries(int)": 1.512548929677546,
        "org.jfree.data.xy$XYSeriesCollection#getSeries(java.lang.Comparable)": -0.02322541398277875,
        "org.jfree.data.xy$XYSeriesCollection#getSeriesCount()": 0.2333798856550378,
        "org.jfree.data.xy$XYSeriesCollection#getSeriesKey(int)": -0.13192768416091805,
        "org.jfree.data.xy$XYSeriesCollection#getStartX(int,int)": -0.02322541398277875,
        "org.jfree.data.xy$XYSeriesCollection#getStartY(int,int)": -0.040881516174663936,
        "org.jfree.data.xy$XYSeriesCollection#getX(int,int)": -0.14496872595721724,
        "org.jfree.data.xy$XYSeriesCollection#getY(int,int)": -0.14747628571562693,
        "org.jfree.data.xy$XYSeriesCollection#hashCode()": 0.0,
        "org.jfree.data.xy$XYSeriesCollection#indexOf(org.jfree.data.xy.XYSeries)": -0.023225413982778775,
        "org.jfree.data.xy$XYSeriesCollection#isAutoWidth()": 0.0,
        "org.jfree.data.xy$XYSeriesCollection#isSelected(int,int)": 0.0,
        "org.jfree.data.xy$XYSeriesCollection#removeAllSeries()": 0.0,
        "org.jfree.data.xy$XYSeriesCollection#removeSeries(int)": -0.02322541398277875,
        "org.jfree.data.xy$XYSeriesCollection#removeSeries(org.jfree.data.xy.XYSeries)": -0.02322541398277875,
        "org.jfree.data.xy$XYSeriesCollection#setAutoWidth(boolean)": -0.02322541398277875,
        "org.jfree.data.xy$XYSeriesCollection#setIntervalPositionFactor(double)": -0.02322541398277875,
        "org.jfree.data.xy$XYSeriesCollection#setIntervalWidth(double)": 0.17770282313435937,
        "org.jfree.data.xy$XYSeriesCollection#setSelected(int,int,boolean)": 0.0,
        "org.jfree.data.xy$XYSeriesCollection#setSelected(int,int,boolean,boolean)": 0.0
    },
    "Chart-5": {
        "org.jfree.data.general$Series#Series(java.lang.Comparable)": -0.16508694111350886,
        "org.jfree.data.general$Series#Series(java.lang.Comparable,java.lang.String)": -1.5108733787404138,
        "org.jfree.data.general$Series#addChangeListener(org.jfree.data.general.SeriesChangeListener)": -1.3789537191050032,
        "org.jfree.data.general$Series#addPropertyChangeListener(java.beans.PropertyChangeListener)": 0.0,
        "org.jfree.data.general$Series#clone()": -0.40590790297481694,
        "org.jfree.data.general$Series#equals(java.lang.Object)": -0.8055408938295243,
        "org.jfree.data.general$Series#firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)": -0.06085479204298916,
        "org.jfree.data.general$Series#fireSeriesChanged()": -0.044847579535732485,
        "org.jfree.data.general$Series#getDescription()": -0.766488875309925,
        "org.jfree.data.general$Series#getKey()": -1.127172178625817,
        "org.jfree.data.general$Series#getNotify()": 0.0,
        "org.jfree.data.general$Series#hashCode()": -0.1096020989622014,
        "org.jfree.data.general$Series#isEmpty()": -0.14522754455447318,
        "org.jfree.data.general$Series#notifyListeners(org.jfree.data.general.SeriesChangeEvent)": -1.3906340171626375,
        "org.jfree.data.general$Series#removeChangeListener(org.jfree.data.general.SeriesChangeListener)": -0.2725340221253487,
        "org.jfree.data.general$Series#removePropertyChangeListener(java.beans.PropertyChangeListener)": 0.0,
        "org.jfree.data.general$Series#setDescription(java.lang.String)": -0.16081984538935612,
        "org.jfree.data.general$Series#setKey(java.lang.Comparable)": -0.14522754455447306,
        "org.jfree.data.general$Series#setNotify(boolean)": 0.0,
        "org.jfree.data.general$SeriesChangeEvent#SeriesChangeEvent(java.lang.Object)": -1.3906340171626375,
        "org.jfree.data.general$SeriesException#SeriesException(java.lang.String)": -0.08800136243340728,
        "org.jfree.data.xy$XYDataItem#XYDataItem(double,double)": -0.1096020989622014,
        "org.jfree.data.xy$XYDataItem#XYDataItem(java.lang.Number,java.lang.Number)": -0.5356321408515624,
        "org.jfree.data.xy$XYDataItem#clone()": -0.1892477579793974,
        "org.jfree.data.xy$XYDataItem#compareTo(java.lang.Object)": 1.0209190206400525,
        "org.jfree.data.xy$XYDataItem#equals(java.lang.Object)": -0.3137403558199421,
        "org.jfree.data.xy$XYDataItem#getX()": -0.4446959854266087,
        "org.jfree.data.xy$XYDataItem#getXValue()": 0.0,
        "org.jfree.data.xy$XYDataItem#getY()": -0.7926020392580204,
        "org.jfree.data.xy$XYDataItem#getYValue()": 0.0,
        "org.jfree.data.xy$XYDataItem#hashCode()": -0.06085479204298916,
        "org.jfree.data.xy$XYDataItem#setY(double)": 0.0,
        "org.jfree.data.xy$XYDataItem#setY(java.lang.Number)": -0.14522754455447306,
        "org.jfree.data.xy$XYDataItem#toString()": 0.0,
        "org.jfree.data.xy$XYSeries#XYSeries(java.lang.Comparable)": -0.8248098216775865,
        "org.jfree.data.xy$XYSeries#XYSeries(java.lang.Comparable,boolean)": 0.0,
        "org.jfree.data.xy$XYSeries#XYSeries(java.lang.Comparable,boolean,boolean)": 0.7804373854288228,
        "org.jfree.data.xy$XYSeries#add(double,double)": -0.9738084163361549,
        "org.jfree.data.xy$XYSeries#add(double,double,boolean)": 0.0,
        "org.jfree.data.xy$XYSeries#add(double,java.lang.Number)": -0.2831542675097055,
        "org.jfree.data.xy$XYSeries#add(double,java.lang.Number,boolean)": 0.0,
        "org.jfree.data.xy$XYSeries#add(java.lang.Number,java.lang.Number)": -0.33323402307370253,
        "org.jfree.data.xy$XYSeries#add(java.lang.Number,java.lang.Number,boolean)": -0.9798444467588159,
        "org.jfree.data.xy$XYSeries#add(org.jfree.data.xy.XYDataItem)": 0.0,
        "org.jfree.data.xy$XYSeries#add(org.jfree.data.xy.XYDataItem,boolean)": -0.9798444467588159,
        "org.jfree.data.xy$XYSeries#addOrUpdate(double,double)": 1.7591452079570107,
        "org.jfree.data.xy$XYSeries#addOrUpdate(java.lang.Number,java.lang.Number)": 1.7103979010377985,
        "org.jfree.data.xy$XYSeries#clear()": -0.0608547920429893,
        "org.jfree.data.xy$XYSeries#clone()": -0.16081984538935604,
        "org.jfree.data.xy$XYSeries#createCopy(int,int)": 0.0,
        "org.jfree.data.xy$XYSeries#delete(int,int)": 0.0,
        "org.jfree.data.xy$XYSeries#equals(java.lang.Object)": -0.3235676718904033,
        "org.jfree.data.xy$XYSeries#getAllowDuplicateXValues()": -0.3884089458932265,
        "org.jfree.data.xy$XYSeries#getAutoSort()": 0.0,
        "org.jfree.data.xy$XYSeries#getDataItem(int)": -0.9065611654630055,
        "org.jfree.data.xy$XYSeries#getItemCount()": -0.5236667916804983,
        "org.jfree.data.xy$XYSeries#getItems()": 0.0,
        "org.jfree.data.xy$XYSeries#getMaximumItemCount()": -0.06085479204298916,
        "org.jfree.data.xy$XYSeries#getX(int)": -0.4230378432297188,
        "org.jfree.data.xy$XYSeries#getY(int)": -0.2272741516687359,
        "org.jfree.data.xy$XYSeries#hashCode()": -0.0608547920429893,
        "org.jfree.data.xy$XYSeries#indexOf(java.lang.Number)": 1.5162608133620297,
        "org.jfree.data.xy$XYSeries#remove(int)": -0.12833210064227,
        "org.jfree.data.xy$XYSeries#remove(java.lang.Number)": -0.12833210064227,
        "org.jfree.data.xy$XYSeries#setMaximumItemCount(int)": -0.08800136243340734,
        "org.jfree.data.xy$XYSeries#toArray()": -0.08800136243340734,
        "org.jfree.data.xy$XYSeries#update(java.lang.Number,java.lang.Number)": -0.08800136243340734,
        "org.jfree.data.xy$XYSeries#updateByIndex(int,java.lang.Number)": 0.0
    },
    "Chart-6": {
        "org.jfree.chart.util$AbstractObjectList#AbstractObjectList()": 0.5538390643624728,
        "org.jfree.chart.util$AbstractObjectList#AbstractObjectList(int)": 0.5538390643624728,
        "org.jfree.chart.util$AbstractObjectList#AbstractObjectList(int,int)": -0.7919473732644321,
        "org.jfree.chart.util$AbstractObjectList#clear()": 0.0,
        "org.jfree.chart.util$AbstractObjectList#clone()": -0.3482819773885717,
        "org.jfree.chart.util$AbstractObjectList#equals(java.lang.Object)": 1.0394915038917918,
        "org.jfree.chart.util$AbstractObjectList#get(int)": -0.26138998450381645,
        "org.jfree.chart.util$AbstractObjectList#hashCode()": 0.8495068872483909,
        "org.jfree.chart.util$AbstractObjectList#indexOf(java.lang.Object)": -0.5937797835380949,
        "org.jfree.chart.util$AbstractObjectList#readObject(java.io.ObjectInputStream)": 0.7544909719901454,
        "org.jfree.chart.util$AbstractObjectList#set(int,java.lang.Object)": -0.26757278065163204,
        "org.jfree.chart.util$AbstractObjectList#size()": -0.6283206708238932,
        "org.jfree.chart.util$AbstractObjectList#writeObject(java.io.ObjectOutputStream)": 0.7544909719901454,
        "org.jfree.chart.util$ObjectUtilities#<clinit>()": -1.1788777778025046,
        "org.jfree.chart.util$ObjectUtilities#ObjectUtilities()": 0.0,
        "org.jfree.chart.util$ObjectUtilities#clone(java.lang.Object)": -0.4535078413077347,
        "org.jfree.chart.util$ObjectUtilities#convertName(java.lang.String,java.lang.Class)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#deepClone(java.util.Collection)": -0.29054663692265154,
        "org.jfree.chart.util$ObjectUtilities#equal(java.lang.Object,java.lang.Object)": 0.2754879982097128,
        "org.jfree.chart.util$ObjectUtilities#getClassLoader()": 0.0,
        "org.jfree.chart.util$ObjectUtilities#getClassLoader(java.lang.Class)": -0.33065429849876415,
        "org.jfree.chart.util$ObjectUtilities#getClassLoaderSource()": 0.0,
        "org.jfree.chart.util$ObjectUtilities#getResource(java.lang.String,java.lang.Class)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#getResourceAsStream(java.lang.String,java.lang.Class)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#getResourceRelative(java.lang.String,java.lang.Class)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#getResourceRelativeAsStream(java.lang.String,java.lang.Class)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#hashCode(java.lang.Object)": -0.10524897142508181,
        "org.jfree.chart.util$ObjectUtilities#isJDK14()": -0.33065429849876415,
        "org.jfree.chart.util$ObjectUtilities#loadAndInstantiate(java.lang.String,java.lang.Class)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#loadAndInstantiate(java.lang.String,java.lang.Class,java.lang.Class)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#parseVersions(java.lang.String)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#setClassLoader(java.lang.ClassLoader)": 0.0,
        "org.jfree.chart.util$ObjectUtilities#setClassLoaderSource(java.lang.String)": 0.0,
        "org.jfree.chart.util$SerialUtilities#SerialUtilities()": 0.0,
        "org.jfree.chart.util$SerialUtilities#isSerializable(java.lang.Class)": -0.5340076235918518,
        "org.jfree.chart.util$SerialUtilities#readAttributedString(java.io.ObjectInputStream)": -0.08455379700700405,
        "org.jfree.chart.util$SerialUtilities#readPaint(java.io.ObjectInputStream)": -0.5526944800353595,
        "org.jfree.chart.util$SerialUtilities#readPoint2D(java.io.ObjectInputStream)": -0.10524897142508172,
        "org.jfree.chart.util$SerialUtilities#readShape(java.io.ObjectInputStream)": -0.2213319582599405,
        "org.jfree.chart.util$SerialUtilities#readStroke(java.io.ObjectInputStream)": -0.5054188248663967,
        "org.jfree.chart.util$SerialUtilities#writeAttributedString(java.text.AttributedString,java.io.ObjectOutputStream)": -0.08455379700700405,
        "org.jfree.chart.util$SerialUtilities#writePaint(java.awt.Paint,java.io.ObjectOutputStream)": -0.5526944800353595,
        "org.jfree.chart.util$SerialUtilities#writePoint2D(java.awt.geom.Point2D,java.io.ObjectOutputStream)": -0.10524897142508172,
        "org.jfree.chart.util$SerialUtilities#writeShape(java.awt.Shape,java.io.ObjectOutputStream)": -0.2213319582599405,
        "org.jfree.chart.util$SerialUtilities#writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)": -0.5054188248663967,
        "org.jfree.chart.util$ShapeList#ShapeList()": 0.7174657668030119,
        "org.jfree.chart.util$ShapeList#clone()": -0.3186144875381782,
        "org.jfree.chart.util$ShapeList#equals(java.lang.Object)": 1.1177143089518426,
        "org.jfree.chart.util$ShapeList#getShape(int)": 0.9489057142343076,
        "org.jfree.chart.util$ShapeList#hashCode()": 1.1171067811865476,
        "org.jfree.chart.util$ShapeList#readObject(java.io.ObjectInputStream)": 0.7924418387040695,
        "org.jfree.chart.util$ShapeList#setShape(int,java.awt.Shape)": 1.6343391459855194,
        "org.jfree.chart.util$ShapeList#writeObject(java.io.ObjectOutputStream)": 0.7924418387040695,
        "org.jfree.chart.util$ShapeUtilities#<clinit>()": -0.8046021987667777,
        "org.jfree.chart.util$ShapeUtilities#ShapeUtilities()": 0.0,
        "org.jfree.chart.util$ShapeUtilities#clone(java.awt.Shape)": -0.37665885618393796,
        "org.jfree.chart.util$ShapeUtilities#contains(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#createDiagonalCross(float,float)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#createDiamond(float)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#createDownTriangle(float)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#createLineRegion(java.awt.geom.Line2D,float)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#createRegularCross(float,float)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#createTranslatedShape(java.awt.Shape,double,double)": -0.09186056688431088,
        "org.jfree.chart.util$ShapeUtilities#createTranslatedShape(java.awt.Shape,org.jfree.chart.util.RectangleAnchor,double,double)": -0.2808456519243334,
        "org.jfree.chart.util$ShapeUtilities#createUpTriangle(float)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#drawRotatedShape(java.awt.Graphics2D,java.awt.Shape,double,float,float)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#equal(java.awt.Polygon,java.awt.Polygon)": -0.36826638027168834,
        "org.jfree.chart.util$ShapeUtilities#equal(java.awt.Shape,java.awt.Shape)": -0.5733944637487104,
        "org.jfree.chart.util$ShapeUtilities#equal(java.awt.geom.Arc2D,java.awt.geom.Arc2D)": -0.058515365813396336,
        "org.jfree.chart.util$ShapeUtilities#equal(java.awt.geom.Ellipse2D,java.awt.geom.Ellipse2D)": -0.36826638027168834,
        "org.jfree.chart.util$ShapeUtilities#equal(java.awt.geom.GeneralPath,java.awt.geom.GeneralPath)": -0.14939542777134918,
        "org.jfree.chart.util$ShapeUtilities#equal(java.awt.geom.Line2D,java.awt.geom.Line2D)": -0.2937391878290916,
        "org.jfree.chart.util$ShapeUtilities#getPointInRectangle(double,double,java.awt.geom.Rectangle2D)": 0.0,
        "org.jfree.chart.util$ShapeUtilities#intersects(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)": -0.03303381014715856,
        "org.jfree.chart.util$ShapeUtilities#rotateShape(java.awt.Shape,double,float,float)": -0.21385837733093882
    },
    "Chart-7": {
        "org.jfree.data.general$Series#Series(java.lang.Comparable)": 0.5499568378068195,
        "org.jfree.data.general$Series#Series(java.lang.Comparable,java.lang.String)": -0.7958295998200854,
        "org.jfree.data.general$Series#addChangeListener(org.jfree.data.general.SeriesChangeListener)": -0.8820945626473498,
        "org.jfree.data.general$Series#addPropertyChangeListener(java.beans.PropertyChangeListener)": 0.0,
        "org.jfree.data.general$Series#clone()": -0.25952327924422525,
        "org.jfree.data.general$Series#equals(java.lang.Object)": -0.5208216158663701,
        "org.jfree.data.general$Series#firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)": -0.04554833995196028,
        "org.jfree.data.general$Series#fireSeriesChanged()": 0.6177735611855389,
        "org.jfree.data.general$Series#getDescription()": -0.49395935829855775,
        "org.jfree.data.general$Series#getKey()": -0.7260452745695047,
        "org.jfree.data.general$Series#getNotify()": 0.0,
        "org.jfree.data.general$Series#hashCode()": -0.08130718031613116,
        "org.jfree.data.general$Series#isEmpty()": -0.10711381681866286,
        "org.jfree.data.general$Series#notifyListeners(org.jfree.data.general.SeriesChangeEvent)": -0.7280128764413657,
        "org.jfree.data.general$Series#removeChangeListener(org.jfree.data.general.SeriesChangeListener)": -0.17404293206083388,
        "org.jfree.data.general$Series#removePropertyChangeListener(java.beans.PropertyChangeListener)": 0.0,
        "org.jfree.data.general$Series#setDescription(java.lang.String)": -0.11833306819354106,
        "org.jfree.data.general$Series#setKey(java.lang.Comparable)": -0.10711381681866272,
        "org.jfree.data.general$Series#setNotify(boolean)": 0.0,
        "org.jfree.data.general$SeriesChangeEvent#SeriesChangeEvent(java.lang.Object)": -0.7280128764413657,
        "org.jfree.data.general$SeriesException#SeriesException(java.lang.String)": -0.06553086379436057,
        "org.jfree.data.time$Day#<clinit>()": -0.8017287490027198,
        "org.jfree.data.time$Day#Day()": -0.17404293206083374,
        "org.jfree.data.time$Day#Day(int,int,int)": -0.6350642463011861,
        "org.jfree.data.time$Day#Day(java.util.Date)": -0.1899659828522119,
        "org.jfree.data.time$Day#Day(java.util.Date,java.util.TimeZone)": -0.3135704110683464,
        "org.jfree.data.time$Day#Day(org.jfree.data.time.SerialDate)": -0.1899659828522119,
        "org.jfree.data.time$Day#compareTo(java.lang.Object)": -0.1570607309160899,
        "org.jfree.data.time$Day#equals(java.lang.Object)": -0.26583693785504,
        "org.jfree.data.time$Day#getDayOfMonth()": -0.56,
        "org.jfree.data.time$Day#getFirstMillisecond()": -0.18996598285221178,
        "org.jfree.data.time$Day#getFirstMillisecond(java.util.Calendar)": -0.7642354099799671,
        "org.jfree.data.time$Day#getLastMillisecond()": -0.18996598285221178,
        "org.jfree.data.time$Day#getLastMillisecond(java.util.Calendar)": -0.7642354099799671,
        "org.jfree.data.time$Day#getMonth()": -0.56,
        "org.jfree.data.time$Day#getSerialDate()": -0.29618857900973583,
        "org.jfree.data.time$Day#getSerialIndex()": -0.18996598285221178,
        "org.jfree.data.time$Day#getYear()": -0.5513998842142178,
        "org.jfree.data.time$Day#hashCode()": -0.11833306819354106,
        "org.jfree.data.time$Day#next()": -0.22642842243274455,
        "org.jfree.data.time$Day#parseDay(java.lang.String)": -0.06553086379436057,
        "org.jfree.data.time$Day#peg(java.util.Calendar)": -0.7642354099799671,
        "org.jfree.data.time$Day#previous()": -0.09490620371344458,
        "org.jfree.data.time$Day#toString()": 0.0,
        "org.jfree.data.time$RegularTimePeriod#<clinit>()": -0.8118222047208657,
        "org.jfree.data.time$RegularTimePeriod#RegularTimePeriod()": -0.7862064846082236,
        "org.jfree.data.time$RegularTimePeriod#createInstance(java.lang.Class,java.util.Date,java.util.TimeZone)": -0.04554833995196038,
        "org.jfree.data.time$RegularTimePeriod#downsize(java.lang.Class)": -0.09490620371344458,
        "org.jfree.data.time$RegularTimePeriod#getEnd()": 1.5935715775672554,
        "org.jfree.data.time$RegularTimePeriod#getMiddleMillisecond()": -0.21944973424022457,
        "org.jfree.data.time$RegularTimePeriod#getMiddleMillisecond(java.util.Calendar)": -0.04554833995196038,
        "org.jfree.data.time$RegularTimePeriod#getStart()": 1.5935715775672554,
        "org.jfree.data.time$RegularTimePeriod#toString()": 0.0,
        "org.jfree.data.time$SimpleTimePeriod#SimpleTimePeriod(java.util.Date,java.util.Date)": -0.3359497117098353,
        "org.jfree.data.time$SimpleTimePeriod#SimpleTimePeriod(long,long)": 0.11137084989847612,
        "org.jfree.data.time$SimpleTimePeriod#compareTo(java.lang.Object)": -0.04554833995196038,
        "org.jfree.data.time$SimpleTimePeriod#equals(java.lang.Object)": -0.17404293206083374,
        "org.jfree.data.time$SimpleTimePeriod#getEnd()": 0.2342135623730951,
        "org.jfree.data.time$SimpleTimePeriod#getEndMillis()": 0.0,
        "org.jfree.data.time$SimpleTimePeriod#getStart()": 0.2276022741806697,
        "org.jfree.data.time$SimpleTimePeriod#getStartMillis()": 0.0,
        "org.jfree.data.time$SimpleTimePeriod#hashCode()": -0.04554833995196028,
        "org.jfree.data.time$TimePeriodFormatException#TimePeriodFormatException(java.lang.String)": -0.06553086379436057,
        "org.jfree.data.time$TimePeriodValue#TimePeriodValue(org.jfree.data.time.TimePeriod,double)": 1.6378789367442066,
        "org.jfree.data.time$TimePeriodValue#TimePeriodValue(org.jfree.data.time.TimePeriod,java.lang.Number)": 0.27661128285596337,
        "org.jfree.data.time$TimePeriodValue#clone()": -0.04554833995196028,
        "org.jfree.data.time$TimePeriodValue#equals(java.lang.Object)": -0.10711381681866286,
        "org.jfree.data.time$TimePeriodValue#getPeriod()": 0.3001706303122612,
        "org.jfree.data.time$TimePeriodValue#getValue()": -0.08130718031613116,
        "org.jfree.data.time$TimePeriodValue#hashCode()": 0.0,
        "org.jfree.data.time$TimePeriodValue#setValue(java.lang.Number)": -0.04554833995196028,
        "org.jfree.data.time$TimePeriodValue#toString()": 0.0,
        "org.jfree.data.time$TimePeriodValues#TimePeriodValues(java.lang.Comparable)": 1.630034017147788,
        "org.jfree.data.time$TimePeriodValues#TimePeriodValues(java.lang.Comparable,java.lang.String,java.lang.String)": 1.630034017147788,
        "org.jfree.data.time$TimePeriodValues#add(org.jfree.data.time.TimePeriod,double)": 1.6719264087155472,
        "org.jfree.data.time$TimePeriodValues#add(org.jfree.data.time.TimePeriod,java.lang.Number)": 1.6719264087155472,
        "org.jfree.data.time$TimePeriodValues#add(org.jfree.data.time.TimePeriodValue)": 1.6459570679391662,
        "org.jfree.data.time$TimePeriodValues#clone()": -0.04554833995196038,
        "org.jfree.data.time$TimePeriodValues#createCopy(int,int)": -0.04554833995196038,
        "org.jfree.data.time$TimePeriodValues#delete(int,int)": -0.04554833995196038,
        "org.jfree.data.time$TimePeriodValues#equals(java.lang.Object)": -0.10711381681866286,
        "org.jfree.data.time$TimePeriodValues#getDataItem(int)": 0.3001706303122612,
        "org.jfree.data.time$TimePeriodValues#getDomainDescription()": -0.08130718031613116,
        "org.jfree.data.time$TimePeriodValues#getItemCount()": -0.1288033871712586,
        "org.jfree.data.time$TimePeriodValues#getMaxEndIndex()": -0.06553086379436057,
        "org.jfree.data.time$TimePeriodValues#getMaxMiddleIndex()": 0.4286652224211348,
        "org.jfree.data.time$TimePeriodValues#getMaxStartIndex()": -0.04554833995196028,
        "org.jfree.data.time$TimePeriodValues#getMinEndIndex()": 0.0,
        "org.jfree.data.time$TimePeriodValues#getMinMiddleIndex()": -0.06553086379436057,
        "org.jfree.data.time$TimePeriodValues#getMinStartIndex()": -0.08130718031613116,
        "org.jfree.data.time$TimePeriodValues#getRangeDescription()": -0.08130718031613116,
        "org.jfree.data.time$TimePeriodValues#getTimePeriod(int)": -0.06553086379436057,
        "org.jfree.data.time$TimePeriodValues#getValue(int)": -0.08130718031613116,
        "org.jfree.data.time$TimePeriodValues#hashCode()": 0.0,
        "org.jfree.data.time$TimePeriodValues#recalculateBounds()": -0.04554833995196038,
        "org.jfree.data.time$TimePeriodValues#setDomainDescription(java.lang.String)": -0.04554833995196038,
        "org.jfree.data.time$TimePeriodValues#setRangeDescription(java.lang.String)": -0.04554833995196038,
        "org.jfree.data.time$TimePeriodValues#update(int,java.lang.Number)": -0.04554833995196038,
        "org.jfree.data.time$TimePeriodValues#updateBounds(org.jfree.data.time.TimePeriod,int)": 1.6459570679391662,
        "org.jfree.data.time$Year#Year()": -0.04554833995196038,
        "org.jfree.data.time$Year#Year(int)": 1.2686001157857822,
        "org.jfree.data.time$Year#Year(java.util.Date)": -0.04554833995196038,
        "org.jfree.data.time$Year#Year(java.util.Date,java.util.TimeZone)": -0.09490620371344458,
        "org.jfree.data.time$Year#compareTo(java.lang.Object)": -0.307837740891728,
        "org.jfree.data.time$Year#equals(java.lang.Object)": -0.2961885790097359,
        "org.jfree.data.time$Year#getFirstMillisecond()": 0.2842475795208833,
        "org.jfree.data.time$Year#getFirstMillisecond(java.util.Calendar)": -0.09006510761314523,
        "org.jfree.data.time$Year#getLastMillisecond()": 0.2842475795208833,
        "org.jfree.data.time$Year#getLastMillisecond(java.util.Calendar)": -0.09006510761314523,
        "org.jfree.data.time$Year#getSerialIndex()": -0.25311677119843723,
        "org.jfree.data.time$Year#getYear()": -0.4523474161771208,
        "org.jfree.data.time$Year#hashCode()": -0.04554833995196028,
        "org.jfree.data.time$Year#next()": -0.08130718031613116,
        "org.jfree.data.time$Year#parseYear(java.lang.String)": -0.08130718031613116,
        "org.jfree.data.time$Year#peg(java.util.Calendar)": 1.2557213300137597,
        "org.jfree.data.time$Year#previous()": -0.06553086379436057,
        "org.jfree.data.time$Year#toString()": 0.0
    },
    "Chart-8": {
        "org.jfree.data.time$RegularTimePeriod#<clinit>()": -1.525786437626905,
        "org.jfree.data.time$RegularTimePeriod#RegularTimePeriod()": -1.4838760893229517,
        "org.jfree.data.time$RegularTimePeriod#createInstance(java.lang.Class,java.util.Date,java.util.TimeZone)": -0.06251245416758681,
        "org.jfree.data.time$RegularTimePeriod#downsize(java.lang.Class)": -0.1319935494501562,
        "org.jfree.data.time$RegularTimePeriod#getEnd()": -0.3336682498240531,
        "org.jfree.data.time$RegularTimePeriod#getMiddleMillisecond()": -0.31315293137374783,
        "org.jfree.data.time$RegularTimePeriod#getMiddleMillisecond(java.util.Calendar)": -0.06251245416758681,
        "org.jfree.data.time$RegularTimePeriod#getStart()": -0.3336682498240531,
        "org.jfree.data.time$RegularTimePeriod#toString()": 0.0,
        "org.jfree.data.time$TimePeriodFormatException#TimePeriodFormatException(java.lang.String)": -0.09044702822795081,
        "org.jfree.data.time$Week#Week()": 0.0,
        "org.jfree.data.time$Week#Week(int,int)": 1.4664784595774365,
        "org.jfree.data.time$Week#Week(int,org.jfree.data.time.Year)": 0.0,
        "org.jfree.data.time$Week#Week(java.util.Date)": 0.0,
        "org.jfree.data.time$Week#Week(java.util.Date,java.util.TimeZone)": 1.729552971772049,
        "org.jfree.data.time$Week#Week(java.util.Date,java.util.TimeZone,java.util.Locale)": 1.729552971772049,
        "org.jfree.data.time$Week#compareTo(java.lang.Object)": 0.0,
        "org.jfree.data.time$Week#equals(java.lang.Object)": -0.14941252212457012,
        "org.jfree.data.time$Week#evaluateAsYear(java.lang.String)": 0.0,
        "org.jfree.data.time$Week#findSeparator(java.lang.String)": 0.0,
        "org.jfree.data.time$Week#getFirstMillisecond()": -0.09044702822795081,
        "org.jfree.data.time$Week#getFirstMillisecond(java.util.Calendar)": 0.12069202195053153,
        "org.jfree.data.time$Week#getLastMillisecond()": -0.09044702822795081,
        "org.jfree.data.time$Week#getLastMillisecond(java.util.Calendar)": 0.12069202195053153,
        "org.jfree.data.time$Week#getSerialIndex()": -0.06251245416758677,
        "org.jfree.data.time$Week#getWeek()": 0.36152087421197165,
        "org.jfree.data.time$Week#getYear()": -0.0904470282279508,
        "org.jfree.data.time$Week#getYearValue()": -0.06251245416758677,
        "org.jfree.data.time$Week#hashCode()": -0.06251245416758677,
        "org.jfree.data.time$Week#next()": -0.11269268816112342,
        "org.jfree.data.time$Week#parseWeek(java.lang.String)": 0.0,
        "org.jfree.data.time$Week#peg(java.util.Calendar)": 1.4664784595774365,
        "org.jfree.data.time$Week#previous()": -0.0904470282279508,
        "org.jfree.data.time$Week#stringToWeek(java.lang.String)": 0.0,
        "org.jfree.data.time$Week#toString()": 0.0
    },
    "Chart-9": {
        "org.jfree.data.general$Series#Series(java.lang.Comparable)": 0.5306607590945253,
        "org.jfree.data.general$Series#Series(java.lang.Comparable,java.lang.String)": -0.8151256785323796,
        "org.jfree.data.general$Series#addChangeListener(org.jfree.data.general.SeriesChangeListener)": -0.8949051129719876,
        "org.jfree.data.general$Series#addPropertyChangeListener(java.beans.PropertyChangeListener)": 0.0,
        "org.jfree.data.general$Series#clone()": -0.2562821419551866,
        "org.jfree.data.general$Series#equals(java.lang.Object)": -0.5279018271609311,
        "org.jfree.data.general$Series#firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)": -0.046053634430951895,
        "org.jfree.data.general$Series#fireSeriesChanged()": 0.5996295876969245,
        "org.jfree.data.general$Series#getDescription()": -0.5006307170594213,
        "org.jfree.data.general$Series#getKey()": -0.736334313448894,
        "org.jfree.data.general$Series#getNotify()": 0.0,
        "org.jfree.data.general$Series#hashCode()": -0.08223406193024071,
        "org.jfree.data.general$Series#isEmpty()": -0.10835635685320291,
        "org.jfree.data.general$Series#notifyListeners(org.jfree.data.general.SeriesChangeEvent)": -0.7461568499299801,
        "org.jfree.data.general$Series#removeChangeListener(org.jfree.data.general.SeriesChangeListener)": -0.17614127561145398,
        "org.jfree.data.general$Series#removePropertyChangeListener(java.beans.PropertyChangeListener)": 0.0,
        "org.jfree.data.general$Series#setDescription(java.lang.String)": -0.11971551266081559,
        "org.jfree.data.general$Series#setKey(java.lang.Comparable)": -0.10835635685320288,
        "org.jfree.data.general$Series#setNotify(boolean)": 0.0,
        "org.jfree.data.general$SeriesChangeEvent#SeriesChangeEvent(java.lang.Object)": -0.7461568499299801,
        "org.jfree.data.general$SeriesException#SeriesException(java.lang.String)": -0.06626933673883806,
        "org.jfree.data.time$Day#<clinit>()": 1.0105470483071766,
        "org.jfree.data.time$Day#Day()": -0.17614127561145418,
        "org.jfree.data.time$Day#Day(int,int,int)": 1.1802209347942791,
        "org.jfree.data.time$Day#Day(java.util.Date)": -0.19227478646263424,
        "org.jfree.data.time$Day#Day(java.util.Date,java.util.TimeZone)": -0.31758413080037934,
        "org.jfree.data.time$Day#Day(org.jfree.data.time.SerialDate)": -0.19227478646263424,
        "org.jfree.data.time$Day#compareTo(java.lang.Object)": 1.6701659449561714,
        "org.jfree.data.time$Day#equals(java.lang.Object)": -0.2691786779913353,
        "org.jfree.data.time$Day#getDayOfMonth()": -0.5676816222964287,
        "org.jfree.data.time$Day#getFirstMillisecond()": -0.19227478646263418,
        "org.jfree.data.time$Day#getFirstMillisecond(java.util.Calendar)": 1.0487113334099818,
        "org.jfree.data.time$Day#getLastMillisecond()": -0.19227478646263418,
        "org.jfree.data.time$Day#getLastMillisecond(java.util.Calendar)": 1.0487113334099818,
        "org.jfree.data.time$Day#getMonth()": -0.5676816222964287,
        "org.jfree.data.time$Day#getSerialDate()": 0.18026389186480662,
        "org.jfree.data.time$Day#getSerialIndex()": 1.6356741220413555,
        "org.jfree.data.time$Day#getYear()": -0.5589489898997195,
        "org.jfree.data.time$Day#hashCode()": -0.11971551266081573,
        "org.jfree.data.time$Day#next()": -0.22922777087284746,
        "org.jfree.data.time$Day#parseDay(java.lang.String)": -0.06626933673883811,
        "org.jfree.data.time$Day#peg(java.util.Calendar)": 1.0487113334099818,
        "org.jfree.data.time$Day#previous()": -0.09599831944556135,
        "org.jfree.data.time$Day#toString()": 0.0,
        "org.jfree.data.time$FixedMillisecond#FixedMillisecond()": -0.04605363443095188,
        "org.jfree.data.time$FixedMillisecond#FixedMillisecond(java.util.Date)": -0.10835635685320291,
        "org.jfree.data.time$FixedMillisecond#FixedMillisecond(long)": -0.08223406193024071,
        "org.jfree.data.time$FixedMillisecond#compareTo(java.lang.Object)": -0.046053634430951895,
        "org.jfree.data.time$FixedMillisecond#equals(java.lang.Object)": -0.06626933673883811,
        "org.jfree.data.time$FixedMillisecond#getFirstMillisecond()": -0.08223406193024063,
        "org.jfree.data.time$FixedMillisecond#getFirstMillisecond(java.util.Calendar)": 0.0,
        "org.jfree.data.time$FixedMillisecond#getLastMillisecond()": 0.0,
        "org.jfree.data.time$FixedMillisecond#getLastMillisecond(java.util.Calendar)": 0.0,
        "org.jfree.data.time$FixedMillisecond#getMiddleMillisecond()": 0.0,
        "org.jfree.data.time$FixedMillisecond#getMiddleMillisecond(java.util.Calendar)": 0.0,
        "org.jfree.data.time$FixedMillisecond#getSerialIndex()": 0.0,
        "org.jfree.data.time$FixedMillisecond#getTime()": 0.0,
        "org.jfree.data.time$FixedMillisecond#hashCode()": -0.046053634430951895,
        "org.jfree.data.time$FixedMillisecond#next()": 0.0,
        "org.jfree.data.time$FixedMillisecond#peg(java.util.Calendar)": 0.0,
        "org.jfree.data.time$FixedMillisecond#previous()": 0.0,
        "org.jfree.data.time$Month#Month()": -0.04605363443095188,
        "org.jfree.data.time$Month#Month(int,int)": -0.2817216410436404,
        "org.jfree.data.time$Month#Month(int,org.jfree.data.time.Year)": -0.04605363443095188,
        "org.jfree.data.time$Month#Month(java.util.Date)": -0.04605363443095188,
        "org.jfree.data.time$Month#Month(java.util.Date,java.util.TimeZone)": -0.11971551266081573,
        "org.jfree.data.time$Month#compareTo(java.lang.Object)": -0.08223406193024071,
        "org.jfree.data.time$Month#equals(java.lang.Object)": -0.13031776462621653,
        "org.jfree.data.time$Month#evaluateAsYear(java.lang.String)": -0.04605363443095188,
        "org.jfree.data.time$Month#findSeparator(java.lang.String)": -0.046053634430951895,
        "org.jfree.data.time$Month#getFirstMillisecond()": -0.10835635685320288,
        "org.jfree.data.time$Month#getFirstMillisecond(java.util.Calendar)": -0.2878728833380362,
        "org.jfree.data.time$Month#getLastMillisecond()": -0.09599831944556136,
        "org.jfree.data.time$Month#getLastMillisecond(java.util.Calendar)": -0.2878728833380362,
        "org.jfree.data.time$Month#getMonth()": -0.1843258779586443,
        "org.jfree.data.time$Month#getSerialIndex()": -0.09599831944556136,
        "org.jfree.data.time$Month#getYear()": -0.06626933673883811,
        "org.jfree.data.time$Month#getYearValue()": -0.1498340550438284,
        "org.jfree.data.time$Month#hashCode()": -0.046053634430951895,
        "org.jfree.data.time$Month#next()": -0.08223406193024071,
        "org.jfree.data.time$Month#parseMonth(java.lang.String)": -0.04605363443095188,
        "org.jfree.data.time$Month#peg(java.util.Calendar)": -0.2878728833380362,
        "org.jfree.data.time$Month#previous()": -0.08223406193024071,
        "org.jfree.data.time$Month#toString()": 0.0,
        "org.jfree.data.time$RegularTimePeriod#<clinit>()": -0.8313909525734319,
        "org.jfree.data.time$RegularTimePeriod#RegularTimePeriod()": -0.8053386685770184,
        "org.jfree.data.time$RegularTimePeriod#createInstance(java.lang.Class,java.util.Date,java.util.TimeZone)": -0.04605363443095188,
        "org.jfree.data.time$RegularTimePeriod#downsize(java.lang.Class)": -0.09599831944556135,
        "org.jfree.data.time$RegularTimePeriod#getEnd()": -0.23616796662469378,
        "org.jfree.data.time$RegularTimePeriod#getMiddleMillisecond()": -0.2221543137184599,
        "org.jfree.data.time$RegularTimePeriod#getMiddleMillisecond(java.util.Calendar)": -0.04605363443095188,
        "org.jfree.data.time$RegularTimePeriod#getStart()": -0.23616796662469378,
        "org.jfree.data.time$RegularTimePeriod#toString()": 0.0,
        "org.jfree.data.time$SerialDate#<clinit>()": -0.4856437622670987,
        "org.jfree.data.time$SerialDate#SerialDate()": -0.29707510421692296,
        "org.jfree.data.time$SerialDate#addDays(int,org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$SerialDate#addMonths(int,org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$SerialDate#addYears(int,org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$SerialDate#createInstance(int)": -0.19227478646263424,
        "org.jfree.data.time$SerialDate#createInstance(int,int,int)": 1.0487113334099818,
        "org.jfree.data.time$SerialDate#createInstance(java.util.Date)": 0.0,
        "org.jfree.data.time$SerialDate#getDescription()": 0.0,
        "org.jfree.data.time$SerialDate#getEndOfCurrentMonth(org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$SerialDate#getFollowingDayOfWeek(int)": 0.0,
        "org.jfree.data.time$SerialDate#getFollowingDayOfWeek(int,org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$SerialDate#getMonths()": 0.0,
        "org.jfree.data.time$SerialDate#getMonths(boolean)": 0.0,
        "org.jfree.data.time$SerialDate#getNearestDayOfWeek(int)": 0.0,
        "org.jfree.data.time$SerialDate#getNearestDayOfWeek(int,org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$SerialDate#getPreviousDayOfWeek(int)": 0.0,
        "org.jfree.data.time$SerialDate#getPreviousDayOfWeek(int,org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$SerialDate#isLeapYear(int)": -0.2932208310196426,
        "org.jfree.data.time$SerialDate#isValidMonthCode(int)": 0.0,
        "org.jfree.data.time$SerialDate#isValidWeekInMonthCode(int)": 0.0,
        "org.jfree.data.time$SerialDate#isValidWeekdayCode(int)": 0.0,
        "org.jfree.data.time$SerialDate#lastDayOfMonth(int,int)": 0.8601426753598062,
        "org.jfree.data.time$SerialDate#leapYearCount(int)": -0.29707510421692296,
        "org.jfree.data.time$SerialDate#monthCodeToQuarter(int)": -0.08223406193024063,
        "org.jfree.data.time$SerialDate#monthCodeToString(int)": 0.0,
        "org.jfree.data.time$SerialDate#monthCodeToString(int,boolean)": 0.0,
        "org.jfree.data.time$SerialDate#relativeToString(int)": 0.0,
        "org.jfree.data.time$SerialDate#setDescription(java.lang.String)": 0.0,
        "org.jfree.data.time$SerialDate#stringToMonthCode(java.lang.String)": -0.04605363443095188,
        "org.jfree.data.time$SerialDate#stringToWeekdayCode(java.lang.String)": 0.0,
        "org.jfree.data.time$SerialDate#toString()": 0.0,
        "org.jfree.data.time$SerialDate#weekInMonthToString(int)": 0.0,
        "org.jfree.data.time$SerialDate#weekdayCodeToString(int)": 0.0,
        "org.jfree.data.time$SpreadsheetDate#SpreadsheetDate(int)": -0.19227478646263424,
        "org.jfree.data.time$SpreadsheetDate#SpreadsheetDate(int,int,int)": 1.0487113334099818,
        "org.jfree.data.time$SpreadsheetDate#calcSerial(int,int,int)": 1.0487113334099818,
        "org.jfree.data.time$SpreadsheetDate#compare(org.jfree.data.time.SerialDate)": 1.6701659449561714,
        "org.jfree.data.time$SpreadsheetDate#compareTo(java.lang.Object)": 0.0,
        "org.jfree.data.time$SpreadsheetDate#equals(java.lang.Object)": -0.2429847800198097,
        "org.jfree.data.time$SpreadsheetDate#getDayOfMonth()": -0.29707510421692296,
        "org.jfree.data.time$SpreadsheetDate#getDayOfWeek()": 0.0,
        "org.jfree.data.time$SpreadsheetDate#getMonth()": -0.29707510421692296,
        "org.jfree.data.time$SpreadsheetDate#getYYYY()": -0.29707510421692296,
        "org.jfree.data.time$SpreadsheetDate#hashCode()": -0.11971551266081573,
        "org.jfree.data.time$SpreadsheetDate#isAfter(org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$SpreadsheetDate#isBefore(org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$SpreadsheetDate#isInRange(org.jfree.data.time.SerialDate,org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$SpreadsheetDate#isInRange(org.jfree.data.time.SerialDate,org.jfree.data.time.SerialDate,int)": 0.0,
        "org.jfree.data.time$SpreadsheetDate#isOn(org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$SpreadsheetDate#isOnOrAfter(org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$SpreadsheetDate#isOnOrBefore(org.jfree.data.time.SerialDate)": 0.0,
        "org.jfree.data.time$SpreadsheetDate#toDate()": 0.0,
        "org.jfree.data.time$SpreadsheetDate#toSerial()": 0.04998884036497453,
        "org.jfree.data.time$TimePeriodFormatException#TimePeriodFormatException(java.lang.String)": -0.06626933673883806,
        "org.jfree.data.time$TimeSeries#TimeSeries(java.lang.Comparable)": 1.6523091735633662,
        "org.jfree.data.time$TimeSeries#TimeSeries(java.lang.Comparable,java.lang.Class)": 1.5508213220086646,
        "org.jfree.data.time$TimeSeries#TimeSeries(java.lang.Comparable,java.lang.String,java.lang.String,java.lang.Class)": 1.5141051577766804,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.RegularTimePeriod,double)": 1.5838320333753062,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.RegularTimePeriod,double,boolean)": 1.5838320333753062,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.RegularTimePeriod,java.lang.Number)": 1.5703130733376116,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.RegularTimePeriod,java.lang.Number,boolean)": 1.5703130733376116,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.TimeSeriesDataItem)": -0.08223406193024071,
        "org.jfree.data.time$TimeSeries#add(org.jfree.data.time.TimeSeriesDataItem,boolean)": 1.5382783589563596,
        "org.jfree.data.time$TimeSeries#addAndOrUpdate(org.jfree.data.time.TimeSeries)": -0.04605363443095188,
        "org.jfree.data.time$TimeSeries#addOrUpdate(org.jfree.data.time.RegularTimePeriod,double)": -0.06626933673883811,
        "org.jfree.data.time$TimeSeries#addOrUpdate(org.jfree.data.time.RegularTimePeriod,java.lang.Number)": -0.08223406193024071,
        "org.jfree.data.time$TimeSeries#clear()": 0.0,
        "org.jfree.data.time$TimeSeries#clone()": -0.08223406193024071,
        "org.jfree.data.time$TimeSeries#createCopy(int,int)": 1.7512857932669457,
        "org.jfree.data.time$TimeSeries#createCopy(org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod)": 1.773946365569048,
        "org.jfree.data.time$TimeSeries#delete(int,int)": -0.06626933673883811,
        "org.jfree.data.time$TimeSeries#delete(org.jfree.data.time.RegularTimePeriod)": -0.04605363443095188,
        "org.jfree.data.time$TimeSeries#equals(java.lang.Object)": -0.1589373410812056,
        "org.jfree.data.time$TimeSeries#getDataItem(int)": 0.19249192132945458,
        "org.jfree.data.time$TimeSeries#getDataItem(org.jfree.data.time.RegularTimePeriod)": -0.04605363443095188,
        "org.jfree.data.time$TimeSeries#getDomainDescription()": -0.14032077464499126,
        "org.jfree.data.time$TimeSeries#getIndex(org.jfree.data.time.RegularTimePeriod)": 1.6796792253550086,
        "org.jfree.data.time$TimeSeries#getItemCount()": 0.1863406790350589,
        "org.jfree.data.time$TimeSeries#getItems()": 0.0,
        "org.jfree.data.time$TimeSeries#getMaximumItemAge()": -0.1589373410812056,
        "org.jfree.data.time$TimeSeries#getMaximumItemCount()": -0.1589373410812056,
        "org.jfree.data.time$TimeSeries#getNextTimePeriod()": 0.0,
        "org.jfree.data.time$TimeSeries#getRangeDescription()": -0.14032077464499126,
        "org.jfree.data.time$TimeSeries#getTimePeriod(int)": 1.5382783589563596,
        "org.jfree.data.time$TimeSeries#getTimePeriodClass()": -0.06626933673883806,
        "org.jfree.data.time$TimeSeries#getTimePeriods()": 0.0,
        "org.jfree.data.time$TimeSeries#getTimePeriodsUniqueToOtherSeries(org.jfree.data.time.TimeSeries)": 0.0,
        "org.jfree.data.time$TimeSeries#getValue(int)": -0.09599831944556135,
        "org.jfree.data.time$TimeSeries#getValue(org.jfree.data.time.RegularTimePeriod)": -0.09599831944556135,
        "org.jfree.data.time$TimeSeries#hashCode()": -0.04605363443095188,
        "org.jfree.data.time$TimeSeries#removeAgedItems(boolean)": 1.5382783589563596,
        "org.jfree.data.time$TimeSeries#removeAgedItems(long,boolean)": -0.04605363443095188,
        "org.jfree.data.time$TimeSeries#setDomainDescription(java.lang.String)": 0.0,
        "org.jfree.data.time$TimeSeries#setMaximumItemAge(long)": -0.08223406193024071,
        "org.jfree.data.time$TimeSeries#setMaximumItemCount(int)": -0.08223406193024071,
        "org.jfree.data.time$TimeSeries#setRangeDescription(java.lang.String)": 0.0,
        "org.jfree.data.time$TimeSeries#update(int,java.lang.Number)": 0.0,
        "org.jfree.data.time$TimeSeries#update(org.jfree.data.time.RegularTimePeriod,java.lang.Number)": -0.04605363443095188,
        "org.jfree.data.time$TimeSeriesDataItem#TimeSeriesDataItem(org.jfree.data.time.RegularTimePeriod,double)": 1.5382783589563596,
        "org.jfree.data.time$TimeSeriesDataItem#TimeSeriesDataItem(org.jfree.data.time.RegularTimePeriod,java.lang.Number)": 0.17425774017425633,
        "org.jfree.data.time$TimeSeriesDataItem#clone()": -0.11971551266081559,
        "org.jfree.data.time$TimeSeriesDataItem#compareTo(java.lang.Object)": 1.6356741220413555,
        "org.jfree.data.time$TimeSeriesDataItem#equals(java.lang.Object)": -0.14032077464499143,
        "org.jfree.data.time$TimeSeriesDataItem#getPeriod()": 0.19249192132945458,
        "org.jfree.data.time$TimeSeriesDataItem#getValue()": -0.11971551266081559,
        "org.jfree.data.time$TimeSeriesDataItem#hashCode()": -0.04605363443095188,
        "org.jfree.data.time$TimeSeriesDataItem#setValue(java.lang.Number)": -0.10835635685320288,
        "org.jfree.data.time$Year#Year()": -0.04605363443095188,
        "org.jfree.data.time$Year#Year(int)": 1.2610510101002803,
        "org.jfree.data.time$Year#Year(java.util.Date)": -0.04605363443095188,
        "org.jfree.data.time$Year#Year(java.util.Date,java.util.TimeZone)": -0.09599831944556135,
        "org.jfree.data.time$Year#compareTo(java.lang.Object)": 1.5141051577766804,
        "org.jfree.data.time$Year#equals(java.lang.Object)": -0.2999558221988387,
        "org.jfree.data.time$Year#getFirstMillisecond()": -0.20001285150595471,
        "org.jfree.data.time$Year#getFirstMillisecond(java.util.Calendar)": -0.09781276056762456,
        "org.jfree.data.time$Year#getLastMillisecond()": -0.20001285150595471,
        "org.jfree.data.time$Year#getLastMillisecond(java.util.Calendar)": -0.09781276056762456,
        "org.jfree.data.time$Year#getSerialIndex()": 0.22452663571070686,
        "org.jfree.data.time$Year#getYear()": 0.020626755194696478,
        "org.jfree.data.time$Year#hashCode()": -0.046053634430951895,
        "org.jfree.data.time$Year#next()": -0.08223406193024071,
        "org.jfree.data.time$Year#parseYear(java.lang.String)": -0.08223406193024071,
        "org.jfree.data.time$Year#peg(java.util.Calendar)": 1.2479736770592804,
        "org.jfree.data.time$Year#previous()": -0.06626933673883811,
        "org.jfree.data.time$Year#toString()": 0.0
    },
    "Lang-1": {
        "org.apache.commons.lang3$StringUtils#<clinit>()": -1.2888862020591199,
        "org.apache.commons.lang3$StringUtils#StringUtils()": -0.04731705334912806,
        "org.apache.commons.lang3$StringUtils#abbreviate(java.lang.String,int)": -0.0681168006221857,
        "org.apache.commons.lang3$StringUtils#abbreviate(java.lang.String,int,int)": -0.0681168006221857,
        "org.apache.commons.lang3$StringUtils#abbreviateMiddle(java.lang.String,java.lang.String,int)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#appendIfMissing(java.lang.String,java.lang.CharSequence,boolean,java.lang.CharSequence[])": -0.0681168006221857,
        "org.apache.commons.lang3$StringUtils#appendIfMissing(java.lang.String,java.lang.CharSequence,java.lang.CharSequence[])": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#appendIfMissingIgnoreCase(java.lang.String,java.lang.CharSequence,java.lang.CharSequence[])": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#capitalize(java.lang.String)": -0.04731705334912806,
        "org.apache.commons.lang3$StringUtils#center(java.lang.String,int)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#center(java.lang.String,int,char)": -0.0681168006221857,
        "org.apache.commons.lang3$StringUtils#center(java.lang.String,int,java.lang.String)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#chomp(java.lang.String)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#chomp(java.lang.String,java.lang.String)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#chop(java.lang.String)": -0.04731705334912806,
        "org.apache.commons.lang3$StringUtils#contains(java.lang.CharSequence,int)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#contains(java.lang.CharSequence,java.lang.CharSequence)": -0.09873246735399377,
        "org.apache.commons.lang3$StringUtils#containsAny(java.lang.CharSequence,char[])": -0.14443032255584679,
        "org.apache.commons.lang3$StringUtils#containsAny(java.lang.CharSequence,java.lang.CharSequence)": -0.08455379700700405,
        "org.apache.commons.lang3$StringUtils#containsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": -0.06811680062218572,
        "org.apache.commons.lang3$StringUtils#containsNone(java.lang.CharSequence,char[])": -0.15424624201459747,
        "org.apache.commons.lang3$StringUtils#containsNone(java.lang.CharSequence,java.lang.String)": -0.08455379700700405,
        "org.apache.commons.lang3$StringUtils#containsOnly(java.lang.CharSequence,char[])": -0.11146794291170875,
        "org.apache.commons.lang3$StringUtils#containsOnly(java.lang.CharSequence,java.lang.String)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#containsWhitespace(java.lang.CharSequence)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#countMatches(java.lang.CharSequence,java.lang.CharSequence)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#defaultIfBlank(java.lang.CharSequence,java.lang.CharSequence)": -0.09873246735399394,
        "org.apache.commons.lang3$StringUtils#defaultIfEmpty(java.lang.CharSequence,java.lang.CharSequence)": -0.09873246735399394,
        "org.apache.commons.lang3$StringUtils#defaultString(java.lang.String)": -0.08455379700700405,
        "org.apache.commons.lang3$StringUtils#defaultString(java.lang.String,java.lang.String)": -0.04731705334912806,
        "org.apache.commons.lang3$StringUtils#deleteWhitespace(java.lang.String)": -0.20605942324760196,
        "org.apache.commons.lang3$StringUtils#difference(java.lang.String,java.lang.String)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#endsWith(java.lang.CharSequence,java.lang.CharSequence)": -0.0681168006221857,
        "org.apache.commons.lang3$StringUtils#endsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)": -0.12317827261039915,
        "org.apache.commons.lang3$StringUtils#endsWithAny(java.lang.CharSequence,java.lang.CharSequence[])": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#endsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": -0.0681168006221857,
        "org.apache.commons.lang3$StringUtils#equals(java.lang.CharSequence,java.lang.CharSequence)": -0.2214802874874704,
        "org.apache.commons.lang3$StringUtils#equalsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": -0.04731705334912806,
        "org.apache.commons.lang3$StringUtils#getCommonPrefix(java.lang.String[])": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence)": -0.04731705334912806,
        "org.apache.commons.lang3$StringUtils#getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)": -0.04731705334912806,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,int)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,int,int)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,java.lang.CharSequence)": -0.04731705334912806,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,java.lang.CharSequence,int)": -0.04731705334912806,
        "org.apache.commons.lang3$StringUtils#indexOfAny(java.lang.CharSequence,char[])": -0.09873246735399394,
        "org.apache.commons.lang3$StringUtils#indexOfAny(java.lang.CharSequence,java.lang.CharSequence[])": -0.04731705334912806,
        "org.apache.commons.lang3$StringUtils#indexOfAny(java.lang.CharSequence,java.lang.String)": -0.0681168006221857,
        "org.apache.commons.lang3$StringUtils#indexOfAnyBut(java.lang.CharSequence,char[])": -0.13411179669018408,
        "org.apache.commons.lang3$StringUtils#indexOfAnyBut(java.lang.CharSequence,java.lang.CharSequence)": -0.0681168006221857,
        "org.apache.commons.lang3$StringUtils#indexOfDifference(java.lang.CharSequence,java.lang.CharSequence)": -0.06811680062218572,
        "org.apache.commons.lang3$StringUtils#indexOfDifference(java.lang.CharSequence[])": -0.0681168006221857,
        "org.apache.commons.lang3$StringUtils#indexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#indexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,int)": -0.06811680062218572,
        "org.apache.commons.lang3$StringUtils#isAllLowerCase(java.lang.CharSequence)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#isAllUpperCase(java.lang.CharSequence)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#isAlpha(java.lang.CharSequence)": -0.04731705334912806,
        "org.apache.commons.lang3$StringUtils#isAlphaSpace(java.lang.CharSequence)": -0.04731705334912806,
        "org.apache.commons.lang3$StringUtils#isAlphanumeric(java.lang.CharSequence)": -0.04731705334912806,
        "org.apache.commons.lang3$StringUtils#isAlphanumericSpace(java.lang.CharSequence)": -0.04731705334912806,
        "org.apache.commons.lang3$StringUtils#isAsciiPrintable(java.lang.CharSequence)": -0.04731705334912806,
        "org.apache.commons.lang3$StringUtils#isBlank(java.lang.CharSequence)": 0.16479580069679722,
        "org.apache.commons.lang3$StringUtils#isEmpty(java.lang.CharSequence)": -1.217588010020621,
        "org.apache.commons.lang3$StringUtils#isNotBlank(java.lang.CharSequence)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#isNotEmpty(java.lang.CharSequence)": -0.17267753347552625,
        "org.apache.commons.lang3$StringUtils#isNumeric(java.lang.CharSequence)": -0.04731705334912806,
        "org.apache.commons.lang3$StringUtils#isNumericSpace(java.lang.CharSequence)": -0.04731705334912806,
        "org.apache.commons.lang3$StringUtils#isWhitespace(java.lang.CharSequence)": -0.04731705334912806,
        "org.apache.commons.lang3$StringUtils#join(byte[],char)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#join(byte[],char,int,int)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#join(char[],char)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#join(char[],char,int,int)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#join(double[],char)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#join(double[],char,int,int)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#join(float[],char)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#join(float[],char,int,int)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#join(int[],char)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#join(int[],char,int,int)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Iterable,char)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Iterable,java.lang.String)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[])": -0.08455379700700405,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],char)": -0.0681168006221857,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],char,int,int)": -0.0681168006221857,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],java.lang.String)": -0.09873246735399394,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],java.lang.String,int,int)": -0.09873246735399394,
        "org.apache.commons.lang3$StringUtils#join(java.util.Iterator,char)": -0.06811680062218572,
        "org.apache.commons.lang3$StringUtils#join(java.util.Iterator,java.lang.String)": -0.06811680062218572,
        "org.apache.commons.lang3$StringUtils#join(long[],char)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#join(long[],char,int,int)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#join(short[],char)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#join(short[],char,int,int)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,int)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,int,int)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,java.lang.CharSequence)": -0.04731705334912806,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)": -0.04731705334912806,
        "org.apache.commons.lang3$StringUtils#lastIndexOfAny(java.lang.CharSequence,java.lang.CharSequence[])": -0.04731705334912806,
        "org.apache.commons.lang3$StringUtils#lastIndexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#lastIndexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,int)": -0.06811680062218572,
        "org.apache.commons.lang3$StringUtils#lastOrdinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#left(java.lang.String,int)": -0.04731705334912806,
        "org.apache.commons.lang3$StringUtils#leftPad(java.lang.String,int)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#leftPad(java.lang.String,int,char)": -0.23625251011820858,
        "org.apache.commons.lang3$StringUtils#leftPad(java.lang.String,int,java.lang.String)": -0.08455379700700405,
        "org.apache.commons.lang3$StringUtils#length(java.lang.CharSequence)": -0.09873246735399377,
        "org.apache.commons.lang3$StringUtils#lowerCase(java.lang.String)": -0.04731705334912806,
        "org.apache.commons.lang3$StringUtils#lowerCase(java.lang.String,java.util.Locale)": -0.04731705334912806,
        "org.apache.commons.lang3$StringUtils#mid(java.lang.String,int,int)": -0.04731705334912806,
        "org.apache.commons.lang3$StringUtils#normalizeSpace(java.lang.String)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#ordinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#ordinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int,boolean)": -0.06811680062218572,
        "org.apache.commons.lang3$StringUtils#overlay(java.lang.String,java.lang.String,int,int)": -0.04731705334912806,
        "org.apache.commons.lang3$StringUtils#prependIfMissing(java.lang.String,java.lang.CharSequence,boolean,java.lang.CharSequence[])": -0.0681168006221857,
        "org.apache.commons.lang3$StringUtils#prependIfMissing(java.lang.String,java.lang.CharSequence,java.lang.CharSequence[])": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#prependIfMissingIgnoreCase(java.lang.String,java.lang.CharSequence,java.lang.CharSequence[])": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#remove(java.lang.String,char)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#remove(java.lang.String,java.lang.String)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#removeEnd(java.lang.String,java.lang.String)": -0.08455379700700405,
        "org.apache.commons.lang3$StringUtils#removeEndIgnoreCase(java.lang.String,java.lang.String)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#removePattern(java.lang.String,java.lang.String)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#removeStart(java.lang.String,java.lang.String)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#removeStartIgnoreCase(java.lang.String,java.lang.String)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#repeat(char,int)": -0.2504762415548156,
        "org.apache.commons.lang3$StringUtils#repeat(java.lang.String,int)": -0.09873246735399394,
        "org.apache.commons.lang3$StringUtils#repeat(java.lang.String,java.lang.String,int)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#replace(java.lang.String,java.lang.String,java.lang.String)": -0.11146794291170875,
        "org.apache.commons.lang3$StringUtils#replace(java.lang.String,java.lang.String,java.lang.String,int)": -0.16364138685715557,
        "org.apache.commons.lang3$StringUtils#replaceChars(java.lang.String,char,char)": -0.06811680062218572,
        "org.apache.commons.lang3$StringUtils#replaceChars(java.lang.String,java.lang.String,java.lang.String)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#replaceEach(java.lang.String,java.lang.String[],java.lang.String[])": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#replaceEach(java.lang.String,java.lang.String[],java.lang.String[],boolean,int)": -0.0681168006221857,
        "org.apache.commons.lang3$StringUtils#replaceEachRepeatedly(java.lang.String,java.lang.String[],java.lang.String[])": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#replaceOnce(java.lang.String,java.lang.String,java.lang.String)": -0.08455379700700405,
        "org.apache.commons.lang3$StringUtils#replacePattern(java.lang.String,java.lang.String,java.lang.String)": -0.06811680062218572,
        "org.apache.commons.lang3$StringUtils#reverse(java.lang.String)": -0.04731705334912806,
        "org.apache.commons.lang3$StringUtils#reverseDelimited(java.lang.String,char)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#right(java.lang.String,int)": -0.04731705334912806,
        "org.apache.commons.lang3$StringUtils#rightPad(java.lang.String,int)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#rightPad(java.lang.String,int,char)": -0.12317827261039904,
        "org.apache.commons.lang3$StringUtils#rightPad(java.lang.String,int,java.lang.String)": -0.08455379700700405,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String,char)": -0.0681168006221857,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String,java.lang.String)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String,java.lang.String,int)": -0.0681168006221857,
        "org.apache.commons.lang3$StringUtils#splitByCharacterType(java.lang.String)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#splitByCharacterType(java.lang.String,boolean)": -0.06811680062218572,
        "org.apache.commons.lang3$StringUtils#splitByCharacterTypeCamelCase(java.lang.String)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparator(java.lang.String,java.lang.String)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparator(java.lang.String,java.lang.String,int)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String,int)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparatorWorker(java.lang.String,java.lang.String,int,boolean)": -0.08455379700700405,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String,char)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String,java.lang.String)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String,java.lang.String,int)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#splitWorker(java.lang.String,char,boolean)": -0.08455379700700405,
        "org.apache.commons.lang3$StringUtils#splitWorker(java.lang.String,java.lang.String,int,boolean)": -0.13411179669018414,
        "org.apache.commons.lang3$StringUtils#startsWith(java.lang.CharSequence,java.lang.CharSequence)": -0.0681168006221857,
        "org.apache.commons.lang3$StringUtils#startsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)": -0.12317827261039915,
        "org.apache.commons.lang3$StringUtils#startsWithAny(java.lang.CharSequence,java.lang.CharSequence[])": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#startsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": -0.0681168006221857,
        "org.apache.commons.lang3$StringUtils#strip(java.lang.String)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#strip(java.lang.String,java.lang.String)": -0.11146794291170875,
        "org.apache.commons.lang3$StringUtils#stripAccents(java.lang.String)": -0.04731705334912806,
        "org.apache.commons.lang3$StringUtils#stripAll(java.lang.String[])": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#stripAll(java.lang.String[],java.lang.String)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#stripEnd(java.lang.String,java.lang.String)": -0.13411179669018414,
        "org.apache.commons.lang3$StringUtils#stripStart(java.lang.String,java.lang.String)": -0.12317827261039915,
        "org.apache.commons.lang3$StringUtils#stripToEmpty(java.lang.String)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#stripToNull(java.lang.String)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#substring(java.lang.String,int)": -0.04731705334912806,
        "org.apache.commons.lang3$StringUtils#substring(java.lang.String,int,int)": -0.04731705334912806,
        "org.apache.commons.lang3$StringUtils#substringAfter(java.lang.String,java.lang.String)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#substringAfterLast(java.lang.String,java.lang.String)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#substringBefore(java.lang.String,java.lang.String)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#substringBeforeLast(java.lang.String,java.lang.String)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#substringBetween(java.lang.String,java.lang.String)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#substringBetween(java.lang.String,java.lang.String,java.lang.String)": -0.06811680062218572,
        "org.apache.commons.lang3$StringUtils#substringsBetween(java.lang.String,java.lang.String,java.lang.String)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#swapCase(java.lang.String)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#toString(byte[],java.lang.String)": -0.04731705334912806,
        "org.apache.commons.lang3$StringUtils#trim(java.lang.String)": -0.08455379700700405,
        "org.apache.commons.lang3$StringUtils#trimToEmpty(java.lang.String)": -0.04731705334912806,
        "org.apache.commons.lang3$StringUtils#trimToNull(java.lang.String)": -0.04731705334912812,
        "org.apache.commons.lang3$StringUtils#uncapitalize(java.lang.String)": -0.04731705334912806,
        "org.apache.commons.lang3$StringUtils#upperCase(java.lang.String)": -0.04731705334912806,
        "org.apache.commons.lang3$StringUtils#upperCase(java.lang.String,java.util.Locale)": -0.04731705334912806,
        "org.apache.commons.lang3.math$NumberUtils#<clinit>()": -0.1262957367478731,
        "org.apache.commons.lang3.math$NumberUtils#NumberUtils()": -0.04731705334912806,
        "org.apache.commons.lang3.math$NumberUtils#createBigDecimal(java.lang.String)": -0.13411179669018408,
        "org.apache.commons.lang3.math$NumberUtils#createBigInteger(java.lang.String)": -0.09873246735399377,
        "org.apache.commons.lang3.math$NumberUtils#createDouble(java.lang.String)": -0.13411179669018414,
        "org.apache.commons.lang3.math$NumberUtils#createFloat(java.lang.String)": -0.13411179669018414,
        "org.apache.commons.lang3.math$NumberUtils#createInteger(java.lang.String)": 0.3754810950191013,
        "org.apache.commons.lang3.math$NumberUtils#createLong(java.lang.String)": -0.11146794291170892,
        "org.apache.commons.lang3.math$NumberUtils#createNumber(java.lang.String)": 1.6657537579854025,
        "org.apache.commons.lang3.math$NumberUtils#isAllZeros(java.lang.String)": -0.13411179669018414,
        "org.apache.commons.lang3.math$NumberUtils#isDigits(java.lang.String)": -0.09873246735399394,
        "org.apache.commons.lang3.math$NumberUtils#isNumber(java.lang.String)": -0.04731705334912812,
        "org.apache.commons.lang3.math$NumberUtils#max(byte,byte,byte)": -0.04731705334912806,
        "org.apache.commons.lang3.math$NumberUtils#max(byte[])": -0.08455379700700405,
        "org.apache.commons.lang3.math$NumberUtils#max(double,double,double)": -0.06811680062218572,
        "org.apache.commons.lang3.math$NumberUtils#max(double[])": -0.09873246735399394,
        "org.apache.commons.lang3.math$NumberUtils#max(float,float,float)": -0.06811680062218572,
        "org.apache.commons.lang3.math$NumberUtils#max(float[])": -0.09873246735399394,
        "org.apache.commons.lang3.math$NumberUtils#max(int,int,int)": -0.04731705334912806,
        "org.apache.commons.lang3.math$NumberUtils#max(int[])": -0.08455379700700405,
        "org.apache.commons.lang3.math$NumberUtils#max(long,long,long)": -0.04731705334912806,
        "org.apache.commons.lang3.math$NumberUtils#max(long[])": -0.08455379700700405,
        "org.apache.commons.lang3.math$NumberUtils#max(short,short,short)": -0.04731705334912806,
        "org.apache.commons.lang3.math$NumberUtils#max(short[])": -0.08455379700700405,
        "org.apache.commons.lang3.math$NumberUtils#min(byte,byte,byte)": -0.04731705334912806,
        "org.apache.commons.lang3.math$NumberUtils#min(byte[])": -0.08455379700700405,
        "org.apache.commons.lang3.math$NumberUtils#min(double,double,double)": -0.06811680062218572,
        "org.apache.commons.lang3.math$NumberUtils#min(double[])": -0.09873246735399394,
        "org.apache.commons.lang3.math$NumberUtils#min(float,float,float)": -0.06811680062218572,
        "org.apache.commons.lang3.math$NumberUtils#min(float[])": -0.08455379700700405,
        "org.apache.commons.lang3.math$NumberUtils#min(int,int,int)": -0.04731705334912806,
        "org.apache.commons.lang3.math$NumberUtils#min(int[])": -0.08455379700700405,
        "org.apache.commons.lang3.math$NumberUtils#min(long,long,long)": -0.04731705334912806,
        "org.apache.commons.lang3.math$NumberUtils#min(long[])": -0.08455379700700405,
        "org.apache.commons.lang3.math$NumberUtils#min(short,short,short)": -0.04731705334912806,
        "org.apache.commons.lang3.math$NumberUtils#min(short[])": -0.08455379700700405,
        "org.apache.commons.lang3.math$NumberUtils#toByte(java.lang.String)": -0.04731705334912812,
        "org.apache.commons.lang3.math$NumberUtils#toByte(java.lang.String,byte)": -0.06811680062218572,
        "org.apache.commons.lang3.math$NumberUtils#toDouble(java.lang.String)": -0.04731705334912812,
        "org.apache.commons.lang3.math$NumberUtils#toDouble(java.lang.String,double)": -0.06811680062218572,
        "org.apache.commons.lang3.math$NumberUtils#toFloat(java.lang.String)": -0.04731705334912812,
        "org.apache.commons.lang3.math$NumberUtils#toFloat(java.lang.String,float)": -0.06811680062218572,
        "org.apache.commons.lang3.math$NumberUtils#toInt(java.lang.String)": -0.04731705334912812,
        "org.apache.commons.lang3.math$NumberUtils#toInt(java.lang.String,int)": -0.06811680062218572,
        "org.apache.commons.lang3.math$NumberUtils#toLong(java.lang.String)": -0.04731705334912812,
        "org.apache.commons.lang3.math$NumberUtils#toLong(java.lang.String,long)": -0.06811680062218572,
        "org.apache.commons.lang3.math$NumberUtils#toShort(java.lang.String)": -0.04731705334912812,
        "org.apache.commons.lang3.math$NumberUtils#toShort(java.lang.String,short)": -0.06811680062218572,
        "org.apache.commons.lang3.math$NumberUtils#validateArray(java.lang.Object)": -0.351173393971161
    },
    "Lang-10": {
        "org.apache.commons.lang3.time$FastDateFormat#<clinit>()": -0.39785105288804506,
        "org.apache.commons.lang3.time$FastDateFormat#FastDateFormat(java.lang.String,java.util.TimeZone,java.util.Locale)": -0.39785105288804506,
        "org.apache.commons.lang3.time$FastDateFormat#applyRules(java.util.Calendar,java.lang.StringBuffer)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#equals(java.lang.Object)": -0.3028831841220324,
        "org.apache.commons.lang3.time$FastDateFormat#format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)": -0.10053203806101878,
        "org.apache.commons.lang3.time$FastDateFormat#format(java.util.Calendar)": -0.8412294580698179,
        "org.apache.commons.lang3.time$FastDateFormat#format(java.util.Calendar,java.lang.StringBuffer)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#format(java.util.Date)": -0.8084908732821252,
        "org.apache.commons.lang3.time$FastDateFormat#format(java.util.Date,java.lang.StringBuffer)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#format(long)": -0.10053203806101878,
        "org.apache.commons.lang3.time$FastDateFormat#format(long,java.lang.StringBuffer)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getDateInstance(int)": -0.14713806352319675,
        "org.apache.commons.lang3.time$FastDateFormat#getDateInstance(int,java.util.Locale)": -0.14713806352319675,
        "org.apache.commons.lang3.time$FastDateFormat#getDateInstance(int,java.util.TimeZone)": -0.10053203806101878,
        "org.apache.commons.lang3.time$FastDateFormat#getDateInstance(int,java.util.TimeZone,java.util.Locale)": -0.10053203806101878,
        "org.apache.commons.lang3.time$FastDateFormat#getDateTimeInstance(int,int)": -0.1848719298493795,
        "org.apache.commons.lang3.time$FastDateFormat#getDateTimeInstance(int,int,java.util.Locale)": -0.1848719298493795,
        "org.apache.commons.lang3.time$FastDateFormat#getDateTimeInstance(int,int,java.util.TimeZone)": -0.10053203806101878,
        "org.apache.commons.lang3.time$FastDateFormat#getDateTimeInstance(int,int,java.util.TimeZone,java.util.Locale)": -0.10053203806101878,
        "org.apache.commons.lang3.time$FastDateFormat#getInstance()": -0.14713806352319675,
        "org.apache.commons.lang3.time$FastDateFormat#getInstance(java.lang.String)": -0.8735230012434505,
        "org.apache.commons.lang3.time$FastDateFormat#getInstance(java.lang.String,java.util.Locale)": -0.8412294580698179,
        "org.apache.commons.lang3.time$FastDateFormat#getInstance(java.lang.String,java.util.TimeZone)": -0.10053203806101878,
        "org.apache.commons.lang3.time$FastDateFormat#getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)": 0.13358530543563835,
        "org.apache.commons.lang3.time$FastDateFormat#getLocale()": -0.3281744321311392,
        "org.apache.commons.lang3.time$FastDateFormat#getMaxLengthEstimate()": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getPattern()": -0.3985403988924038,
        "org.apache.commons.lang3.time$FastDateFormat#getTimeInstance(int)": -0.10053203806101878,
        "org.apache.commons.lang3.time$FastDateFormat#getTimeInstance(int,java.util.Locale)": -0.10053203806101878,
        "org.apache.commons.lang3.time$FastDateFormat#getTimeInstance(int,java.util.TimeZone)": -0.10053203806101878,
        "org.apache.commons.lang3.time$FastDateFormat#getTimeInstance(int,java.util.TimeZone,java.util.Locale)": -0.10053203806101878,
        "org.apache.commons.lang3.time$FastDateFormat#getTimeZone()": -0.27634126602796727,
        "org.apache.commons.lang3.time$FastDateFormat#hashCode()": -0.1848719298493795,
        "org.apache.commons.lang3.time$FastDateFormat#parse(java.lang.String)": 0.6132837136882352,
        "org.apache.commons.lang3.time$FastDateFormat#parse(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#parseObject(java.lang.String,java.text.ParsePosition)": -0.10053203806101878,
        "org.apache.commons.lang3.time$FastDateFormat#toString()": -0.14713806352319675,
        "org.apache.commons.lang3.time$FastDateFormat$1#createInstance(java.lang.String,java.util.TimeZone,java.util.Locale)": -1.2602129626830034,
        "org.apache.commons.lang3.time$FastDateParser#<clinit>()": -0.013138787074195135,
        "org.apache.commons.lang3.time$FastDateParser#FastDateParser(java.lang.String,java.util.TimeZone,java.util.Locale)": 0.012837446605167835,
        "org.apache.commons.lang3.time$FastDateParser#adjustYear(int)": -0.3281744321311393,
        "org.apache.commons.lang3.time$FastDateParser#copy(org.apache.commons.lang3.time.FastDateParser$KeyValue[],int,java.lang.String[])": 0.6128932188134525,
        "org.apache.commons.lang3.time$FastDateParser#count(java.lang.String[])": 0.6128932188134525,
        "org.apache.commons.lang3.time$FastDateParser#createKeyValues(java.lang.String[],java.lang.String[])": 0.6128932188134525,
        "org.apache.commons.lang3.time$FastDateParser#equals(java.lang.Object)": -0.10053203806101885,
        "org.apache.commons.lang3.time$FastDateParser#escapeRegex(java.lang.StringBuilder,java.lang.String,boolean)": -1.3068846820006392,
        "org.apache.commons.lang3.time$FastDateParser#getDisplayNames(int)": 0.6128932188134525,
        "org.apache.commons.lang3.time$FastDateParser#getFieldWidth()": -0.2763412660279674,
        "org.apache.commons.lang3.time$FastDateParser#getLocale()": -0.10053203806101885,
        "org.apache.commons.lang3.time$FastDateParser#getParsePattern()": 0.2547448713915889,
        "org.apache.commons.lang3.time$FastDateParser#getPattern()": -0.10053203806101885,
        "org.apache.commons.lang3.time$FastDateParser#getStrategy(java.lang.String)": 0.012837446605167835,
        "org.apache.commons.lang3.time$FastDateParser#getTimeZone()": -0.10053203806101885,
        "org.apache.commons.lang3.time$FastDateParser#hashCode()": -0.1471380635231967,
        "org.apache.commons.lang3.time$FastDateParser#init()": 0.012837446605167835,
        "org.apache.commons.lang3.time$FastDateParser#isNextNumber()": 0.012837446605167835,
        "org.apache.commons.lang3.time$FastDateParser#parse(java.lang.String)": 1.0280579153987386,
        "org.apache.commons.lang3.time$FastDateParser#parse(java.lang.String,java.text.ParsePosition)": 1.0115091267178746,
        "org.apache.commons.lang3.time$FastDateParser#parseObject(java.lang.String)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser#parseObject(java.lang.String,java.text.ParsePosition)": -0.10053203806101878,
        "org.apache.commons.lang3.time$FastDateParser#readObject(java.io.ObjectInputStream)": -0.1848719298493795,
        "org.apache.commons.lang3.time$FastDateParser#toArray(java.util.Map)": -0.3028831841220325,
        "org.apache.commons.lang3.time$FastDateParser#toString()": -0.10053203806101885,
        "org.apache.commons.lang3.time$FastDateParser$1#compare(org.apache.commons.lang3.time.FastDateParser$KeyValue,org.apache.commons.lang3.time.FastDateParser$KeyValue)": -0.7328932188134524,
        "org.apache.commons.lang3.time$FastDateParser$2#setCalendar(org.apache.commons.lang3.time.FastDateParser,java.util.Calendar,java.lang.String)": -0.4205913173258775,
        "org.apache.commons.lang3.time$FastDateParser$3#modify(int)": -0.1979381533557275,
        "org.apache.commons.lang3.time$FastDateParser$4#modify(int)": -0.39854039889240367,
        "org.apache.commons.lang3.time$FastDateParser$5#modify(int)": -0.46309154971019617,
        "org.apache.commons.lang3.time$FastDateParser$CopyQuotedStrategy#FastDateParser$CopyQuotedStrategy(java.lang.String)": -1.3068846820006392,
        "org.apache.commons.lang3.time$FastDateParser$CopyQuotedStrategy#addRegex(org.apache.commons.lang3.time.FastDateParser,java.lang.StringBuilder)": 0.03890175562626552,
        "org.apache.commons.lang3.time$FastDateParser$CopyQuotedStrategy#isNumber()": -1.2938186826438725,
        "org.apache.commons.lang3.time$FastDateParser$CopyQuotedStrategy#setCalendar(org.apache.commons.lang3.time.FastDateParser,java.util.Calendar,java.lang.String)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser$KeyValue#FastDateParser$KeyValue(java.lang.String,int)": -0.7328932188134524,
        "org.apache.commons.lang3.time$FastDateParser$NumberStrategy#FastDateParser$NumberStrategy(int)": -1.3589252247011,
        "org.apache.commons.lang3.time$FastDateParser$NumberStrategy#addRegex(org.apache.commons.lang3.time.FastDateParser,java.lang.StringBuilder)": 0.012837446605167835,
        "org.apache.commons.lang3.time$FastDateParser$NumberStrategy#isNumber()": -0.2763412660279674,
        "org.apache.commons.lang3.time$FastDateParser$NumberStrategy#modify(int)": -0.8084908732821252,
        "org.apache.commons.lang3.time$FastDateParser$NumberStrategy#setCalendar(org.apache.commons.lang3.time.FastDateParser,java.util.Calendar,java.lang.String)": 0.9904704771491437,
        "org.apache.commons.lang3.time$FastDateParser$TextStrategy#FastDateParser$TextStrategy(int)": -1.3589252247011,
        "org.apache.commons.lang3.time$FastDateParser$TextStrategy#addRegex(org.apache.commons.lang3.time.FastDateParser,java.lang.StringBuilder)": 0.6128932188134525,
        "org.apache.commons.lang3.time$FastDateParser$TextStrategy#isNumber()": 0.0,
        "org.apache.commons.lang3.time$FastDateParser$TextStrategy#setCalendar(org.apache.commons.lang3.time.FastDateParser,java.util.Calendar,java.lang.String)": 1.3161769325016874,
        "org.apache.commons.lang3.time$FastDateParser$TimeZoneStrategy#FastDateParser$TimeZoneStrategy(java.util.Locale)": -1.221548609083479,
        "org.apache.commons.lang3.time$FastDateParser$TimeZoneStrategy#addRegex(org.apache.commons.lang3.time.FastDateParser,java.lang.StringBuilder)": -1.221548609083479,
        "org.apache.commons.lang3.time$FastDateParser$TimeZoneStrategy#isNumber()": -0.8084908732821252,
        "org.apache.commons.lang3.time$FastDateParser$TimeZoneStrategy#setCalendar(org.apache.commons.lang3.time.FastDateParser,java.util.Calendar,java.lang.String)": -0.48365566047394304,
        "org.apache.commons.lang3.time$FastDatePrinter#<clinit>()": -1.434395504586824,
        "org.apache.commons.lang3.time$FastDatePrinter#FastDatePrinter(java.lang.String,java.util.TimeZone,java.util.Locale)": -0.5720335947918649,
        "org.apache.commons.lang3.time$FastDatePrinter#applyRules(java.util.Calendar,java.lang.StringBuffer)": -1.04457246516023,
        "org.apache.commons.lang3.time$FastDatePrinter#equals(java.lang.Object)": -0.3281744321311393,
        "org.apache.commons.lang3.time$FastDatePrinter#format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)": -0.10053203806101878,
        "org.apache.commons.lang3.time$FastDatePrinter#format(java.util.Calendar)": -0.9525327426033234,
        "org.apache.commons.lang3.time$FastDatePrinter#format(java.util.Calendar,java.lang.StringBuffer)": -0.9525327426033234,
        "org.apache.commons.lang3.time$FastDatePrinter#format(java.util.Date)": -0.8574295165017058,
        "org.apache.commons.lang3.time$FastDatePrinter#format(java.util.Date,java.lang.StringBuffer)": -0.10053203806101878,
        "org.apache.commons.lang3.time$FastDatePrinter#format(long)": -0.10053203806101878,
        "org.apache.commons.lang3.time$FastDatePrinter#format(long,java.lang.StringBuffer)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#getLocale()": -0.39854039889240367,
        "org.apache.commons.lang3.time$FastDatePrinter#getMaxLengthEstimate()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#getPattern()": -0.46309154971019617,
        "org.apache.commons.lang3.time$FastDatePrinter#getTimeZone()": -0.35244357181017505,
        "org.apache.commons.lang3.time$FastDatePrinter#getTimeZoneDisplay(java.util.TimeZone,boolean,int,java.util.Locale)": -0.24821962375408677,
        "org.apache.commons.lang3.time$FastDatePrinter#hashCode()": -0.2180132286644103,
        "org.apache.commons.lang3.time$FastDatePrinter#init()": -0.5720335947918649,
        "org.apache.commons.lang3.time$FastDatePrinter#parsePattern()": -0.5720335947918649,
        "org.apache.commons.lang3.time$FastDatePrinter#parseToken(java.lang.String,int[])": -0.5720335947918649,
        "org.apache.commons.lang3.time$FastDatePrinter#readObject(java.io.ObjectInputStream)": -0.1848719298493795,
        "org.apache.commons.lang3.time$FastDatePrinter#selectNumberRule(int,int)": -1.6891403759784125,
        "org.apache.commons.lang3.time$FastDatePrinter#toString()": -0.10053203806101885,
        "org.apache.commons.lang3.time$FastDatePrinter$CharacterLiteral#FastDatePrinter$CharacterLiteral(char)": -1.3946137851290137,
        "org.apache.commons.lang3.time$FastDatePrinter$CharacterLiteral#appendTo(java.lang.StringBuffer,java.util.Calendar)": -0.983521475750909,
        "org.apache.commons.lang3.time$FastDatePrinter$CharacterLiteral#estimateLength()": -1.3946137851290137,
        "org.apache.commons.lang3.time$FastDatePrinter$PaddedNumberField#FastDatePrinter$PaddedNumberField(int,int)": -1.622705645725893,
        "org.apache.commons.lang3.time$FastDatePrinter$PaddedNumberField#appendTo(java.lang.StringBuffer,int)": -0.983521475750909,
        "org.apache.commons.lang3.time$FastDatePrinter$PaddedNumberField#appendTo(java.lang.StringBuffer,java.util.Calendar)": -0.9835214757509092,
        "org.apache.commons.lang3.time$FastDatePrinter$PaddedNumberField#estimateLength()": -1.622705645725893,
        "org.apache.commons.lang3.time$FastDatePrinter$StringLiteral#FastDatePrinter$StringLiteral(java.lang.String)": -0.9369129919416679,
        "org.apache.commons.lang3.time$FastDatePrinter$StringLiteral#appendTo(java.lang.StringBuffer,java.util.Calendar)": -0.1848719298493795,
        "org.apache.commons.lang3.time$FastDatePrinter$StringLiteral#estimateLength()": -0.9369129919416679,
        "org.apache.commons.lang3.time$FastDatePrinter$TextField#FastDatePrinter$TextField(int,java.lang.String[])": -0.0022341991445556375,
        "org.apache.commons.lang3.time$FastDatePrinter$TextField#appendTo(java.lang.StringBuffer,java.util.Calendar)": -0.24821962375408657,
        "org.apache.commons.lang3.time$FastDatePrinter$TextField#estimateLength()": -0.8645961089395142,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneDisplayKey#FastDatePrinter$TimeZoneDisplayKey(java.util.TimeZone,boolean,int,java.util.Locale)": -0.24821962375408657,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneDisplayKey#equals(java.lang.Object)": -0.1848719298493795,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneDisplayKey#hashCode()": -0.24821962375408657,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneNameRule#FastDatePrinter$TimeZoneNameRule(java.util.TimeZone,java.util.Locale,int)": -0.24821962375408677,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneNameRule#appendTo(java.lang.StringBuffer,java.util.Calendar)": -0.1471380635231967,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneNameRule#estimateLength()": -0.24821962375408657,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneNumberRule#<clinit>()": -1.0294192461664702,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneNumberRule#FastDatePrinter$TimeZoneNumberRule(boolean)": -1.0294192461664702,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneNumberRule#appendTo(java.lang.StringBuffer,java.util.Calendar)": -0.37585701758165535,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneNumberRule#estimateLength()": -1.0294192461664702,
        "org.apache.commons.lang3.time$FastDatePrinter$TwelveHourField#FastDatePrinter$TwelveHourField(org.apache.commons.lang3.time.FastDatePrinter$NumberRule)": -0.44208739029773114,
        "org.apache.commons.lang3.time$FastDatePrinter$TwelveHourField#appendTo(java.lang.StringBuffer,int)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwelveHourField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwelveHourField#estimateLength()": -0.44208739029773114,
        "org.apache.commons.lang3.time$FastDatePrinter$TwentyFourHourField#FastDatePrinter$TwentyFourHourField(org.apache.commons.lang3.time.FastDatePrinter$NumberRule)": -0.10053203806101885,
        "org.apache.commons.lang3.time$FastDatePrinter$TwentyFourHourField#appendTo(java.lang.StringBuffer,int)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwentyFourHourField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwentyFourHourField#estimateLength()": -0.10053203806101878,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitMonthField#<clinit>()": -1.4466061424916417,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitMonthField#FastDatePrinter$TwoDigitMonthField()": -1.4466061424916417,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitMonthField#appendTo(java.lang.StringBuffer,int)": -0.9369129919416679,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitMonthField#appendTo(java.lang.StringBuffer,java.util.Calendar)": -0.9369129919416679,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitMonthField#estimateLength()": -1.4466061424916417,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitNumberField#FastDatePrinter$TwoDigitNumberField(int)": -1.5555849806544844,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitNumberField#appendTo(java.lang.StringBuffer,int)": -1.0141945917421649,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitNumberField#appendTo(java.lang.StringBuffer,java.util.Calendar)": -1.0141945917421649,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitNumberField#estimateLength()": -1.5555849806544844,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitYearField#<clinit>()": -0.3281744321311392,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitYearField#FastDatePrinter$TwoDigitYearField()": -0.3281744321311393,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitYearField#appendTo(java.lang.StringBuffer,int)": -0.2180132286644103,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitYearField#appendTo(java.lang.StringBuffer,java.util.Calendar)": -0.21801322866441042,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitYearField#estimateLength()": -0.3281744321311393,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedMonthField#<clinit>()": 0.6540152314763513,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedMonthField#FastDatePrinter$UnpaddedMonthField()": -0.20834667831860726,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedMonthField#appendTo(java.lang.StringBuffer,int)": -0.2763412660279674,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedMonthField#appendTo(java.lang.StringBuffer,java.util.Calendar)": -0.27634126602796727,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedMonthField#estimateLength()": -0.20834667831860726,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedNumberField#FastDatePrinter$UnpaddedNumberField(int)": -0.581185010220038,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedNumberField#appendTo(java.lang.StringBuffer,int)": -0.2763412660279674,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedNumberField#appendTo(java.lang.StringBuffer,java.util.Calendar)": -0.27634126602796727,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedNumberField#estimateLength()": -0.581185010220038,
        "org.apache.commons.lang3.time$FormatCache#<clinit>()": -1.287328350217767,
        "org.apache.commons.lang3.time$FormatCache#FormatCache()": -1.2602129626830034,
        "org.apache.commons.lang3.time$FormatCache#getDateTimeInstance(java.lang.Integer,java.lang.Integer,java.util.TimeZone,java.util.Locale)": -0.3281744321311392,
        "org.apache.commons.lang3.time$FormatCache#getInstance()": -0.14713806352319675,
        "org.apache.commons.lang3.time$FormatCache#getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)": -0.39785105288804506,
        "org.apache.commons.lang3.time$FormatCache#getPatternForStyle(java.lang.Integer,java.lang.Integer,java.util.Locale)": -0.4205913173258776,
        "org.apache.commons.lang3.time$FormatCache$MultipartKey#FormatCache$MultipartKey(java.lang.Object[])": -0.4249664404228089,
        "org.apache.commons.lang3.time$FormatCache$MultipartKey#equals(java.lang.Object)": -0.6182284475544744,
        "org.apache.commons.lang3.time$FormatCache$MultipartKey#hashCode()": -0.4305959713625184
    },
    "Lang-12": {
        "org.apache.commons.lang3$RandomStringUtils#<clinit>()": -1.525786437626905,
        "org.apache.commons.lang3$RandomStringUtils#RandomStringUtils()": -0.910683602522959,
        "org.apache.commons.lang3$RandomStringUtils#random(int)": -0.3660564664078452,
        "org.apache.commons.lang3$RandomStringUtils#random(int,boolean,boolean)": -0.3660564664078452,
        "org.apache.commons.lang3$RandomStringUtils#random(int,char[])": 0.20642317866358856,
        "org.apache.commons.lang3$RandomStringUtils#random(int,int,int,boolean,boolean)": -0.3660564664078452,
        "org.apache.commons.lang3$RandomStringUtils#random(int,int,int,boolean,boolean,char[])": 0.0,
        "org.apache.commons.lang3$RandomStringUtils#random(int,int,int,boolean,boolean,char[],java.util.Random)": 0.3368367524056072,
        "org.apache.commons.lang3$RandomStringUtils#random(int,java.lang.String)": -0.910683602522959,
        "org.apache.commons.lang3$RandomStringUtils#randomAlphabetic(int)": -0.910683602522959,
        "org.apache.commons.lang3$RandomStringUtils#randomAlphanumeric(int)": -0.910683602522959,
        "org.apache.commons.lang3$RandomStringUtils#randomAscii(int)": -0.910683602522959,
        "org.apache.commons.lang3$RandomStringUtils#randomNumeric(int)": -0.910683602522959
    },
    "Lang-13": {
        "org.apache.commons.lang3$SerializationException#SerializationException()": -0.20091034984839107,
        "org.apache.commons.lang3$SerializationException#SerializationException(java.lang.String)": -0.20091034984839107,
        "org.apache.commons.lang3$SerializationException#SerializationException(java.lang.String,java.lang.Throwable)": 0.273303212524704,
        "org.apache.commons.lang3$SerializationException#SerializationException(java.lang.Throwable)": -0.7203653677197248,
        "org.apache.commons.lang3$SerializationUtils#SerializationUtils()": -0.20091034984839107,
        "org.apache.commons.lang3$SerializationUtils#clone(java.io.Serializable)": 1.1603750405723083,
        "org.apache.commons.lang3$SerializationUtils#deserialize(byte[])": -0.892325870759227,
        "org.apache.commons.lang3$SerializationUtils#deserialize(java.io.InputStream)": -1.1053876347433067,
        "org.apache.commons.lang3$SerializationUtils#serialize(java.io.Serializable)": 0.6634174241358469,
        "org.apache.commons.lang3$SerializationUtils#serialize(java.io.Serializable,java.io.OutputStream)": 0.33244271130950753,
        "org.apache.commons.lang3$SerializationUtils$ClassLoaderAwareObjectInputStream#SerializationUtils$ClassLoaderAwareObjectInputStream(java.io.InputStream,java.lang.ClassLoader)": -0.056327755580001804,
        "org.apache.commons.lang3$SerializationUtils$ClassLoaderAwareObjectInputStream#resolveClass(java.io.ObjectStreamClass)": -0.056327755580001804
    },
    "Lang-14": {
        "org.apache.commons.lang3$CharSequenceUtils#CharSequenceUtils()": -0.05961797817410641,
        "org.apache.commons.lang3$CharSequenceUtils#indexOf(java.lang.CharSequence,int,int)": -0.1421121831602481,
        "org.apache.commons.lang3$CharSequenceUtils#indexOf(java.lang.CharSequence,java.lang.CharSequence,int)": -0.18509508389989393,
        "org.apache.commons.lang3$CharSequenceUtils#lastIndexOf(java.lang.CharSequence,int,int)": -0.0861781151983545,
        "org.apache.commons.lang3$CharSequenceUtils#lastIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)": -0.12560538309980473,
        "org.apache.commons.lang3$CharSequenceUtils#regionMatches(java.lang.CharSequence,boolean,int,java.lang.CharSequence,int,int)": -0.26633579537291086,
        "org.apache.commons.lang3$CharSequenceUtils#subSequence(java.lang.CharSequence,int)": -0.05961797817410641,
        "org.apache.commons.lang3$CharSequenceUtils#toCharArray(java.lang.CharSequence)": -0.10729942199504983,
        "org.apache.commons.lang3$StringUtils#<clinit>()": -1.5162272100849754,
        "org.apache.commons.lang3$StringUtils#StringUtils()": -0.05961797817410641,
        "org.apache.commons.lang3$StringUtils#abbreviate(java.lang.String,int)": -0.08617811519835457,
        "org.apache.commons.lang3$StringUtils#abbreviate(java.lang.String,int,int)": -0.08617811519835457,
        "org.apache.commons.lang3$StringUtils#abbreviateMiddle(java.lang.String,java.lang.String,int)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#capitalize(java.lang.String)": -0.05961797817410641,
        "org.apache.commons.lang3$StringUtils#center(java.lang.String,int)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#center(java.lang.String,int,char)": -0.08617811519835457,
        "org.apache.commons.lang3$StringUtils#center(java.lang.String,int,java.lang.String)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#chomp(java.lang.String)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#chomp(java.lang.String,java.lang.String)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#chop(java.lang.String)": -0.05961797817410641,
        "org.apache.commons.lang3$StringUtils#contains(java.lang.CharSequence,int)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#contains(java.lang.CharSequence,java.lang.CharSequence)": -0.1256053830998048,
        "org.apache.commons.lang3$StringUtils#containsAny(java.lang.CharSequence,char[])": -0.18509508389989385,
        "org.apache.commons.lang3$StringUtils#containsAny(java.lang.CharSequence,java.lang.CharSequence)": -0.10729942199504972,
        "org.apache.commons.lang3$StringUtils#containsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": -0.08617811519835457,
        "org.apache.commons.lang3$StringUtils#containsNone(java.lang.CharSequence,char[])": -0.18509508389989385,
        "org.apache.commons.lang3$StringUtils#containsNone(java.lang.CharSequence,java.lang.String)": -0.10729942199504972,
        "org.apache.commons.lang3$StringUtils#containsOnly(java.lang.CharSequence,char[])": -0.14211218316024807,
        "org.apache.commons.lang3$StringUtils#containsOnly(java.lang.CharSequence,java.lang.String)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#containsWhitespace(java.lang.CharSequence)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#countMatches(java.lang.CharSequence,java.lang.CharSequence)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#defaultIfBlank(java.lang.CharSequence,java.lang.CharSequence)": -0.1256053830998048,
        "org.apache.commons.lang3$StringUtils#defaultIfEmpty(java.lang.CharSequence,java.lang.CharSequence)": -0.1256053830998048,
        "org.apache.commons.lang3$StringUtils#defaultString(java.lang.String)": -0.10729942199504983,
        "org.apache.commons.lang3$StringUtils#defaultString(java.lang.String,java.lang.String)": -0.05961797817410641,
        "org.apache.commons.lang3$StringUtils#deleteWhitespace(java.lang.String)": -0.2663357953729107,
        "org.apache.commons.lang3$StringUtils#difference(java.lang.String,java.lang.String)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#endsWith(java.lang.CharSequence,java.lang.CharSequence)": -0.08617811519835457,
        "org.apache.commons.lang3$StringUtils#endsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)": -0.1256053830998048,
        "org.apache.commons.lang3$StringUtils#endsWithAny(java.lang.CharSequence,java.lang.CharSequence[])": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#endsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": -0.08617811519835457,
        "org.apache.commons.lang3$StringUtils#equals(java.lang.CharSequence,java.lang.CharSequence)": 0.1975250891671162,
        "org.apache.commons.lang3$StringUtils#equalsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#getCommonPrefix(java.lang.String[])": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence)": -0.05961797817410641,
        "org.apache.commons.lang3$StringUtils#getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)": -0.05961797817410641,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,int)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,int,int)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,java.lang.CharSequence)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,java.lang.CharSequence,int)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#indexOfAny(java.lang.CharSequence,char[])": -0.1256053830998048,
        "org.apache.commons.lang3$StringUtils#indexOfAny(java.lang.CharSequence,java.lang.CharSequence[])": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#indexOfAny(java.lang.CharSequence,java.lang.String)": -0.08617811519835457,
        "org.apache.commons.lang3$StringUtils#indexOfAnyBut(java.lang.CharSequence,char[])": -0.17160137795835723,
        "org.apache.commons.lang3$StringUtils#indexOfAnyBut(java.lang.CharSequence,java.lang.CharSequence)": -0.08617811519835457,
        "org.apache.commons.lang3$StringUtils#indexOfDifference(java.lang.CharSequence,java.lang.CharSequence)": -0.0861781151983545,
        "org.apache.commons.lang3$StringUtils#indexOfDifference(java.lang.CharSequence[])": -0.08617811519835457,
        "org.apache.commons.lang3$StringUtils#indexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#indexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,int)": -0.08617811519835457,
        "org.apache.commons.lang3$StringUtils#isAllLowerCase(java.lang.CharSequence)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#isAllUpperCase(java.lang.CharSequence)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#isAlpha(java.lang.CharSequence)": -0.05961797817410641,
        "org.apache.commons.lang3$StringUtils#isAlphaSpace(java.lang.CharSequence)": -0.05961797817410641,
        "org.apache.commons.lang3$StringUtils#isAlphanumeric(java.lang.CharSequence)": -0.05961797817410641,
        "org.apache.commons.lang3$StringUtils#isAlphanumericSpace(java.lang.CharSequence)": -0.05961797817410641,
        "org.apache.commons.lang3$StringUtils#isAsciiPrintable(java.lang.CharSequence)": -0.05961797817410641,
        "org.apache.commons.lang3$StringUtils#isBlank(java.lang.CharSequence)": -0.3528985275695631,
        "org.apache.commons.lang3$StringUtils#isEmpty(java.lang.CharSequence)": -1.239599973652263,
        "org.apache.commons.lang3$StringUtils#isNotBlank(java.lang.CharSequence)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#isNotEmpty(java.lang.CharSequence)": -0.1979622147770957,
        "org.apache.commons.lang3$StringUtils#isNumeric(java.lang.CharSequence)": -0.05961797817410641,
        "org.apache.commons.lang3$StringUtils#isNumericSpace(java.lang.CharSequence)": -0.05961797817410641,
        "org.apache.commons.lang3$StringUtils#isWhitespace(java.lang.CharSequence)": -0.05961797817410641,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Iterable,char)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Iterable,java.lang.String)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[])": -0.10729942199504972,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],char)": -0.08617811519835457,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],char,int,int)": -0.08617811519835457,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],java.lang.String)": -0.1256053830998048,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],java.lang.String,int,int)": -0.1256053830998048,
        "org.apache.commons.lang3$StringUtils#join(java.util.Iterator,char)": -0.0861781151983545,
        "org.apache.commons.lang3$StringUtils#join(java.util.Iterator,java.lang.String)": -0.0861781151983545,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,int)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,int,int)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,java.lang.CharSequence)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#lastIndexOfAny(java.lang.CharSequence,java.lang.CharSequence[])": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#lastIndexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#lastIndexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,int)": -0.08617811519835457,
        "org.apache.commons.lang3$StringUtils#lastOrdinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#left(java.lang.String,int)": -0.05961797817410641,
        "org.apache.commons.lang3$StringUtils#leftPad(java.lang.String,int)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#leftPad(java.lang.String,int,char)": -0.29675090610461785,
        "org.apache.commons.lang3$StringUtils#leftPad(java.lang.String,int,java.lang.String)": -0.10729942199504972,
        "org.apache.commons.lang3$StringUtils#length(java.lang.CharSequence)": -0.12560538309980473,
        "org.apache.commons.lang3$StringUtils#lowerCase(java.lang.String)": -0.05961797817410641,
        "org.apache.commons.lang3$StringUtils#lowerCase(java.lang.String,java.util.Locale)": -0.05961797817410641,
        "org.apache.commons.lang3$StringUtils#mid(java.lang.String,int,int)": -0.05961797817410641,
        "org.apache.commons.lang3$StringUtils#normalizeSpace(java.lang.String)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#ordinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#ordinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int,boolean)": -0.08617811519835457,
        "org.apache.commons.lang3$StringUtils#overlay(java.lang.String,java.lang.String,int,int)": -0.05961797817410641,
        "org.apache.commons.lang3$StringUtils#remove(java.lang.String,char)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#remove(java.lang.String,java.lang.String)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#removeAccentsJava6(java.lang.CharSequence)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#removeAccentsSUN(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#removeEnd(java.lang.String,java.lang.String)": -0.10729942199504972,
        "org.apache.commons.lang3$StringUtils#removeEndIgnoreCase(java.lang.String,java.lang.String)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#removeStart(java.lang.String,java.lang.String)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#removeStartIgnoreCase(java.lang.String,java.lang.String)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#repeat(char,int)": -0.32548868854346225,
        "org.apache.commons.lang3$StringUtils#repeat(java.lang.String,int)": -0.1256053830998048,
        "org.apache.commons.lang3$StringUtils#repeat(java.lang.String,java.lang.String,int)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#replace(java.lang.String,java.lang.String,java.lang.String)": -0.14211218316024807,
        "org.apache.commons.lang3$StringUtils#replace(java.lang.String,java.lang.String,java.lang.String,int)": -0.2103047863200242,
        "org.apache.commons.lang3$StringUtils#replaceChars(java.lang.String,char,char)": -0.0861781151983545,
        "org.apache.commons.lang3$StringUtils#replaceChars(java.lang.String,java.lang.String,java.lang.String)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#replaceEach(java.lang.String,java.lang.String[],java.lang.String[])": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#replaceEach(java.lang.String,java.lang.String[],java.lang.String[],boolean,int)": -0.08617811519835457,
        "org.apache.commons.lang3$StringUtils#replaceEachRepeatedly(java.lang.String,java.lang.String[],java.lang.String[])": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#replaceOnce(java.lang.String,java.lang.String,java.lang.String)": -0.10729942199504972,
        "org.apache.commons.lang3$StringUtils#reverse(java.lang.String)": -0.05961797817410641,
        "org.apache.commons.lang3$StringUtils#reverseDelimited(java.lang.String,char)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#right(java.lang.String,int)": -0.05961797817410641,
        "org.apache.commons.lang3$StringUtils#rightPad(java.lang.String,int)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#rightPad(java.lang.String,int,char)": -0.15734098353000447,
        "org.apache.commons.lang3$StringUtils#rightPad(java.lang.String,int,java.lang.String)": -0.10729942199504972,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String,char)": -0.08617811519835457,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String,java.lang.String)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String,java.lang.String,int)": -0.08617811519835457,
        "org.apache.commons.lang3$StringUtils#splitByCharacterType(java.lang.String)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#splitByCharacterType(java.lang.String,boolean)": -0.0861781151983545,
        "org.apache.commons.lang3$StringUtils#splitByCharacterTypeCamelCase(java.lang.String)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparator(java.lang.String,java.lang.String)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparator(java.lang.String,java.lang.String,int)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String,int)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparatorWorker(java.lang.String,java.lang.String,int,boolean)": -0.10729942199504972,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String,char)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String,java.lang.String)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String,java.lang.String,int)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#splitWorker(java.lang.String,char,boolean)": -0.10729942199504983,
        "org.apache.commons.lang3$StringUtils#splitWorker(java.lang.String,java.lang.String,int,boolean)": -0.1716013779583574,
        "org.apache.commons.lang3$StringUtils#startsWith(java.lang.CharSequence,java.lang.CharSequence)": -0.08617811519835457,
        "org.apache.commons.lang3$StringUtils#startsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)": -0.1256053830998048,
        "org.apache.commons.lang3$StringUtils#startsWithAny(java.lang.CharSequence,java.lang.CharSequence[])": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#startsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": -0.08617811519835457,
        "org.apache.commons.lang3$StringUtils#strip(java.lang.String)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#strip(java.lang.String,java.lang.String)": -0.14211218316024807,
        "org.apache.commons.lang3$StringUtils#stripAccents(java.lang.String)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#stripAll(java.lang.String[])": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#stripAll(java.lang.String[],java.lang.String)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#stripEnd(java.lang.String,java.lang.String)": -0.1716013779583574,
        "org.apache.commons.lang3$StringUtils#stripStart(java.lang.String,java.lang.String)": -0.15734098353000459,
        "org.apache.commons.lang3$StringUtils#stripToEmpty(java.lang.String)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#stripToNull(java.lang.String)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#substring(java.lang.String,int)": -0.05961797817410641,
        "org.apache.commons.lang3$StringUtils#substring(java.lang.String,int,int)": -0.05961797817410641,
        "org.apache.commons.lang3$StringUtils#substringAfter(java.lang.String,java.lang.String)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#substringAfterLast(java.lang.String,java.lang.String)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#substringBefore(java.lang.String,java.lang.String)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#substringBeforeLast(java.lang.String,java.lang.String)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#substringBetween(java.lang.String,java.lang.String)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#substringBetween(java.lang.String,java.lang.String,java.lang.String)": -0.0861781151983545,
        "org.apache.commons.lang3$StringUtils#substringsBetween(java.lang.String,java.lang.String,java.lang.String)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#swapCase(java.lang.String)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#toString(byte[],java.lang.String)": -0.05961797817410641,
        "org.apache.commons.lang3$StringUtils#trim(java.lang.String)": -0.10729942199504983,
        "org.apache.commons.lang3$StringUtils#trimToEmpty(java.lang.String)": -0.05961797817410641,
        "org.apache.commons.lang3$StringUtils#trimToNull(java.lang.String)": -0.05961797817410621,
        "org.apache.commons.lang3$StringUtils#uncapitalize(java.lang.String)": -0.05961797817410641,
        "org.apache.commons.lang3$StringUtils#upperCase(java.lang.String)": -0.05961797817410641,
        "org.apache.commons.lang3$StringUtils#upperCase(java.lang.String,java.util.Locale)": -0.05961797817410641,
        "org.apache.commons.lang3$StringUtils$InitStripAccents#<clinit>()": -0.05961797817410641,
        "org.apache.commons.lang3$StringUtils$InitStripAccents#StringUtils$InitStripAccents()": 0.0
    },
    "Lang-15": {
        "org.apache.commons.lang3$ArrayUtils#<clinit>()": -1.0458960467166996,
        "org.apache.commons.lang3$ArrayUtils#ArrayUtils()": -0.03963790336358253,
        "org.apache.commons.lang3$ArrayUtils#add(boolean[],boolean)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#add(boolean[],int,boolean)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#add(byte[],byte)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#add(byte[],int,byte)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#add(char[],char)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#add(char[],int,char)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#add(double[],double)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#add(double[],int,double)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#add(float[],float)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#add(float[],int,float)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#add(int[],int)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#add(int[],int,int)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#add(java.lang.Object,int,java.lang.Object,java.lang.Class)": -0.03963790336358253,
        "org.apache.commons.lang3$ArrayUtils#add(java.lang.Object[],int,java.lang.Object)": -0.05691037661064762,
        "org.apache.commons.lang3$ArrayUtils#add(java.lang.Object[],java.lang.Object)": -0.08219125862220872,
        "org.apache.commons.lang3$ArrayUtils#add(long[],int,long)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#add(long[],long)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#add(short[],int,short)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#add(short[],short)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#addAll(boolean[],boolean[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#addAll(byte[],byte[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#addAll(char[],char[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#addAll(double[],double[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#addAll(float[],float[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#addAll(int[],int[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#addAll(java.lang.Object[],java.lang.Object[])": -0.08219125862220872,
        "org.apache.commons.lang3$ArrayUtils#addAll(long[],long[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#addAll(short[],short[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#clone(boolean[])": -0.08219125862220872,
        "org.apache.commons.lang3$ArrayUtils#clone(byte[])": -0.08219125862220872,
        "org.apache.commons.lang3$ArrayUtils#clone(char[])": -0.1697370805004753,
        "org.apache.commons.lang3$ArrayUtils#clone(double[])": -0.08219125862220872,
        "org.apache.commons.lang3$ArrayUtils#clone(float[])": -0.08219125862220872,
        "org.apache.commons.lang3$ArrayUtils#clone(int[])": -0.3713443972092675,
        "org.apache.commons.lang3$ArrayUtils#clone(java.lang.Object[])": 0.8793581592236247,
        "org.apache.commons.lang3$ArrayUtils#clone(long[])": -0.08219125862220872,
        "org.apache.commons.lang3$ArrayUtils#clone(short[])": -0.08219125862220872,
        "org.apache.commons.lang3$ArrayUtils#contains(boolean[],boolean)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#contains(byte[],byte)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#contains(char[],char)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#contains(double[],double)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#contains(double[],double,double)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#contains(float[],float)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#contains(int[],int)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#contains(java.lang.Object[],java.lang.Object)": -0.21663339521061883,
        "org.apache.commons.lang3$ArrayUtils#contains(long[],long)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#contains(short[],short)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#copyArrayGrow1(java.lang.Object,java.lang.Class)": -0.14266430834101462,
        "org.apache.commons.lang3$ArrayUtils#extractIndices(java.util.HashSet)": -0.12766006577587863,
        "org.apache.commons.lang3$ArrayUtils#getLength(java.lang.Object)": -0.43997948169719403,
        "org.apache.commons.lang3$ArrayUtils#hashCode(java.lang.Object)": -0.03963790336358253,
        "org.apache.commons.lang3$ArrayUtils#indexOf(boolean[],boolean)": -0.07050318496917642,
        "org.apache.commons.lang3$ArrayUtils#indexOf(boolean[],boolean,int)": -0.09266210183292316,
        "org.apache.commons.lang3$ArrayUtils#indexOf(byte[],byte)": -0.07050318496917642,
        "org.apache.commons.lang3$ArrayUtils#indexOf(byte[],byte,int)": -0.09266210183292316,
        "org.apache.commons.lang3$ArrayUtils#indexOf(char[],char)": -0.07050318496917642,
        "org.apache.commons.lang3$ArrayUtils#indexOf(char[],char,int)": -0.09266210183292316,
        "org.apache.commons.lang3$ArrayUtils#indexOf(double[],double)": -0.07050318496917642,
        "org.apache.commons.lang3$ArrayUtils#indexOf(double[],double,double)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#indexOf(double[],double,int)": -0.09266210183292316,
        "org.apache.commons.lang3$ArrayUtils#indexOf(double[],double,int,double)": -0.07050318496917642,
        "org.apache.commons.lang3$ArrayUtils#indexOf(float[],float)": -0.07050318496917642,
        "org.apache.commons.lang3$ArrayUtils#indexOf(float[],float,int)": -0.09266210183292316,
        "org.apache.commons.lang3$ArrayUtils#indexOf(int[],int)": -0.07050318496917642,
        "org.apache.commons.lang3$ArrayUtils#indexOf(int[],int,int)": -0.09266210183292316,
        "org.apache.commons.lang3$ArrayUtils#indexOf(java.lang.Object[],java.lang.Object)": -0.2273440357683498,
        "org.apache.commons.lang3$ArrayUtils#indexOf(java.lang.Object[],java.lang.Object,int)": -0.23774862196292285,
        "org.apache.commons.lang3$ArrayUtils#indexOf(long[],long)": -0.07050318496917642,
        "org.apache.commons.lang3$ArrayUtils#indexOf(long[],long,int)": -0.09266210183292316,
        "org.apache.commons.lang3$ArrayUtils#indexOf(short[],short)": -0.07050318496917642,
        "org.apache.commons.lang3$ArrayUtils#indexOf(short[],short,int)": -0.09266210183292316,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(boolean[])": -0.11965165701138271,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(byte[])": -0.05691037661064762,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(char[])": -0.2055757979539005,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(double[])": -0.15661102469770305,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(float[])": -0.11965165701138271,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(int[])": -0.05691037661064762,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(java.lang.Object[])": -0.08219125862220872,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(long[])": -0.05691037661064762,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(short[])": -0.05691037661064762,
        "org.apache.commons.lang3$ArrayUtils#isEquals(java.lang.Object,java.lang.Object)": -0.14266430834101462,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(boolean[])": -0.03963790336358253,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(byte[])": -0.03963790336358253,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(char[])": -0.03963790336358253,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(double[])": -0.03963790336358253,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(float[])": -0.03963790336358253,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(int[])": -0.36332670110373544,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(java.lang.Object[])": -0.056910376610647795,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(long[])": -0.03963790336358253,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(short[])": -0.03963790336358253,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(boolean[],boolean[])": -0.03963790336358253,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(byte[],byte[])": -0.03963790336358253,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(char[],char[])": -0.03963790336358253,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(double[],double[])": -0.03963790336358253,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(float[],float[])": -0.03963790336358253,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(int[],int[])": -0.03963790336358253,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(java.lang.Object[],java.lang.Object[])": -0.16326530612244897,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(long[],long[])": -0.03963790336358253,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(short[],short[])": -0.03963790336358253,
        "org.apache.commons.lang3$ArrayUtils#isSameType(java.lang.Object,java.lang.Object)": -0.03963790336358253,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(boolean[],boolean)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(boolean[],boolean,int)": -0.05691037661064762,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(byte[],byte)": -0.05691037661064762,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(byte[],byte,int)": -0.05691037661064762,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(char[],char)": -0.05691037661064762,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(char[],char,int)": -0.05691037661064762,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(double[],double)": -0.05691037661064762,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(double[],double,double)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(double[],double,int)": -0.05691037661064762,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(double[],double,int,double)": -0.05691037661064762,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(float[],float)": -0.05691037661064762,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(float[],float,int)": -0.05691037661064762,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(int[],int)": -0.05691037661064762,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(int[],int,int)": -0.05691037661064762,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(java.lang.Object[],java.lang.Object)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(java.lang.Object[],java.lang.Object,int)": -0.05691037661064762,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(long[],long)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(long[],long,int)": -0.05691037661064762,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(short[],short)": -0.05691037661064762,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(short[],short,int)": -0.05691037661064762,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(boolean[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(byte[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(char[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(double[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(float[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(int[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Boolean[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Byte[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Character[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Double[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Float[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Integer[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Long[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Object[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Short[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.String[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(long[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(short[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#remove(boolean[],int)": -0.05691037661064762,
        "org.apache.commons.lang3$ArrayUtils#remove(byte[],int)": -0.05691037661064762,
        "org.apache.commons.lang3$ArrayUtils#remove(char[],int)": -0.05691037661064762,
        "org.apache.commons.lang3$ArrayUtils#remove(double[],int)": -0.05691037661064762,
        "org.apache.commons.lang3$ArrayUtils#remove(float[],int)": -0.05691037661064762,
        "org.apache.commons.lang3$ArrayUtils#remove(int[],int)": -0.05691037661064762,
        "org.apache.commons.lang3$ArrayUtils#remove(java.lang.Object,int)": -0.199901463141065,
        "org.apache.commons.lang3$ArrayUtils#remove(java.lang.Object[],int)": -0.08219125862220872,
        "org.apache.commons.lang3$ArrayUtils#remove(long[],int)": -0.05691037661064762,
        "org.apache.commons.lang3$ArrayUtils#remove(short[],int)": -0.05691037661064762,
        "org.apache.commons.lang3$ArrayUtils#removeAll(boolean[],int[])": -0.10226830864341364,
        "org.apache.commons.lang3$ArrayUtils#removeAll(byte[],int[])": -0.10226830864341364,
        "org.apache.commons.lang3$ArrayUtils#removeAll(char[],int[])": -0.10226830864341364,
        "org.apache.commons.lang3$ArrayUtils#removeAll(double[],int[])": -0.10226830864341364,
        "org.apache.commons.lang3$ArrayUtils#removeAll(float[],int[])": -0.10226830864341364,
        "org.apache.commons.lang3$ArrayUtils#removeAll(int[],int[])": -0.10226830864341364,
        "org.apache.commons.lang3$ArrayUtils#removeAll(java.lang.Object,int[])": -0.3592830600410281,
        "org.apache.commons.lang3$ArrayUtils#removeAll(java.lang.Object[],int[])": -0.10226830864341364,
        "org.apache.commons.lang3$ArrayUtils#removeAll(long[],int[])": -0.10226830864341364,
        "org.apache.commons.lang3$ArrayUtils#removeAll(short[],int[])": -0.10226830864341364,
        "org.apache.commons.lang3$ArrayUtils#removeElement(boolean[],boolean)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#removeElement(byte[],byte)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#removeElement(char[],char)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#removeElement(double[],double)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#removeElement(float[],float)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#removeElement(int[],int)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#removeElement(java.lang.Object[],java.lang.Object)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#removeElement(long[],long)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#removeElement(short[],short)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#removeElements(boolean[],boolean[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#removeElements(byte[],byte[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#removeElements(char[],char[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#removeElements(double[],double[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#removeElements(float[],float[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#removeElements(int[],int[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#removeElements(java.lang.Object[],java.lang.Object[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#removeElements(long[],long[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#removeElements(short[],short[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#reverse(boolean[])": -0.03963790336358253,
        "org.apache.commons.lang3$ArrayUtils#reverse(byte[])": -0.03963790336358253,
        "org.apache.commons.lang3$ArrayUtils#reverse(char[])": -0.03963790336358253,
        "org.apache.commons.lang3$ArrayUtils#reverse(double[])": -0.03963790336358253,
        "org.apache.commons.lang3$ArrayUtils#reverse(float[])": -0.03963790336358253,
        "org.apache.commons.lang3$ArrayUtils#reverse(int[])": -0.03963790336358253,
        "org.apache.commons.lang3$ArrayUtils#reverse(java.lang.Object[])": -0.056910376610647795,
        "org.apache.commons.lang3$ArrayUtils#reverse(long[])": -0.03963790336358253,
        "org.apache.commons.lang3$ArrayUtils#reverse(short[])": -0.03963790336358253,
        "org.apache.commons.lang3$ArrayUtils#subarray(boolean[],int,int)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#subarray(byte[],int,int)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#subarray(char[],int,int)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#subarray(double[],int,int)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#subarray(float[],int,int)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#subarray(int[],int,int)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#subarray(java.lang.Object[],int,int)": -0.03963790336358253,
        "org.apache.commons.lang3$ArrayUtils#subarray(long[],int,int)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#subarray(short[],int,int)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#toArray(java.lang.Object[])": -0.10226830864341374,
        "org.apache.commons.lang3$ArrayUtils#toMap(java.lang.Object[])": -0.03963790336358253,
        "org.apache.commons.lang3$ArrayUtils#toObject(boolean[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#toObject(byte[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#toObject(char[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#toObject(double[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#toObject(float[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#toObject(int[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#toObject(long[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#toObject(short[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Boolean[])": -0.13531358157929246,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Boolean[],boolean)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Byte[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Byte[],byte)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Character[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Character[],char)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Double[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Double[],double)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Float[])": -0.05691037661064762,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Float[],float)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Integer[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Integer[],int)": -0.05691037661064762,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Long[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Long[],long)": -0.05691037661064762,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Short[])": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Short[],short)": -0.03963790336358249,
        "org.apache.commons.lang3$ArrayUtils#toString(java.lang.Object)": -0.12766006577587868,
        "org.apache.commons.lang3$ArrayUtils#toString(java.lang.Object,java.lang.String)": -0.12766006577587863,
        "org.apache.commons.lang3$ClassUtils#<clinit>()": 1.2991783841336297,
        "org.apache.commons.lang3$ClassUtils#ClassUtils()": -0.10226830864341374,
        "org.apache.commons.lang3$ClassUtils#addAbbreviation(java.lang.String,java.lang.String)": 1.2991783841336297,
        "org.apache.commons.lang3$ClassUtils#convertClassNamesToClasses(java.util.List)": -0.03963790336358253,
        "org.apache.commons.lang3$ClassUtils#convertClassesToClassNames(java.util.List)": -0.03963790336358253,
        "org.apache.commons.lang3$ClassUtils#getAllInterfaces(java.lang.Class)": -0.14975272562348405,
        "org.apache.commons.lang3$ClassUtils#getAllInterfaces(java.lang.Class,java.util.HashSet)": -0.14975272562348405,
        "org.apache.commons.lang3$ClassUtils#getAllSuperclasses(java.lang.Class)": -0.056910376610647795,
        "org.apache.commons.lang3$ClassUtils#getCanonicalName(java.lang.String)": -0.10226830864341364,
        "org.apache.commons.lang3$ClassUtils#getClass(java.lang.ClassLoader,java.lang.String)": 0.0,
        "org.apache.commons.lang3$ClassUtils#getClass(java.lang.ClassLoader,java.lang.String,boolean)": -0.12766006577587868,
        "org.apache.commons.lang3$ClassUtils#getClass(java.lang.String)": -0.12766006577587868,
        "org.apache.commons.lang3$ClassUtils#getClass(java.lang.String,boolean)": -0.12766006577587868,
        "org.apache.commons.lang3$ClassUtils#getPackageCanonicalName(java.lang.Class)": -0.03963790336358249,
        "org.apache.commons.lang3$ClassUtils#getPackageCanonicalName(java.lang.Object,java.lang.String)": -0.03963790336358249,
        "org.apache.commons.lang3$ClassUtils#getPackageCanonicalName(java.lang.String)": -0.07050318496917642,
        "org.apache.commons.lang3$ClassUtils#getPackageName(java.lang.Class)": -0.05691037661064762,
        "org.apache.commons.lang3$ClassUtils#getPackageName(java.lang.Object,java.lang.String)": -0.03963790336358249,
        "org.apache.commons.lang3$ClassUtils#getPackageName(java.lang.String)": -0.10226830864341374,
        "org.apache.commons.lang3$ClassUtils#getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])": -0.03963790336358249,
        "org.apache.commons.lang3$ClassUtils#getShortCanonicalName(java.lang.Class)": -0.03963790336358249,
        "org.apache.commons.lang3$ClassUtils#getShortCanonicalName(java.lang.Object,java.lang.String)": -0.03963790336358249,
        "org.apache.commons.lang3$ClassUtils#getShortCanonicalName(java.lang.String)": -0.07050318496917642,
        "org.apache.commons.lang3$ClassUtils#getShortClassName(java.lang.Class)": -0.2325823443124962,
        "org.apache.commons.lang3$ClassUtils#getShortClassName(java.lang.Object,java.lang.String)": -0.07050318496917642,
        "org.apache.commons.lang3$ClassUtils#getShortClassName(java.lang.String)": -0.2528532226289131,
        "org.apache.commons.lang3$ClassUtils#getSimpleName(java.lang.Class)": -0.056910376610647795,
        "org.apache.commons.lang3$ClassUtils#getSimpleName(java.lang.Object,java.lang.String)": -0.03963790336358249,
        "org.apache.commons.lang3$ClassUtils#isAssignable(java.lang.Class,java.lang.Class)": 1.7003483429886173,
        "org.apache.commons.lang3$ClassUtils#isAssignable(java.lang.Class,java.lang.Class,boolean)": 1.603366604789381,
        "org.apache.commons.lang3$ClassUtils#isAssignable(java.lang.Class[],java.lang.Class[])": -0.03963790336358249,
        "org.apache.commons.lang3$ClassUtils#isAssignable(java.lang.Class[],java.lang.Class[],boolean)": -0.15661102469770305,
        "org.apache.commons.lang3$ClassUtils#isInnerClass(java.lang.Class)": -0.03963790336358253,
        "org.apache.commons.lang3$ClassUtils#isPrimitiveOrWrapper(java.lang.Class)": -0.03963790336358249,
        "org.apache.commons.lang3$ClassUtils#isPrimitiveWrapper(java.lang.Class)": -0.05691037661064762,
        "org.apache.commons.lang3$ClassUtils#primitiveToWrapper(java.lang.Class)": 0.9894467154106688,
        "org.apache.commons.lang3$ClassUtils#primitivesToWrappers(java.lang.Class[])": -0.03963790336358249,
        "org.apache.commons.lang3$ClassUtils#toCanonicalName(java.lang.String)": -0.11965165701138271,
        "org.apache.commons.lang3$ClassUtils#toClass(java.lang.Object[])": -0.03963790336358249,
        "org.apache.commons.lang3$ClassUtils#wrapperToPrimitive(java.lang.Class)": -0.17604432482459237,
        "org.apache.commons.lang3$ClassUtils#wrappersToPrimitives(java.lang.Class[])": -0.07050318496917642,
        "org.apache.commons.lang3$JavaVersion#<clinit>()": 0.8439024366497634,
        "org.apache.commons.lang3$JavaVersion#JavaVersion(java.lang.String,int,float,java.lang.String)": -0.5018840009771414,
        "org.apache.commons.lang3$JavaVersion#atLeast(org.apache.commons.lang3.JavaVersion)": 0.24686952660474548,
        "org.apache.commons.lang3$JavaVersion#get(java.lang.String)": 0.8492230183851164,
        "org.apache.commons.lang3$JavaVersion#getJavaVersion(java.lang.String)": -0.03963790336358249,
        "org.apache.commons.lang3$JavaVersion#toString()": -0.03963790336358253,
        "org.apache.commons.lang3$StringEscapeUtils#<clinit>()": 0.9004733859759286,
        "org.apache.commons.lang3$StringEscapeUtils#StringEscapeUtils()": -0.03963790336358253,
        "org.apache.commons.lang3$StringEscapeUtils#escapeCsv(java.lang.String)": -0.03963790336358249,
        "org.apache.commons.lang3$StringEscapeUtils#escapeEcmaScript(java.lang.String)": -0.05691037661064762,
        "org.apache.commons.lang3$StringEscapeUtils#escapeHtml3(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringEscapeUtils#escapeHtml4(java.lang.String)": 1.0349155225643387,
        "org.apache.commons.lang3$StringEscapeUtils#escapeJava(java.lang.String)": -0.07050318496917642,
        "org.apache.commons.lang3$StringEscapeUtils#escapeXml(java.lang.String)": -0.05691037661064762,
        "org.apache.commons.lang3$StringEscapeUtils#unescapeCsv(java.lang.String)": -0.03963790336358249,
        "org.apache.commons.lang3$StringEscapeUtils#unescapeEcmaScript(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringEscapeUtils#unescapeHtml3(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringEscapeUtils#unescapeHtml4(java.lang.String)": -0.11965165701138271,
        "org.apache.commons.lang3$StringEscapeUtils#unescapeJava(java.lang.String)": -0.03963790336358249,
        "org.apache.commons.lang3$StringEscapeUtils#unescapeXml(java.lang.String)": -0.07050318496917642,
        "org.apache.commons.lang3$StringEscapeUtils$CsvEscaper#<clinit>()": 0.03811147618097016,
        "org.apache.commons.lang3$StringEscapeUtils$CsvEscaper#StringEscapeUtils$CsvEscaper()": 0.9004733859759286,
        "org.apache.commons.lang3$StringEscapeUtils$CsvEscaper#translate(java.lang.CharSequence,int,java.io.Writer)": -0.05691037661064762,
        "org.apache.commons.lang3$StringEscapeUtils$CsvUnescaper#<clinit>()": 0.03811147618097016,
        "org.apache.commons.lang3$StringEscapeUtils$CsvUnescaper#StringEscapeUtils$CsvUnescaper()": 0.9004733859759286,
        "org.apache.commons.lang3$StringEscapeUtils$CsvUnescaper#translate(java.lang.CharSequence,int,java.io.Writer)": -0.05691037661064762,
        "org.apache.commons.lang3$SystemUtils#<clinit>()": 0.8518869025991646,
        "org.apache.commons.lang3$SystemUtils#SystemUtils()": -0.03963790336358253,
        "org.apache.commons.lang3$SystemUtils#getJavaHome()": -0.03963790336358253,
        "org.apache.commons.lang3$SystemUtils#getJavaIoTmpDir()": -0.03963790336358253,
        "org.apache.commons.lang3$SystemUtils#getJavaVersionMatches(java.lang.String)": 0.8518869025991646,
        "org.apache.commons.lang3$SystemUtils#getOSMatches(java.lang.String,java.lang.String)": 0.8518869025991646,
        "org.apache.commons.lang3$SystemUtils#getOSMatchesName(java.lang.String)": 0.8518869025991646,
        "org.apache.commons.lang3$SystemUtils#getSystemProperty(java.lang.String)": -0.4938995350277401,
        "org.apache.commons.lang3$SystemUtils#getUserDir()": -0.03963790336358253,
        "org.apache.commons.lang3$SystemUtils#getUserHome()": -0.03963790336358253,
        "org.apache.commons.lang3$SystemUtils#isJavaAwtHeadless()": -0.03963790336358249,
        "org.apache.commons.lang3$SystemUtils#isJavaVersionAtLeast(org.apache.commons.lang3.JavaVersion)": 1.5979706713429103,
        "org.apache.commons.lang3$SystemUtils#isJavaVersionMatch(java.lang.String,java.lang.String)": -0.4938995350277401,
        "org.apache.commons.lang3$SystemUtils#isOSMatch(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": -0.4938995350277401,
        "org.apache.commons.lang3$SystemUtils#isOSNameMatch(java.lang.String,java.lang.String)": -0.4938995350277401,
        "org.apache.commons.lang3.reflect$TypeUtils#TypeUtils()": 0.0,
        "org.apache.commons.lang3.reflect$TypeUtils#determineTypeArguments(java.lang.Class,java.lang.reflect.ParameterizedType)": -0.03963790336358249,
        "org.apache.commons.lang3.reflect$TypeUtils#getArrayComponentType(java.lang.reflect.Type)": -0.056910376610647795,
        "org.apache.commons.lang3.reflect$TypeUtils#getClosestParentType(java.lang.Class,java.lang.Class)": 1.7378087413777914,
        "org.apache.commons.lang3.reflect$TypeUtils#getImplicitBounds(java.lang.reflect.TypeVariable)": -0.03963790336358249,
        "org.apache.commons.lang3.reflect$TypeUtils#getImplicitLowerBounds(java.lang.reflect.WildcardType)": 0.21510696802800638,
        "org.apache.commons.lang3.reflect$TypeUtils#getImplicitUpperBounds(java.lang.reflect.WildcardType)": 1.077468877822965,
        "org.apache.commons.lang3.reflect$TypeUtils#getRawType(java.lang.reflect.ParameterizedType)": 0.3920223037508864,
        "org.apache.commons.lang3.reflect$TypeUtils#getRawType(java.lang.reflect.Type,java.lang.reflect.Type)": -0.03963790336358249,
        "org.apache.commons.lang3.reflect$TypeUtils#getTypeArguments(java.lang.Class,java.lang.Class,java.util.Map)": 1.7494968150308234,
        "org.apache.commons.lang3.reflect$TypeUtils#getTypeArguments(java.lang.reflect.ParameterizedType)": 0.0,
        "org.apache.commons.lang3.reflect$TypeUtils#getTypeArguments(java.lang.reflect.ParameterizedType,java.lang.Class,java.util.Map)": 1.7378087413777914,
        "org.apache.commons.lang3.reflect$TypeUtils#getTypeArguments(java.lang.reflect.Type,java.lang.Class)": 1.077468877822965,
        "org.apache.commons.lang3.reflect$TypeUtils#getTypeArguments(java.lang.reflect.Type,java.lang.Class,java.util.Map)": 1.7494968150308234,
        "org.apache.commons.lang3.reflect$TypeUtils#isArrayType(java.lang.reflect.Type)": -0.056910376610647795,
        "org.apache.commons.lang3.reflect$TypeUtils#isAssignable(java.lang.reflect.Type,java.lang.Class)": 1.7378087413777914,
        "org.apache.commons.lang3.reflect$TypeUtils#isAssignable(java.lang.reflect.Type,java.lang.reflect.GenericArrayType,java.util.Map)": 1.1171067811865476,
        "org.apache.commons.lang3.reflect$TypeUtils#isAssignable(java.lang.reflect.Type,java.lang.reflect.ParameterizedType,java.util.Map)": 1.0601964045759,
        "org.apache.commons.lang3.reflect$TypeUtils#isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)": 1.7378087413777914,
        "org.apache.commons.lang3.reflect$TypeUtils#isAssignable(java.lang.reflect.Type,java.lang.reflect.Type,java.util.Map)": 1.7378087413777914,
        "org.apache.commons.lang3.reflect$TypeUtils#isAssignable(java.lang.reflect.Type,java.lang.reflect.TypeVariable,java.util.Map)": 0.0,
        "org.apache.commons.lang3.reflect$TypeUtils#isAssignable(java.lang.reflect.Type,java.lang.reflect.WildcardType,java.util.Map)": 1.077468877822965,
        "org.apache.commons.lang3.reflect$TypeUtils#isInstance(java.lang.Object,java.lang.reflect.Type)": -0.03963790336358249,
        "org.apache.commons.lang3.reflect$TypeUtils#mapTypeVariablesToArguments(java.lang.Class,java.lang.reflect.ParameterizedType,java.util.Map)": -0.03963790336358249,
        "org.apache.commons.lang3.reflect$TypeUtils#normalizeUpperBounds(java.lang.reflect.Type[])": 1.077468877822965,
        "org.apache.commons.lang3.reflect$TypeUtils#substituteTypeVariables(java.lang.reflect.Type,java.util.Map)": 0.21510696802800638,
        "org.apache.commons.lang3.reflect$TypeUtils#typesSatisfyVariables(java.util.Map)": -0.03963790336358249,
        "org.apache.commons.lang3.reflect$TypeUtils#unrollVariableAssignments(java.lang.reflect.TypeVariable,java.util.Map)": 0.0,
        "org.apache.commons.lang3.text.translate$AggregateTranslator#AggregateTranslator(org.apache.commons.lang3.text.translate.CharSequenceTranslator[])": 0.9004733859759286,
        "org.apache.commons.lang3.text.translate$AggregateTranslator#translate(java.lang.CharSequence,int,java.io.Writer)": 0.9288829399843423,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#CharSequenceTranslator()": -0.03600713491364599,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#hex(int)": -0.10226830864341374,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#translate(java.lang.CharSequence)": 0.8449173211210956,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#translate(java.lang.CharSequence,java.io.Writer)": 0.8355475825793965,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#with(org.apache.commons.lang3.text.translate.CharSequenceTranslator[])": 0.03811147618097016,
        "org.apache.commons.lang3.text.translate$CodePointTranslator#CodePointTranslator()": 0.8642535585576345,
        "org.apache.commons.lang3.text.translate$CodePointTranslator#translate(java.lang.CharSequence,int,java.io.Writer)": -0.15661102469770305,
        "org.apache.commons.lang3.text.translate$EntityArrays#<clinit>()": 0.8845244368740514,
        "org.apache.commons.lang3.text.translate$EntityArrays#APOS_ESCAPE()": 0.9004733859759286,
        "org.apache.commons.lang3.text.translate$EntityArrays#APOS_UNESCAPE()": 0.9004733859759286,
        "org.apache.commons.lang3.text.translate$EntityArrays#BASIC_ESCAPE()": 0.9004733859759286,
        "org.apache.commons.lang3.text.translate$EntityArrays#BASIC_UNESCAPE()": 0.9004733859759286,
        "org.apache.commons.lang3.text.translate$EntityArrays#EntityArrays()": -0.03963790336358253,
        "org.apache.commons.lang3.text.translate$EntityArrays#HTML40_EXTENDED_ESCAPE()": 0.8950774525294578,
        "org.apache.commons.lang3.text.translate$EntityArrays#HTML40_EXTENDED_UNESCAPE()": 0.9004733859759286,
        "org.apache.commons.lang3.text.translate$EntityArrays#ISO8859_1_ESCAPE()": 0.8950774525294578,
        "org.apache.commons.lang3.text.translate$EntityArrays#ISO8859_1_UNESCAPE()": 0.9004733859759286,
        "org.apache.commons.lang3.text.translate$EntityArrays#JAVA_CTRL_CHARS_ESCAPE()": 0.9004733859759286,
        "org.apache.commons.lang3.text.translate$EntityArrays#JAVA_CTRL_CHARS_UNESCAPE()": 0.9004733859759286,
        "org.apache.commons.lang3.text.translate$EntityArrays#invert(java.lang.String[][])": 0.8845244368740514,
        "org.apache.commons.lang3.text.translate$LookupTranslator#LookupTranslator(java.lang.CharSequence[][])": 0.8950774525294578,
        "org.apache.commons.lang3.text.translate$LookupTranslator#translate(java.lang.CharSequence,int,java.io.Writer)": 0.06062454338561135,
        "org.apache.commons.lang3.text.translate$NumericEntityUnescaper#NumericEntityUnescaper(org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION[])": 0.8845244368740514,
        "org.apache.commons.lang3.text.translate$NumericEntityUnescaper#isSet(org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION)": -0.056910376610647795,
        "org.apache.commons.lang3.text.translate$NumericEntityUnescaper#translate(java.lang.CharSequence,int,java.io.Writer)": -0.14975272562348405,
        "org.apache.commons.lang3.text.translate$NumericEntityUnescaper$OPTION#<clinit>()": 0.8845244368740514,
        "org.apache.commons.lang3.text.translate$NumericEntityUnescaper$OPTION#NumericEntityUnescaper$OPTION(java.lang.String,int)": 0.022162527079092775,
        "org.apache.commons.lang3.text.translate$OctalUnescaper#<clinit>()": 0.032715542734499115,
        "org.apache.commons.lang3.text.translate$OctalUnescaper#OctalUnescaper()": 0.8950774525294578,
        "org.apache.commons.lang3.text.translate$OctalUnescaper#translate(java.lang.CharSequence,int,java.io.Writer)": -0.05691037661064762,
        "org.apache.commons.lang3.text.translate$UnicodeEscaper#UnicodeEscaper()": 0.0,
        "org.apache.commons.lang3.text.translate$UnicodeEscaper#UnicodeEscaper(int,int,boolean)": 0.8845244368740514,
        "org.apache.commons.lang3.text.translate$UnicodeEscaper#above(int)": -0.03963790336358249,
        "org.apache.commons.lang3.text.translate$UnicodeEscaper#below(int)": -0.03963790336358249,
        "org.apache.commons.lang3.text.translate$UnicodeEscaper#between(int,int)": -0.03963790336358249,
        "org.apache.commons.lang3.text.translate$UnicodeEscaper#outsideOf(int,int)": 0.8897627454181978,
        "org.apache.commons.lang3.text.translate$UnicodeEscaper#translate(int,java.io.Writer)": -0.11965165701138271,
        "org.apache.commons.lang3.text.translate$UnicodeUnescaper#UnicodeUnescaper()": 0.8845244368740514,
        "org.apache.commons.lang3.text.translate$UnicodeUnescaper#translate(java.lang.CharSequence,int,java.io.Writer)": -0.08219125862220866
    },
    "Lang-16": {
        "org.apache.commons.lang3$JavaVersion#<clinit>()": -1.0200440892256881,
        "org.apache.commons.lang3$JavaVersion#JavaVersion(java.lang.String,int,float,java.lang.String)": -1.0200440892256881,
        "org.apache.commons.lang3$JavaVersion#atLeast(org.apache.commons.lang3.JavaVersion)": -0.24306977868778,
        "org.apache.commons.lang3$JavaVersion#get(java.lang.String)": -1.014386549962461,
        "org.apache.commons.lang3$JavaVersion#getJavaVersion(java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3$JavaVersion#toString()": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#<clinit>()": -0.7113635228540852,
        "org.apache.commons.lang3$StringUtils#StringUtils()": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#abbreviate(java.lang.String,int)": -0.05922186949725474,
        "org.apache.commons.lang3$StringUtils#abbreviate(java.lang.String,int,int)": -0.05922186949725474,
        "org.apache.commons.lang3$StringUtils#abbreviateMiddle(java.lang.String,java.lang.String,int)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#capitalize(java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#center(java.lang.String,int)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#center(java.lang.String,int,char)": -0.05922186949725474,
        "org.apache.commons.lang3$StringUtils#center(java.lang.String,int,java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#chomp(java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#chomp(java.lang.String,java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#chop(java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#contains(java.lang.CharSequence,int)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#contains(java.lang.CharSequence,java.lang.CharSequence)": -0.08559446674791493,
        "org.apache.commons.lang3$StringUtils#containsAny(java.lang.CharSequence,char[])": -0.12473304717061011,
        "org.apache.commons.lang3$StringUtils#containsAny(java.lang.CharSequence,java.lang.CharSequence)": -0.07339726310641999,
        "org.apache.commons.lang3$StringUtils#containsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": -0.05922186949725483,
        "org.apache.commons.lang3$StringUtils#containsNone(java.lang.CharSequence,char[])": -0.12473304717061011,
        "org.apache.commons.lang3$StringUtils#containsNone(java.lang.CharSequence,java.lang.String)": -0.07339726310641999,
        "org.apache.commons.lang3$StringUtils#containsOnly(java.lang.CharSequence,char[])": -0.09652749798661436,
        "org.apache.commons.lang3$StringUtils#containsOnly(java.lang.CharSequence,java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#containsWhitespace(java.lang.CharSequence)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#countMatches(java.lang.CharSequence,java.lang.CharSequence)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#defaultIfBlank(java.lang.CharSequence,java.lang.CharSequence)": -0.08559446674791504,
        "org.apache.commons.lang3$StringUtils#defaultIfEmpty(java.lang.CharSequence,java.lang.CharSequence)": -0.08559446674791504,
        "org.apache.commons.lang3$StringUtils#defaultString(java.lang.String)": -0.07339726310642014,
        "org.apache.commons.lang3$StringUtils#defaultString(java.lang.String,java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#deleteWhitespace(java.lang.String)": -0.17715868486886516,
        "org.apache.commons.lang3$StringUtils#difference(java.lang.String,java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#endsWith(java.lang.CharSequence,java.lang.CharSequence)": -0.05922186949725474,
        "org.apache.commons.lang3$StringUtils#endsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)": -0.08559446674791493,
        "org.apache.commons.lang3$StringUtils#endsWithAny(java.lang.CharSequence,java.lang.CharSequence[])": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#endsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": -0.05922186949725474,
        "org.apache.commons.lang3$StringUtils#equals(java.lang.CharSequence,java.lang.CharSequence)": -0.18376754984803134,
        "org.apache.commons.lang3$StringUtils#equalsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#getCommonPrefix(java.lang.String[])": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,int)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,int,int)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,java.lang.CharSequence)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,java.lang.CharSequence,int)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#indexOfAny(java.lang.CharSequence,char[])": -0.08559446674791504,
        "org.apache.commons.lang3$StringUtils#indexOfAny(java.lang.CharSequence,java.lang.CharSequence[])": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#indexOfAny(java.lang.CharSequence,java.lang.String)": -0.05922186949725474,
        "org.apache.commons.lang3$StringUtils#indexOfAnyBut(java.lang.CharSequence,char[])": -0.11591715294095771,
        "org.apache.commons.lang3$StringUtils#indexOfAnyBut(java.lang.CharSequence,java.lang.CharSequence)": -0.05922186949725474,
        "org.apache.commons.lang3$StringUtils#indexOfDifference(java.lang.CharSequence,java.lang.CharSequence)": -0.05922186949725483,
        "org.apache.commons.lang3$StringUtils#indexOfDifference(java.lang.CharSequence[])": -0.05922186949725474,
        "org.apache.commons.lang3$StringUtils#indexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#indexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,int)": -0.05922186949725483,
        "org.apache.commons.lang3$StringUtils#isAllLowerCase(java.lang.CharSequence)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#isAllUpperCase(java.lang.CharSequence)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#isAlpha(java.lang.CharSequence)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#isAlphaSpace(java.lang.CharSequence)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#isAlphanumeric(java.lang.CharSequence)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#isAlphanumericSpace(java.lang.CharSequence)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#isAsciiPrintable(java.lang.CharSequence)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#isBlank(java.lang.CharSequence)": 0.2478829506405057,
        "org.apache.commons.lang3$StringUtils#isEmpty(java.lang.CharSequence)": -0.2851983574418203,
        "org.apache.commons.lang3$StringUtils#isNotBlank(java.lang.CharSequence)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#isNotEmpty(java.lang.CharSequence)": -0.13310868125394804,
        "org.apache.commons.lang3$StringUtils#isNumeric(java.lang.CharSequence)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#isNumericSpace(java.lang.CharSequence)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#isWhitespace(java.lang.CharSequence)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Iterable,char)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Iterable,java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[])": -0.07339726310641999,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],char)": -0.05922186949725474,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],char,int,int)": -0.05922186949725474,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],java.lang.String)": -0.08559446674791504,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],java.lang.String,int,int)": -0.08559446674791504,
        "org.apache.commons.lang3$StringUtils#join(java.util.Iterator,char)": -0.05922186949725483,
        "org.apache.commons.lang3$StringUtils#join(java.util.Iterator,java.lang.String)": -0.05922186949725483,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,int)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,int,int)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,java.lang.CharSequence)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#lastIndexOfAny(java.lang.CharSequence,java.lang.CharSequence[])": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#lastIndexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#lastIndexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,int)": -0.05922186949725483,
        "org.apache.commons.lang3$StringUtils#lastOrdinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#left(java.lang.String,int)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#leftPad(java.lang.String,int)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#leftPad(java.lang.String,int,char)": -0.1965335330200661,
        "org.apache.commons.lang3$StringUtils#leftPad(java.lang.String,int,java.lang.String)": -0.07339726310641999,
        "org.apache.commons.lang3$StringUtils#length(java.lang.CharSequence)": -0.08559446674791493,
        "org.apache.commons.lang3$StringUtils#lowerCase(java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#lowerCase(java.lang.String,java.util.Locale)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#mid(java.lang.String,int,int)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#normalizeSpace(java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#ordinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#ordinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int,boolean)": -0.05922186949725483,
        "org.apache.commons.lang3$StringUtils#overlay(java.lang.String,java.lang.String,int,int)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#remove(java.lang.String,char)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#remove(java.lang.String,java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#removeAccentsJava6(java.lang.CharSequence)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#removeAccentsSUN(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#removeEnd(java.lang.String,java.lang.String)": -0.05922186949725474,
        "org.apache.commons.lang3$StringUtils#removeEndIgnoreCase(java.lang.String,java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#removeStart(java.lang.String,java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#removeStartIgnoreCase(java.lang.String,java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#repeat(char,int)": -0.21472981400243607,
        "org.apache.commons.lang3$StringUtils#repeat(java.lang.String,int)": -0.08559446674791504,
        "org.apache.commons.lang3$StringUtils#repeat(java.lang.String,java.lang.String,int)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#replace(java.lang.String,java.lang.String,java.lang.String)": -0.09652749798661436,
        "org.apache.commons.lang3$StringUtils#replace(java.lang.String,java.lang.String,java.lang.String,int)": -0.14111573608413136,
        "org.apache.commons.lang3$StringUtils#replaceChars(java.lang.String,char,char)": -0.05922186949725483,
        "org.apache.commons.lang3$StringUtils#replaceChars(java.lang.String,java.lang.String,java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#replaceEach(java.lang.String,java.lang.String[],java.lang.String[])": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#replaceEach(java.lang.String,java.lang.String[],java.lang.String[],boolean,int)": -0.05922186949725474,
        "org.apache.commons.lang3$StringUtils#replaceEachRepeatedly(java.lang.String,java.lang.String[],java.lang.String[])": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#replaceOnce(java.lang.String,java.lang.String,java.lang.String)": -0.07339726310641999,
        "org.apache.commons.lang3$StringUtils#reverse(java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#reverseDelimited(java.lang.String,char)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#right(java.lang.String,int)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#rightPad(java.lang.String,int)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#rightPad(java.lang.String,int,char)": -0.10656254849987735,
        "org.apache.commons.lang3$StringUtils#rightPad(java.lang.String,int,java.lang.String)": -0.07339726310641999,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String,char)": -0.05922186949725474,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String,java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String,java.lang.String,int)": -0.05922186949725474,
        "org.apache.commons.lang3$StringUtils#splitByCharacterType(java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#splitByCharacterType(java.lang.String,boolean)": -0.05922186949725483,
        "org.apache.commons.lang3$StringUtils#splitByCharacterTypeCamelCase(java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparator(java.lang.String,java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparator(java.lang.String,java.lang.String,int)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String,int)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparatorWorker(java.lang.String,java.lang.String,int,boolean)": -0.07339726310641999,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String,char)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String,java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String,java.lang.String,int)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#splitWorker(java.lang.String,char,boolean)": -0.07339726310642014,
        "org.apache.commons.lang3$StringUtils#splitWorker(java.lang.String,java.lang.String,int,boolean)": -0.11591715294095772,
        "org.apache.commons.lang3$StringUtils#startsWith(java.lang.CharSequence,java.lang.CharSequence)": -0.05922186949725474,
        "org.apache.commons.lang3$StringUtils#startsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)": -0.08559446674791493,
        "org.apache.commons.lang3$StringUtils#startsWithAny(java.lang.CharSequence,java.lang.CharSequence[])": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#startsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": -0.05922186949725474,
        "org.apache.commons.lang3$StringUtils#strip(java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#strip(java.lang.String,java.lang.String)": -0.09652749798661436,
        "org.apache.commons.lang3$StringUtils#stripAccents(java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#stripAll(java.lang.String[])": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#stripAll(java.lang.String[],java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#stripEnd(java.lang.String,java.lang.String)": -0.11591715294095772,
        "org.apache.commons.lang3$StringUtils#stripStart(java.lang.String,java.lang.String)": -0.10656254849987756,
        "org.apache.commons.lang3$StringUtils#stripToEmpty(java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#stripToNull(java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#substring(java.lang.String,int)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#substring(java.lang.String,int,int)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#substringAfter(java.lang.String,java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#substringAfterLast(java.lang.String,java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#substringBefore(java.lang.String,java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#substringBeforeLast(java.lang.String,java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#substringBetween(java.lang.String,java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#substringBetween(java.lang.String,java.lang.String,java.lang.String)": -0.05922186949725483,
        "org.apache.commons.lang3$StringUtils#substringsBetween(java.lang.String,java.lang.String,java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#swapCase(java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#trim(java.lang.String)": -0.07339726310642014,
        "org.apache.commons.lang3$StringUtils#trimToEmpty(java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#trimToNull(java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#uncapitalize(java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#upperCase(java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3$StringUtils#upperCase(java.lang.String,java.util.Locale)": -0.041224906329932365,
        "org.apache.commons.lang3$SystemUtils#<clinit>()": -1.011553980578313,
        "org.apache.commons.lang3$SystemUtils#SystemUtils()": -0.041224906329932365,
        "org.apache.commons.lang3$SystemUtils#getJavaHome()": -0.041224906329932365,
        "org.apache.commons.lang3$SystemUtils#getJavaIoTmpDir()": -0.041224906329932365,
        "org.apache.commons.lang3$SystemUtils#getJavaVersionMatches(java.lang.String)": -1.011553980578313,
        "org.apache.commons.lang3$SystemUtils#getOSMatches(java.lang.String,java.lang.String)": -1.011553980578313,
        "org.apache.commons.lang3$SystemUtils#getOSMatchesName(java.lang.String)": -1.011553980578313,
        "org.apache.commons.lang3$SystemUtils#getSystemProperty(java.lang.String)": -1.011553980578313,
        "org.apache.commons.lang3$SystemUtils#getUserDir()": -0.041224906329932365,
        "org.apache.commons.lang3$SystemUtils#getUserHome()": -0.041224906329932365,
        "org.apache.commons.lang3$SystemUtils#isJavaAwtHeadless()": -0.041224906329932365,
        "org.apache.commons.lang3$SystemUtils#isJavaVersionAtLeast(org.apache.commons.lang3.JavaVersion)": -0.23757107253016496,
        "org.apache.commons.lang3$SystemUtils#isJavaVersionMatch(java.lang.String,java.lang.String)": -1.011553980578313,
        "org.apache.commons.lang3$SystemUtils#isOSMatch(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": -1.011553980578313,
        "org.apache.commons.lang3$SystemUtils#isOSNameMatch(java.lang.String,java.lang.String)": -1.011553980578313,
        "org.apache.commons.lang3.math$NumberUtils#<clinit>()": -0.006236052214871779,
        "org.apache.commons.lang3.math$NumberUtils#NumberUtils()": -0.041224906329932365,
        "org.apache.commons.lang3.math$NumberUtils#createBigDecimal(java.lang.String)": -0.05922186949725474,
        "org.apache.commons.lang3.math$NumberUtils#createBigInteger(java.lang.String)": -0.05922186949725483,
        "org.apache.commons.lang3.math$NumberUtils#createDouble(java.lang.String)": 0.41499169287584026,
        "org.apache.commons.lang3.math$NumberUtils#createFloat(java.lang.String)": 0.41499169287584026,
        "org.apache.commons.lang3.math$NumberUtils#createInteger(java.lang.String)": 0.41499169287584026,
        "org.apache.commons.lang3.math$NumberUtils#createLong(java.lang.String)": 0.40081629926667495,
        "org.apache.commons.lang3.math$NumberUtils#createNumber(java.lang.String)": 1.7607781305027452,
        "org.apache.commons.lang3.math$NumberUtils#isAllZeros(java.lang.String)": 0.41499169287584026,
        "org.apache.commons.lang3.math$NumberUtils#isDigits(java.lang.String)": 1.74660273689358,
        "org.apache.commons.lang3.math$NumberUtils#isNumber(java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3.math$NumberUtils#max(byte,byte,byte)": -0.041224906329932365,
        "org.apache.commons.lang3.math$NumberUtils#max(byte[])": -0.07339726310642014,
        "org.apache.commons.lang3.math$NumberUtils#max(double,double,double)": -0.05922186949725483,
        "org.apache.commons.lang3.math$NumberUtils#max(double[])": -0.08559446674791493,
        "org.apache.commons.lang3.math$NumberUtils#max(float,float,float)": -0.05922186949725483,
        "org.apache.commons.lang3.math$NumberUtils#max(float[])": -0.08559446674791493,
        "org.apache.commons.lang3.math$NumberUtils#max(int,int,int)": -0.041224906329932365,
        "org.apache.commons.lang3.math$NumberUtils#max(int[])": -0.07339726310642014,
        "org.apache.commons.lang3.math$NumberUtils#max(long,long,long)": -0.041224906329932365,
        "org.apache.commons.lang3.math$NumberUtils#max(long[])": -0.07339726310642014,
        "org.apache.commons.lang3.math$NumberUtils#max(short,short,short)": -0.041224906329932365,
        "org.apache.commons.lang3.math$NumberUtils#max(short[])": -0.07339726310642014,
        "org.apache.commons.lang3.math$NumberUtils#min(byte,byte,byte)": -0.041224906329932365,
        "org.apache.commons.lang3.math$NumberUtils#min(byte[])": -0.07339726310642014,
        "org.apache.commons.lang3.math$NumberUtils#min(double,double,double)": -0.05922186949725483,
        "org.apache.commons.lang3.math$NumberUtils#min(double[])": -0.08559446674791493,
        "org.apache.commons.lang3.math$NumberUtils#min(float,float,float)": -0.05922186949725483,
        "org.apache.commons.lang3.math$NumberUtils#min(float[])": -0.07339726310642014,
        "org.apache.commons.lang3.math$NumberUtils#min(int,int,int)": -0.041224906329932365,
        "org.apache.commons.lang3.math$NumberUtils#min(int[])": -0.07339726310642014,
        "org.apache.commons.lang3.math$NumberUtils#min(long,long,long)": -0.041224906329932365,
        "org.apache.commons.lang3.math$NumberUtils#min(long[])": -0.07339726310642014,
        "org.apache.commons.lang3.math$NumberUtils#min(short,short,short)": -0.041224906329932365,
        "org.apache.commons.lang3.math$NumberUtils#min(short[])": -0.07339726310642014,
        "org.apache.commons.lang3.math$NumberUtils#toByte(java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3.math$NumberUtils#toByte(java.lang.String,byte)": -0.05922186949725483,
        "org.apache.commons.lang3.math$NumberUtils#toDouble(java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3.math$NumberUtils#toDouble(java.lang.String,double)": -0.05922186949725483,
        "org.apache.commons.lang3.math$NumberUtils#toFloat(java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3.math$NumberUtils#toFloat(java.lang.String,float)": -0.05922186949725483,
        "org.apache.commons.lang3.math$NumberUtils#toInt(java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3.math$NumberUtils#toInt(java.lang.String,int)": -0.05922186949725483,
        "org.apache.commons.lang3.math$NumberUtils#toLong(java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3.math$NumberUtils#toLong(java.lang.String,long)": -0.05922186949725483,
        "org.apache.commons.lang3.math$NumberUtils#toShort(java.lang.String)": -0.041224906329932365,
        "org.apache.commons.lang3.math$NumberUtils#toShort(java.lang.String,short)": -0.05922186949725483
    },
    "Lang-17": {
        "org.apache.commons.lang3$ArrayUtils#<clinit>()": -1.444574942763012,
        "org.apache.commons.lang3$ArrayUtils#ArrayUtils()": -0.057711577492506105,
        "org.apache.commons.lang3$ArrayUtils#add(boolean[],boolean)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#add(boolean[],int,boolean)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#add(byte[],byte)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#add(byte[],int,byte)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#add(char[],char)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#add(char[],int,char)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#add(double[],double)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#add(double[],int,double)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#add(float[],float)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#add(float[],int,float)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#add(int[],int)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#add(int[],int,int)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#add(java.lang.Object,int,java.lang.Object,java.lang.Class)": -0.057711577492506105,
        "org.apache.commons.lang3$ArrayUtils#add(java.lang.Object[],int,java.lang.Object)": -0.0833703472055095,
        "org.apache.commons.lang3$ArrayUtils#add(java.lang.Object[],java.lang.Object)": -0.12141117893710818,
        "org.apache.commons.lang3$ArrayUtils#add(long[],int,long)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#add(long[],long)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#add(short[],int,short)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#add(short[],short)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#addAll(boolean[],boolean[])": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#addAll(byte[],byte[])": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#addAll(char[],char[])": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#addAll(double[],double[])": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#addAll(float[],float[])": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#addAll(int[],int[])": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#addAll(java.lang.Object[],java.lang.Object[])": -0.12141117893710818,
        "org.apache.commons.lang3$ArrayUtils#addAll(long[],long[])": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#addAll(short[],short[])": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#clone(boolean[])": -0.10375563946912823,
        "org.apache.commons.lang3$ArrayUtils#clone(byte[])": -0.10375563946912823,
        "org.apache.commons.lang3$ArrayUtils#clone(char[])": -0.24665055086561385,
        "org.apache.commons.lang3$ArrayUtils#clone(double[])": -0.10375563946912823,
        "org.apache.commons.lang3$ArrayUtils#clone(float[])": -0.10375563946912823,
        "org.apache.commons.lang3$ArrayUtils#clone(int[])": -0.10375563946912823,
        "org.apache.commons.lang3$ArrayUtils#clone(java.lang.Object[])": 1.4887214989681385,
        "org.apache.commons.lang3$ArrayUtils#clone(long[])": -0.10375563946912823,
        "org.apache.commons.lang3$ArrayUtils#clone(short[])": -0.10375563946912823,
        "org.apache.commons.lang3$ArrayUtils#contains(boolean[],boolean)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#contains(byte[],byte)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#contains(char[],char)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#contains(double[],double)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#contains(double[],double,double)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#contains(float[],float)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#contains(int[],int)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#contains(java.lang.Object[],java.lang.Object)": -0.3312785010318614,
        "org.apache.commons.lang3$ArrayUtils#contains(long[],long)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#contains(short[],short)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#copyArrayGrow1(java.lang.Object,java.lang.Class)": -0.2144117659963083,
        "org.apache.commons.lang3$ArrayUtils#getLength(java.lang.Object)": -0.3045846316371563,
        "org.apache.commons.lang3$ArrayUtils#hashCode(java.lang.Object)": -0.057711577492506105,
        "org.apache.commons.lang3$ArrayUtils#indexOf(boolean[],boolean)": -0.10375563946912823,
        "org.apache.commons.lang3$ArrayUtils#indexOf(boolean[],boolean,int)": -0.12141117893710818,
        "org.apache.commons.lang3$ArrayUtils#indexOf(byte[],byte)": -0.10375563946912823,
        "org.apache.commons.lang3$ArrayUtils#indexOf(byte[],byte,int)": -0.12141117893710818,
        "org.apache.commons.lang3$ArrayUtils#indexOf(char[],char)": -0.10375563946912823,
        "org.apache.commons.lang3$ArrayUtils#indexOf(char[],char,int)": -0.12141117893710818,
        "org.apache.commons.lang3$ArrayUtils#indexOf(double[],double)": -0.10375563946912823,
        "org.apache.commons.lang3$ArrayUtils#indexOf(double[],double,double)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#indexOf(double[],double,int)": -0.12141117893710818,
        "org.apache.commons.lang3$ArrayUtils#indexOf(double[],double,int,double)": -0.10375563946912823,
        "org.apache.commons.lang3$ArrayUtils#indexOf(float[],float)": -0.10375563946912823,
        "org.apache.commons.lang3$ArrayUtils#indexOf(float[],float,int)": -0.12141117893710818,
        "org.apache.commons.lang3$ArrayUtils#indexOf(int[],int)": -0.10375563946912823,
        "org.apache.commons.lang3$ArrayUtils#indexOf(int[],int,int)": -0.12141117893710818,
        "org.apache.commons.lang3$ArrayUtils#indexOf(java.lang.Object[],java.lang.Object)": -0.34843812698348897,
        "org.apache.commons.lang3$ArrayUtils#indexOf(java.lang.Object[],java.lang.Object,int)": -0.35685024568195794,
        "org.apache.commons.lang3$ArrayUtils#indexOf(long[],long)": -0.10375563946912823,
        "org.apache.commons.lang3$ArrayUtils#indexOf(long[],long,int)": -0.12141117893710818,
        "org.apache.commons.lang3$ArrayUtils#indexOf(short[],short)": -0.10375563946912823,
        "org.apache.commons.lang3$ArrayUtils#indexOf(short[],short,int)": -0.12141117893710818,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(boolean[])": -0.16572715453576745,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(byte[])": -0.057711577492506105,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(char[])": -0.3045846316371563,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(double[])": -0.2254753507945439,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(float[])": -0.16572715453576745,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(int[])": -0.057711577492506105,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(java.lang.Object[])": -0.10375563946912814,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(long[])": -0.057711577492506105,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(short[])": -0.057711577492506105,
        "org.apache.commons.lang3$ArrayUtils#isEquals(java.lang.Object,java.lang.Object)": -0.2144117659963083,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(boolean[])": -0.057711577492506105,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(byte[])": -0.057711577492506105,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(char[])": -0.057711577492506105,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(double[])": -0.057711577492506105,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(float[])": -0.057711577492506105,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(int[])": -0.057711577492506105,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(java.lang.Object[])": -0.057711577492506105,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(long[])": -0.057711577492506105,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(short[])": -0.057711577492506105,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(boolean[],boolean[])": -0.057711577492506105,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(byte[],byte[])": -0.057711577492506105,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(char[],char[])": -0.057711577492506105,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(double[],double[])": -0.057711577492506105,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(float[],float[])": -0.057711577492506105,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(int[],int[])": -0.057711577492506105,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(java.lang.Object[],java.lang.Object[])": -0.24665055086561383,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(long[],long[])": -0.057711577492506105,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(short[],short[])": -0.057711577492506105,
        "org.apache.commons.lang3$ArrayUtils#isSameType(java.lang.Object,java.lang.Object)": -0.057711577492506105,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(boolean[],boolean)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(boolean[],boolean,int)": -0.0833703472055095,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(byte[],byte)": -0.0833703472055095,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(byte[],byte,int)": -0.0833703472055095,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(char[],char)": -0.0833703472055095,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(char[],char,int)": -0.0833703472055095,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(double[],double)": -0.0833703472055095,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(double[],double,double)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(double[],double,int)": -0.0833703472055095,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(double[],double,int,double)": -0.0833703472055095,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(float[],float)": -0.0833703472055095,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(float[],float,int)": -0.0833703472055095,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(int[],int)": -0.0833703472055095,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(int[],int,int)": -0.0833703472055095,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(java.lang.Object[],java.lang.Object)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(java.lang.Object[],java.lang.Object,int)": -0.0833703472055095,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(long[],long)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(long[],long,int)": -0.0833703472055095,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(short[],short)": -0.0833703472055095,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(short[],short,int)": -0.0833703472055095,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(boolean[])": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(byte[])": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(char[])": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(double[])": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(float[])": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(int[])": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Boolean[])": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Byte[])": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Character[])": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Double[])": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Float[])": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Integer[])": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Long[])": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Object[])": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Short[])": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.String[])": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(long[])": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(short[])": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#remove(boolean[],int)": -0.0833703472055095,
        "org.apache.commons.lang3$ArrayUtils#remove(byte[],int)": -0.0833703472055095,
        "org.apache.commons.lang3$ArrayUtils#remove(char[],int)": -0.0833703472055095,
        "org.apache.commons.lang3$ArrayUtils#remove(double[],int)": -0.0833703472055095,
        "org.apache.commons.lang3$ArrayUtils#remove(float[],int)": -0.0833703472055095,
        "org.apache.commons.lang3$ArrayUtils#remove(int[],int)": -0.0833703472055095,
        "org.apache.commons.lang3$ArrayUtils#remove(java.lang.Object,int)": -0.29539456606771775,
        "org.apache.commons.lang3$ArrayUtils#remove(java.lang.Object[],int)": -0.10375563946912823,
        "org.apache.commons.lang3$ArrayUtils#remove(long[],int)": -0.0833703472055095,
        "org.apache.commons.lang3$ArrayUtils#remove(short[],int)": -0.0833703472055095,
        "org.apache.commons.lang3$ArrayUtils#removeElement(boolean[],boolean)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#removeElement(byte[],byte)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#removeElement(char[],char)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#removeElement(double[],double)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#removeElement(float[],float)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#removeElement(int[],int)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#removeElement(java.lang.Object[],java.lang.Object)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#removeElement(long[],long)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#removeElement(short[],short)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#reverse(boolean[])": -0.057711577492506105,
        "org.apache.commons.lang3$ArrayUtils#reverse(byte[])": -0.057711577492506105,
        "org.apache.commons.lang3$ArrayUtils#reverse(char[])": -0.057711577492506105,
        "org.apache.commons.lang3$ArrayUtils#reverse(double[])": -0.057711577492506105,
        "org.apache.commons.lang3$ArrayUtils#reverse(float[])": -0.057711577492506105,
        "org.apache.commons.lang3$ArrayUtils#reverse(int[])": -0.057711577492506105,
        "org.apache.commons.lang3$ArrayUtils#reverse(java.lang.Object[])": -0.0833703472055094,
        "org.apache.commons.lang3$ArrayUtils#reverse(long[])": -0.057711577492506105,
        "org.apache.commons.lang3$ArrayUtils#reverse(short[])": -0.057711577492506105,
        "org.apache.commons.lang3$ArrayUtils#subarray(boolean[],int,int)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#subarray(byte[],int,int)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#subarray(char[],int,int)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#subarray(double[],int,int)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#subarray(float[],int,int)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#subarray(int[],int,int)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#subarray(java.lang.Object[],int,int)": -0.057711577492506105,
        "org.apache.commons.lang3$ArrayUtils#subarray(long[],int,int)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#subarray(short[],int,int)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#toArray(java.lang.Object[])": -0.15199418733891856,
        "org.apache.commons.lang3$ArrayUtils#toMap(java.lang.Object[])": -0.057711577492506105,
        "org.apache.commons.lang3$ArrayUtils#toObject(boolean[])": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#toObject(byte[])": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#toObject(char[])": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#toObject(double[])": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#toObject(float[])": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#toObject(int[])": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#toObject(long[])": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#toObject(short[])": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Boolean[])": -0.12141117893710818,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Boolean[],boolean)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Byte[])": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Byte[],byte)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Character[])": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Character[],char)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Double[])": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Double[],double)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Float[])": -0.0833703472055095,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Float[],float)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Integer[])": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Integer[],int)": -0.0833703472055095,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Long[])": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Long[],long)": -0.0833703472055095,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Short[])": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Short[],short)": -0.05771157749250619,
        "org.apache.commons.lang3$ArrayUtils#toString(java.lang.Object)": -0.19109880433380597,
        "org.apache.commons.lang3$ArrayUtils#toString(java.lang.Object,java.lang.String)": -0.191098804333806,
        "org.apache.commons.lang3$StringEscapeUtils#<clinit>()": 1.5154153683628437,
        "org.apache.commons.lang3$StringEscapeUtils#StringEscapeUtils()": -0.057711577492506105,
        "org.apache.commons.lang3$StringEscapeUtils#escapeCsv(java.lang.String)": -0.05771157749250619,
        "org.apache.commons.lang3$StringEscapeUtils#escapeEcmaScript(java.lang.String)": -0.05771157749250619,
        "org.apache.commons.lang3$StringEscapeUtils#escapeHtml3(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringEscapeUtils#escapeHtml4(java.lang.String)": -0.13732225593833863,
        "org.apache.commons.lang3$StringEscapeUtils#escapeJava(java.lang.String)": -0.10375563946912823,
        "org.apache.commons.lang3$StringEscapeUtils#escapeXml(java.lang.String)": 1.7622884225074937,
        "org.apache.commons.lang3$StringEscapeUtils#unescapeCsv(java.lang.String)": -0.05771157749250619,
        "org.apache.commons.lang3$StringEscapeUtils#unescapeEcmaScript(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringEscapeUtils#unescapeHtml3(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringEscapeUtils#unescapeHtml4(java.lang.String)": -0.1787167423152106,
        "org.apache.commons.lang3$StringEscapeUtils#unescapeJava(java.lang.String)": -0.05771157749250619,
        "org.apache.commons.lang3$StringEscapeUtils#unescapeXml(java.lang.String)": -0.0833703472055095,
        "org.apache.commons.lang3$StringEscapeUtils$CsvEscaper#<clinit>()": 0.16962893073593877,
        "org.apache.commons.lang3$StringEscapeUtils$CsvEscaper#StringEscapeUtils$CsvEscaper()": 1.5154153683628437,
        "org.apache.commons.lang3$StringEscapeUtils$CsvEscaper#translate(java.lang.CharSequence,int,java.io.Writer)": -0.0833703472055095,
        "org.apache.commons.lang3$StringEscapeUtils$CsvUnescaper#<clinit>()": 0.16962893073593877,
        "org.apache.commons.lang3$StringEscapeUtils$CsvUnescaper#StringEscapeUtils$CsvUnescaper()": 1.5154153683628437,
        "org.apache.commons.lang3$StringEscapeUtils$CsvUnescaper#translate(java.lang.CharSequence,int,java.io.Writer)": -0.0833703472055095,
        "org.apache.commons.lang3.text.translate$AggregateTranslator#AggregateTranslator(org.apache.commons.lang3.text.translate.CharSequenceTranslator[])": 1.5154153683628437,
        "org.apache.commons.lang3.text.translate$AggregateTranslator#translate(java.lang.CharSequence,int,java.io.Writer)": 1.5631696003690254,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#CharSequenceTranslator()": 0.04570966007907107,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#hex(int)": -0.1373222559383387,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#translate(java.lang.CharSequence)": 1.4225311174391617,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#translate(java.lang.CharSequence,java.io.Writer)": 1.4068691218150757,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#with(org.apache.commons.lang3.text.translate.CharSequenceTranslator[])": 0.16962893073593877,
        "org.apache.commons.lang3.text.translate$CodePointTranslator#CodePointTranslator()": 1.454840866023753,
        "org.apache.commons.lang3.text.translate$CodePointTranslator#translate(java.lang.CharSequence,int,java.io.Writer)": -0.21441176599630826,
        "org.apache.commons.lang3.text.translate$EntityArrays#<clinit>()": 1.4887214989681385,
        "org.apache.commons.lang3.text.translate$EntityArrays#APOS_ESCAPE()": 1.5154153683628437,
        "org.apache.commons.lang3.text.translate$EntityArrays#APOS_UNESCAPE()": 1.5154153683628437,
        "org.apache.commons.lang3.text.translate$EntityArrays#BASIC_ESCAPE()": 1.5154153683628437,
        "org.apache.commons.lang3.text.translate$EntityArrays#BASIC_UNESCAPE()": 1.5154153683628437,
        "org.apache.commons.lang3.text.translate$EntityArrays#EntityArrays()": -0.057711577492506105,
        "org.apache.commons.lang3.text.translate$EntityArrays#HTML40_EXTENDED_ESCAPE()": 1.5063783626801186,
        "org.apache.commons.lang3.text.translate$EntityArrays#HTML40_EXTENDED_UNESCAPE()": 1.5154153683628437,
        "org.apache.commons.lang3.text.translate$EntityArrays#ISO8859_1_ESCAPE()": 1.5063783626801186,
        "org.apache.commons.lang3.text.translate$EntityArrays#ISO8859_1_UNESCAPE()": 1.5154153683628437,
        "org.apache.commons.lang3.text.translate$EntityArrays#JAVA_CTRL_CHARS_ESCAPE()": 1.5154153683628437,
        "org.apache.commons.lang3.text.translate$EntityArrays#JAVA_CTRL_CHARS_UNESCAPE()": 1.5154153683628437,
        "org.apache.commons.lang3.text.translate$EntityArrays#invert(java.lang.String[][])": 1.4887214989681385,
        "org.apache.commons.lang3.text.translate$LookupTranslator#LookupTranslator(java.lang.CharSequence[][])": 1.5063783626801186,
        "org.apache.commons.lang3.text.translate$LookupTranslator#translate(java.lang.CharSequence,int,java.io.Writer)": 0.20743910869049553,
        "org.apache.commons.lang3.text.translate$NumericEntityUnescaper#NumericEntityUnescaper(org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION[])": 1.4887214989681385,
        "org.apache.commons.lang3.text.translate$NumericEntityUnescaper#isSet(org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION)": -0.0833703472055094,
        "org.apache.commons.lang3.text.translate$NumericEntityUnescaper#translate(java.lang.CharSequence,int,java.io.Writer)": -0.21441176599630826,
        "org.apache.commons.lang3.text.translate$NumericEntityUnescaper$OPTION#<clinit>()": 1.4887214989681385,
        "org.apache.commons.lang3.text.translate$NumericEntityUnescaper$OPTION#NumericEntityUnescaper$OPTION(java.lang.String,int)": 0.1429350613412338,
        "org.apache.commons.lang3.text.translate$OctalUnescaper#<clinit>()": 0.16059192505321362,
        "org.apache.commons.lang3.text.translate$OctalUnescaper#OctalUnescaper()": 1.5063783626801186,
        "org.apache.commons.lang3.text.translate$OctalUnescaper#translate(java.lang.CharSequence,int,java.io.Writer)": -0.0833703472055095,
        "org.apache.commons.lang3.text.translate$UnicodeEscaper#UnicodeEscaper()": 0.0,
        "org.apache.commons.lang3.text.translate$UnicodeEscaper#UnicodeEscaper(int,int,boolean)": 1.4887214989681385,
        "org.apache.commons.lang3.text.translate$UnicodeEscaper#above(int)": -0.05771157749250619,
        "org.apache.commons.lang3.text.translate$UnicodeEscaper#below(int)": -0.05771157749250619,
        "org.apache.commons.lang3.text.translate$UnicodeEscaper#between(int,int)": -0.05771157749250619,
        "org.apache.commons.lang3.text.translate$UnicodeEscaper#outsideOf(int,int)": 1.497483604889379,
        "org.apache.commons.lang3.text.translate$UnicodeEscaper#translate(int,java.io.Writer)": -0.16572715453576745,
        "org.apache.commons.lang3.text.translate$UnicodeUnescaper#UnicodeUnescaper()": 1.4887214989681385,
        "org.apache.commons.lang3.text.translate$UnicodeUnescaper#translate(java.lang.CharSequence,int,java.io.Writer)": -0.12141117893710818
    },
    "Lang-18": {
        "org.apache.commons.lang3$Validate#Validate()": -0.09660966668964277,
        "org.apache.commons.lang3$Validate#exclusiveBetween(java.lang.Object,java.lang.Object,java.lang.Comparable)": -0.09660966668964277,
        "org.apache.commons.lang3$Validate#exclusiveBetween(java.lang.Object,java.lang.Object,java.lang.Comparable,java.lang.String,java.lang.Object[])": -0.09660966668964277,
        "org.apache.commons.lang3$Validate#inclusiveBetween(java.lang.Object,java.lang.Object,java.lang.Comparable)": -0.09660966668964277,
        "org.apache.commons.lang3$Validate#inclusiveBetween(java.lang.Object,java.lang.Object,java.lang.Comparable,java.lang.String,java.lang.Object[])": -0.09660966668964277,
        "org.apache.commons.lang3$Validate#isAssignableFrom(java.lang.Class,java.lang.Class)": -0.09660966668964277,
        "org.apache.commons.lang3$Validate#isAssignableFrom(java.lang.Class,java.lang.Class,java.lang.String,java.lang.Object[])": -0.09660966668964277,
        "org.apache.commons.lang3$Validate#isInstanceOf(java.lang.Class,java.lang.Object)": -0.09660966668964277,
        "org.apache.commons.lang3$Validate#isInstanceOf(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])": -0.09660966668964277,
        "org.apache.commons.lang3$Validate#isTrue(boolean)": -0.26460116128885436,
        "org.apache.commons.lang3$Validate#isTrue(boolean,java.lang.String,double)": -0.09660966668964277,
        "org.apache.commons.lang3$Validate#isTrue(boolean,java.lang.String,java.lang.Object[])": -0.5543182100269024,
        "org.apache.commons.lang3$Validate#isTrue(boolean,java.lang.String,long)": -0.3416649102057069,
        "org.apache.commons.lang3$Validate#matchesPattern(java.lang.CharSequence,java.lang.String)": -0.09660966668964277,
        "org.apache.commons.lang3$Validate#matchesPattern(java.lang.CharSequence,java.lang.String,java.lang.String,java.lang.Object[])": -0.09660966668964277,
        "org.apache.commons.lang3$Validate#noNullElements(java.lang.Iterable)": -0.09660966668964287,
        "org.apache.commons.lang3$Validate#noNullElements(java.lang.Iterable,java.lang.String,java.lang.Object[])": -0.1412391925236947,
        "org.apache.commons.lang3$Validate#noNullElements(java.lang.Object[])": -0.1412391925236947,
        "org.apache.commons.lang3$Validate#noNullElements(java.lang.Object[],java.lang.String,java.lang.Object[])": -0.20896736487534873,
        "org.apache.commons.lang3$Validate#notBlank(java.lang.CharSequence)": -0.3139744480395154,
        "org.apache.commons.lang3$Validate#notBlank(java.lang.CharSequence,java.lang.String,java.lang.Object[])": -0.4809268557349494,
        "org.apache.commons.lang3$Validate#notEmpty(java.lang.CharSequence)": -0.09660966668964287,
        "org.apache.commons.lang3$Validate#notEmpty(java.lang.CharSequence,java.lang.String,java.lang.Object[])": -0.1412391925236947,
        "org.apache.commons.lang3$Validate#notEmpty(java.lang.Object[])": -0.09660966668964287,
        "org.apache.commons.lang3$Validate#notEmpty(java.lang.Object[],java.lang.String,java.lang.Object[])": -0.1412391925236947,
        "org.apache.commons.lang3$Validate#notEmpty(java.util.Collection)": -0.09660966668964287,
        "org.apache.commons.lang3$Validate#notEmpty(java.util.Collection,java.lang.String,java.lang.Object[])": -0.1412391925236947,
        "org.apache.commons.lang3$Validate#notEmpty(java.util.Map)": -0.09660966668964287,
        "org.apache.commons.lang3$Validate#notEmpty(java.util.Map,java.lang.String,java.lang.Object[])": -0.1412391925236947,
        "org.apache.commons.lang3$Validate#notNull(java.lang.Object)": -0.38091703292961826,
        "org.apache.commons.lang3$Validate#notNull(java.lang.Object,java.lang.String,java.lang.Object[])": -0.7222456491971957,
        "org.apache.commons.lang3$Validate#validIndex(java.lang.CharSequence,int)": -0.09660966668964287,
        "org.apache.commons.lang3$Validate#validIndex(java.lang.CharSequence,int,java.lang.String,java.lang.Object[])": -0.1412391925236947,
        "org.apache.commons.lang3$Validate#validIndex(java.lang.Object[],int)": -0.09660966668964287,
        "org.apache.commons.lang3$Validate#validIndex(java.lang.Object[],int,java.lang.String,java.lang.Object[])": -0.1412391925236947,
        "org.apache.commons.lang3$Validate#validIndex(java.util.Collection,int)": -0.09660966668964287,
        "org.apache.commons.lang3$Validate#validIndex(java.util.Collection,int,java.lang.String,java.lang.Object[])": -0.1412391925236947,
        "org.apache.commons.lang3$Validate#validState(boolean)": 0.0,
        "org.apache.commons.lang3$Validate#validState(boolean,java.lang.String,java.lang.Object[])": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#<clinit>()": -0.5042061513818247,
        "org.apache.commons.lang3.time$FastDateFormat#FastDateFormat(java.lang.String,java.util.TimeZone,java.util.Locale)": 0.8415802862450803,
        "org.apache.commons.lang3.time$FastDateFormat#applyRules(java.util.Calendar,java.lang.StringBuffer)": 0.9737841123477666,
        "org.apache.commons.lang3.time$FastDateFormat#equals(java.lang.Object)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#format(java.util.Calendar)": 1.034870152568609,
        "org.apache.commons.lang3.time$FastDateFormat#format(java.util.Calendar,java.lang.StringBuffer)": 1.034870152568609,
        "org.apache.commons.lang3.time$FastDateFormat#format(java.util.Date)": 1.0660668519524652,
        "org.apache.commons.lang3.time$FastDateFormat#format(java.util.Date,java.lang.StringBuffer)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#format(long)": 1.8199999999999998,
        "org.apache.commons.lang3.time$FastDateFormat#format(long,java.lang.StringBuffer)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getDateInstance(int)": -0.09660966668964287,
        "org.apache.commons.lang3.time$FastDateFormat#getDateInstance(int,java.util.Locale)": -0.1412391925236947,
        "org.apache.commons.lang3.time$FastDateFormat#getDateInstance(int,java.util.TimeZone)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getDateInstance(int,java.util.TimeZone,java.util.Locale)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getDateTimeInstance(int,int)": -0.09660966668964287,
        "org.apache.commons.lang3.time$FastDateFormat#getDateTimeInstance(int,int,java.util.Locale)": -0.09660966668964287,
        "org.apache.commons.lang3.time$FastDateFormat#getDateTimeInstance(int,int,java.util.TimeZone)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getDateTimeInstance(int,int,java.util.TimeZone,java.util.Locale)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getInstance()": -0.09660966668964287,
        "org.apache.commons.lang3.time$FastDateFormat#getInstance(java.lang.String)": 0.9438258368124264,
        "org.apache.commons.lang3.time$FastDateFormat#getInstance(java.lang.String,java.util.Locale)": -0.8158784725788022,
        "org.apache.commons.lang3.time$FastDateFormat#getInstance(java.lang.String,java.util.TimeZone)": -0.1412391925236947,
        "org.apache.commons.lang3.time$FastDateFormat#getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)": -0.3370730945571176,
        "org.apache.commons.lang3.time$FastDateFormat#getLocale()": -0.23778902627329357,
        "org.apache.commons.lang3.time$FastDateFormat#getMaxLengthEstimate()": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getPattern()": -0.33707309455711765,
        "org.apache.commons.lang3.time$FastDateFormat#getTimeInstance(int)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getTimeInstance(int,java.util.Locale)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getTimeInstance(int,java.util.TimeZone)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getTimeInstance(int,java.util.TimeZone,java.util.Locale)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getTimeZone()": -0.17731670311766234,
        "org.apache.commons.lang3.time$FastDateFormat#getTimeZoneDisplay(java.util.TimeZone,boolean,int,java.util.Locale)": 1.723390333310357,
        "org.apache.commons.lang3.time$FastDateFormat#hashCode()": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#init()": 0.8415802862450803,
        "org.apache.commons.lang3.time$FastDateFormat#parseObject(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#parsePattern()": 0.8415802862450803,
        "org.apache.commons.lang3.time$FastDateFormat#parseToken(java.lang.String,int[])": 0.8415802862450803,
        "org.apache.commons.lang3.time$FastDateFormat#readObject(java.io.ObjectInputStream)": -0.09660966668964287,
        "org.apache.commons.lang3.time$FastDateFormat#selectNumberRule(int,int)": 0.8415802862450803,
        "org.apache.commons.lang3.time$FastDateFormat#toString()": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat$1#createInstance(java.lang.String,java.util.TimeZone,java.util.Locale)": -0.5042061513818247,
        "org.apache.commons.lang3.time$FastDateFormat$CharacterLiteral#FastDateFormat$CharacterLiteral(char)": -0.48982562798978246,
        "org.apache.commons.lang3.time$FastDateFormat$CharacterLiteral#appendTo(java.lang.StringBuffer,java.util.Calendar)": -0.32634417938385873,
        "org.apache.commons.lang3.time$FastDateFormat$CharacterLiteral#estimateLength()": -0.48982562798978246,
        "org.apache.commons.lang3.time$FastDateFormat$PaddedNumberField#FastDateFormat$PaddedNumberField(int,int)": -0.47537398888773097,
        "org.apache.commons.lang3.time$FastDateFormat$PaddedNumberField#appendTo(java.lang.StringBuffer,int)": 1.0194422582430462,
        "org.apache.commons.lang3.time$FastDateFormat$PaddedNumberField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 1.0194422582430462,
        "org.apache.commons.lang3.time$FastDateFormat$PaddedNumberField#estimateLength()": -0.47537398888773097,
        "org.apache.commons.lang3.time$FastDateFormat$StringLiteral#FastDateFormat$StringLiteral(java.lang.String)": -0.815878472578802,
        "org.apache.commons.lang3.time$FastDateFormat$StringLiteral#appendTo(java.lang.StringBuffer,java.util.Calendar)": -0.14123919252369466,
        "org.apache.commons.lang3.time$FastDateFormat$StringLiteral#estimateLength()": -0.815878472578802,
        "org.apache.commons.lang3.time$FastDateFormat$TextField#FastDateFormat$TextField(int,java.lang.String[])": 0.988903524673579,
        "org.apache.commons.lang3.time$FastDateFormat$TextField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.33297436984940043,
        "org.apache.commons.lang3.time$FastDateFormat$TextField#estimateLength()": -0.35688291295332586,
        "org.apache.commons.lang3.time$FastDateFormat$TimeZoneDisplayKey#FastDateFormat$TimeZoneDisplayKey(java.util.TimeZone,boolean,int,java.util.Locale)": 0.3776038956834523,
        "org.apache.commons.lang3.time$FastDateFormat$TimeZoneDisplayKey#equals(java.lang.Object)": 0.4742135623730951,
        "org.apache.commons.lang3.time$FastDateFormat$TimeZoneDisplayKey#hashCode()": 0.3776038956834523,
        "org.apache.commons.lang3.time$FastDateFormat$TimeZoneNameRule#FastDateFormat$TimeZoneNameRule(java.util.TimeZone,java.util.Locale,int)": 1.723390333310357,
        "org.apache.commons.lang3.time$FastDateFormat$TimeZoneNameRule#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.4742135623730951,
        "org.apache.commons.lang3.time$FastDateFormat$TimeZoneNameRule#estimateLength()": 0.3776038956834523,
        "org.apache.commons.lang3.time$FastDateFormat$TimeZoneNumberRule#<clinit>()": 1.050409974499543,
        "org.apache.commons.lang3.time$FastDateFormat$TimeZoneNumberRule#FastDateFormat$TimeZoneNumberRule(boolean)": -0.295376463127362,
        "org.apache.commons.lang3.time$FastDateFormat$TimeZoneNumberRule#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.18432298731993646,
        "org.apache.commons.lang3.time$FastDateFormat$TimeZoneNumberRule#estimateLength()": -0.295376463127362,
        "org.apache.commons.lang3.time$FastDateFormat$TwelveHourField#FastDateFormat$TwelveHourField(org.apache.commons.lang3.time.FastDateFormat$NumberRule)": -0.14123919252369466,
        "org.apache.commons.lang3.time$FastDateFormat$TwelveHourField#appendTo(java.lang.StringBuffer,int)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat$TwelveHourField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat$TwelveHourField#estimateLength()": -0.1412391925236947,
        "org.apache.commons.lang3.time$FastDateFormat$TwoDigitMonthField#<clinit>()": 0.8995387468711081,
        "org.apache.commons.lang3.time$FastDateFormat$TwoDigitMonthField#FastDateFormat$TwoDigitMonthField()": -0.44624769075579696,
        "org.apache.commons.lang3.time$FastDateFormat$TwoDigitMonthField#appendTo(java.lang.StringBuffer,int)": -0.27971958567443955,
        "org.apache.commons.lang3.time$FastDateFormat$TwoDigitMonthField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 1.0660668519524652,
        "org.apache.commons.lang3.time$FastDateFormat$TwoDigitMonthField#estimateLength()": -0.44624769075579696,
        "org.apache.commons.lang3.time$FastDateFormat$TwoDigitNumberField#FastDateFormat$TwoDigitNumberField(int)": -0.48982562798978246,
        "org.apache.commons.lang3.time$FastDateFormat$TwoDigitNumberField#appendTo(java.lang.StringBuffer,int)": -0.3416649102057069,
        "org.apache.commons.lang3.time$FastDateFormat$TwoDigitNumberField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 1.0041215274211979,
        "org.apache.commons.lang3.time$FastDateFormat$TwoDigitNumberField#estimateLength()": -0.48982562798978246,
        "org.apache.commons.lang3.time$FastDateFormat$TwoDigitYearField#<clinit>()": 1.6787608074763054,
        "org.apache.commons.lang3.time$FastDateFormat$TwoDigitYearField#FastDateFormat$TwoDigitYearField()": 0.33297436984940043,
        "org.apache.commons.lang3.time$FastDateFormat$TwoDigitYearField#appendTo(java.lang.StringBuffer,int)": 0.3776038956834523,
        "org.apache.commons.lang3.time$FastDateFormat$TwoDigitYearField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 1.723390333310357,
        "org.apache.commons.lang3.time$FastDateFormat$TwoDigitYearField#estimateLength()": 0.33297436984940043,
        "org.apache.commons.lang3.time$FastDateFormat$UnpaddedMonthField#<clinit>()": 1.6110326351246513,
        "org.apache.commons.lang3.time$FastDateFormat$UnpaddedMonthField#FastDateFormat$UnpaddedMonthField()": 0.26524619749774636,
        "org.apache.commons.lang3.time$FastDateFormat$UnpaddedMonthField#appendTo(java.lang.StringBuffer,int)": 0.29689685925543274,
        "org.apache.commons.lang3.time$FastDateFormat$UnpaddedMonthField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 1.6426832968823375,
        "org.apache.commons.lang3.time$FastDateFormat$UnpaddedMonthField#estimateLength()": 0.26524619749774636,
        "org.apache.commons.lang3.time$FastDateFormat$UnpaddedNumberField#FastDateFormat$UnpaddedNumberField(int)": 0.20961240108424073,
        "org.apache.commons.lang3.time$FastDateFormat$UnpaddedNumberField#appendTo(java.lang.StringBuffer,int)": 0.29689685925543274,
        "org.apache.commons.lang3.time$FastDateFormat$UnpaddedNumberField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 1.6426832968823375,
        "org.apache.commons.lang3.time$FastDateFormat$UnpaddedNumberField#estimateLength()": 0.20961240108424073,
        "org.apache.commons.lang3.time$FormatCache#FormatCache()": -0.5042061513818247,
        "org.apache.commons.lang3.time$FormatCache#getDateTimeInstance(java.lang.Integer,java.lang.Integer,java.util.TimeZone,java.util.Locale)": -0.20896736487534873,
        "org.apache.commons.lang3.time$FormatCache#getInstance()": 0.0,
        "org.apache.commons.lang3.time$FormatCache#getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)": 0.8415802862450803,
        "org.apache.commons.lang3.time$FormatCache$MultipartKey#FormatCache$MultipartKey(java.lang.Object[])": 0.8415802862450803,
        "org.apache.commons.lang3.time$FormatCache$MultipartKey#equals(java.lang.Object)": -0.46178193453220784,
        "org.apache.commons.lang3.time$FormatCache$MultipartKey#hashCode()": 0.8415802862450803
    },
    "Lang-19": {
        "org.apache.commons.lang3.text.translate$AggregateTranslator#AggregateTranslator(org.apache.commons.lang3.text.translate.CharSequenceTranslator[])": -1.415569415042095,
        "org.apache.commons.lang3.text.translate$AggregateTranslator#translate(java.lang.CharSequence,int,java.io.Writer)": -1.1534031968814578,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#CharSequenceTranslator()": -1.525786437626905,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#hex(int)": -0.5515347075210475,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#translate(java.lang.CharSequence)": 0.00958565330651473,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#translate(java.lang.CharSequence,java.io.Writer)": -0.0857458365518543,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#with(org.apache.commons.lang3.text.translate.CharSequenceTranslator[])": -1.415569415042095,
        "org.apache.commons.lang3.text.translate$NumericEntityUnescaper#NumericEntityUnescaper()": 0.3536574126990174,
        "org.apache.commons.lang3.text.translate$NumericEntityUnescaper#translate(java.lang.CharSequence,int,java.io.Writer)": -0.3373665235168154
    },
    "Lang-20": {
        "org.apache.commons.lang3$StringUtils#<clinit>()": -1.525786437626905,
        "org.apache.commons.lang3$StringUtils#StringUtils()": -0.06980402370160421,
        "org.apache.commons.lang3$StringUtils#abbreviate(java.lang.String,int)": -0.10123190190954034,
        "org.apache.commons.lang3$StringUtils#abbreviate(java.lang.String,int,int)": -0.10123190190954034,
        "org.apache.commons.lang3$StringUtils#abbreviateMiddle(java.lang.String,java.lang.String,int)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#capitalize(java.lang.String)": -0.06980402370160421,
        "org.apache.commons.lang3$StringUtils#center(java.lang.String,int)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#center(java.lang.String,int,char)": -0.10123190190954034,
        "org.apache.commons.lang3$StringUtils#center(java.lang.String,int,java.lang.String)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#chomp(java.lang.String)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#chomp(java.lang.String,java.lang.String)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#chop(java.lang.String)": -0.06980402370160421,
        "org.apache.commons.lang3$StringUtils#contains(java.lang.CharSequence,int)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#contains(java.lang.CharSequence,java.lang.CharSequence)": -0.14819173839033262,
        "org.apache.commons.lang3$StringUtils#containsAny(java.lang.CharSequence,char[])": -0.21963118579332963,
        "org.apache.commons.lang3$StringUtils#containsAny(java.lang.CharSequence,java.lang.CharSequence)": -0.12634595765152176,
        "org.apache.commons.lang3$StringUtils#containsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": -0.10123190190954023,
        "org.apache.commons.lang3$StringUtils#containsNone(java.lang.CharSequence,char[])": -0.21963118579332963,
        "org.apache.commons.lang3$StringUtils#containsNone(java.lang.CharSequence,java.lang.String)": -0.12634595765152176,
        "org.apache.commons.lang3$StringUtils#containsOnly(java.lang.CharSequence,char[])": -0.16794891129507306,
        "org.apache.commons.lang3$StringUtils#containsOnly(java.lang.CharSequence,java.lang.String)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#containsWhitespace(java.lang.CharSequence)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#countMatches(java.lang.CharSequence,java.lang.CharSequence)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#defaultIfBlank(java.lang.CharSequence,java.lang.CharSequence)": -0.14819173839033262,
        "org.apache.commons.lang3$StringUtils#defaultIfEmpty(java.lang.CharSequence,java.lang.CharSequence)": -0.14819173839033262,
        "org.apache.commons.lang3$StringUtils#defaultString(java.lang.String)": -0.1263459576515218,
        "org.apache.commons.lang3$StringUtils#defaultString(java.lang.String,java.lang.String)": -0.06980402370160421,
        "org.apache.commons.lang3$StringUtils#deleteWhitespace(java.lang.String)": -0.31810525757695196,
        "org.apache.commons.lang3$StringUtils#difference(java.lang.String,java.lang.String)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#endsWith(java.lang.CharSequence,java.lang.CharSequence)": -0.10123190190954034,
        "org.apache.commons.lang3$StringUtils#endsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)": -0.14819173839033262,
        "org.apache.commons.lang3$StringUtils#endsWithAny(java.lang.CharSequence,java.lang.CharSequence[])": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#endsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": -0.10123190190954034,
        "org.apache.commons.lang3$StringUtils#equals(java.lang.CharSequence,java.lang.CharSequence)": -0.06980402370160421,
        "org.apache.commons.lang3$StringUtils#equalsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": -0.06980402370160421,
        "org.apache.commons.lang3$StringUtils#getCommonPrefix(java.lang.String[])": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence)": -0.06980402370160421,
        "org.apache.commons.lang3$StringUtils#getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)": -0.06980402370160421,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,int)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,int,int)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,java.lang.CharSequence)": -0.06980402370160421,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,java.lang.CharSequence,int)": -0.06980402370160421,
        "org.apache.commons.lang3$StringUtils#indexOfAny(java.lang.CharSequence,char[])": -0.14819173839033262,
        "org.apache.commons.lang3$StringUtils#indexOfAny(java.lang.CharSequence,java.lang.CharSequence[])": -0.06980402370160421,
        "org.apache.commons.lang3$StringUtils#indexOfAny(java.lang.CharSequence,java.lang.String)": -0.10123190190954034,
        "org.apache.commons.lang3$StringUtils#indexOfAnyBut(java.lang.CharSequence,char[])": -0.20337184983955942,
        "org.apache.commons.lang3$StringUtils#indexOfAnyBut(java.lang.CharSequence,java.lang.CharSequence)": -0.10123190190954034,
        "org.apache.commons.lang3$StringUtils#indexOfDifference(java.lang.CharSequence,java.lang.CharSequence)": -0.10123190190954023,
        "org.apache.commons.lang3$StringUtils#indexOfDifference(java.lang.CharSequence[])": -0.10123190190954034,
        "org.apache.commons.lang3$StringUtils#indexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#indexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,int)": -0.10123190190954023,
        "org.apache.commons.lang3$StringUtils#isAllLowerCase(java.lang.CharSequence)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#isAllUpperCase(java.lang.CharSequence)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#isAlpha(java.lang.CharSequence)": -0.06980402370160421,
        "org.apache.commons.lang3$StringUtils#isAlphaSpace(java.lang.CharSequence)": -0.06980402370160421,
        "org.apache.commons.lang3$StringUtils#isAlphanumeric(java.lang.CharSequence)": -0.06980402370160421,
        "org.apache.commons.lang3$StringUtils#isAlphanumericSpace(java.lang.CharSequence)": -0.06980402370160421,
        "org.apache.commons.lang3$StringUtils#isAsciiPrintable(java.lang.CharSequence)": -0.06980402370160421,
        "org.apache.commons.lang3$StringUtils#isBlank(java.lang.CharSequence)": -0.42394710894145793,
        "org.apache.commons.lang3$StringUtils#isEmpty(java.lang.CharSequence)": -1.0918656375093123,
        "org.apache.commons.lang3$StringUtils#isNotBlank(java.lang.CharSequence)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#isNotEmpty(java.lang.CharSequence)": -0.2351631440661856,
        "org.apache.commons.lang3$StringUtils#isNumeric(java.lang.CharSequence)": -0.06980402370160421,
        "org.apache.commons.lang3$StringUtils#isNumericSpace(java.lang.CharSequence)": -0.06980402370160421,
        "org.apache.commons.lang3$StringUtils#isWhitespace(java.lang.CharSequence)": -0.06980402370160421,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Iterable,char)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Iterable,java.lang.String)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[])": 1.0158748792770071,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],char)": 1.0473027574849434,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],char,int,int)": 1.0473027574849434,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],java.lang.String)": 0.9907608235350258,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],java.lang.String,int,int)": 0.9907608235350258,
        "org.apache.commons.lang3$StringUtils#join(java.util.Iterator,char)": -0.10123190190954023,
        "org.apache.commons.lang3$StringUtils#join(java.util.Iterator,java.lang.String)": -0.10123190190954023,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,int)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,int,int)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,java.lang.CharSequence)": -0.06980402370160421,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)": -0.06980402370160421,
        "org.apache.commons.lang3$StringUtils#lastIndexOfAny(java.lang.CharSequence,java.lang.CharSequence[])": -0.06980402370160421,
        "org.apache.commons.lang3$StringUtils#lastIndexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#lastIndexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,int)": -0.10123190190954023,
        "org.apache.commons.lang3$StringUtils#lastOrdinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#left(java.lang.String,int)": -0.06980402370160421,
        "org.apache.commons.lang3$StringUtils#leftPad(java.lang.String,int)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#leftPad(java.lang.String,int,char)": -0.35519785165136786,
        "org.apache.commons.lang3$StringUtils#leftPad(java.lang.String,int,java.lang.String)": -0.12634595765152176,
        "org.apache.commons.lang3$StringUtils#length(java.lang.CharSequence)": -0.14819173839033262,
        "org.apache.commons.lang3$StringUtils#lowerCase(java.lang.String)": -0.06980402370160421,
        "org.apache.commons.lang3$StringUtils#lowerCase(java.lang.String,java.util.Locale)": -0.06980402370160421,
        "org.apache.commons.lang3$StringUtils#mid(java.lang.String,int,int)": -0.06980402370160421,
        "org.apache.commons.lang3$StringUtils#normalizeSpace(java.lang.String)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#ordinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#ordinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int,boolean)": -0.10123190190954023,
        "org.apache.commons.lang3$StringUtils#overlay(java.lang.String,java.lang.String,int,int)": -0.06980402370160421,
        "org.apache.commons.lang3$StringUtils#remove(java.lang.String,char)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#remove(java.lang.String,java.lang.String)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#removeAccentsJava6(java.lang.CharSequence)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#removeAccentsSUN(java.lang.CharSequence)": 0.0,
        "org.apache.commons.lang3$StringUtils#removeEnd(java.lang.String,java.lang.String)": -0.10123190190954034,
        "org.apache.commons.lang3$StringUtils#removeEndIgnoreCase(java.lang.String,java.lang.String)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#removeStart(java.lang.String,java.lang.String)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#removeStartIgnoreCase(java.lang.String,java.lang.String)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#repeat(char,int)": -0.3903432709445951,
        "org.apache.commons.lang3$StringUtils#repeat(java.lang.String,int)": -0.14819173839033262,
        "org.apache.commons.lang3$StringUtils#repeat(java.lang.String,java.lang.String,int)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#replace(java.lang.String,java.lang.String,java.lang.String)": -0.16794891129507306,
        "org.apache.commons.lang3$StringUtils#replace(java.lang.String,java.lang.String,java.lang.String,int)": -0.25008615255188277,
        "org.apache.commons.lang3$StringUtils#replaceChars(java.lang.String,char,char)": -0.10123190190954023,
        "org.apache.commons.lang3$StringUtils#replaceChars(java.lang.String,java.lang.String,java.lang.String)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#replaceEach(java.lang.String,java.lang.String[],java.lang.String[])": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#replaceEach(java.lang.String,java.lang.String[],java.lang.String[],boolean,int)": -0.10123190190954034,
        "org.apache.commons.lang3$StringUtils#replaceEachRepeatedly(java.lang.String,java.lang.String[],java.lang.String[])": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#replaceOnce(java.lang.String,java.lang.String,java.lang.String)": -0.12634595765152176,
        "org.apache.commons.lang3$StringUtils#reverse(java.lang.String)": -0.06980402370160421,
        "org.apache.commons.lang3$StringUtils#reverseDelimited(java.lang.String,char)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#right(java.lang.String,int)": -0.06980402370160421,
        "org.apache.commons.lang3$StringUtils#rightPad(java.lang.String,int)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#rightPad(java.lang.String,int,char)": -0.1862224815093555,
        "org.apache.commons.lang3$StringUtils#rightPad(java.lang.String,int,java.lang.String)": -0.12634595765152176,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String,char)": -0.10123190190954034,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String,java.lang.String)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String,java.lang.String,int)": -0.10123190190954034,
        "org.apache.commons.lang3$StringUtils#splitByCharacterType(java.lang.String)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#splitByCharacterType(java.lang.String,boolean)": -0.10123190190954023,
        "org.apache.commons.lang3$StringUtils#splitByCharacterTypeCamelCase(java.lang.String)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparator(java.lang.String,java.lang.String)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparator(java.lang.String,java.lang.String,int)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String,int)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparatorWorker(java.lang.String,java.lang.String,int,boolean)": -0.12634595765152176,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String,char)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String,java.lang.String)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String,java.lang.String,int)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#splitWorker(java.lang.String,char,boolean)": -0.1263459576515218,
        "org.apache.commons.lang3$StringUtils#splitWorker(java.lang.String,java.lang.String,int,boolean)": -0.20337184983955936,
        "org.apache.commons.lang3$StringUtils#startsWith(java.lang.CharSequence,java.lang.CharSequence)": -0.10123190190954034,
        "org.apache.commons.lang3$StringUtils#startsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)": -0.14819173839033262,
        "org.apache.commons.lang3$StringUtils#startsWithAny(java.lang.CharSequence,java.lang.CharSequence[])": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#startsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": -0.10123190190954034,
        "org.apache.commons.lang3$StringUtils#strip(java.lang.String)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#strip(java.lang.String,java.lang.String)": -0.16794891129507306,
        "org.apache.commons.lang3$StringUtils#stripAccents(java.lang.String)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#stripAll(java.lang.String[])": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#stripAll(java.lang.String[],java.lang.String)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#stripEnd(java.lang.String,java.lang.String)": -0.20337184983955936,
        "org.apache.commons.lang3$StringUtils#stripStart(java.lang.String,java.lang.String)": -0.1862224815093556,
        "org.apache.commons.lang3$StringUtils#stripToEmpty(java.lang.String)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#stripToNull(java.lang.String)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#substring(java.lang.String,int)": -0.06980402370160421,
        "org.apache.commons.lang3$StringUtils#substring(java.lang.String,int,int)": -0.06980402370160421,
        "org.apache.commons.lang3$StringUtils#substringAfter(java.lang.String,java.lang.String)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#substringAfterLast(java.lang.String,java.lang.String)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#substringBefore(java.lang.String,java.lang.String)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#substringBeforeLast(java.lang.String,java.lang.String)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#substringBetween(java.lang.String,java.lang.String)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#substringBetween(java.lang.String,java.lang.String,java.lang.String)": -0.10123190190954023,
        "org.apache.commons.lang3$StringUtils#substringsBetween(java.lang.String,java.lang.String,java.lang.String)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#swapCase(java.lang.String)": -0.06980402370160421,
        "org.apache.commons.lang3$StringUtils#trim(java.lang.String)": -0.1263459576515218,
        "org.apache.commons.lang3$StringUtils#trimToEmpty(java.lang.String)": -0.06980402370160421,
        "org.apache.commons.lang3$StringUtils#trimToNull(java.lang.String)": -0.06980402370160407,
        "org.apache.commons.lang3$StringUtils#uncapitalize(java.lang.String)": -0.06980402370160421,
        "org.apache.commons.lang3$StringUtils#upperCase(java.lang.String)": -0.06980402370160421,
        "org.apache.commons.lang3$StringUtils#upperCase(java.lang.String,java.util.Locale)": -0.06980402370160421
    },
    "Lang-22": {},
    "Lang-24": {},
    "Lang-26": {},
    "Lang-27": {},
    "Lang-28": {},
    "Lang-3": {
        "org.apache.commons.lang3$StringUtils#<clinit>()": -1.2883923768500698,
        "org.apache.commons.lang3$StringUtils#StringUtils()": -0.0473677135332935,
        "org.apache.commons.lang3$StringUtils#abbreviate(java.lang.String,int)": -0.0681909097918983,
        "org.apache.commons.lang3$StringUtils#abbreviate(java.lang.String,int,int)": -0.0681909097918983,
        "org.apache.commons.lang3$StringUtils#abbreviateMiddle(java.lang.String,java.lang.String,int)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#appendIfMissing(java.lang.String,java.lang.CharSequence,boolean,java.lang.CharSequence[])": -0.0681909097918983,
        "org.apache.commons.lang3$StringUtils#appendIfMissing(java.lang.String,java.lang.CharSequence,java.lang.CharSequence[])": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#appendIfMissingIgnoreCase(java.lang.String,java.lang.CharSequence,java.lang.CharSequence[])": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#capitalize(java.lang.String)": -0.0473677135332935,
        "org.apache.commons.lang3$StringUtils#center(java.lang.String,int)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#center(java.lang.String,int,char)": -0.0681909097918983,
        "org.apache.commons.lang3$StringUtils#center(java.lang.String,int,java.lang.String)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#chomp(java.lang.String)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#chomp(java.lang.String,java.lang.String)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#chop(java.lang.String)": -0.0473677135332935,
        "org.apache.commons.lang3$StringUtils#contains(java.lang.CharSequence,int)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#contains(java.lang.CharSequence,java.lang.CharSequence)": -0.09884220324728488,
        "org.apache.commons.lang3$StringUtils#containsAny(java.lang.CharSequence,char[])": -0.1445953719451929,
        "org.apache.commons.lang3$StringUtils#containsAny(java.lang.CharSequence,java.lang.CharSequence)": -0.08464687824893795,
        "org.apache.commons.lang3$StringUtils#containsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": -0.06819090979189824,
        "org.apache.commons.lang3$StringUtils#containsNone(java.lang.CharSequence,char[])": -0.1544234691419748,
        "org.apache.commons.lang3$StringUtils#containsNone(java.lang.CharSequence,java.lang.String)": -0.08464687824893795,
        "org.apache.commons.lang3$StringUtils#containsOnly(java.lang.CharSequence,char[])": -0.11159285249671727,
        "org.apache.commons.lang3$StringUtils#containsOnly(java.lang.CharSequence,java.lang.String)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#containsWhitespace(java.lang.CharSequence)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#countMatches(java.lang.CharSequence,java.lang.CharSequence)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#defaultIfBlank(java.lang.CharSequence,java.lang.CharSequence)": -0.09884220324728506,
        "org.apache.commons.lang3$StringUtils#defaultIfEmpty(java.lang.CharSequence,java.lang.CharSequence)": -0.09884220324728506,
        "org.apache.commons.lang3$StringUtils#defaultString(java.lang.String)": -0.0846468782489378,
        "org.apache.commons.lang3$StringUtils#defaultString(java.lang.String,java.lang.String)": -0.0473677135332935,
        "org.apache.commons.lang3$StringUtils#deleteWhitespace(java.lang.String)": -0.2063024491403827,
        "org.apache.commons.lang3$StringUtils#difference(java.lang.String,java.lang.String)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#endsWith(java.lang.CharSequence,java.lang.CharSequence)": -0.0681909097918983,
        "org.apache.commons.lang3$StringUtils#endsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)": -0.1233173039157256,
        "org.apache.commons.lang3$StringUtils#endsWithAny(java.lang.CharSequence,java.lang.CharSequence[])": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#endsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": -0.0681909097918983,
        "org.apache.commons.lang3$StringUtils#equals(java.lang.CharSequence,java.lang.CharSequence)": -0.22174334769080772,
        "org.apache.commons.lang3$StringUtils#equalsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": -0.0473677135332935,
        "org.apache.commons.lang3$StringUtils#getCommonPrefix(java.lang.String[])": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence)": -0.0473677135332935,
        "org.apache.commons.lang3$StringUtils#getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)": -0.0473677135332935,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,int)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,int,int)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,java.lang.CharSequence)": -0.0473677135332935,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,java.lang.CharSequence,int)": -0.0473677135332935,
        "org.apache.commons.lang3$StringUtils#indexOfAny(java.lang.CharSequence,char[])": -0.09884220324728506,
        "org.apache.commons.lang3$StringUtils#indexOfAny(java.lang.CharSequence,java.lang.CharSequence[])": -0.0473677135332935,
        "org.apache.commons.lang3$StringUtils#indexOfAny(java.lang.CharSequence,java.lang.String)": -0.0681909097918983,
        "org.apache.commons.lang3$StringUtils#indexOfAnyBut(java.lang.CharSequence,char[])": -0.13426415258312113,
        "org.apache.commons.lang3$StringUtils#indexOfAnyBut(java.lang.CharSequence,java.lang.CharSequence)": -0.0681909097918983,
        "org.apache.commons.lang3$StringUtils#indexOfDifference(java.lang.CharSequence,java.lang.CharSequence)": -0.06819090979189824,
        "org.apache.commons.lang3$StringUtils#indexOfDifference(java.lang.CharSequence[])": -0.0681909097918983,
        "org.apache.commons.lang3$StringUtils#indexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#indexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,int)": -0.06819090979189824,
        "org.apache.commons.lang3$StringUtils#isAllLowerCase(java.lang.CharSequence)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#isAllUpperCase(java.lang.CharSequence)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#isAlpha(java.lang.CharSequence)": -0.0473677135332935,
        "org.apache.commons.lang3$StringUtils#isAlphaSpace(java.lang.CharSequence)": -0.0473677135332935,
        "org.apache.commons.lang3$StringUtils#isAlphanumeric(java.lang.CharSequence)": -0.0473677135332935,
        "org.apache.commons.lang3$StringUtils#isAlphanumericSpace(java.lang.CharSequence)": -0.0473677135332935,
        "org.apache.commons.lang3$StringUtils#isAsciiPrintable(java.lang.CharSequence)": -0.0473677135332935,
        "org.apache.commons.lang3$StringUtils#isBlank(java.lang.CharSequence)": 0.17064019711858835,
        "org.apache.commons.lang3$StringUtils#isEmpty(java.lang.CharSequence)": -1.2193573844658383,
        "org.apache.commons.lang3$StringUtils#isNotBlank(java.lang.CharSequence)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#isNotEmpty(java.lang.CharSequence)": -0.1728778841161416,
        "org.apache.commons.lang3$StringUtils#isNumeric(java.lang.CharSequence)": -0.0473677135332935,
        "org.apache.commons.lang3$StringUtils#isNumericSpace(java.lang.CharSequence)": -0.0473677135332935,
        "org.apache.commons.lang3$StringUtils#isWhitespace(java.lang.CharSequence)": -0.0473677135332935,
        "org.apache.commons.lang3$StringUtils#join(byte[],char)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#join(byte[],char,int,int)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#join(char[],char)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#join(char[],char,int,int)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#join(double[],char)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#join(double[],char,int,int)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#join(float[],char)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#join(float[],char,int,int)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#join(int[],char)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#join(int[],char,int,int)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Iterable,char)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Iterable,java.lang.String)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[])": -0.08464687824893795,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],char)": -0.0681909097918983,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],char,int,int)": -0.0681909097918983,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],java.lang.String)": -0.09884220324728506,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],java.lang.String,int,int)": -0.09884220324728506,
        "org.apache.commons.lang3$StringUtils#join(java.util.Iterator,char)": -0.06819090979189824,
        "org.apache.commons.lang3$StringUtils#join(java.util.Iterator,java.lang.String)": -0.06819090979189824,
        "org.apache.commons.lang3$StringUtils#join(long[],char)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#join(long[],char,int,int)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#join(short[],char)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#join(short[],char,int,int)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,int)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,int,int)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,java.lang.CharSequence)": -0.0473677135332935,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)": -0.0473677135332935,
        "org.apache.commons.lang3$StringUtils#lastIndexOfAny(java.lang.CharSequence,java.lang.CharSequence[])": -0.0473677135332935,
        "org.apache.commons.lang3$StringUtils#lastIndexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#lastIndexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,int)": -0.06819090979189824,
        "org.apache.commons.lang3$StringUtils#lastOrdinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#left(java.lang.String,int)": -0.0473677135332935,
        "org.apache.commons.lang3$StringUtils#leftPad(java.lang.String,int)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#leftPad(java.lang.String,int,char)": -0.23653493901714095,
        "org.apache.commons.lang3$StringUtils#leftPad(java.lang.String,int,java.lang.String)": -0.08464687824893795,
        "org.apache.commons.lang3$StringUtils#length(java.lang.CharSequence)": -0.09884220324728488,
        "org.apache.commons.lang3$StringUtils#lowerCase(java.lang.String)": -0.0473677135332935,
        "org.apache.commons.lang3$StringUtils#lowerCase(java.lang.String,java.util.Locale)": -0.0473677135332935,
        "org.apache.commons.lang3$StringUtils#mid(java.lang.String,int,int)": -0.0473677135332935,
        "org.apache.commons.lang3$StringUtils#normalizeSpace(java.lang.String)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#ordinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#ordinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int,boolean)": -0.06819090979189824,
        "org.apache.commons.lang3$StringUtils#overlay(java.lang.String,java.lang.String,int,int)": -0.0473677135332935,
        "org.apache.commons.lang3$StringUtils#prependIfMissing(java.lang.String,java.lang.CharSequence,boolean,java.lang.CharSequence[])": -0.0681909097918983,
        "org.apache.commons.lang3$StringUtils#prependIfMissing(java.lang.String,java.lang.CharSequence,java.lang.CharSequence[])": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#prependIfMissingIgnoreCase(java.lang.String,java.lang.CharSequence,java.lang.CharSequence[])": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#remove(java.lang.String,char)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#remove(java.lang.String,java.lang.String)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#removeEnd(java.lang.String,java.lang.String)": -0.08464687824893795,
        "org.apache.commons.lang3$StringUtils#removeEndIgnoreCase(java.lang.String,java.lang.String)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#removePattern(java.lang.String,java.lang.String)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#removeStart(java.lang.String,java.lang.String)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#removeStartIgnoreCase(java.lang.String,java.lang.String)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#repeat(char,int)": -0.2507774763054864,
        "org.apache.commons.lang3$StringUtils#repeat(java.lang.String,int)": -0.09884220324728506,
        "org.apache.commons.lang3$StringUtils#repeat(java.lang.String,java.lang.String,int)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#replace(java.lang.String,java.lang.String,java.lang.String)": -0.11159285249671727,
        "org.apache.commons.lang3$StringUtils#replace(java.lang.String,java.lang.String,java.lang.String,int)": -0.16383035993731335,
        "org.apache.commons.lang3$StringUtils#replaceChars(java.lang.String,char,char)": -0.06819090979189824,
        "org.apache.commons.lang3$StringUtils#replaceChars(java.lang.String,java.lang.String,java.lang.String)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#replaceEach(java.lang.String,java.lang.String[],java.lang.String[])": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#replaceEach(java.lang.String,java.lang.String[],java.lang.String[],boolean,int)": -0.0681909097918983,
        "org.apache.commons.lang3$StringUtils#replaceEachRepeatedly(java.lang.String,java.lang.String[],java.lang.String[])": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#replaceOnce(java.lang.String,java.lang.String,java.lang.String)": -0.08464687824893795,
        "org.apache.commons.lang3$StringUtils#replacePattern(java.lang.String,java.lang.String,java.lang.String)": -0.06819090979189824,
        "org.apache.commons.lang3$StringUtils#reverse(java.lang.String)": -0.0473677135332935,
        "org.apache.commons.lang3$StringUtils#reverseDelimited(java.lang.String,char)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#right(java.lang.String,int)": -0.0473677135332935,
        "org.apache.commons.lang3$StringUtils#rightPad(java.lang.String,int)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#rightPad(java.lang.String,int,char)": -0.1233173039157255,
        "org.apache.commons.lang3$StringUtils#rightPad(java.lang.String,int,java.lang.String)": -0.08464687824893795,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String,char)": -0.0681909097918983,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String,java.lang.String)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String,java.lang.String,int)": -0.0681909097918983,
        "org.apache.commons.lang3$StringUtils#splitByCharacterType(java.lang.String)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#splitByCharacterType(java.lang.String,boolean)": -0.06819090979189824,
        "org.apache.commons.lang3$StringUtils#splitByCharacterTypeCamelCase(java.lang.String)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparator(java.lang.String,java.lang.String)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparator(java.lang.String,java.lang.String,int)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String,int)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparatorWorker(java.lang.String,java.lang.String,int,boolean)": -0.08464687824893795,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String,char)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String,java.lang.String)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String,java.lang.String,int)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#splitWorker(java.lang.String,char,boolean)": -0.0846468782489378,
        "org.apache.commons.lang3$StringUtils#splitWorker(java.lang.String,java.lang.String,int,boolean)": -0.1342641525831212,
        "org.apache.commons.lang3$StringUtils#startsWith(java.lang.CharSequence,java.lang.CharSequence)": -0.0681909097918983,
        "org.apache.commons.lang3$StringUtils#startsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)": -0.1233173039157256,
        "org.apache.commons.lang3$StringUtils#startsWithAny(java.lang.CharSequence,java.lang.CharSequence[])": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#startsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": -0.0681909097918983,
        "org.apache.commons.lang3$StringUtils#strip(java.lang.String)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#strip(java.lang.String,java.lang.String)": -0.11159285249671727,
        "org.apache.commons.lang3$StringUtils#stripAccents(java.lang.String)": -0.0473677135332935,
        "org.apache.commons.lang3$StringUtils#stripAll(java.lang.String[])": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#stripAll(java.lang.String[],java.lang.String)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#stripEnd(java.lang.String,java.lang.String)": -0.1342641525831212,
        "org.apache.commons.lang3$StringUtils#stripStart(java.lang.String,java.lang.String)": -0.1233173039157256,
        "org.apache.commons.lang3$StringUtils#stripToEmpty(java.lang.String)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#stripToNull(java.lang.String)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#substring(java.lang.String,int)": -0.0473677135332935,
        "org.apache.commons.lang3$StringUtils#substring(java.lang.String,int,int)": -0.0473677135332935,
        "org.apache.commons.lang3$StringUtils#substringAfter(java.lang.String,java.lang.String)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#substringAfterLast(java.lang.String,java.lang.String)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#substringBefore(java.lang.String,java.lang.String)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#substringBeforeLast(java.lang.String,java.lang.String)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#substringBetween(java.lang.String,java.lang.String)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#substringBetween(java.lang.String,java.lang.String,java.lang.String)": -0.06819090979189824,
        "org.apache.commons.lang3$StringUtils#substringsBetween(java.lang.String,java.lang.String,java.lang.String)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#swapCase(java.lang.String)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#toString(byte[],java.lang.String)": -0.0473677135332935,
        "org.apache.commons.lang3$StringUtils#trim(java.lang.String)": -0.0846468782489378,
        "org.apache.commons.lang3$StringUtils#trimToEmpty(java.lang.String)": -0.0473677135332935,
        "org.apache.commons.lang3$StringUtils#trimToNull(java.lang.String)": -0.04736771353329346,
        "org.apache.commons.lang3$StringUtils#uncapitalize(java.lang.String)": -0.0473677135332935,
        "org.apache.commons.lang3$StringUtils#upperCase(java.lang.String)": -0.0473677135332935,
        "org.apache.commons.lang3$StringUtils#upperCase(java.lang.String,java.util.Locale)": -0.0473677135332935,
        "org.apache.commons.lang3.math$NumberUtils#<clinit>()": -0.12260557993552601,
        "org.apache.commons.lang3.math$NumberUtils#NumberUtils()": -0.0473677135332935,
        "org.apache.commons.lang3.math$NumberUtils#createBigDecimal(java.lang.String)": -0.1233173039157255,
        "org.apache.commons.lang3.math$NumberUtils#createBigInteger(java.lang.String)": -0.09884220324728488,
        "org.apache.commons.lang3.math$NumberUtils#createDouble(java.lang.String)": -0.1233173039157256,
        "org.apache.commons.lang3.math$NumberUtils#createFloat(java.lang.String)": 0.3508962584573695,
        "org.apache.commons.lang3.math$NumberUtils#createInteger(java.lang.String)": -0.09884220324728488,
        "org.apache.commons.lang3.math$NumberUtils#createLong(java.lang.String)": -0.11159285249671735,
        "org.apache.commons.lang3.math$NumberUtils#createNumber(java.lang.String)": 1.6754046280548072,
        "org.apache.commons.lang3.math$NumberUtils#isAllZeros(java.lang.String)": 0.3508962584573695,
        "org.apache.commons.lang3.math$NumberUtils#isDigits(java.lang.String)": -0.09884220324728506,
        "org.apache.commons.lang3.math$NumberUtils#isNumber(java.lang.String)": -0.04736771353329346,
        "org.apache.commons.lang3.math$NumberUtils#max(byte,byte,byte)": -0.0473677135332935,
        "org.apache.commons.lang3.math$NumberUtils#max(byte[])": -0.08464687824893795,
        "org.apache.commons.lang3.math$NumberUtils#max(double,double,double)": -0.06819090979189824,
        "org.apache.commons.lang3.math$NumberUtils#max(double[])": -0.09884220324728506,
        "org.apache.commons.lang3.math$NumberUtils#max(float,float,float)": -0.06819090979189824,
        "org.apache.commons.lang3.math$NumberUtils#max(float[])": -0.09884220324728506,
        "org.apache.commons.lang3.math$NumberUtils#max(int,int,int)": -0.0473677135332935,
        "org.apache.commons.lang3.math$NumberUtils#max(int[])": -0.08464687824893795,
        "org.apache.commons.lang3.math$NumberUtils#max(long,long,long)": -0.0473677135332935,
        "org.apache.commons.lang3.math$NumberUtils#max(long[])": -0.08464687824893795,
        "org.apache.commons.lang3.math$NumberUtils#max(short,short,short)": -0.0473677135332935,
        "org.apache.commons.lang3.math$NumberUtils#max(short[])": -0.08464687824893795,
        "org.apache.commons.lang3.math$NumberUtils#min(byte,byte,byte)": -0.0473677135332935,
        "org.apache.commons.lang3.math$NumberUtils#min(byte[])": -0.08464687824893795,
        "org.apache.commons.lang3.math$NumberUtils#min(double,double,double)": -0.06819090979189824,
        "org.apache.commons.lang3.math$NumberUtils#min(double[])": -0.09884220324728506,
        "org.apache.commons.lang3.math$NumberUtils#min(float,float,float)": -0.06819090979189824,
        "org.apache.commons.lang3.math$NumberUtils#min(float[])": -0.08464687824893795,
        "org.apache.commons.lang3.math$NumberUtils#min(int,int,int)": -0.0473677135332935,
        "org.apache.commons.lang3.math$NumberUtils#min(int[])": -0.08464687824893795,
        "org.apache.commons.lang3.math$NumberUtils#min(long,long,long)": -0.0473677135332935,
        "org.apache.commons.lang3.math$NumberUtils#min(long[])": -0.08464687824893795,
        "org.apache.commons.lang3.math$NumberUtils#min(short,short,short)": -0.0473677135332935,
        "org.apache.commons.lang3.math$NumberUtils#min(short[])": -0.08464687824893795,
        "org.apache.commons.lang3.math$NumberUtils#toByte(java.lang.String)": -0.04736771353329346,
        "org.apache.commons.lang3.math$NumberUtils#toByte(java.lang.String,byte)": -0.06819090979189824,
        "org.apache.commons.lang3.math$NumberUtils#toDouble(java.lang.String)": -0.04736771353329346,
        "org.apache.commons.lang3.math$NumberUtils#toDouble(java.lang.String,double)": -0.06819090979189824,
        "org.apache.commons.lang3.math$NumberUtils#toFloat(java.lang.String)": -0.04736771353329346,
        "org.apache.commons.lang3.math$NumberUtils#toFloat(java.lang.String,float)": -0.06819090979189824,
        "org.apache.commons.lang3.math$NumberUtils#toInt(java.lang.String)": -0.04736771353329346,
        "org.apache.commons.lang3.math$NumberUtils#toInt(java.lang.String,int)": -0.06819090979189824,
        "org.apache.commons.lang3.math$NumberUtils#toLong(java.lang.String)": -0.04736771353329346,
        "org.apache.commons.lang3.math$NumberUtils#toLong(java.lang.String,long)": -0.06819090979189824,
        "org.apache.commons.lang3.math$NumberUtils#toShort(java.lang.String)": -0.04736771353329346,
        "org.apache.commons.lang3.math$NumberUtils#toShort(java.lang.String,short)": -0.06819090979189824,
        "org.apache.commons.lang3.math$NumberUtils#validateArray(java.lang.Object)": -0.3516116402329972
    },
    "Lang-30": {},
    "Lang-31": {},
    "Lang-32": {},
    "Lang-33": {},
    "Lang-34": {},
    "Lang-35": {},
    "Lang-36": {},
    "Lang-37": {},
    "Lang-38": {},
    "Lang-39": {},
    "Lang-4": {
        "org.apache.commons.lang3.text.translate$AggregateTranslator#AggregateTranslator(org.apache.commons.lang3.text.translate.CharSequenceTranslator[])": -1.4709350499768976,
        "org.apache.commons.lang3.text.translate$AggregateTranslator#translate(java.lang.CharSequence,int,java.io.Writer)": -1.2840034913305418,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#CharSequenceTranslator()": -1.525786437626905,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#hex(int)": -0.5579529266996419,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#translate(java.lang.CharSequence)": -1.8625534983365015,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#translate(java.lang.CharSequence,java.io.Writer)": -1.931553875463849,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#with(org.apache.commons.lang3.text.translate.CharSequenceTranslator[])": -1.470935049976898,
        "org.apache.commons.lang3.text.translate$LookupTranslator#LookupTranslator(java.lang.CharSequence[][])": 0.3124589943370478,
        "org.apache.commons.lang3.text.translate$LookupTranslator#translate(java.lang.CharSequence,int,java.io.Writer)": -0.8477466172531324
    },
    "Lang-40": {},
    "Lang-5": {
        "org.apache.commons.lang3$LocaleUtils#<clinit>()": -1.525786437626905,
        "org.apache.commons.lang3$LocaleUtils#LocaleUtils()": -0.3720084679281461,
        "org.apache.commons.lang3$LocaleUtils#availableLocaleList()": -0.18000000000000005,
        "org.apache.commons.lang3$LocaleUtils#availableLocaleSet()": -0.5749149571305296,
        "org.apache.commons.lang3$LocaleUtils#countriesByLanguage(java.lang.String)": -0.3720084679281462,
        "org.apache.commons.lang3$LocaleUtils#isAvailableLocale(java.util.Locale)": -0.18000000000000005,
        "org.apache.commons.lang3$LocaleUtils#languagesByCountry(java.lang.String)": -0.3720084679281462,
        "org.apache.commons.lang3$LocaleUtils#localeLookupList(java.util.Locale)": -0.5749149571305296,
        "org.apache.commons.lang3$LocaleUtils#localeLookupList(java.util.Locale,java.util.Locale)": -0.5749149571305296,
        "org.apache.commons.lang3$LocaleUtils#toLocale(java.lang.String)": -0.4364700401498639,
        "org.apache.commons.lang3$LocaleUtils$SyncAvoid#<clinit>()": -1.525786437626905,
        "org.apache.commons.lang3$LocaleUtils$SyncAvoid#LocaleUtils$SyncAvoid()": 0.0
    },
    "Lang-6": {
        "org.apache.commons.lang3$ArrayUtils#<clinit>()": -0.7633065827690876,
        "org.apache.commons.lang3$ArrayUtils#ArrayUtils()": -0.03771822957360027,
        "org.apache.commons.lang3$ArrayUtils#add(boolean[],boolean)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#add(boolean[],int,boolean)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#add(byte[],byte)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#add(byte[],int,byte)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#add(char[],char)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#add(char[],int,char)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#add(double[],double)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#add(double[],int,double)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#add(float[],float)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#add(float[],int,float)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#add(int[],int)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#add(int[],int,int)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#add(java.lang.Object,int,java.lang.Object,java.lang.Class)": -0.03771822957360027,
        "org.apache.commons.lang3$ArrayUtils#add(java.lang.Object[],int,java.lang.Object)": -0.05411750788801443,
        "org.apache.commons.lang3$ArrayUtils#add(java.lang.Object[],java.lang.Object)": -0.09709307904881505,
        "org.apache.commons.lang3$ArrayUtils#add(long[],int,long)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#add(long[],long)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#add(short[],int,short)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#add(short[],short)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#addAll(boolean[],boolean[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#addAll(byte[],byte[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#addAll(char[],char[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#addAll(double[],double[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#addAll(float[],float[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#addAll(int[],int[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#addAll(java.lang.Object[],java.lang.Object[])": -0.078085465769717,
        "org.apache.commons.lang3$ArrayUtils#addAll(long[],long[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#addAll(short[],short[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#clone(boolean[])": -0.078085465769717,
        "org.apache.commons.lang3$ArrayUtils#clone(byte[])": -0.078085465769717,
        "org.apache.commons.lang3$ArrayUtils#clone(char[])": -0.16081984538935604,
        "org.apache.commons.lang3$ArrayUtils#clone(double[])": -0.078085465769717,
        "org.apache.commons.lang3$ArrayUtils#clone(float[])": -0.078085465769717,
        "org.apache.commons.lang3$ArrayUtils#clone(int[])": -0.3196567460880493,
        "org.apache.commons.lang3$ArrayUtils#clone(java.lang.Object[])": 1.590336409338534,
        "org.apache.commons.lang3$ArrayUtils#clone(long[])": -0.09709307904881505,
        "org.apache.commons.lang3$ArrayUtils#clone(short[])": -0.078085465769717,
        "org.apache.commons.lang3$ArrayUtils#contains(boolean[],boolean)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#contains(byte[],byte)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#contains(char[],char)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#contains(double[],double)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#contains(double[],double,double)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#contains(float[],float)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#contains(int[],int)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#contains(java.lang.Object[],java.lang.Object)": -0.20500175581869393,
        "org.apache.commons.lang3$ArrayUtils#contains(long[],long)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#contains(short[],short)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#copyArrayGrow1(java.lang.Object,java.lang.Class)": -0.14843798919043194,
        "org.apache.commons.lang3$ArrayUtils#getLength(java.lang.Object)": -0.4179354015684906,
        "org.apache.commons.lang3$ArrayUtils#hashCode(java.lang.Object)": -0.03771822957360027,
        "org.apache.commons.lang3$ArrayUtils#indexOf(boolean[],boolean)": -0.06700929289690487,
        "org.apache.commons.lang3$ArrayUtils#indexOf(boolean[],boolean,int)": -0.08800136243340734,
        "org.apache.commons.lang3$ArrayUtils#indexOf(byte[],byte)": -0.06700929289690487,
        "org.apache.commons.lang3$ArrayUtils#indexOf(byte[],byte,int)": -0.08800136243340734,
        "org.apache.commons.lang3$ArrayUtils#indexOf(char[],char)": -0.06700929289690487,
        "org.apache.commons.lang3$ArrayUtils#indexOf(char[],char,int)": -0.08800136243340734,
        "org.apache.commons.lang3$ArrayUtils#indexOf(double[],double)": -0.06700929289690487,
        "org.apache.commons.lang3$ArrayUtils#indexOf(double[],double,double)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#indexOf(double[],double,int)": -0.08800136243340734,
        "org.apache.commons.lang3$ArrayUtils#indexOf(double[],double,int,double)": -0.06700929289690487,
        "org.apache.commons.lang3$ArrayUtils#indexOf(float[],float)": -0.06700929289690487,
        "org.apache.commons.lang3$ArrayUtils#indexOf(float[],float,int)": -0.08800136243340734,
        "org.apache.commons.lang3$ArrayUtils#indexOf(int[],int)": -0.06700929289690487,
        "org.apache.commons.lang3$ArrayUtils#indexOf(int[],int,int)": -0.08800136243340734,
        "org.apache.commons.lang3$ArrayUtils#indexOf(java.lang.Object[],java.lang.Object)": -0.21508121409316672,
        "org.apache.commons.lang3$ArrayUtils#indexOf(java.lang.Object[],java.lang.Object,int)": -0.2248689382933636,
        "org.apache.commons.lang3$ArrayUtils#indexOf(long[],long)": -0.06700929289690487,
        "org.apache.commons.lang3$ArrayUtils#indexOf(long[],long,int)": -0.08800136243340734,
        "org.apache.commons.lang3$ArrayUtils#indexOf(short[],short)": -0.06700929289690487,
        "org.apache.commons.lang3$ArrayUtils#indexOf(short[],short,int)": -0.08800136243340734,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(boolean[])": -0.11353302902106197,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(byte[])": -0.05411750788801443,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(char[])": -0.1945915749551081,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(double[])": -0.1484379891904319,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(float[])": -0.11353302902106197,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(int[])": -0.05411750788801443,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(java.lang.Object[])": -0.078085465769717,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(long[])": -0.05411750788801443,
        "org.apache.commons.lang3$ArrayUtils#isEmpty(short[])": -0.05411750788801443,
        "org.apache.commons.lang3$ArrayUtils#isEquals(java.lang.Object,java.lang.Object)": -0.13527387115893275,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(boolean[])": -0.03771822957360027,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(byte[])": -0.03771822957360027,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(char[])": -0.03771822957360027,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(double[])": -0.03771822957360027,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(float[])": -0.03771822957360027,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(int[])": -0.3117544725053,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(java.lang.Object[])": -0.054117507888014504,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(long[])": -0.03771822957360027,
        "org.apache.commons.lang3$ArrayUtils#isNotEmpty(short[])": -0.03771822957360027,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(boolean[],boolean[])": -0.03771822957360027,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(byte[],byte[])": -0.03771822957360027,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(char[],char[])": -0.03771822957360027,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(double[],double[])": -0.03771822957360027,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(float[],float[])": -0.03771822957360027,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(int[],int[])": -0.03771822957360027,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(java.lang.Object[],java.lang.Object[])": -0.16676695802950015,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(long[],long[])": -0.03771822957360027,
        "org.apache.commons.lang3$ArrayUtils#isSameLength(short[],short[])": -0.03771822957360027,
        "org.apache.commons.lang3$ArrayUtils#isSameType(java.lang.Object,java.lang.Object)": -0.03771822957360027,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(boolean[],boolean)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(boolean[],boolean,int)": -0.05411750788801443,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(byte[],byte)": -0.05411750788801443,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(byte[],byte,int)": -0.05411750788801443,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(char[],char)": -0.05411750788801443,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(char[],char,int)": -0.05411750788801443,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(double[],double)": -0.05411750788801443,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(double[],double,double)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(double[],double,int)": -0.05411750788801443,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(double[],double,int,double)": -0.05411750788801443,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(float[],float)": -0.05411750788801443,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(float[],float,int)": -0.05411750788801443,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(int[],int)": -0.05411750788801443,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(int[],int,int)": -0.05411750788801443,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(java.lang.Object[],java.lang.Object)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(java.lang.Object[],java.lang.Object,int)": -0.05411750788801443,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(long[],long)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(long[],long,int)": -0.05411750788801443,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(short[],short)": -0.05411750788801443,
        "org.apache.commons.lang3$ArrayUtils#lastIndexOf(short[],short,int)": -0.05411750788801443,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(boolean[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(byte[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(char[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(double[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(float[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(int[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Boolean[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Byte[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Character[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Double[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Float[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Integer[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Long[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Object[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.Short[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(java.lang.String[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(long[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#nullToEmpty(short[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#remove(boolean[],int)": -0.05411750788801443,
        "org.apache.commons.lang3$ArrayUtils#remove(byte[],int)": -0.05411750788801443,
        "org.apache.commons.lang3$ArrayUtils#remove(char[],int)": -0.05411750788801443,
        "org.apache.commons.lang3$ArrayUtils#remove(double[],int)": -0.05411750788801443,
        "org.apache.commons.lang3$ArrayUtils#remove(float[],int)": -0.05411750788801443,
        "org.apache.commons.lang3$ArrayUtils#remove(int[],int)": -0.05411750788801443,
        "org.apache.commons.lang3$ArrayUtils#remove(java.lang.Object,int)": -0.18924775797939744,
        "org.apache.commons.lang3$ArrayUtils#remove(java.lang.Object[],int)": -0.078085465769717,
        "org.apache.commons.lang3$ArrayUtils#remove(long[],int)": -0.05411750788801443,
        "org.apache.commons.lang3$ArrayUtils#remove(short[],int)": -0.05411750788801443,
        "org.apache.commons.lang3$ArrayUtils#removeAll(boolean[],int[])": -0.08800136243340734,
        "org.apache.commons.lang3$ArrayUtils#removeAll(byte[],int[])": -0.08800136243340734,
        "org.apache.commons.lang3$ArrayUtils#removeAll(char[],int[])": -0.08800136243340734,
        "org.apache.commons.lang3$ArrayUtils#removeAll(double[],int[])": -0.08800136243340734,
        "org.apache.commons.lang3$ArrayUtils#removeAll(float[],int[])": -0.08800136243340734,
        "org.apache.commons.lang3$ArrayUtils#removeAll(int[],int[])": -0.08800136243340734,
        "org.apache.commons.lang3$ArrayUtils#removeAll(java.lang.Object,int[])": -0.30776141314461614,
        "org.apache.commons.lang3$ArrayUtils#removeAll(java.lang.Object,java.util.BitSet)": -0.12833210064227,
        "org.apache.commons.lang3$ArrayUtils#removeAll(java.lang.Object[],int[])": -0.08800136243340734,
        "org.apache.commons.lang3$ArrayUtils#removeAll(long[],int[])": -0.08800136243340734,
        "org.apache.commons.lang3$ArrayUtils#removeAll(short[],int[])": -0.08800136243340734,
        "org.apache.commons.lang3$ArrayUtils#removeElement(boolean[],boolean)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#removeElement(byte[],byte)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#removeElement(char[],char)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#removeElement(double[],double)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#removeElement(float[],float)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#removeElement(int[],int)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#removeElement(java.lang.Object[],java.lang.Object)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#removeElement(long[],long)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#removeElement(short[],short)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#removeElements(boolean[],boolean[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#removeElements(byte[],byte[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#removeElements(char[],char[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#removeElements(double[],double[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#removeElements(float[],float[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#removeElements(int[],int[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#removeElements(java.lang.Object[],java.lang.Object[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#removeElements(long[],long[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#removeElements(short[],short[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#reverse(boolean[])": -0.03771822957360027,
        "org.apache.commons.lang3$ArrayUtils#reverse(byte[])": -0.03771822957360027,
        "org.apache.commons.lang3$ArrayUtils#reverse(char[])": -0.03771822957360027,
        "org.apache.commons.lang3$ArrayUtils#reverse(double[])": -0.03771822957360027,
        "org.apache.commons.lang3$ArrayUtils#reverse(float[])": -0.03771822957360027,
        "org.apache.commons.lang3$ArrayUtils#reverse(int[])": -0.03771822957360027,
        "org.apache.commons.lang3$ArrayUtils#reverse(java.lang.Object[])": -0.05411750788801443,
        "org.apache.commons.lang3$ArrayUtils#reverse(long[])": -0.08800136243340728,
        "org.apache.commons.lang3$ArrayUtils#reverse(short[])": -0.03771822957360027,
        "org.apache.commons.lang3$ArrayUtils#subarray(boolean[],int,int)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#subarray(byte[],int,int)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#subarray(char[],int,int)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#subarray(double[],int,int)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#subarray(float[],int,int)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#subarray(int[],int,int)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#subarray(java.lang.Object[],int,int)": -0.03771822957360027,
        "org.apache.commons.lang3$ArrayUtils#subarray(long[],int,int)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#subarray(short[],int,int)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#toArray(java.lang.Object[])": -0.09709307904881515,
        "org.apache.commons.lang3$ArrayUtils#toMap(java.lang.Object[])": -0.03771822957360027,
        "org.apache.commons.lang3$ArrayUtils#toObject(boolean[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#toObject(byte[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#toObject(char[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#toObject(double[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#toObject(float[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#toObject(int[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#toObject(long[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#toObject(short[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Boolean[])": -0.12833210064227,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Boolean[],boolean)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Byte[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Byte[],byte)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Character[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Character[],char)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Double[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Double[],double)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Float[])": -0.05411750788801443,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Float[],float)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Integer[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Integer[],int)": -0.05411750788801443,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Long[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Long[],long)": -0.05411750788801443,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Short[])": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#toPrimitive(java.lang.Short[],short)": -0.03771822957360023,
        "org.apache.commons.lang3$ArrayUtils#toString(java.lang.Object)": -0.12110170858835036,
        "org.apache.commons.lang3$ArrayUtils#toString(java.lang.Object,java.lang.String)": -0.12110170858835034,
        "org.apache.commons.lang3$StringEscapeUtils#<clinit>()": 1.6099198021672705,
        "org.apache.commons.lang3$StringEscapeUtils#StringEscapeUtils()": -0.03771822957360027,
        "org.apache.commons.lang3$StringEscapeUtils#escapeCsv(java.lang.String)": 1.7822817704263998,
        "org.apache.commons.lang3$StringEscapeUtils#escapeEcmaScript(java.lang.String)": -0.05411750788801443,
        "org.apache.commons.lang3$StringEscapeUtils#escapeHtml3(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringEscapeUtils#escapeHtml4(java.lang.String)": -0.08800136243340734,
        "org.apache.commons.lang3$StringEscapeUtils#escapeJava(java.lang.String)": -0.06700929289690487,
        "org.apache.commons.lang3$StringEscapeUtils#escapeXml(java.lang.String)": -0.05411750788801443,
        "org.apache.commons.lang3$StringEscapeUtils#unescapeCsv(java.lang.String)": -0.03771822957360023,
        "org.apache.commons.lang3$StringEscapeUtils#unescapeEcmaScript(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringEscapeUtils#unescapeHtml3(java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringEscapeUtils#unescapeHtml4(java.lang.String)": -0.11353302902106197,
        "org.apache.commons.lang3$StringEscapeUtils#unescapeJava(java.lang.String)": -0.03771822957360023,
        "org.apache.commons.lang3$StringEscapeUtils#unescapeXml(java.lang.String)": -0.06700929289690487,
        "org.apache.commons.lang3$StringEscapeUtils$CsvEscaper#<clinit>()": 0.26413336454036573,
        "org.apache.commons.lang3$StringEscapeUtils$CsvEscaper#StringEscapeUtils$CsvEscaper()": 1.6099198021672705,
        "org.apache.commons.lang3$StringEscapeUtils$CsvEscaper#translate(java.lang.CharSequence,int,java.io.Writer)": 1.7658824921119856,
        "org.apache.commons.lang3$StringEscapeUtils$CsvUnescaper#<clinit>()": 0.26413336454036573,
        "org.apache.commons.lang3$StringEscapeUtils$CsvUnescaper#StringEscapeUtils$CsvUnescaper()": 1.6099198021672705,
        "org.apache.commons.lang3$StringEscapeUtils$CsvUnescaper#translate(java.lang.CharSequence,int,java.io.Writer)": -0.05411750788801443,
        "org.apache.commons.lang3$StringUtils#<clinit>()": -0.783462287377055,
        "org.apache.commons.lang3$StringUtils#StringUtils()": -0.03771822957360027,
        "org.apache.commons.lang3$StringUtils#abbreviate(java.lang.String,int)": -0.05411750788801443,
        "org.apache.commons.lang3$StringUtils#abbreviate(java.lang.String,int,int)": -0.05411750788801443,
        "org.apache.commons.lang3$StringUtils#abbreviateMiddle(java.lang.String,java.lang.String,int)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#capitalize(java.lang.String)": -0.03771822957360027,
        "org.apache.commons.lang3$StringUtils#center(java.lang.String,int)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#center(java.lang.String,int,char)": -0.05411750788801443,
        "org.apache.commons.lang3$StringUtils#center(java.lang.String,int,java.lang.String)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#chomp(java.lang.String)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#chomp(java.lang.String,java.lang.String)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#chop(java.lang.String)": -0.03771822957360027,
        "org.apache.commons.lang3$StringUtils#contains(java.lang.CharSequence,int)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#contains(java.lang.CharSequence,java.lang.CharSequence)": -0.07808546576971698,
        "org.apache.commons.lang3$StringUtils#containsAny(java.lang.CharSequence,char[])": -0.11353302902106197,
        "org.apache.commons.lang3$StringUtils#containsAny(java.lang.CharSequence,java.lang.CharSequence)": -0.06700929289690487,
        "org.apache.commons.lang3$StringUtils#containsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": -0.054117507888014504,
        "org.apache.commons.lang3$StringUtils#containsNone(java.lang.CharSequence,char[])": 1.706466970978938,
        "org.apache.commons.lang3$StringUtils#containsNone(java.lang.CharSequence,java.lang.String)": -0.06700929289690487,
        "org.apache.commons.lang3$StringUtils#containsOnly(java.lang.CharSequence,char[])": -0.08800136243340734,
        "org.apache.commons.lang3$StringUtils#containsOnly(java.lang.CharSequence,java.lang.String)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#containsWhitespace(java.lang.CharSequence)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#countMatches(java.lang.CharSequence,java.lang.CharSequence)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#defaultIfBlank(java.lang.CharSequence,java.lang.CharSequence)": -0.078085465769717,
        "org.apache.commons.lang3$StringUtils#defaultIfEmpty(java.lang.CharSequence,java.lang.CharSequence)": -0.078085465769717,
        "org.apache.commons.lang3$StringUtils#defaultString(java.lang.String)": -0.06700929289690483,
        "org.apache.commons.lang3$StringUtils#defaultString(java.lang.String,java.lang.String)": -0.03771822957360027,
        "org.apache.commons.lang3$StringUtils#deleteWhitespace(java.lang.String)": -0.16081984538935604,
        "org.apache.commons.lang3$StringUtils#difference(java.lang.String,java.lang.String)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#endsWith(java.lang.CharSequence,java.lang.CharSequence)": -0.05411750788801443,
        "org.apache.commons.lang3$StringUtils#endsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)": -0.07808546576971698,
        "org.apache.commons.lang3$StringUtils#endsWithAny(java.lang.CharSequence,java.lang.CharSequence[])": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#endsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": -0.05411750788801443,
        "org.apache.commons.lang3$StringUtils#equals(java.lang.CharSequence,java.lang.CharSequence)": -0.1725717337808419,
        "org.apache.commons.lang3$StringUtils#equalsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": -0.03771822957360027,
        "org.apache.commons.lang3$StringUtils#getCommonPrefix(java.lang.String[])": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence)": -0.03771822957360027,
        "org.apache.commons.lang3$StringUtils#getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)": -0.03771822957360027,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,int)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,int,int)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,java.lang.CharSequence)": -0.03771822957360027,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,java.lang.CharSequence,int)": -0.03771822957360027,
        "org.apache.commons.lang3$StringUtils#indexOfAny(java.lang.CharSequence,char[])": -0.078085465769717,
        "org.apache.commons.lang3$StringUtils#indexOfAny(java.lang.CharSequence,java.lang.CharSequence[])": -0.03771822957360027,
        "org.apache.commons.lang3$StringUtils#indexOfAny(java.lang.CharSequence,java.lang.String)": -0.05411750788801443,
        "org.apache.commons.lang3$StringUtils#indexOfAnyBut(java.lang.CharSequence,char[])": -0.10556027215192498,
        "org.apache.commons.lang3$StringUtils#indexOfAnyBut(java.lang.CharSequence,java.lang.CharSequence)": -0.05411750788801443,
        "org.apache.commons.lang3$StringUtils#indexOfDifference(java.lang.CharSequence,java.lang.CharSequence)": -0.054117507888014504,
        "org.apache.commons.lang3$StringUtils#indexOfDifference(java.lang.CharSequence[])": -0.05411750788801443,
        "org.apache.commons.lang3$StringUtils#indexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#indexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,int)": -0.054117507888014504,
        "org.apache.commons.lang3$StringUtils#isAllLowerCase(java.lang.CharSequence)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#isAllUpperCase(java.lang.CharSequence)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#isAlpha(java.lang.CharSequence)": -0.03771822957360027,
        "org.apache.commons.lang3$StringUtils#isAlphaSpace(java.lang.CharSequence)": -0.03771822957360027,
        "org.apache.commons.lang3$StringUtils#isAlphanumeric(java.lang.CharSequence)": -0.03771822957360027,
        "org.apache.commons.lang3$StringUtils#isAlphanumericSpace(java.lang.CharSequence)": -0.03771822957360027,
        "org.apache.commons.lang3$StringUtils#isAsciiPrintable(java.lang.CharSequence)": -0.03771822957360027,
        "org.apache.commons.lang3$StringUtils#isBlank(java.lang.CharSequence)": -0.2150812140931666,
        "org.apache.commons.lang3$StringUtils#isEmpty(java.lang.CharSequence)": -0.8841878623577077,
        "org.apache.commons.lang3$StringUtils#isNotBlank(java.lang.CharSequence)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#isNotEmpty(java.lang.CharSequence)": -0.12110170858835036,
        "org.apache.commons.lang3$StringUtils#isNumeric(java.lang.CharSequence)": -0.03771822957360027,
        "org.apache.commons.lang3$StringUtils#isNumericSpace(java.lang.CharSequence)": -0.03771822957360027,
        "org.apache.commons.lang3$StringUtils#isWhitespace(java.lang.CharSequence)": -0.03771822957360027,
        "org.apache.commons.lang3$StringUtils#join(byte[],char)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#join(byte[],char,int,int)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#join(char[],char)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#join(char[],char,int,int)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#join(double[],char)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#join(double[],char,int,int)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#join(float[],char)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#join(float[],char,int,int)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#join(int[],char)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#join(int[],char,int,int)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Iterable,char)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Iterable,java.lang.String)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[])": -0.06700929289690487,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],char)": -0.05411750788801443,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],char,int,int)": -0.05411750788801443,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],java.lang.String)": -0.078085465769717,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],java.lang.String,int,int)": -0.078085465769717,
        "org.apache.commons.lang3$StringUtils#join(java.util.Iterator,char)": -0.054117507888014504,
        "org.apache.commons.lang3$StringUtils#join(java.util.Iterator,java.lang.String)": -0.054117507888014504,
        "org.apache.commons.lang3$StringUtils#join(long[],char)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#join(long[],char,int,int)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#join(short[],char)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#join(short[],char,int,int)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,int)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,int,int)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,java.lang.CharSequence)": -0.03771822957360027,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)": -0.03771822957360027,
        "org.apache.commons.lang3$StringUtils#lastIndexOfAny(java.lang.CharSequence,java.lang.CharSequence[])": -0.03771822957360027,
        "org.apache.commons.lang3$StringUtils#lastIndexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#lastIndexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,int)": -0.054117507888014504,
        "org.apache.commons.lang3$StringUtils#lastOrdinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#left(java.lang.String,int)": -0.03771822957360027,
        "org.apache.commons.lang3$StringUtils#leftPad(java.lang.String,int)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#leftPad(java.lang.String,int,char)": -0.18380213787033808,
        "org.apache.commons.lang3$StringUtils#leftPad(java.lang.String,int,java.lang.String)": -0.06700929289690487,
        "org.apache.commons.lang3$StringUtils#length(java.lang.CharSequence)": -0.07808546576971698,
        "org.apache.commons.lang3$StringUtils#lowerCase(java.lang.String)": -0.03771822957360027,
        "org.apache.commons.lang3$StringUtils#lowerCase(java.lang.String,java.util.Locale)": -0.03771822957360027,
        "org.apache.commons.lang3$StringUtils#mid(java.lang.String,int,int)": -0.03771822957360027,
        "org.apache.commons.lang3$StringUtils#normalizeSpace(java.lang.String)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#ordinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#ordinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int,boolean)": -0.054117507888014504,
        "org.apache.commons.lang3$StringUtils#overlay(java.lang.String,java.lang.String,int,int)": -0.03771822957360027,
        "org.apache.commons.lang3$StringUtils#remove(java.lang.String,char)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#remove(java.lang.String,java.lang.String)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#removeEnd(java.lang.String,java.lang.String)": -0.06700929289690487,
        "org.apache.commons.lang3$StringUtils#removeEndIgnoreCase(java.lang.String,java.lang.String)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#removePattern(java.lang.String,java.lang.String)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#removeStart(java.lang.String,java.lang.String)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#removeStartIgnoreCase(java.lang.String,java.lang.String)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#repeat(char,int)": -0.19459157495510815,
        "org.apache.commons.lang3$StringUtils#repeat(java.lang.String,int)": -0.078085465769717,
        "org.apache.commons.lang3$StringUtils#repeat(java.lang.String,java.lang.String,int)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#replace(java.lang.String,java.lang.String,java.lang.String)": -0.08800136243340734,
        "org.apache.commons.lang3$StringUtils#replace(java.lang.String,java.lang.String,java.lang.String,int)": -0.12833210064227,
        "org.apache.commons.lang3$StringUtils#replaceChars(java.lang.String,char,char)": -0.054117507888014504,
        "org.apache.commons.lang3$StringUtils#replaceChars(java.lang.String,java.lang.String,java.lang.String)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#replaceEach(java.lang.String,java.lang.String[],java.lang.String[])": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#replaceEach(java.lang.String,java.lang.String[],java.lang.String[],boolean,int)": -0.05411750788801443,
        "org.apache.commons.lang3$StringUtils#replaceEachRepeatedly(java.lang.String,java.lang.String[],java.lang.String[])": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#replaceOnce(java.lang.String,java.lang.String,java.lang.String)": -0.06700929289690487,
        "org.apache.commons.lang3$StringUtils#replacePattern(java.lang.String,java.lang.String,java.lang.String)": -0.054117507888014504,
        "org.apache.commons.lang3$StringUtils#reverse(java.lang.String)": -0.03771822957360027,
        "org.apache.commons.lang3$StringUtils#reverseDelimited(java.lang.String,char)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#right(java.lang.String,int)": -0.03771822957360027,
        "org.apache.commons.lang3$StringUtils#rightPad(java.lang.String,int)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#rightPad(java.lang.String,int,char)": -0.09709307904881505,
        "org.apache.commons.lang3$StringUtils#rightPad(java.lang.String,int,java.lang.String)": -0.06700929289690487,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String,char)": -0.05411750788801443,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String,java.lang.String)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String,java.lang.String,int)": -0.05411750788801443,
        "org.apache.commons.lang3$StringUtils#splitByCharacterType(java.lang.String)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#splitByCharacterType(java.lang.String,boolean)": -0.05411750788801443,
        "org.apache.commons.lang3$StringUtils#splitByCharacterTypeCamelCase(java.lang.String)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparator(java.lang.String,java.lang.String)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparator(java.lang.String,java.lang.String,int)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String,int)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparatorWorker(java.lang.String,java.lang.String,int,boolean)": -0.06700929289690487,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String,char)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String,java.lang.String)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String,java.lang.String,int)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#splitWorker(java.lang.String,char,boolean)": -0.06700929289690487,
        "org.apache.commons.lang3$StringUtils#splitWorker(java.lang.String,java.lang.String,int,boolean)": -0.10556027215192498,
        "org.apache.commons.lang3$StringUtils#startsWith(java.lang.CharSequence,java.lang.CharSequence)": -0.05411750788801443,
        "org.apache.commons.lang3$StringUtils#startsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)": -0.07808546576971698,
        "org.apache.commons.lang3$StringUtils#startsWithAny(java.lang.CharSequence,java.lang.CharSequence[])": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#startsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": -0.05411750788801443,
        "org.apache.commons.lang3$StringUtils#strip(java.lang.String)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#strip(java.lang.String,java.lang.String)": -0.08800136243340734,
        "org.apache.commons.lang3$StringUtils#stripAccents(java.lang.String)": -0.03771822957360027,
        "org.apache.commons.lang3$StringUtils#stripAll(java.lang.String[])": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#stripAll(java.lang.String[],java.lang.String)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#stripEnd(java.lang.String,java.lang.String)": -0.10556027215192487,
        "org.apache.commons.lang3$StringUtils#stripStart(java.lang.String,java.lang.String)": -0.09709307904881515,
        "org.apache.commons.lang3$StringUtils#stripToEmpty(java.lang.String)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#stripToNull(java.lang.String)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#substring(java.lang.String,int)": -0.03771822957360027,
        "org.apache.commons.lang3$StringUtils#substring(java.lang.String,int,int)": -0.03771822957360027,
        "org.apache.commons.lang3$StringUtils#substringAfter(java.lang.String,java.lang.String)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#substringAfterLast(java.lang.String,java.lang.String)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#substringBefore(java.lang.String,java.lang.String)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#substringBeforeLast(java.lang.String,java.lang.String)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#substringBetween(java.lang.String,java.lang.String)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#substringBetween(java.lang.String,java.lang.String,java.lang.String)": -0.054117507888014504,
        "org.apache.commons.lang3$StringUtils#substringsBetween(java.lang.String,java.lang.String,java.lang.String)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#swapCase(java.lang.String)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#toString(byte[],java.lang.String)": -0.03771822957360027,
        "org.apache.commons.lang3$StringUtils#trim(java.lang.String)": -0.06700929289690483,
        "org.apache.commons.lang3$StringUtils#trimToEmpty(java.lang.String)": -0.03771822957360027,
        "org.apache.commons.lang3$StringUtils#trimToNull(java.lang.String)": -0.03771822957360023,
        "org.apache.commons.lang3$StringUtils#uncapitalize(java.lang.String)": -0.03771822957360027,
        "org.apache.commons.lang3$StringUtils#upperCase(java.lang.String)": -0.03771822957360027,
        "org.apache.commons.lang3$StringUtils#upperCase(java.lang.String,java.util.Locale)": -0.03771822957360027,
        "org.apache.commons.lang3.text.translate$AggregateTranslator#AggregateTranslator(org.apache.commons.lang3.text.translate.CharSequenceTranslator[])": 1.6099198021672705,
        "org.apache.commons.lang3.text.translate$AggregateTranslator#translate(java.lang.CharSequence,int,java.io.Writer)": -0.18380213787033808,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#CharSequenceTranslator()": 0.19527918557143764,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#hex(int)": -0.09709307904881515,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#translate(java.lang.CharSequence)": 1.5583341959336576,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#translate(java.lang.CharSequence,java.io.Writer)": 1.5496189830369398,
        "org.apache.commons.lang3.text.translate$CharSequenceTranslator#with(org.apache.commons.lang3.text.translate.CharSequenceTranslator[])": 0.26413336454036573,
        "org.apache.commons.lang3.text.translate$CodePointTranslator#CodePointTranslator()": 1.5763087052369347,
        "org.apache.commons.lang3.text.translate$CodePointTranslator#translate(java.lang.CharSequence,int,java.io.Writer)": -0.1484379891904319,
        "org.apache.commons.lang3.text.translate$EntityArrays#<clinit>()": 1.5951310617066363,
        "org.apache.commons.lang3.text.translate$EntityArrays#APOS_ESCAPE()": 1.6099198021672705,
        "org.apache.commons.lang3.text.translate$EntityArrays#APOS_UNESCAPE()": 1.6099198021672705,
        "org.apache.commons.lang3.text.translate$EntityArrays#BASIC_ESCAPE()": 1.6099198021672705,
        "org.apache.commons.lang3.text.translate$EntityArrays#BASIC_UNESCAPE()": 1.6099198021672705,
        "org.apache.commons.lang3.text.translate$EntityArrays#EntityArrays()": -0.03771822957360027,
        "org.apache.commons.lang3.text.translate$EntityArrays#HTML40_EXTENDED_ESCAPE()": 1.6049187859068332,
        "org.apache.commons.lang3.text.translate$EntityArrays#HTML40_EXTENDED_UNESCAPE()": 1.6099198021672705,
        "org.apache.commons.lang3.text.translate$EntityArrays#ISO8859_1_ESCAPE()": 1.6049187859068332,
        "org.apache.commons.lang3.text.translate$EntityArrays#ISO8859_1_UNESCAPE()": 1.6099198021672705,
        "org.apache.commons.lang3.text.translate$EntityArrays#JAVA_CTRL_CHARS_ESCAPE()": 1.6099198021672705,
        "org.apache.commons.lang3.text.translate$EntityArrays#JAVA_CTRL_CHARS_UNESCAPE()": 1.6099198021672705,
        "org.apache.commons.lang3.text.translate$EntityArrays#invert(java.lang.String[][])": 1.5951310617066363,
        "org.apache.commons.lang3.text.translate$LookupTranslator#LookupTranslator(java.lang.CharSequence[][])": 1.6049187859068332,
        "org.apache.commons.lang3.text.translate$LookupTranslator#translate(java.lang.CharSequence,int,java.io.Writer)": -0.1892477579793974,
        "org.apache.commons.lang3.text.translate$NumericEntityUnescaper#NumericEntityUnescaper(org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION[])": 1.5951310617066363,
        "org.apache.commons.lang3.text.translate$NumericEntityUnescaper#isSet(org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION)": -0.054117507888014504,
        "org.apache.commons.lang3.text.translate$NumericEntityUnescaper#translate(java.lang.CharSequence,int,java.io.Writer)": -0.1419656056613594,
        "org.apache.commons.lang3.text.translate$NumericEntityUnescaper$OPTION#<clinit>()": 1.5951310617066363,
        "org.apache.commons.lang3.text.translate$NumericEntityUnescaper$OPTION#NumericEntityUnescaper$OPTION(java.lang.String,int)": 0.24934462407973135,
        "org.apache.commons.lang3.text.translate$OctalUnescaper#<clinit>()": 0.2591323482799285,
        "org.apache.commons.lang3.text.translate$OctalUnescaper#OctalUnescaper()": 1.6049187859068332,
        "org.apache.commons.lang3.text.translate$OctalUnescaper#translate(java.lang.CharSequence,int,java.io.Writer)": -0.05411750788801443,
        "org.apache.commons.lang3.text.translate$UnicodeEscaper#UnicodeEscaper()": 0.0,
        "org.apache.commons.lang3.text.translate$UnicodeEscaper#UnicodeEscaper(int,int,boolean)": 1.5951310617066363,
        "org.apache.commons.lang3.text.translate$UnicodeEscaper#above(int)": -0.03771822957360023,
        "org.apache.commons.lang3.text.translate$UnicodeEscaper#below(int)": -0.03771822957360023,
        "org.apache.commons.lang3.text.translate$UnicodeEscaper#between(int,int)": -0.03771822957360023,
        "org.apache.commons.lang3.text.translate$UnicodeEscaper#outsideOf(int,int)": 1.5999905935232488,
        "org.apache.commons.lang3.text.translate$UnicodeEscaper#translate(int,java.io.Writer)": -0.11353302902106197,
        "org.apache.commons.lang3.text.translate$UnicodeUnescaper#UnicodeUnescaper()": 1.5951310617066363,
        "org.apache.commons.lang3.text.translate$UnicodeUnescaper#translate(java.lang.CharSequence,int,java.io.Writer)": -0.07808546576971698
    },
    "Lang-7": {
        "org.apache.commons.lang3$JavaVersion#<clinit>()": 0.8469339982729,
        "org.apache.commons.lang3$JavaVersion#JavaVersion(java.lang.String,int,float,java.lang.String)": -0.4988524393540049,
        "org.apache.commons.lang3$JavaVersion#atLeast(org.apache.commons.lang3.JavaVersion)": 0.24434588289835169,
        "org.apache.commons.lang3$JavaVersion#get(java.lang.String)": 0.8521534235920684,
        "org.apache.commons.lang3$JavaVersion#getJavaVersion(java.lang.String)": -0.03922501872949415,
        "org.apache.commons.lang3$JavaVersion#toString()": -0.03922501872949402,
        "org.apache.commons.lang3$StringUtils#<clinit>()": -0.8483946216495702,
        "org.apache.commons.lang3$StringUtils#StringUtils()": -0.03922501872949402,
        "org.apache.commons.lang3$StringUtils#abbreviate(java.lang.String,int)": -0.056309391239627735,
        "org.apache.commons.lang3$StringUtils#abbreviate(java.lang.String,int,int)": -0.056309391239627735,
        "org.apache.commons.lang3$StringUtils#abbreviateMiddle(java.lang.String,java.lang.String,int)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#capitalize(java.lang.String)": -0.03922501872949402,
        "org.apache.commons.lang3$StringUtils#center(java.lang.String,int)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#center(java.lang.String,int,char)": -0.056309391239627735,
        "org.apache.commons.lang3$StringUtils#center(java.lang.String,int,java.lang.String)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#chomp(java.lang.String)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#chomp(java.lang.String,java.lang.String)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#chop(java.lang.String)": -0.03922501872949402,
        "org.apache.commons.lang3$StringUtils#contains(java.lang.CharSequence,int)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#contains(java.lang.CharSequence,java.lang.CharSequence)": -0.08130718031613116,
        "org.apache.commons.lang3$StringUtils#containsAny(java.lang.CharSequence,char[])": -0.11833306819354118,
        "org.apache.commons.lang3$StringUtils#containsAny(java.lang.CharSequence,java.lang.CharSequence)": -0.06975108135651199,
        "org.apache.commons.lang3$StringUtils#containsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": -0.05630939123962775,
        "org.apache.commons.lang3$StringUtils#containsNone(java.lang.CharSequence,char[])": -0.11833306819354118,
        "org.apache.commons.lang3$StringUtils#containsNone(java.lang.CharSequence,java.lang.String)": -0.06975108135651199,
        "org.apache.commons.lang3$StringUtils#containsOnly(java.lang.CharSequence,char[])": -0.0916582826157088,
        "org.apache.commons.lang3$StringUtils#containsOnly(java.lang.CharSequence,java.lang.String)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#containsWhitespace(java.lang.CharSequence)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#countMatches(java.lang.CharSequence,java.lang.CharSequence)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#defaultIfBlank(java.lang.CharSequence,java.lang.CharSequence)": -0.08130718031613116,
        "org.apache.commons.lang3$StringUtils#defaultIfEmpty(java.lang.CharSequence,java.lang.CharSequence)": -0.08130718031613116,
        "org.apache.commons.lang3$StringUtils#defaultString(java.lang.String)": -0.06975108135651187,
        "org.apache.commons.lang3$StringUtils#defaultString(java.lang.String,java.lang.String)": -0.03922501872949402,
        "org.apache.commons.lang3$StringUtils#deleteWhitespace(java.lang.String)": -0.16781358237085142,
        "org.apache.commons.lang3$StringUtils#difference(java.lang.String,java.lang.String)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#endsWith(java.lang.CharSequence,java.lang.CharSequence)": -0.056309391239627735,
        "org.apache.commons.lang3$StringUtils#endsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)": -0.08130718031613116,
        "org.apache.commons.lang3$StringUtils#endsWithAny(java.lang.CharSequence,java.lang.CharSequence[])": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#endsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": -0.056309391239627735,
        "org.apache.commons.lang3$StringUtils#equals(java.lang.CharSequence,java.lang.CharSequence)": -0.1801244587805102,
        "org.apache.commons.lang3$StringUtils#equalsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": -0.03922501872949402,
        "org.apache.commons.lang3$StringUtils#getCommonPrefix(java.lang.String[])": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence)": -0.03922501872949402,
        "org.apache.commons.lang3$StringUtils#getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)": -0.03922501872949402,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,int)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,int,int)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,java.lang.CharSequence)": -0.03922501872949402,
        "org.apache.commons.lang3$StringUtils#indexOf(java.lang.CharSequence,java.lang.CharSequence,int)": -0.03922501872949402,
        "org.apache.commons.lang3$StringUtils#indexOfAny(java.lang.CharSequence,char[])": -0.08130718031613116,
        "org.apache.commons.lang3$StringUtils#indexOfAny(java.lang.CharSequence,java.lang.CharSequence[])": -0.03922501872949402,
        "org.apache.commons.lang3$StringUtils#indexOfAny(java.lang.CharSequence,java.lang.String)": -0.056309391239627735,
        "org.apache.commons.lang3$StringUtils#indexOfAnyBut(java.lang.CharSequence,char[])": -0.11,
        "org.apache.commons.lang3$StringUtils#indexOfAnyBut(java.lang.CharSequence,java.lang.CharSequence)": -0.056309391239627735,
        "org.apache.commons.lang3$StringUtils#indexOfDifference(java.lang.CharSequence,java.lang.CharSequence)": -0.05630939123962775,
        "org.apache.commons.lang3$StringUtils#indexOfDifference(java.lang.CharSequence[])": -0.056309391239627735,
        "org.apache.commons.lang3$StringUtils#indexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#indexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,int)": -0.05630939123962775,
        "org.apache.commons.lang3$StringUtils#isAllLowerCase(java.lang.CharSequence)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#isAllUpperCase(java.lang.CharSequence)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#isAlpha(java.lang.CharSequence)": -0.03922501872949402,
        "org.apache.commons.lang3$StringUtils#isAlphaSpace(java.lang.CharSequence)": -0.03922501872949402,
        "org.apache.commons.lang3$StringUtils#isAlphanumeric(java.lang.CharSequence)": -0.03922501872949402,
        "org.apache.commons.lang3$StringUtils#isAlphanumericSpace(java.lang.CharSequence)": -0.03922501872949402,
        "org.apache.commons.lang3$StringUtils#isAsciiPrintable(java.lang.CharSequence)": -0.03922501872949402,
        "org.apache.commons.lang3$StringUtils#isBlank(java.lang.CharSequence)": 0.2600910260809589,
        "org.apache.commons.lang3$StringUtils#isEmpty(java.lang.CharSequence)": -0.4541836242531677,
        "org.apache.commons.lang3$StringUtils#isNotBlank(java.lang.CharSequence)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#isNotEmpty(java.lang.CharSequence)": -0.12624648475991102,
        "org.apache.commons.lang3$StringUtils#isNumeric(java.lang.CharSequence)": -0.03922501872949402,
        "org.apache.commons.lang3$StringUtils#isNumericSpace(java.lang.CharSequence)": -0.03922501872949402,
        "org.apache.commons.lang3$StringUtils#isWhitespace(java.lang.CharSequence)": -0.03922501872949402,
        "org.apache.commons.lang3$StringUtils#join(byte[],char)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#join(byte[],char,int,int)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#join(char[],char)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#join(char[],char,int,int)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#join(double[],char)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#join(double[],char,int,int)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#join(float[],char)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#join(float[],char,int,int)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#join(int[],char)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#join(int[],char,int,int)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Iterable,char)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Iterable,java.lang.String)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[])": -0.06975108135651199,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],char)": -0.056309391239627735,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],char,int,int)": -0.056309391239627735,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],java.lang.String)": -0.08130718031613116,
        "org.apache.commons.lang3$StringUtils#join(java.lang.Object[],java.lang.String,int,int)": -0.08130718031613116,
        "org.apache.commons.lang3$StringUtils#join(java.util.Iterator,char)": -0.05630939123962775,
        "org.apache.commons.lang3$StringUtils#join(java.util.Iterator,java.lang.String)": -0.05630939123962775,
        "org.apache.commons.lang3$StringUtils#join(long[],char)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#join(long[],char,int,int)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#join(short[],char)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#join(short[],char,int,int)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,int)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,int,int)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,java.lang.CharSequence)": -0.03922501872949402,
        "org.apache.commons.lang3$StringUtils#lastIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)": -0.03922501872949402,
        "org.apache.commons.lang3$StringUtils#lastIndexOfAny(java.lang.CharSequence,java.lang.CharSequence[])": -0.03922501872949402,
        "org.apache.commons.lang3$StringUtils#lastIndexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#lastIndexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,int)": -0.05630939123962775,
        "org.apache.commons.lang3$StringUtils#lastOrdinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#left(java.lang.String,int)": -0.03922501872949402,
        "org.apache.commons.lang3$StringUtils#leftPad(java.lang.String,int)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#leftPad(java.lang.String,int,char)": -0.19189375135243994,
        "org.apache.commons.lang3$StringUtils#leftPad(java.lang.String,int,java.lang.String)": -0.06975108135651199,
        "org.apache.commons.lang3$StringUtils#length(java.lang.CharSequence)": -0.08130718031613116,
        "org.apache.commons.lang3$StringUtils#lowerCase(java.lang.String)": -0.03922501872949402,
        "org.apache.commons.lang3$StringUtils#lowerCase(java.lang.String,java.util.Locale)": -0.03922501872949402,
        "org.apache.commons.lang3$StringUtils#mid(java.lang.String,int,int)": -0.03922501872949402,
        "org.apache.commons.lang3$StringUtils#normalizeSpace(java.lang.String)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#ordinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#ordinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int,boolean)": -0.05630939123962775,
        "org.apache.commons.lang3$StringUtils#overlay(java.lang.String,java.lang.String,int,int)": -0.03922501872949402,
        "org.apache.commons.lang3$StringUtils#remove(java.lang.String,char)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#remove(java.lang.String,java.lang.String)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#removeEnd(java.lang.String,java.lang.String)": -0.06975108135651199,
        "org.apache.commons.lang3$StringUtils#removeEndIgnoreCase(java.lang.String,java.lang.String)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#removePattern(java.lang.String,java.lang.String)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#removeStart(java.lang.String,java.lang.String)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#removeStartIgnoreCase(java.lang.String,java.lang.String)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#repeat(char,int)": -0.2032050807568877,
        "org.apache.commons.lang3$StringUtils#repeat(java.lang.String,int)": -0.08130718031613116,
        "org.apache.commons.lang3$StringUtils#repeat(java.lang.String,java.lang.String,int)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#replace(java.lang.String,java.lang.String,java.lang.String)": -0.0916582826157088,
        "org.apache.commons.lang3$StringUtils#replace(java.lang.String,java.lang.String,java.lang.String,int)": -0.13380857521915365,
        "org.apache.commons.lang3$StringUtils#replaceChars(java.lang.String,char,char)": -0.05630939123962775,
        "org.apache.commons.lang3$StringUtils#replaceChars(java.lang.String,java.lang.String,java.lang.String)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#replaceEach(java.lang.String,java.lang.String[],java.lang.String[])": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#replaceEach(java.lang.String,java.lang.String[],java.lang.String[],boolean,int)": -0.056309391239627735,
        "org.apache.commons.lang3$StringUtils#replaceEachRepeatedly(java.lang.String,java.lang.String[],java.lang.String[])": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#replaceOnce(java.lang.String,java.lang.String,java.lang.String)": -0.06975108135651199,
        "org.apache.commons.lang3$StringUtils#replacePattern(java.lang.String,java.lang.String,java.lang.String)": -0.05630939123962775,
        "org.apache.commons.lang3$StringUtils#reverse(java.lang.String)": -0.03922501872949402,
        "org.apache.commons.lang3$StringUtils#reverseDelimited(java.lang.String,char)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#right(java.lang.String,int)": -0.03922501872949402,
        "org.apache.commons.lang3$StringUtils#rightPad(java.lang.String,int)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#rightPad(java.lang.String,int,char)": -0.10115343854868372,
        "org.apache.commons.lang3$StringUtils#rightPad(java.lang.String,int,java.lang.String)": -0.06975108135651199,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String,char)": -0.056309391239627735,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String,java.lang.String)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#split(java.lang.String,java.lang.String,int)": -0.056309391239627735,
        "org.apache.commons.lang3$StringUtils#splitByCharacterType(java.lang.String)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#splitByCharacterType(java.lang.String,boolean)": -0.05630939123962775,
        "org.apache.commons.lang3$StringUtils#splitByCharacterTypeCamelCase(java.lang.String)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparator(java.lang.String,java.lang.String)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparator(java.lang.String,java.lang.String,int)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String,int)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#splitByWholeSeparatorWorker(java.lang.String,java.lang.String,int,boolean)": -0.06975108135651199,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String,char)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String,java.lang.String)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#splitPreserveAllTokens(java.lang.String,java.lang.String,int)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#splitWorker(java.lang.String,char,boolean)": -0.06975108135651187,
        "org.apache.commons.lang3$StringUtils#splitWorker(java.lang.String,java.lang.String,int,boolean)": -0.1100000000000001,
        "org.apache.commons.lang3$StringUtils#startsWith(java.lang.CharSequence,java.lang.CharSequence)": -0.056309391239627735,
        "org.apache.commons.lang3$StringUtils#startsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)": -0.08130718031613116,
        "org.apache.commons.lang3$StringUtils#startsWithAny(java.lang.CharSequence,java.lang.CharSequence[])": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#startsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)": -0.056309391239627735,
        "org.apache.commons.lang3$StringUtils#strip(java.lang.String)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#strip(java.lang.String,java.lang.String)": -0.0916582826157088,
        "org.apache.commons.lang3$StringUtils#stripAccents(java.lang.String)": -0.03922501872949402,
        "org.apache.commons.lang3$StringUtils#stripAll(java.lang.String[])": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#stripAll(java.lang.String[],java.lang.String)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#stripEnd(java.lang.String,java.lang.String)": -0.1100000000000001,
        "org.apache.commons.lang3$StringUtils#stripStart(java.lang.String,java.lang.String)": -0.10115343854868386,
        "org.apache.commons.lang3$StringUtils#stripToEmpty(java.lang.String)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#stripToNull(java.lang.String)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#substring(java.lang.String,int)": -0.03922501872949402,
        "org.apache.commons.lang3$StringUtils#substring(java.lang.String,int,int)": -0.03922501872949402,
        "org.apache.commons.lang3$StringUtils#substringAfter(java.lang.String,java.lang.String)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#substringAfterLast(java.lang.String,java.lang.String)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#substringBefore(java.lang.String,java.lang.String)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#substringBeforeLast(java.lang.String,java.lang.String)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#substringBetween(java.lang.String,java.lang.String)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#substringBetween(java.lang.String,java.lang.String,java.lang.String)": -0.05630939123962775,
        "org.apache.commons.lang3$StringUtils#substringsBetween(java.lang.String,java.lang.String,java.lang.String)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#swapCase(java.lang.String)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#toString(byte[],java.lang.String)": -0.03922501872949402,
        "org.apache.commons.lang3$StringUtils#trim(java.lang.String)": -0.06975108135651187,
        "org.apache.commons.lang3$StringUtils#trimToEmpty(java.lang.String)": -0.03922501872949402,
        "org.apache.commons.lang3$StringUtils#trimToNull(java.lang.String)": -0.03922501872949415,
        "org.apache.commons.lang3$StringUtils#uncapitalize(java.lang.String)": -0.03922501872949402,
        "org.apache.commons.lang3$StringUtils#upperCase(java.lang.String)": -0.03922501872949402,
        "org.apache.commons.lang3$StringUtils#upperCase(java.lang.String,java.util.Locale)": -0.03922501872949402,
        "org.apache.commons.lang3$SystemUtils#<clinit>()": 0.8547666102197709,
        "org.apache.commons.lang3$SystemUtils#SystemUtils()": -0.03922501872949402,
        "org.apache.commons.lang3$SystemUtils#getJavaHome()": -0.03922501872949402,
        "org.apache.commons.lang3$SystemUtils#getJavaIoTmpDir()": -0.03922501872949402,
        "org.apache.commons.lang3$SystemUtils#getJavaVersionMatches(java.lang.String)": 0.8547666102197709,
        "org.apache.commons.lang3$SystemUtils#getOSMatches(java.lang.String,java.lang.String)": 0.8547666102197709,
        "org.apache.commons.lang3$SystemUtils#getOSMatchesName(java.lang.String)": 0.8547666102197709,
        "org.apache.commons.lang3$SystemUtils#getSystemProperty(java.lang.String)": -0.4910198274071341,
        "org.apache.commons.lang3$SystemUtils#getUserDir()": -0.03922501872949402,
        "org.apache.commons.lang3$SystemUtils#getUserHome()": -0.03922501872949402,
        "org.apache.commons.lang3$SystemUtils#isJavaAwtHeadless()": -0.03922501872949415,
        "org.apache.commons.lang3$SystemUtils#isJavaVersionAtLeast(org.apache.commons.lang3.JavaVersion)": 1.5953034777811008,
        "org.apache.commons.lang3$SystemUtils#isJavaVersionMatch(java.lang.String,java.lang.String)": -0.4910198274071341,
        "org.apache.commons.lang3$SystemUtils#isOSMatch(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": -0.4910198274071341,
        "org.apache.commons.lang3$SystemUtils#isOSNameMatch(java.lang.String,java.lang.String)": -0.4910198274071341,
        "org.apache.commons.lang3.math$NumberUtils#<clinit>()": 0.021866146195974268,
        "org.apache.commons.lang3.math$NumberUtils#NumberUtils()": -0.03922501872949402,
        "org.apache.commons.lang3.math$NumberUtils#createBigDecimal(java.lang.String)": 1.7636906087603723,
        "org.apache.commons.lang3.math$NumberUtils#createBigInteger(java.lang.String)": 0.41790417113346734,
        "org.apache.commons.lang3.math$NumberUtils#createDouble(java.lang.String)": 0.41790417113346734,
        "org.apache.commons.lang3.math$NumberUtils#createFloat(java.lang.String)": 0.41790417113346734,
        "org.apache.commons.lang3.math$NumberUtils#createInteger(java.lang.String)": 0.41790417113346734,
        "org.apache.commons.lang3.math$NumberUtils#createLong(java.lang.String)": 0.4044624810165832,
        "org.apache.commons.lang3.math$NumberUtils#createNumber(java.lang.String)": 1.7636906087603723,
        "org.apache.commons.lang3.math$NumberUtils#isAllZeros(java.lang.String)": 0.41790417113346734,
        "org.apache.commons.lang3.math$NumberUtils#isDigits(java.lang.String)": 1.750248918643488,
        "org.apache.commons.lang3.math$NumberUtils#isNumber(java.lang.String)": -0.03922501872949415,
        "org.apache.commons.lang3.math$NumberUtils#max(byte,byte,byte)": -0.03922501872949402,
        "org.apache.commons.lang3.math$NumberUtils#max(byte[])": -0.06975108135651187,
        "org.apache.commons.lang3.math$NumberUtils#max(double,double,double)": -0.05630939123962775,
        "org.apache.commons.lang3.math$NumberUtils#max(double[])": -0.08130718031613116,
        "org.apache.commons.lang3.math$NumberUtils#max(float,float,float)": -0.05630939123962775,
        "org.apache.commons.lang3.math$NumberUtils#max(float[])": -0.08130718031613116,
        "org.apache.commons.lang3.math$NumberUtils#max(int,int,int)": -0.03922501872949402,
        "org.apache.commons.lang3.math$NumberUtils#max(int[])": -0.06975108135651187,
        "org.apache.commons.lang3.math$NumberUtils#max(long,long,long)": -0.03922501872949402,
        "org.apache.commons.lang3.math$NumberUtils#max(long[])": -0.06975108135651187,
        "org.apache.commons.lang3.math$NumberUtils#max(short,short,short)": -0.03922501872949402,
        "org.apache.commons.lang3.math$NumberUtils#max(short[])": -0.06975108135651187,
        "org.apache.commons.lang3.math$NumberUtils#min(byte,byte,byte)": -0.03922501872949402,
        "org.apache.commons.lang3.math$NumberUtils#min(byte[])": -0.06975108135651187,
        "org.apache.commons.lang3.math$NumberUtils#min(double,double,double)": -0.05630939123962775,
        "org.apache.commons.lang3.math$NumberUtils#min(double[])": -0.08130718031613116,
        "org.apache.commons.lang3.math$NumberUtils#min(float,float,float)": -0.05630939123962775,
        "org.apache.commons.lang3.math$NumberUtils#min(float[])": -0.06975108135651187,
        "org.apache.commons.lang3.math$NumberUtils#min(int,int,int)": -0.03922501872949402,
        "org.apache.commons.lang3.math$NumberUtils#min(int[])": -0.06975108135651187,
        "org.apache.commons.lang3.math$NumberUtils#min(long,long,long)": -0.03922501872949402,
        "org.apache.commons.lang3.math$NumberUtils#min(long[])": -0.06975108135651187,
        "org.apache.commons.lang3.math$NumberUtils#min(short,short,short)": -0.03922501872949402,
        "org.apache.commons.lang3.math$NumberUtils#min(short[])": -0.06975108135651187,
        "org.apache.commons.lang3.math$NumberUtils#toByte(java.lang.String)": -0.03922501872949415,
        "org.apache.commons.lang3.math$NumberUtils#toByte(java.lang.String,byte)": -0.05630939123962775,
        "org.apache.commons.lang3.math$NumberUtils#toDouble(java.lang.String)": -0.03922501872949415,
        "org.apache.commons.lang3.math$NumberUtils#toDouble(java.lang.String,double)": -0.05630939123962775,
        "org.apache.commons.lang3.math$NumberUtils#toFloat(java.lang.String)": -0.03922501872949415,
        "org.apache.commons.lang3.math$NumberUtils#toFloat(java.lang.String,float)": -0.05630939123962775,
        "org.apache.commons.lang3.math$NumberUtils#toInt(java.lang.String)": -0.03922501872949415,
        "org.apache.commons.lang3.math$NumberUtils#toInt(java.lang.String,int)": -0.05630939123962775,
        "org.apache.commons.lang3.math$NumberUtils#toLong(java.lang.String)": -0.03922501872949415,
        "org.apache.commons.lang3.math$NumberUtils#toLong(java.lang.String,long)": -0.05630939123962775,
        "org.apache.commons.lang3.math$NumberUtils#toShort(java.lang.String)": -0.03922501872949415,
        "org.apache.commons.lang3.math$NumberUtils#toShort(java.lang.String,short)": -0.05630939123962775
    },
    "Lang-8": {
        "org.apache.commons.lang3.time$FastDateFormat#<clinit>()": 0.3284451844622499,
        "org.apache.commons.lang3.time$FastDateFormat#FastDateFormat(java.lang.String,java.util.TimeZone,java.util.Locale)": 0.3284451844622499,
        "org.apache.commons.lang3.time$FastDateFormat#applyRules(java.util.Calendar,java.lang.StringBuffer)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#equals(java.lang.Object)": -0.2885410866733713,
        "org.apache.commons.lang3.time$FastDateFormat#format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)": -0.09620084764831845,
        "org.apache.commons.lang3.time$FastDateFormat#format(java.util.Calendar)": 1.0236499834162027,
        "org.apache.commons.lang3.time$FastDateFormat#format(java.util.Calendar,java.lang.StringBuffer)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#format(java.util.Date)": -0.7655649002897476,
        "org.apache.commons.lang3.time$FastDateFormat#format(java.util.Date,java.lang.StringBuffer)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#format(long)": -0.09620084764831845,
        "org.apache.commons.lang3.time$FastDateFormat#format(long,java.lang.StringBuffer)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getDateInstance(int)": -0.140625,
        "org.apache.commons.lang3.time$FastDateFormat#getDateInstance(int,java.util.Locale)": -0.140625,
        "org.apache.commons.lang3.time$FastDateFormat#getDateInstance(int,java.util.TimeZone)": -0.09620084764831845,
        "org.apache.commons.lang3.time$FastDateFormat#getDateInstance(int,java.util.TimeZone,java.util.Locale)": -0.09620084764831845,
        "org.apache.commons.lang3.time$FastDateFormat#getDateTimeInstance(int,int)": -0.17653060892394862,
        "org.apache.commons.lang3.time$FastDateFormat#getDateTimeInstance(int,int,java.util.Locale)": -0.17653060892394862,
        "org.apache.commons.lang3.time$FastDateFormat#getDateTimeInstance(int,int,java.util.TimeZone)": -0.09620084764831845,
        "org.apache.commons.lang3.time$FastDateFormat#getDateTimeInstance(int,int,java.util.TimeZone,java.util.Locale)": -0.09620084764831845,
        "org.apache.commons.lang3.time$FastDateFormat#getInstance()": -0.140625,
        "org.apache.commons.lang3.time$FastDateFormat#getInstance(java.lang.String)": 0.9932921708098358,
        "org.apache.commons.lang3.time$FastDateFormat#getInstance(java.lang.String,java.util.Locale)": -0.7963500165837972,
        "org.apache.commons.lang3.time$FastDateFormat#getInstance(java.lang.String,java.util.TimeZone)": -0.09620084764831845,
        "org.apache.commons.lang3.time$FastDateFormat#getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)": -1.0015309335382292,
        "org.apache.commons.lang3.time$FastDateFormat#getLocale()": -0.3125,
        "org.apache.commons.lang3.time$FastDateFormat#getMaxLengthEstimate()": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getPattern()": -0.37908848498896436,
        "org.apache.commons.lang3.time$FastDateFormat#getTimeInstance(int)": -0.09620084764831845,
        "org.apache.commons.lang3.time$FastDateFormat#getTimeInstance(int,java.util.Locale)": -0.09620084764831845,
        "org.apache.commons.lang3.time$FastDateFormat#getTimeInstance(int,java.util.TimeZone)": -0.09620084764831845,
        "org.apache.commons.lang3.time$FastDateFormat#getTimeInstance(int,java.util.TimeZone,java.util.Locale)": -0.09620084764831845,
        "org.apache.commons.lang3.time$FastDateFormat#getTimeZone()": -0.26338135094610965,
        "org.apache.commons.lang3.time$FastDateFormat#hashCode()": -0.17653060892394862,
        "org.apache.commons.lang3.time$FastDateFormat#parse(java.lang.String)": -0.5691087936504913,
        "org.apache.commons.lang3.time$FastDateFormat#parse(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#parseObject(java.lang.String,java.text.ParsePosition)": -0.09620084764831845,
        "org.apache.commons.lang3.time$FastDateFormat#toString()": -0.140625,
        "org.apache.commons.lang3.time$FastDateFormat$1#createInstance(java.lang.String,java.util.TimeZone,java.util.Locale)": -1.017341253164655,
        "org.apache.commons.lang3.time$FastDateParser#<clinit>()": -0.026296930506443883,
        "org.apache.commons.lang3.time$FastDateParser#FastDateParser(java.lang.String,java.util.TimeZone,java.util.Locale)": -0.0023935236483069167,
        "org.apache.commons.lang3.time$FastDateParser#adjustYear(int)": -0.3576334971874737,
        "org.apache.commons.lang3.time$FastDateParser#equals(java.lang.Object)": -0.09620084764831849,
        "org.apache.commons.lang3.time$FastDateParser#escapeRegex(java.lang.StringBuilder,java.lang.String,boolean)": -1.3242029642363637,
        "org.apache.commons.lang3.time$FastDateParser#getCache(int)": 0.48152968371272264,
        "org.apache.commons.lang3.time$FastDateParser#getDisplayNames(int,java.util.Calendar,java.util.Locale)": -0.7462085783138662,
        "org.apache.commons.lang3.time$FastDateParser#getFieldWidth()": -0.3125,
        "org.apache.commons.lang3.time$FastDateParser#getLocale()": -0.09620084764831849,
        "org.apache.commons.lang3.time$FastDateParser#getLocaleSpecificStrategy(int,java.util.Calendar)": 0.48152968371272264,
        "org.apache.commons.lang3.time$FastDateParser#getParsePattern()": 0.0,
        "org.apache.commons.lang3.time$FastDateParser#getPattern()": -0.09620084764831849,
        "org.apache.commons.lang3.time$FastDateParser#getStrategy(java.lang.String,java.util.Calendar)": -0.0023935236483069167,
        "org.apache.commons.lang3.time$FastDateParser#getTimeZone()": -0.09620084764831849,
        "org.apache.commons.lang3.time$FastDateParser#hashCode()": -0.140625,
        "org.apache.commons.lang3.time$FastDateParser#init()": -0.0023935236483069167,
        "org.apache.commons.lang3.time$FastDateParser#isNextNumber()": -0.0023935236483069167,
        "org.apache.commons.lang3.time$FastDateParser#parse(java.lang.String)": -0.90094696186948,
        "org.apache.commons.lang3.time$FastDateParser#parse(java.lang.String,java.text.ParsePosition)": -0.9155386559684815,
        "org.apache.commons.lang3.time$FastDateParser#parseObject(java.lang.String)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser#parseObject(java.lang.String,java.text.ParsePosition)": -0.09620084764831845,
        "org.apache.commons.lang3.time$FastDateParser#readObject(java.io.ObjectInputStream)": -0.17653060892394862,
        "org.apache.commons.lang3.time$FastDateParser#toString()": -0.09620084764831849,
        "org.apache.commons.lang3.time$FastDateParser$1#setCalendar(org.apache.commons.lang3.time.FastDateParser,java.util.Calendar,java.lang.String)": -0.44009391388307373,
        "org.apache.commons.lang3.time$FastDateParser$2#modify(int)": -0.7025483191164943,
        "org.apache.commons.lang3.time$FastDateParser$3#modify(int)": -0.42025121959954914,
        "org.apache.commons.lang3.time$FastDateParser$4#modify(int)": -0.515625,
        "org.apache.commons.lang3.time$FastDateParser$CopyQuotedStrategy#FastDateParser$CopyQuotedStrategy(java.lang.String)": -1.3242029642363637,
        "org.apache.commons.lang3.time$FastDateParser$CopyQuotedStrategy#addRegex(org.apache.commons.lang3.time.FastDateParser,java.lang.StringBuilder)": 0.02158347339054123,
        "org.apache.commons.lang3.time$FastDateParser$CopyQuotedStrategy#isNumber()": -1.288095091170597,
        "org.apache.commons.lang3.time$FastDateParser$CopyQuotedStrategy#setCalendar(org.apache.commons.lang3.time.FastDateParser,java.util.Calendar,java.lang.String)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser$NumberStrategy#FastDateParser$NumberStrategy(int)": -1.372083368133349,
        "org.apache.commons.lang3.time$FastDateParser$NumberStrategy#addRegex(org.apache.commons.lang3.time.FastDateParser,java.lang.StringBuilder)": -0.0023935236483069167,
        "org.apache.commons.lang3.time$FastDateParser$NumberStrategy#isNumber()": -0.3125,
        "org.apache.commons.lang3.time$FastDateParser$NumberStrategy#modify(int)": -0.8862740711335886,
        "org.apache.commons.lang3.time$FastDateParser$NumberStrategy#setCalendar(org.apache.commons.lang3.time.FastDateParser,java.util.Calendar,java.lang.String)": -0.8862740711335886,
        "org.apache.commons.lang3.time$FastDateParser$TextStrategy#FastDateParser$TextStrategy(int,java.util.Calendar,java.util.Locale)": 0.5995778593130386,
        "org.apache.commons.lang3.time$FastDateParser$TextStrategy#addRegex(org.apache.commons.lang3.time.FastDateParser,java.lang.StringBuilder)": 0.5995778593130386,
        "org.apache.commons.lang3.time$FastDateParser$TextStrategy#isNumber()": 0.4742135623730951,
        "org.apache.commons.lang3.time$FastDateParser$TextStrategy#setCalendar(org.apache.commons.lang3.time.FastDateParser,java.util.Calendar,java.lang.String)": -0.5515347075210475,
        "org.apache.commons.lang3.time$FastDateParser$TimeZoneStrategy#FastDateParser$TimeZoneStrategy(java.util.Locale)": 0.6128932188134525,
        "org.apache.commons.lang3.time$FastDateParser$TimeZoneStrategy#addRegex(org.apache.commons.lang3.time.FastDateParser,java.lang.StringBuilder)": -0.7328932188134524,
        "org.apache.commons.lang3.time$FastDateParser$TimeZoneStrategy#isNumber()": -0.7655649002897476,
        "org.apache.commons.lang3.time$FastDateParser$TimeZoneStrategy#setCalendar(org.apache.commons.lang3.time.FastDateParser,java.util.Calendar,java.lang.String)": -0.533713375185561,
        "org.apache.commons.lang3.time$FastDatePrinter#<clinit>()": -1.1786768925937978,
        "org.apache.commons.lang3.time$FastDatePrinter#FastDatePrinter(java.lang.String,java.util.TimeZone,java.util.Locale)": 0.16710954503310693,
        "org.apache.commons.lang3.time$FastDatePrinter#applyRules(java.util.Calendar,java.lang.StringBuffer)": 0.8326275643042055,
        "org.apache.commons.lang3.time$FastDatePrinter#equals(java.lang.Object)": -0.3125,
        "org.apache.commons.lang3.time$FastDatePrinter#format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)": -0.09620084764831845,
        "org.apache.commons.lang3.time$FastDatePrinter#format(java.util.Calendar)": 0.91905303813052,
        "org.apache.commons.lang3.time$FastDatePrinter#format(java.util.Calendar,java.lang.StringBuffer)": 0.91905303813052,
        "org.apache.commons.lang3.time$FastDatePrinter#format(java.util.Date)": -0.8115800858899106,
        "org.apache.commons.lang3.time$FastDatePrinter#format(java.util.Date,java.lang.StringBuffer)": -0.09620084764831845,
        "org.apache.commons.lang3.time$FastDatePrinter#format(long)": -0.09620084764831845,
        "org.apache.commons.lang3.time$FastDatePrinter#format(long,java.lang.StringBuffer)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#getLocale()": -0.3790884849889644,
        "org.apache.commons.lang3.time$FastDatePrinter#getMaxLengthEstimate()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#getPattern()": -0.44009391388307373,
        "org.apache.commons.lang3.time$FastDatePrinter#getTimeZone()": -0.33547754294495524,
        "org.apache.commons.lang3.time$FastDatePrinter#getTimeZoneDisplay(java.util.TimeZone,boolean,int,java.util.Locale)": 1.5832951462394762,
        "org.apache.commons.lang3.time$FastDatePrinter#hashCode()": -0.20802669529663698,
        "org.apache.commons.lang3.time$FastDatePrinter#init()": 0.16710954503310693,
        "org.apache.commons.lang3.time$FastDatePrinter#parsePattern()": 0.16710954503310693,
        "org.apache.commons.lang3.time$FastDatePrinter#parseToken(java.lang.String,int[])": 0.16710954503310693,
        "org.apache.commons.lang3.time$FastDatePrinter#readObject(java.io.ObjectInputStream)": -0.17653060892394862,
        "org.apache.commons.lang3.time$FastDatePrinter#selectNumberRule(int,int)": 0.17937499999999995,
        "org.apache.commons.lang3.time$FastDatePrinter#toString()": -0.09620084764831849,
        "org.apache.commons.lang3.time$FastDatePrinter$CharacterLiteral#FastDatePrinter$CharacterLiteral(char)": -1.1418118414113434,
        "org.apache.commons.lang3.time$FastDatePrinter$CharacterLiteral#appendTo(java.lang.StringBuffer,java.util.Calendar)": -0.45583840760483374,
        "org.apache.commons.lang3.time$FastDatePrinter$CharacterLiteral#estimateLength()": -1.1418118414113434,
        "org.apache.commons.lang3.time$FastDatePrinter$PaddedNumberField#FastDatePrinter$PaddedNumberField(int,int)": -1.5665412478906586,
        "org.apache.commons.lang3.time$FastDatePrinter$PaddedNumberField#appendTo(java.lang.StringBuffer,int)": -0.9300519699779288,
        "org.apache.commons.lang3.time$FastDatePrinter$PaddedNumberField#appendTo(java.lang.StringBuffer,java.util.Calendar)": -0.9300519699779287,
        "org.apache.commons.lang3.time$FastDatePrinter$PaddedNumberField#estimateLength()": -1.5665412478906586,
        "org.apache.commons.lang3.time$FastDatePrinter$StringLiteral#FastDatePrinter$StringLiteral(java.lang.String)": -0.9155386559684815,
        "org.apache.commons.lang3.time$FastDatePrinter$StringLiteral#appendTo(java.lang.StringBuffer,java.util.Calendar)": -0.17653060892394867,
        "org.apache.commons.lang3.time$FastDatePrinter$StringLiteral#estimateLength()": -0.9155386559684815,
        "org.apache.commons.lang3.time$FastDatePrinter$TextField#FastDatePrinter$TextField(int,java.lang.String[])": 0.7210621722338523,
        "org.apache.commons.lang3.time$FastDatePrinter$TextField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.23750870861257145,
        "org.apache.commons.lang3.time$FastDatePrinter$TextField#estimateLength()": -0.6247242653930524,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneDisplayKey#FastDatePrinter$TimeZoneDisplayKey(java.util.TimeZone,boolean,int,java.util.Locale)": 0.23750870861257145,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneDisplayKey#equals(java.lang.Object)": 0.2976829534491464,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneDisplayKey#hashCode()": 0.23750870861257145,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneNameRule#FastDatePrinter$TimeZoneNameRule(java.util.TimeZone,java.util.Locale,int)": 1.5832951462394762,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneNameRule#appendTo(java.lang.StringBuffer,java.util.Calendar)": 1.6793749999999998,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneNameRule#estimateLength()": 0.23750870861257145,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneNumberRule#<clinit>()": -1.0015309335382292,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneNumberRule#FastDatePrinter$TimeZoneNumberRule(boolean)": -1.0015309335382292,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneNumberRule#appendTo(java.lang.StringBuffer,java.util.Calendar)": -0.3576334971874737,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneNumberRule#estimateLength()": -1.0015309335382292,
        "org.apache.commons.lang3.time$FastDatePrinter$TwelveHourField#FastDatePrinter$TwelveHourField(org.apache.commons.lang3.time.FastDatePrinter$NumberRule)": 0.014699463932366208,
        "org.apache.commons.lang3.time$FastDatePrinter$TwelveHourField#appendTo(java.lang.StringBuffer,int)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwelveHourField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 1.8199999999999998,
        "org.apache.commons.lang3.time$FastDatePrinter$TwelveHourField#estimateLength()": 1.360485901559271,
        "org.apache.commons.lang3.time$FastDatePrinter$TwentyFourHourField#FastDatePrinter$TwentyFourHourField(org.apache.commons.lang3.time.FastDatePrinter$NumberRule)": -0.09620084764831849,
        "org.apache.commons.lang3.time$FastDatePrinter$TwentyFourHourField#appendTo(java.lang.StringBuffer,int)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwentyFourHourField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwentyFourHourField#estimateLength()": -0.09620084764831845,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitMonthField#<clinit>()": -1.3771671028744286,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitMonthField#FastDatePrinter$TwoDigitMonthField()": -1.3771671028744286,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitMonthField#appendTo(java.lang.StringBuffer,int)": -0.8862740711335886,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitMonthField#appendTo(java.lang.StringBuffer,java.util.Calendar)": -0.8862740711335886,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitMonthField#estimateLength()": -1.3771671028744286,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitNumberField#FastDatePrinter$TwoDigitNumberField(int)": -1.004749238277236,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitNumberField#appendTo(java.lang.StringBuffer,int)": -0.4846403780409948,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitNumberField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.8611460595859101,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitNumberField#estimateLength()": -1.004749238277236,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitYearField#<clinit>()": -0.3125,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitYearField#FastDatePrinter$TwoDigitYearField()": -0.3125,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitYearField#appendTo(java.lang.StringBuffer,int)": -0.20802669529663698,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitYearField#appendTo(java.lang.StringBuffer,java.util.Calendar)": -0.2080266952966369,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitYearField#estimateLength()": -0.3125,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedMonthField#<clinit>()": -0.4785533905932738,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedMonthField#FastDatePrinter$UnpaddedMonthField()": -0.47855339059327373,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedMonthField#appendTo(java.lang.StringBuffer,int)": -0.2633813509461096,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedMonthField#appendTo(java.lang.StringBuffer,java.util.Calendar)": -0.26338135094610965,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedMonthField#estimateLength()": -0.47855339059327373,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedNumberField#FastDatePrinter$UnpaddedNumberField(int)": -0.12936956157223423,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedNumberField#appendTo(java.lang.StringBuffer,int)": 0.2108322114269855,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedNumberField#appendTo(java.lang.StringBuffer,java.util.Calendar)": -0.26338135094610965,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedNumberField#estimateLength()": -0.12936956157223423,
        "org.apache.commons.lang3.time$FormatCache#<clinit>()": -1.042442635215755,
        "org.apache.commons.lang3.time$FormatCache#FormatCache()": -1.017341253164655,
        "org.apache.commons.lang3.time$FormatCache#getDateTimeInstance(java.lang.Integer,java.lang.Integer,java.util.TimeZone,java.util.Locale)": -0.3125,
        "org.apache.commons.lang3.time$FormatCache#getInstance()": -0.140625,
        "org.apache.commons.lang3.time$FormatCache#getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)": 0.3284451844622499,
        "org.apache.commons.lang3.time$FormatCache#getPatternForStyle(java.lang.Integer,java.lang.Integer,java.util.Locale)": -0.39993621784789724,
        "org.apache.commons.lang3.time$FormatCache$MultipartKey#FormatCache$MultipartKey(java.lang.Object[])": 0.30334380241115,
        "org.apache.commons.lang3.time$FormatCache$MultipartKey#equals(java.lang.Object)": -0.586453098794425,
        "org.apache.commons.lang3.time$FormatCache$MultipartKey#hashCode()": 0.30334380241115
    },
    "Lang-9": {
        "org.apache.commons.lang3.time$FastDateFormat#<clinit>()": -0.39286633665593534,
        "org.apache.commons.lang3.time$FastDateFormat#FastDateFormat(java.lang.String,java.util.TimeZone,java.util.Locale)": -0.39286633665593534,
        "org.apache.commons.lang3.time$FastDateFormat#applyRules(java.util.Calendar,java.lang.StringBuffer)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#equals(java.lang.Object)": -0.2998562791031573,
        "org.apache.commons.lang3.time$FastDateFormat#format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)": -0.09962042625086101,
        "org.apache.commons.lang3.time$FastDateFormat#format(java.util.Calendar)": -0.8317283915339884,
        "org.apache.commons.lang3.time$FastDateFormat#format(java.util.Calendar,java.lang.StringBuffer)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#format(java.util.Date)": -0.7994044240850758,
        "org.apache.commons.lang3.time$FastDateFormat#format(java.util.Date,java.lang.StringBuffer)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#format(long)": -0.09962042625086101,
        "org.apache.commons.lang3.time$FastDateFormat#format(long,java.lang.StringBuffer)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getDateInstance(int)": -0.1457661115402472,
        "org.apache.commons.lang3.time$FastDateFormat#getDateInstance(int,java.util.Locale)": -0.1457661115402472,
        "org.apache.commons.lang3.time$FastDateFormat#getDateInstance(int,java.util.TimeZone)": -0.09962042625086101,
        "org.apache.commons.lang3.time$FastDateFormat#getDateInstance(int,java.util.TimeZone,java.util.Locale)": -0.09962042625086101,
        "org.apache.commons.lang3.time$FastDateFormat#getDateTimeInstance(int,int)": -0.18311388300841897,
        "org.apache.commons.lang3.time$FastDateFormat#getDateTimeInstance(int,int,java.util.Locale)": -0.18311388300841897,
        "org.apache.commons.lang3.time$FastDateFormat#getDateTimeInstance(int,int,java.util.TimeZone)": -0.09962042625086101,
        "org.apache.commons.lang3.time$FastDateFormat#getDateTimeInstance(int,int,java.util.TimeZone,java.util.Locale)": -0.09962042625086101,
        "org.apache.commons.lang3.time$FastDateFormat#getInstance()": -0.1457661115402472,
        "org.apache.commons.lang3.time$FastDateFormat#getInstance(java.lang.String)": -0.8636110416319227,
        "org.apache.commons.lang3.time$FastDateFormat#getInstance(java.lang.String,java.util.Locale)": -0.8317283915339884,
        "org.apache.commons.lang3.time$FastDateFormat#getInstance(java.lang.String,java.util.TimeZone)": -0.09962042625086101,
        "org.apache.commons.lang3.time$FastDateFormat#getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)": 0.12973434549075308,
        "org.apache.commons.lang3.time$FastDateFormat#getLocale()": -0.32486555641382775,
        "org.apache.commons.lang3.time$FastDateFormat#getMaxLengthEstimate()": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#getPattern()": -0.3944317020764158,
        "org.apache.commons.lang3.time$FastDateFormat#getTimeInstance(int)": -0.09962042625086101,
        "org.apache.commons.lang3.time$FastDateFormat#getTimeInstance(int,java.util.Locale)": -0.09962042625086101,
        "org.apache.commons.lang3.time$FastDateFormat#getTimeInstance(int,java.util.TimeZone)": -0.09962042625086101,
        "org.apache.commons.lang3.time$FastDateFormat#getTimeInstance(int,java.util.TimeZone,java.util.Locale)": -0.09962042625086101,
        "org.apache.commons.lang3.time$FastDateFormat#getTimeZone()": -0.273606797749979,
        "org.apache.commons.lang3.time$FastDateFormat#hashCode()": -0.18311388300841897,
        "org.apache.commons.lang3.time$FastDateFormat#parse(java.lang.String)": 0.5990537881653404,
        "org.apache.commons.lang3.time$FastDateFormat#parse(java.lang.String,java.text.ParsePosition)": 0.0,
        "org.apache.commons.lang3.time$FastDateFormat#parseObject(java.lang.String,java.text.ParsePosition)": -0.09962042625086101,
        "org.apache.commons.lang3.time$FastDateFormat#toString()": -0.1457661115402472,
        "org.apache.commons.lang3.time$FastDateFormat$1#createInstance(java.lang.String,java.util.TimeZone,java.util.Locale)": -1.255228246450894,
        "org.apache.commons.lang3.time$FastDateParser#<clinit>()": -0.015947698281019718,
        "org.apache.commons.lang3.time$FastDateParser#FastDateParser(java.lang.String,java.util.TimeZone,java.util.Locale)": 0.00958565330651473,
        "org.apache.commons.lang3.time$FastDateParser#adjustYear(int)": -0.32486555641382786,
        "org.apache.commons.lang3.time$FastDateParser#copy(org.apache.commons.lang3.time.FastDateParser$KeyValue[],int,java.lang.String[])": -1.2213083212069145,
        "org.apache.commons.lang3.time$FastDateParser#count(java.lang.String[])": -1.2213083212069145,
        "org.apache.commons.lang3.time$FastDateParser#createKeyValues(java.lang.String[],java.lang.String[])": -1.2213083212069145,
        "org.apache.commons.lang3.time$FastDateParser#equals(java.lang.Object)": -0.0996204262508611,
        "org.apache.commons.lang3.time$FastDateParser#escapeRegex(java.lang.StringBuilder,java.lang.String,boolean)": -1.310582578272725,
        "org.apache.commons.lang3.time$FastDateParser#getDisplayNames(int)": -1.2213083212069145,
        "org.apache.commons.lang3.time$FastDateParser#getFieldWidth()": -0.273606797749979,
        "org.apache.commons.lang3.time$FastDateParser#getLocale()": -0.0996204262508611,
        "org.apache.commons.lang3.time$FastDateParser#getParsePattern()": 0.2547448713915889,
        "org.apache.commons.lang3.time$FastDateParser#getPattern()": -0.0996204262508611,
        "org.apache.commons.lang3.time$FastDateParser#getStrategy(java.lang.String)": 0.00958565330651473,
        "org.apache.commons.lang3.time$FastDateParser#getTimeZone()": -0.0996204262508611,
        "org.apache.commons.lang3.time$FastDateParser#hashCode()": -0.1457661115402471,
        "org.apache.commons.lang3.time$FastDateParser#init()": 0.00958565330651473,
        "org.apache.commons.lang3.time$FastDateParser#isNextNumber()": -0.011099053312904839,
        "org.apache.commons.lang3.time$FastDateParser#parse(java.lang.String)": 1.0043760192442894,
        "org.apache.commons.lang3.time$FastDateParser#parse(java.lang.String,java.text.ParsePosition)": 0.9882716084660116,
        "org.apache.commons.lang3.time$FastDateParser#parseObject(java.lang.String)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser#parseObject(java.lang.String,java.text.ParsePosition)": -0.09962042625086101,
        "org.apache.commons.lang3.time$FastDateParser#readObject(java.io.ObjectInputStream)": -0.18311388300841897,
        "org.apache.commons.lang3.time$FastDateParser#toArray(java.util.Map)": -0.2998562791031574,
        "org.apache.commons.lang3.time$FastDateParser#toString()": -0.0996204262508611,
        "org.apache.commons.lang3.time$FastDateParser$1#compare(org.apache.commons.lang3.time.FastDateParser$KeyValue,org.apache.commons.lang3.time.FastDateParser$KeyValue)": -1.2213083212069145,
        "org.apache.commons.lang3.time$FastDateParser$2#setCalendar(org.apache.commons.lang3.time.FastDateParser,java.util.Calendar,java.lang.String)": -0.4162277660168381,
        "org.apache.commons.lang3.time$FastDateParser$3#modify(int)": -0.6647687979209718,
        "org.apache.commons.lang3.time$FastDateParser$4#modify(int)": -0.39443170207641565,
        "org.apache.commons.lang3.time$FastDateParser$5#modify(int)": -0.45823169219865334,
        "org.apache.commons.lang3.time$FastDateParser$CopyQuotedStrategy#FastDateParser$CopyQuotedStrategy(java.lang.String)": -1.310582578272725,
        "org.apache.commons.lang3.time$FastDateParser$CopyQuotedStrategy#addRegex(org.apache.commons.lang3.time.FastDateParser,java.lang.StringBuilder)": 0.035203859354180245,
        "org.apache.commons.lang3.time$FastDateParser$CopyQuotedStrategy#isNumber()": -1.771954445729289,
        "org.apache.commons.lang3.time$FastDateParser$CopyQuotedStrategy#setCalendar(org.apache.commons.lang3.time.FastDateParser,java.util.Calendar,java.lang.String)": 0.0,
        "org.apache.commons.lang3.time$FastDateParser$KeyValue#FastDateParser$KeyValue(java.lang.String,int)": -1.2213083212069145,
        "org.apache.commons.lang3.time$FastDateParser$NumberStrategy#FastDateParser$NumberStrategy(int)": -1.3617341359079247,
        "org.apache.commons.lang3.time$FastDateParser$NumberStrategy#addRegex(org.apache.commons.lang3.time.FastDateParser,java.lang.StringBuilder)": 0.00958565330651473,
        "org.apache.commons.lang3.time$FastDateParser$NumberStrategy#isNumber()": -0.273606797749979,
        "org.apache.commons.lang3.time$FastDateParser$NumberStrategy#modify(int)": -0.32519086171198064,
        "org.apache.commons.lang3.time$FastDateParser$NumberStrategy#setCalendar(org.apache.commons.lang3.time.FastDateParser,java.util.Calendar,java.lang.String)": 1.0205955759149241,
        "org.apache.commons.lang3.time$FastDateParser$TextStrategy#FastDateParser$TextStrategy(int)": -1.3617341359079247,
        "org.apache.commons.lang3.time$FastDateParser$TextStrategy#addRegex(org.apache.commons.lang3.time.FastDateParser,java.lang.StringBuilder)": -1.2213083212069145,
        "org.apache.commons.lang3.time$FastDateParser$TextStrategy#isNumber()": 0.0,
        "org.apache.commons.lang3.time$FastDateParser$TextStrategy#setCalendar(org.apache.commons.lang3.time.FastDateParser,java.util.Calendar,java.lang.String)": -0.498481705003444,
        "org.apache.commons.lang3.time$FastDateParser$TimeZoneStrategy#FastDateParser$TimeZoneStrategy(java.util.Locale)": -1.2071067811865475,
        "org.apache.commons.lang3.time$FastDateParser$TimeZoneStrategy#addRegex(org.apache.commons.lang3.time.FastDateParser,java.lang.StringBuilder)": -1.2071067811865475,
        "org.apache.commons.lang3.time$FastDateParser$TimeZoneStrategy#isNumber()": -0.7994044240850757,
        "org.apache.commons.lang3.time$FastDateParser$TimeZoneStrategy#setCalendar(org.apache.commons.lang3.time.FastDateParser,java.util.Calendar,java.lang.String)": -0.47855339059327373,
        "org.apache.commons.lang3.time$FastDatePrinter#<clinit>()": -1.4266783162776868,
        "org.apache.commons.lang3.time$FastDatePrinter#FastDatePrinter(java.lang.String,java.util.TimeZone,java.util.Locale)": -0.5643164064827282,
        "org.apache.commons.lang3.time$FastDatePrinter#applyRules(java.util.Calendar,java.lang.StringBuffer)": -1.032455532033676,
        "org.apache.commons.lang3.time$FastDatePrinter#equals(java.lang.Object)": -0.32486555641382786,
        "org.apache.commons.lang3.time$FastDatePrinter#format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)": -0.09962042625086101,
        "org.apache.commons.lang3.time$FastDatePrinter#format(java.util.Calendar)": -0.9416079783099616,
        "org.apache.commons.lang3.time$FastDatePrinter#format(java.util.Calendar,java.lang.StringBuffer)": -0.9416079783099616,
        "org.apache.commons.lang3.time$FastDatePrinter#format(java.util.Date)": -0.8477225575051661,
        "org.apache.commons.lang3.time$FastDatePrinter#format(java.util.Date,java.lang.StringBuffer)": -0.09962042625086101,
        "org.apache.commons.lang3.time$FastDatePrinter#format(long)": -0.09962042625086101,
        "org.apache.commons.lang3.time$FastDatePrinter#format(long,java.lang.StringBuffer)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#getLocale()": -0.39443170207641565,
        "org.apache.commons.lang3.time$FastDatePrinter#getMaxLengthEstimate()": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter#getPattern()": -0.45823169219865334,
        "org.apache.commons.lang3.time$FastDatePrinter#getTimeZone()": -0.3488612787525831,
        "org.apache.commons.lang3.time$FastDatePrinter#getTimeZoneDisplay(java.util.TimeZone,boolean,int,java.util.Locale)": -0.24579081189859817,
        "org.apache.commons.lang3.time$FastDatePrinter#hashCode()": -0.2159075191683888,
        "org.apache.commons.lang3.time$FastDatePrinter#init()": -0.5643164064827282,
        "org.apache.commons.lang3.time$FastDatePrinter#parsePattern()": -0.5643164064827282,
        "org.apache.commons.lang3.time$FastDatePrinter#parseToken(java.lang.String,int[])": -0.5643164064827282,
        "org.apache.commons.lang3.time$FastDatePrinter#readObject(java.io.ObjectInputStream)": -0.18311388300841897,
        "org.apache.commons.lang3.time$FastDatePrinter#selectNumberRule(int,int)": -0.5512877553035693,
        "org.apache.commons.lang3.time$FastDatePrinter#toString()": -0.0996204262508611,
        "org.apache.commons.lang3.time$FastDatePrinter$CharacterLiteral#FastDatePrinter$CharacterLiteral(char)": -1.3875168310459907,
        "org.apache.commons.lang3.time$FastDatePrinter$CharacterLiteral#appendTo(java.lang.StringBuffer,java.util.Calendar)": -0.9721967374861649,
        "org.apache.commons.lang3.time$FastDatePrinter$CharacterLiteral#estimateLength()": -1.3875168310459907,
        "org.apache.commons.lang3.time$FastDatePrinter$PaddedNumberField#FastDatePrinter$PaddedNumberField(int,int)": -1.6028673788509211,
        "org.apache.commons.lang3.time$FastDatePrinter$PaddedNumberField#appendTo(java.lang.StringBuffer,int)": -0.9721967374861649,
        "org.apache.commons.lang3.time$FastDatePrinter$PaddedNumberField#appendTo(java.lang.StringBuffer,java.util.Calendar)": -0.9721967374861649,
        "org.apache.commons.lang3.time$FastDatePrinter$PaddedNumberField#estimateLength()": -1.6028673788509211,
        "org.apache.commons.lang3.time$FastDatePrinter$StringLiteral#FastDatePrinter$StringLiteral(java.lang.String)": -0.6714443925000839,
        "org.apache.commons.lang3.time$FastDatePrinter$StringLiteral#appendTo(java.lang.StringBuffer,java.util.Calendar)": -0.1831138830084189,
        "org.apache.commons.lang3.time$FastDatePrinter$StringLiteral#estimateLength()": -0.6714443925000839,
        "org.apache.commons.lang3.time$FastDatePrinter$TextField#FastDatePrinter$TextField(int,java.lang.String[])": -1.120820393249937,
        "org.apache.commons.lang3.time$FastDatePrinter$TextField#appendTo(java.lang.StringBuffer,java.util.Calendar)": -0.2457908118985983,
        "org.apache.commons.lang3.time$FastDatePrinter$TextField#estimateLength()": -1.1208203932499368,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneDisplayKey#FastDatePrinter$TimeZoneDisplayKey(java.util.TimeZone,boolean,int,java.util.Locale)": -0.2457908118985983,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneDisplayKey#equals(java.lang.Object)": -0.1831138830084189,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneDisplayKey#hashCode()": -0.2457908118985983,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneNameRule#FastDatePrinter$TimeZoneNameRule(java.util.TimeZone,java.util.Locale,int)": -0.24579081189859817,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneNameRule#appendTo(java.lang.StringBuffer,java.util.Calendar)": -0.1457661115402471,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneNameRule#estimateLength()": -0.2457908118985983,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneNumberRule#<clinit>()": -1.017499445183953,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneNumberRule#FastDatePrinter$TimeZoneNumberRule(boolean)": -1.0174994451839527,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneNumberRule#appendTo(java.lang.StringBuffer,java.util.Calendar)": -0.3720084679281461,
        "org.apache.commons.lang3.time$FastDatePrinter$TimeZoneNumberRule#estimateLength()": -1.0174994451839527,
        "org.apache.commons.lang3.time$FastDatePrinter$TwelveHourField#FastDatePrinter$TwelveHourField(org.apache.commons.lang3.time.FastDatePrinter$NumberRule)": -0.4374736276355251,
        "org.apache.commons.lang3.time$FastDatePrinter$TwelveHourField#appendTo(java.lang.StringBuffer,int)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwelveHourField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwelveHourField#estimateLength()": -0.437473627635525,
        "org.apache.commons.lang3.time$FastDatePrinter$TwentyFourHourField#FastDatePrinter$TwentyFourHourField(org.apache.commons.lang3.time.FastDatePrinter$NumberRule)": -0.0996204262508611,
        "org.apache.commons.lang3.time$FastDatePrinter$TwentyFourHourField#appendTo(java.lang.StringBuffer,int)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwentyFourHourField#appendTo(java.lang.StringBuffer,java.util.Calendar)": 0.0,
        "org.apache.commons.lang3.time$FastDatePrinter$TwentyFourHourField#estimateLength()": -0.09962042625086101,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitMonthField#<clinit>()": -1.4291557590875548,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitMonthField#FastDatePrinter$TwoDigitMonthField()": -1.4291557590875548,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitMonthField#appendTo(java.lang.StringBuffer,int)": -0.9261892638916729,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitMonthField#appendTo(java.lang.StringBuffer,java.util.Calendar)": -0.9261892638916728,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitMonthField#estimateLength()": -1.4291557590875548,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitNumberField#FastDatePrinter$TwoDigitNumberField(int)": -1.5366600265340757,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitNumberField#appendTo(java.lang.StringBuffer,int)": -1.0024725207002234,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitNumberField#appendTo(java.lang.StringBuffer,java.util.Calendar)": -1.0024725207002236,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitNumberField#estimateLength()": -1.5366600265340757,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitYearField#<clinit>()": -0.32486555641382775,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitYearField#FastDatePrinter$TwoDigitYearField()": -0.32486555641382786,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitYearField#appendTo(java.lang.StringBuffer,int)": -0.2159075191683888,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitYearField#appendTo(java.lang.StringBuffer,java.util.Calendar)": -0.21590751916838868,
        "org.apache.commons.lang3.time$FastDatePrinter$TwoDigitYearField#estimateLength()": -0.32486555641382786,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedMonthField#<clinit>()": -0.4785533905932738,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedMonthField#FastDatePrinter$UnpaddedMonthField()": -0.47855339059327373,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedMonthField#appendTo(java.lang.StringBuffer,int)": -0.273606797749979,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedMonthField#appendTo(java.lang.StringBuffer,java.util.Calendar)": -0.273606797749979,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedMonthField#estimateLength()": -0.47855339059327373,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedNumberField#FastDatePrinter$UnpaddedNumberField(int)": -0.32017008573894074,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedNumberField#appendTo(java.lang.StringBuffer,int)": -0.273606797749979,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedNumberField#appendTo(java.lang.StringBuffer,java.util.Calendar)": -0.273606797749979,
        "org.apache.commons.lang3.time$FastDatePrinter$UnpaddedNumberField#estimateLength()": -0.32017008573894074,
        "org.apache.commons.lang3.time$FormatCache#<clinit>()": -1.2819151551424868,
        "org.apache.commons.lang3.time$FormatCache#FormatCache()": -1.255228246450894,
        "org.apache.commons.lang3.time$FormatCache#getDateTimeInstance(java.lang.Integer,java.lang.Integer,java.util.TimeZone,java.util.Locale)": -0.32486555641382775,
        "org.apache.commons.lang3.time$FormatCache#getInstance()": -0.1457661115402472,
        "org.apache.commons.lang3.time$FormatCache#getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)": -0.39286633665593534,
        "org.apache.commons.lang3.time$FormatCache#getPatternForStyle(java.lang.Integer,java.lang.Integer,java.util.Locale)": -0.416227766016838,
        "org.apache.commons.lang3.time$FormatCache$MultipartKey#FormatCache$MultipartKey(java.lang.Object[])": -0.41955324534752797,
        "org.apache.commons.lang3.time$FormatCache$MultipartKey#equals(java.lang.Object)": -0.6115077526221708,
        "org.apache.commons.lang3.time$FormatCache$MultipartKey#hashCode()": -0.42509454970921096
    },
    "Math-1": {
        "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException()": -0.021878924249116676,
        "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 1.740292735185445,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": -0.052758109893505496,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.12369028469602385,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": -0.015375710796278197,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.6747739580306314,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": -0.04750359488023137,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": -0.021878924249116638,
        "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()": -0.5888786306228067,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.5888786306228067,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": -0.05988401251629494,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": 1.672730226802686,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 1.644611113111841,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": 0.33030042737135734,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": 0.4472911693207263,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])": -0.04750359488023142,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.07422668671456824,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)": -0.07608947514539702,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": -0.05759309805546549,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": -0.12115086690698512,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.15382546225722074,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": -0.19067330655455889,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.30526981817877075,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": -0.026922393052368765,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": -0.026922393052368765,
        "org.apache.commons.math3.exception$ZeroException#ZeroException()": -0.021878924249116676,
        "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.05522124859613466,
        "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()": 1.0407318401369938,
        "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)": -0.30505459748991093,
        "org.apache.commons.math3.exception.util$LocalizedFormats#getLocalizedString(java.util.Locale)": 0.41899231377696033,
        "org.apache.commons.math3.exception.util$LocalizedFormats#getSourceString()": -0.021878924249116638,
        "org.apache.commons.math3.fraction$BigFraction#<clinit>()": 0.9600763531309402,
        "org.apache.commons.math3.fraction$BigFraction#BigFraction(double)": -0.0384771699158804,
        "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,double,int)": -0.03501520933581241,
        "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,double,int,int)": 1.0786296112706673,
        "org.apache.commons.math3.fraction$BigFraction#BigFraction(double,int)": 1.1017310703902694,
        "org.apache.commons.math3.fraction$BigFraction#BigFraction(int)": 0.9600763531309402,
        "org.apache.commons.math3.fraction$BigFraction#BigFraction(int,int)": 0.9600763531309402,
        "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger)": -0.021878924249116676,
        "org.apache.commons.math3.fraction$BigFraction#BigFraction(java.math.BigInteger,java.math.BigInteger)": 0.9600763531309402,
        "org.apache.commons.math3.fraction$BigFraction#BigFraction(long)": -0.015375710796278103,
        "org.apache.commons.math3.fraction$BigFraction#BigFraction(long,long)": -0.015375710796278103,
        "org.apache.commons.math3.fraction$BigFraction#abs()": -0.015375710796278103,
        "org.apache.commons.math3.fraction$BigFraction#add(int)": -0.015375710796278103,
        "org.apache.commons.math3.fraction$BigFraction#add(java.math.BigInteger)": -0.015375710796278103,
        "org.apache.commons.math3.fraction$BigFraction#add(long)": -0.015375710796278103,
        "org.apache.commons.math3.fraction$BigFraction#add(org.apache.commons.math3.fraction.BigFraction)": -0.079707264814555,
        "org.apache.commons.math3.fraction$BigFraction#bigDecimalValue()": -0.015375710796278197,
        "org.apache.commons.math3.fraction$BigFraction#bigDecimalValue(int)": -0.015375710796278197,
        "org.apache.commons.math3.fraction$BigFraction#bigDecimalValue(int,int)": -0.021878924249116638,
        "org.apache.commons.math3.fraction$BigFraction#compareTo(org.apache.commons.math3.fraction.BigFraction)": -0.021878924249116638,
        "org.apache.commons.math3.fraction$BigFraction#divide(int)": -0.021878924249116676,
        "org.apache.commons.math3.fraction$BigFraction#divide(java.math.BigInteger)": -0.021878924249116676,
        "org.apache.commons.math3.fraction$BigFraction#divide(long)": -0.015375710796278103,
        "org.apache.commons.math3.fraction$BigFraction#divide(org.apache.commons.math3.fraction.BigFraction)": -0.06210252536093609,
        "org.apache.commons.math3.fraction$BigFraction#doubleValue()": -0.10779448274953021,
        "org.apache.commons.math3.fraction$BigFraction#equals(java.lang.Object)": -0.11594834715785776,
        "org.apache.commons.math3.fraction$BigFraction#floatValue()": -0.021878924249116676,
        "org.apache.commons.math3.fraction$BigFraction#getDenominator()": -0.05019091148150778,
        "org.apache.commons.math3.fraction$BigFraction#getDenominatorAsInt()": 0.19486085887529397,
        "org.apache.commons.math3.fraction$BigFraction#getDenominatorAsLong()": -0.021878924249116638,
        "org.apache.commons.math3.fraction$BigFraction#getField()": -0.07422668671456822,
        "org.apache.commons.math3.fraction$BigFraction#getNumerator()": -0.05019091148150778,
        "org.apache.commons.math3.fraction$BigFraction#getNumeratorAsInt()": 0.19264234603065272,
        "org.apache.commons.math3.fraction$BigFraction#getNumeratorAsLong()": -0.021878924249116638,
        "org.apache.commons.math3.fraction$BigFraction#getReducedFraction(int,int)": -0.015375710796278103,
        "org.apache.commons.math3.fraction$BigFraction#hashCode()": -0.015375710796278197,
        "org.apache.commons.math3.fraction$BigFraction#intValue()": -0.015375710796278197,
        "org.apache.commons.math3.fraction$BigFraction#longValue()": -0.015375710796278197,
        "org.apache.commons.math3.fraction$BigFraction#multiply(int)": -0.031210242423021912,
        "org.apache.commons.math3.fraction$BigFraction#multiply(java.math.BigInteger)": -0.03501520933581241,
        "org.apache.commons.math3.fraction$BigFraction#multiply(long)": -0.015375710796278103,
        "org.apache.commons.math3.fraction$BigFraction#multiply(org.apache.commons.math3.fraction.BigFraction)": -0.10497003126767249,
        "org.apache.commons.math3.fraction$BigFraction#negate()": -0.02692239305236878,
        "org.apache.commons.math3.fraction$BigFraction#percentageValue()": -0.015375710796278103,
        "org.apache.commons.math3.fraction$BigFraction#pow(double)": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#pow(int)": -0.021878924249116676,
        "org.apache.commons.math3.fraction$BigFraction#pow(java.math.BigInteger)": -0.015375710796278103,
        "org.apache.commons.math3.fraction$BigFraction#pow(long)": -0.015375710796278103,
        "org.apache.commons.math3.fraction$BigFraction#reciprocal()": -0.07422668671456824,
        "org.apache.commons.math3.fraction$BigFraction#reduce()": -0.11328008630849606,
        "org.apache.commons.math3.fraction$BigFraction#subtract(int)": -0.015375710796278103,
        "org.apache.commons.math3.fraction$BigFraction#subtract(java.math.BigInteger)": -0.015375710796278103,
        "org.apache.commons.math3.fraction$BigFraction#subtract(long)": 0.0,
        "org.apache.commons.math3.fraction$BigFraction#subtract(org.apache.commons.math3.fraction.BigFraction)": -0.10208566194093806,
        "org.apache.commons.math3.fraction$BigFraction#toString()": 0.0,
        "org.apache.commons.math3.fraction$Fraction#<clinit>()": 0.848688462089926,
        "org.apache.commons.math3.fraction$Fraction#Fraction(double)": -0.1198661513053214,
        "org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int)": -0.12369028469602385,
        "org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int,int)": 0.9921612383777365,
        "org.apache.commons.math3.fraction$Fraction#Fraction(double,int)": 1.1017310703902694,
        "org.apache.commons.math3.fraction$Fraction#Fraction(int)": -0.23241046961427103,
        "org.apache.commons.math3.fraction$Fraction#Fraction(int,int)": 0.848688462089926,
        "org.apache.commons.math3.fraction$Fraction#abs()": -0.015375710796278103,
        "org.apache.commons.math3.fraction$Fraction#add(int)": -0.015375710796278103,
        "org.apache.commons.math3.fraction$Fraction#add(org.apache.commons.math3.fraction.Fraction)": -0.114620093402313,
        "org.apache.commons.math3.fraction$Fraction#addSub(org.apache.commons.math3.fraction.Fraction,boolean)": -0.1334855342069352,
        "org.apache.commons.math3.fraction$Fraction#compareTo(org.apache.commons.math3.fraction.Fraction)": -0.015375710796278197,
        "org.apache.commons.math3.fraction$Fraction#divide(int)": -0.015375710796278103,
        "org.apache.commons.math3.fraction$Fraction#divide(org.apache.commons.math3.fraction.Fraction)": -0.079707264814555,
        "org.apache.commons.math3.fraction$Fraction#doubleValue()": -0.08489656663129774,
        "org.apache.commons.math3.fraction$Fraction#equals(java.lang.Object)": -0.2173624636859206,
        "org.apache.commons.math3.fraction$Fraction#floatValue()": -0.015375710796278103,
        "org.apache.commons.math3.fraction$Fraction#getDenominator()": 0.16984830476029117,
        "org.apache.commons.math3.fraction$Fraction#getField()": -0.16536284468534435,
        "org.apache.commons.math3.fraction$Fraction#getNumerator()": 0.16817469158321202,
        "org.apache.commons.math3.fraction$Fraction#getReducedFraction(int,int)": -0.12242548319740196,
        "org.apache.commons.math3.fraction$Fraction#hashCode()": -0.03847716991588035,
        "org.apache.commons.math3.fraction$Fraction#intValue()": -0.015375710796278103,
        "org.apache.commons.math3.fraction$Fraction#longValue()": -0.015375710796278103,
        "org.apache.commons.math3.fraction$Fraction#multiply(int)": -0.015375710796278103,
        "org.apache.commons.math3.fraction$Fraction#multiply(org.apache.commons.math3.fraction.Fraction)": -0.12115086690698512,
        "org.apache.commons.math3.fraction$Fraction#negate()": -0.08146676228604754,
        "org.apache.commons.math3.fraction$Fraction#percentageValue()": -0.021878924249116676,
        "org.apache.commons.math3.fraction$Fraction#reciprocal()": -0.08146676228604754,
        "org.apache.commons.math3.fraction$Fraction#subtract(int)": -0.015375710796278103,
        "org.apache.commons.math3.fraction$Fraction#subtract(org.apache.commons.math3.fraction.Fraction)": -0.08657017980837702,
        "org.apache.commons.math3.fraction$Fraction#toString()": -0.026922393052368765,
        "org.apache.commons.math3.fraction$FractionConversionException#FractionConversionException(double,int)": -0.021878924249116676,
        "org.apache.commons.math3.fraction$FractionConversionException#FractionConversionException(double,long,long)": 1.793077606947631,
        "org.apache.commons.math3.util$ArithmeticUtils#ArithmeticUtils()": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(int,int)": -0.10638947010185616,
        "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(long,long)": -0.02692239305236878,
        "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(long,long,org.apache.commons.math3.exception.util.Localizable)": -0.031210242423021912,
        "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficient(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficientDouble(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficientLog(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#factorial(int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#factorialDouble(int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#factorialLog(int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#gcd(int,int)": 0.8434628655225069,
        "org.apache.commons.math3.util$ArithmeticUtils#gcd(long,long)": -0.02692239305236878,
        "org.apache.commons.math3.util$ArithmeticUtils#gcdPositive(int,int)": -0.01889904427245176,
        "org.apache.commons.math3.util$ArithmeticUtils#isPowerOfTwo(long)": -0.11192794046442267,
        "org.apache.commons.math3.util$ArithmeticUtils#lcm(int,int)": -0.015375710796278103,
        "org.apache.commons.math3.util$ArithmeticUtils#lcm(long,long)": -0.015375710796278103,
        "org.apache.commons.math3.util$ArithmeticUtils#mulAndCheck(int,int)": -0.13702505459527473,
        "org.apache.commons.math3.util$ArithmeticUtils#mulAndCheck(long,long)": -0.059884012516294854,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(int,int)": -0.02692239305236878,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(int,long)": -0.021878924249116676,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,int)": -0.015375710796278103,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,java.math.BigInteger)": -0.021878924249116676,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,long)": -0.021878924249116676,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(long,int)": -0.015375710796278103,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(long,long)": -0.015375710796278103,
        "org.apache.commons.math3.util$ArithmeticUtils#stirlingS2(int,int)": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#subAndCheck(int,int)": -0.08821822581204553,
        "org.apache.commons.math3.util$ArithmeticUtils#subAndCheck(long,long)": -0.015375710796278103,
        "org.apache.commons.math3.util$FastMath#<clinit>()": -1.2973339727189788,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0.0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": -0.04750359488023137,
        "org.apache.commons.math3.util$FastMath#abs(double)": -0.7463824137592793,
        "org.apache.commons.math3.util$FastMath#abs(float)": -0.021878924249116638,
        "org.apache.commons.math3.util$FastMath#abs(int)": -0.09804284217234166,
        "org.apache.commons.math3.util$FastMath#abs(long)": -0.4399845829052274,
        "org.apache.commons.math3.util$FastMath#acos(double)": -0.09913657723465417,
        "org.apache.commons.math3.util$FastMath#acosh(double)": -0.03501520933581241,
        "org.apache.commons.math3.util$FastMath#asin(double)": -0.10061953379407922,
        "org.apache.commons.math3.util$FastMath#asinh(double)": -0.03501520933581241,
        "org.apache.commons.math3.util$FastMath#atan(double)": -0.10353562175684972,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": -0.20429991761513094,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": -0.16942186434587064,
        "org.apache.commons.math3.util$FastMath#atanh(double)": -0.03501520933581241,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": -0.11328008630849606,
        "org.apache.commons.math3.util$FastMath#ceil(double)": -0.33249658291184175,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": -0.07970726481455492,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": -0.021878924249116638,
        "org.apache.commons.math3.util$FastMath#cos(double)": -0.3489098960471341,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": -0.40014382817203364,
        "org.apache.commons.math3.util$FastMath#cosh(double)": -0.09611730302466887,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": -0.1663839678593828,
        "org.apache.commons.math3.util$FastMath#exp(double)": -0.6331576671653215,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": -0.768383815086755,
        "org.apache.commons.math3.util$FastMath#expm1(double)": -0.06838969773014425,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": -0.10497003126767249,
        "org.apache.commons.math3.util$FastMath#floor(double)": -0.13473084438738037,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": -0.15489894706326823,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": -0.021878924249116638,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": -0.1494775770166724,
        "org.apache.commons.math3.util$FastMath#log(double)": -0.6762069894631126,
        "org.apache.commons.math3.util$FastMath#log(double,double)": -0.015375710796278103,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": -0.8071326067590503,
        "org.apache.commons.math3.util$FastMath#log10(double)": -0.12619151665910955,
        "org.apache.commons.math3.util$FastMath#log1p(double)": -0.47695985044423234,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0.0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": -0.7083784885246436,
        "org.apache.commons.math3.util$FastMath#max(float,float)": -0.021878924249116638,
        "org.apache.commons.math3.util$FastMath#max(int,int)": -0.5623516204183479,
        "org.apache.commons.math3.util$FastMath#max(long,long)": -0.05759309805546553,
        "org.apache.commons.math3.util$FastMath#min(double,double)": -0.4786226189846148,
        "org.apache.commons.math3.util$FastMath#min(float,float)": -0.021878924249116638,
        "org.apache.commons.math3.util$FastMath#min(int,int)": -0.7288964161248541,
        "org.apache.commons.math3.util$FastMath#min(long,long)": -0.11857103785489742,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": -0.06210252536093619,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": -0.026922393052368765,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": -0.02692239305236878,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": -0.015375710796278103,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": -0.42687872736730315,
        "org.apache.commons.math3.util$FastMath#polySine(double)": -0.42687872736730315,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": -0.5843243045407848,
        "org.apache.commons.math3.util$FastMath#pow(double,int)": -0.2882654204852064,
        "org.apache.commons.math3.util$FastMath#random()": -0.07037999061891198,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": -0.03501520933581241,
        "org.apache.commons.math3.util$FastMath#rint(double)": -0.14726977319731396,
        "org.apache.commons.math3.util$FastMath#round(double)": -0.079707264814555,
        "org.apache.commons.math3.util$FastMath#round(float)": -0.015375710796278103,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": -0.1370250545952747,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": -0.021878924249116638,
        "org.apache.commons.math3.util$FastMath#signum(double)": -0.05988401251629494,
        "org.apache.commons.math3.util$FastMath#signum(float)": -0.021878924249116638,
        "org.apache.commons.math3.util$FastMath#sin(double)": -0.4091514295137938,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": -0.413321256184148,
        "org.apache.commons.math3.util$FastMath#sinh(double)": -0.09611730302466887,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": -1.1699280579428173,
        "org.apache.commons.math3.util$FastMath#tan(double)": -0.09144275436252094,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": -0.09144275436252094,
        "org.apache.commons.math3.util$FastMath#tanh(double)": -0.06210252536093609,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": -0.031210242423021912,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": -0.031210242423021912,
        "org.apache.commons.math3.util$FastMath#ulp(double)": -0.3244612216207248,
        "org.apache.commons.math3.util$FastMath#ulp(float)": -0.015375710796278103,
        "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)": -0.3617497283751354,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getK()": -0.3617497283751354,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()": -0.3617497283751354,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()": -0.3617497283751354,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": -0.7610957955536637,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": -0.7588129689737146,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": -0.7981828907478752,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0.0,
        "org.apache.commons.math3.util$MathUtils#MathUtils()": 0.0,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double)": -0.06634977336734108,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double[])": -0.015375710796278103,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)": -0.8253687913403241,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.9569164741245275,
        "org.apache.commons.math3.util$MathUtils#copySign(byte,byte)": -0.031210242423021912,
        "org.apache.commons.math3.util$MathUtils#copySign(int,int)": -0.031210242423021912,
        "org.apache.commons.math3.util$MathUtils#copySign(long,long)": -0.021878924249116676,
        "org.apache.commons.math3.util$MathUtils#copySign(short,short)": -0.021878924249116676,
        "org.apache.commons.math3.util$MathUtils#hash(double)": -0.11594834715785773,
        "org.apache.commons.math3.util$MathUtils#hash(double[])": -0.10208566194093804,
        "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)": -0.1249455428088111,
        "org.apache.commons.math3.util$MathUtils#reduce(double,double,double)": -0.03501520933581241
    },
    "Math-10": {
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()": 0.15606620584430775,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)": 1.5018526434712127,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#acos(double[],int,double[],int)": -0.01686369496213708,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#acosh(double[],int,double[],int)": -0.01686369496213708,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#add(double[],int,double[],int,double[],int)": 1.6094154653493138,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#asin(double[],int,double[],int)": -0.01686369496213708,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#asinh(double[],int,double[],int)": -0.01686369496213708,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan(double[],int,double[],int)": 1.7857222523431997,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)": 1.7959899378250443,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#atanh(double[],int,double[],int)": -0.01686369496213708,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)": 1.571411573775796,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])": 1.5018526434712127,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)": 0.15606620584430775,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)": 1.5018526434712127,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])": 1.5018526434712127,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)": 0.15606620584430775,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)": 1.6277036410835999,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])": 1.64367123474121,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)": -0.05224215808398965,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#cosh(double[],int,double[],int)": -0.029557689299017108,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#divide(double[],int,double[],int,double[],int)": 1.7403103234022912,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#exp(double[],int,double[],int)": -0.07075692624370516,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#expm1(double[],int,double[],int)": -0.02401006217495555,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)": 1.5018526434712127,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()": -0.3032390352618455,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#getOrder()": -0.2566421510856345,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])": 1.5043100651756185,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])": -0.30323903526184554,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeOrders(int)": -0.042284473222415464,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()": 0.15606620584430775,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#linearCombination(double,double[],int,double,double[],int,double,double[],int,double,double[],int,double[],int)": -0.01686369496213708,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#linearCombination(double,double[],int,double,double[],int,double,double[],int,double[],int)": -0.01686369496213708,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#linearCombination(double,double[],int,double,double[],int,double[],int)": -0.01686369496213708,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#log(double[],int,double[],int)": -0.04912083981496338,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#log10(double[],int,double[],int)": -0.02401006217495555,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#log1p(double[],int,double[],int)": -0.02401006217495555,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#multiply(double[],int,double[],int,double[],int)": 1.6333015558864812,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double,double[],int)": -0.038468943967539054,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)": -0.02401006217495555,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,int,double[],int)": 1.7139170791851472,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#remainder(double[],int,double[],int,double[],int)": -0.01686369496213708,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)": 1.7191085063950053,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)": -0.06338807062895337,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#sinh(double[],int,double[],int)": -0.02401006217495555,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#subtract(double[],int,double[],int,double[],int)": -0.13105746552530056,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#tan(double[],int,double[],int)": -0.029557689299017108,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#tanh(double[],int,double[],int)": -0.02401006217495555,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#taylor(double[],int,double[])": -0.02401006217495555,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": -0.01686369496213708,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": -0.01686369496213708,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": -0.01686369496213708,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)": 1.5076032015428802,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)": 1.5092570136526988,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])": -0.19887548867237173,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)": 1.5117469685399008,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)": 1.5076032015428802,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": -0.24539510730484815,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#abs()": -0.01686369496213708,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acos()": -0.01686369496213708,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acosh()": -0.01686369496213708,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#add(double)": -0.15550457097698328,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": -0.2084872751947178,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asin()": -0.01686369496213708,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asinh()": -0.01686369496213708,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan()": -0.029557689299017108,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": 1.7959899378250443,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atanh()": -0.01686369496213708,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()": -0.02401006217495555,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()": -0.01686369496213708,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#compose(double[])": -0.07753606374421101,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#copySign(double)": -0.01686369496213708,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()": -0.05224215808398965,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cosh()": -0.029557689299017108,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(double)": -0.06076645179561264,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": -0.07753606374421101,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#exp()": -0.0659210479134284,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#expm1()": -0.02401006217495555,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()": -0.01686369496213708,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getAllDerivatives()": -0.06837472957155977,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getExponent()": -0.0342777476568003,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getField()": -0.16429917847086978,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getFreeParameters()": -0.21370563158419578,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getOrder()": -0.23087800453559426,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])": -0.30239884891497987,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getValue()": 0.2259779459475194,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": -0.0342777476568003,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log()": -0.04228447322241546,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log10()": -0.02401006217495555,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log1p()": -0.02401006217495555,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(double)": -0.180986666954706,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(int)": -0.05804485124767909,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": -0.1679697588545092,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#negate()": -0.06837472957155977,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(double)": -0.038468943967539054,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(int)": -0.038468943967539054,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": -0.02401006217495555,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#reciprocal()": -0.06338807062895337,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#remainder(double)": -0.01686369496213708,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#remainder(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": -0.01686369496213708,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()": -0.01686369496213708,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)": -0.09731208020371401,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#round()": -0.01686369496213708,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#scalb(int)": -0.0342777476568003,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()": -0.01686369496213708,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()": -0.06338807062895337,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sinh()": -0.02401006217495555,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()": -0.0917398177972494,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#subtract(double)": -0.1296033771180085,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#subtract(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": -0.13105746552530056,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()": -0.029557689299017108,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tanh()": -0.02401006217495555,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#taylor(double[])": -0.02401006217495555,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#toDegrees()": -0.02401006217495555,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#toRadians()": -0.02401006217495555,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#writeReplace()": -0.01686369496213708,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$1#getOne()": -0.0730742447620194,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$1#getRuntimeClass()": -0.016863694962137243,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$1#getZero()": -0.1593150206432592,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#DerivativeStructure$DataTransferObject(int,int,double[])": -0.01686369496213708,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()": -0.01686369496213708,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)": -0.26306819532665143,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)": -0.2818170170976138,
        "org.apache.commons.math3.exception$DimensionMismatchException#getDimension()": -0.029557689299017254,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.7096843226312411,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": -0.052242158083989576,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.6226605381556297,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": -0.06592104791342823,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)": -0.10608292081485271,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.22691115019843072,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getBoundIsAllowed()": -0.016863694962137243,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getMax()": -0.016863694962137243,
        "org.apache.commons.math3.util$FastMath#<clinit>()": -1.3573907865405173,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0.0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": -0.016863694962137243,
        "org.apache.commons.math3.util$FastMath#abs(double)": -1.2361306897529172,
        "org.apache.commons.math3.util$FastMath#abs(float)": -0.024010062174955493,
        "org.apache.commons.math3.util$FastMath#abs(int)": -0.3921543856565628,
        "org.apache.commons.math3.util$FastMath#abs(long)": -0.7607034868887212,
        "org.apache.commons.math3.util$FastMath#acos(double)": -0.08982205213594681,
        "org.apache.commons.math3.util$FastMath#acosh(double)": -0.02401006217495555,
        "org.apache.commons.math3.util$FastMath#asin(double)": -0.08588484234162365,
        "org.apache.commons.math3.util$FastMath#asinh(double)": -0.02401006217495555,
        "org.apache.commons.math3.util$FastMath#atan(double)": 1.717355458509864,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": 1.6168163110084044,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": -0.17866793891936902,
        "org.apache.commons.math3.util$FastMath#atanh(double)": -0.02401006217495555,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": -0.11906338377177353,
        "org.apache.commons.math3.util$FastMath#ceil(double)": -0.36381691625363205,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": -0.06338807062895335,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": -0.024010062174955493,
        "org.apache.commons.math3.util$FastMath#cos(double)": -0.36609488603636486,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": -0.42442730773672016,
        "org.apache.commons.math3.util$FastMath#cosh(double)": -0.09911441060036938,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": -0.1691810865896799,
        "org.apache.commons.math3.util$FastMath#exp(double)": -0.6670257118647389,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": -0.7927555882867614,
        "org.apache.commons.math3.util$FastMath#expm1(double)": -0.06837472957155977,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": -0.09911441060036938,
        "org.apache.commons.math3.util$FastMath#floor(double)": -0.6853536955691288,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": -0.16552892440641886,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": -0.024010062174955493,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": -0.15931502064325917,
        "org.apache.commons.math3.util$FastMath#log(double)": -0.7180958190788678,
        "org.apache.commons.math3.util$FastMath#log(double,double)": -0.01686369496213708,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": -0.840236246334894,
        "org.apache.commons.math3.util$FastMath#log10(double)": -0.1395471040822228,
        "org.apache.commons.math3.util$FastMath#log1p(double)": -0.4955220342561831,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0.0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": -0.7397921983345932,
        "org.apache.commons.math3.util$FastMath#max(float,float)": -0.024010062174955493,
        "org.apache.commons.math3.util$FastMath#max(int,int)": -0.0761909899998573,
        "org.apache.commons.math3.util$FastMath#max(long,long)": -0.016863694962137243,
        "org.apache.commons.math3.util$FastMath#min(double,double)": -0.4902792429246112,
        "org.apache.commons.math3.util$FastMath#min(float,float)": -0.024010062174955493,
        "org.apache.commons.math3.util$FastMath#min(int,int)": -0.21227919545279794,
        "org.apache.commons.math3.util$FastMath#min(long,long)": -0.10777024502563015,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": -0.06837472957155977,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": -0.029557689299017254,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": -0.029557689299017108,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": -0.01686369496213708,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": -0.4521329944578931,
        "org.apache.commons.math3.util$FastMath#polySine(double)": -0.4521329944578931,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": -0.5903366342430081,
        "org.apache.commons.math3.util$FastMath#pow(double,int)": 0.19327266319275094,
        "org.apache.commons.math3.util$FastMath#random()": -0.07753606374421085,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": -0.038468943967539054,
        "org.apache.commons.math3.util$FastMath#rint(double)": -0.15550457097698328,
        "org.apache.commons.math3.util$FastMath#round(double)": -0.08386097238595963,
        "org.apache.commons.math3.util$FastMath#round(float)": -0.01686369496213708,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": -0.14229474899240602,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": -0.024010062174955493,
        "org.apache.commons.math3.util$FastMath#signum(double)": -0.060766451795612575,
        "org.apache.commons.math3.util$FastMath#signum(float)": -0.024010062174955493,
        "org.apache.commons.math3.util$FastMath#sin(double)": -0.4349167020325545,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": -0.439078133352888,
        "org.apache.commons.math3.util$FastMath#sinh(double)": -0.09911441060036938,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": -0.7361802274536572,
        "org.apache.commons.math3.util$FastMath#tan(double)": -0.09362628748978659,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": -0.09362628748978659,
        "org.apache.commons.math3.util$FastMath#tanh(double)": -0.06076645179561264,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": -0.0342777476568003,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": -0.0342777476568003,
        "org.apache.commons.math3.util$FastMath#ulp(double)": -0.3584723603377441,
        "org.apache.commons.math3.util$FastMath#ulp(float)": -0.01686369496213708,
        "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)": -0.3884868583731653,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getK()": -0.3884868583731653,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()": -0.3884868583731653,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()": -0.3884868583731653,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": -0.7841113208338677,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": -0.7819448049736777,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": -0.8323024281207756,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0.0
    },
    "Math-11": {
        "org.apache.commons.math3.distribution$AbstractMultivariateRealDistribution#AbstractMultivariateRealDistribution(org.apache.commons.math3.random.RandomGenerator,int)": 0.4262368660343273,
        "org.apache.commons.math3.distribution$AbstractMultivariateRealDistribution#getDimension()": 0.4290941623084822,
        "org.apache.commons.math3.distribution$AbstractMultivariateRealDistribution#reseedRandomGenerator(long)": -0.022092082543412418,
        "org.apache.commons.math3.distribution$AbstractMultivariateRealDistribution#sample(int)": -0.022092082543412418,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#AbstractRealDistribution()": 0.0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#AbstractRealDistribution(org.apache.commons.math3.random.RandomGenerator)": 1.2803203238947032,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)": -0.1130952376326096,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()": -0.022092082543412328,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)": -0.18705140698297662,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double)": 0.0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)": -0.1171606304218899,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#reseedRandomGenerator(long)": -0.07870972997643412,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()": -0.15217955037027547,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)": -0.058171298319808676,
        "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)": -0.17528866323445302,
        "org.apache.commons.math3.distribution$MultivariateNormalDistribution#MultivariateNormalDistribution(double[],double[][])": 1.7720233036612323,
        "org.apache.commons.math3.distribution$MultivariateNormalDistribution#MultivariateNormalDistribution(org.apache.commons.math3.random.RandomGenerator,double[],double[][])": 1.7720233036612323,
        "org.apache.commons.math3.distribution$MultivariateNormalDistribution#density(double[])": 1.7979079174565875,
        "org.apache.commons.math3.distribution$MultivariateNormalDistribution#getCovariances()": -0.015524614624028482,
        "org.apache.commons.math3.distribution$MultivariateNormalDistribution#getExponentTerm(double[])": 1.7979079174565875,
        "org.apache.commons.math3.distribution$MultivariateNormalDistribution#getMeans()": 1.7928141210945507,
        "org.apache.commons.math3.distribution$MultivariateNormalDistribution#getStandardDeviations()": 0.0,
        "org.apache.commons.math3.distribution$MultivariateNormalDistribution#sample()": -0.022092082543412418,
        "org.apache.commons.math3.distribution$NormalDistribution#<clinit>()": 1.6397476554604173,
        "org.apache.commons.math3.distribution$NormalDistribution#NormalDistribution()": 0.0,
        "org.apache.commons.math3.distribution$NormalDistribution#NormalDistribution(double,double)": 1.6988775582294278,
        "org.apache.commons.math3.distribution$NormalDistribution#NormalDistribution(double,double,double)": 1.6988775582294278,
        "org.apache.commons.math3.distribution$NormalDistribution#NormalDistribution(org.apache.commons.math3.random.RandomGenerator,double,double,double)": 1.6397476554604173,
        "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double)": -0.06490416342947844,
        "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double,double)": -0.08912396328441155,
        "org.apache.commons.math3.distribution$NormalDistribution#density(double)": 1.729234544639795,
        "org.apache.commons.math3.distribution$NormalDistribution#getMean()": -0.0451194000646129,
        "org.apache.commons.math3.distribution$NormalDistribution#getNumericalMean()": -0.0388575246276057,
        "org.apache.commons.math3.distribution$NormalDistribution#getNumericalVariance()": -0.0388575246276057,
        "org.apache.commons.math3.distribution$NormalDistribution#getSolverAbsoluteAccuracy()": -0.03536032509973275,
        "org.apache.commons.math3.distribution$NormalDistribution#getStandardDeviation()": -0.0451194000646129,
        "org.apache.commons.math3.distribution$NormalDistribution#getSupportLowerBound()": -0.04209233091426601,
        "org.apache.commons.math3.distribution$NormalDistribution#getSupportUpperBound()": -0.04209233091426601,
        "org.apache.commons.math3.distribution$NormalDistribution#isSupportConnected()": -0.03536032509973275,
        "org.apache.commons.math3.distribution$NormalDistribution#isSupportLowerBoundInclusive()": -0.015524614624028654,
        "org.apache.commons.math3.distribution$NormalDistribution#isSupportUpperBoundInclusive()": -0.015524614624028654,
        "org.apache.commons.math3.distribution$NormalDistribution#probability(double,double)": -0.08912396328441155,
        "org.apache.commons.math3.distribution$NormalDistribution#sample()": -0.058171298319808676,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)": -0.23911520349130544,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)": -0.2559806118217796,
        "org.apache.commons.math3.exception$DimensionMismatchException#getDimension()": -0.0271858789054491,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": -0.05328576203364932,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.11171531644513367,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": -0.015524614624028654,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.6375773428646581,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": -0.04797669633876778,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.5603576780328093,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": -0.06048627919132077,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": -0.1360969600095739,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.16401564326731882,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": -0.1324705977102414,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": -0.015524614624028654,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int)": 0.0,
        "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int,java.lang.Class)": -0.058171298319808676,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()": -0.07109344373888686,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.07109344373888686,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)": -0.08912396328441155,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.08912396328441155,
        "org.apache.commons.math3.exception$MaxCountExceededException#getMax()": -0.05817129831980883,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(java.lang.Integer[],java.lang.Integer[])": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])": -0.1046095931453192,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getExpectedDimension(int)": -0.015524614624028654,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getExpectedDimensions()": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getWrongDimension(int)": -0.015524614624028654,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getWrongDimensions()": 0.0,
        "org.apache.commons.math3.exception$NoDataException#NoDataException()": -0.053285762033649375,
        "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)": -0.08576619411639405,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int)": -0.015524614624028482,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int,org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": -0.06490416342947844,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getDirection()": -0.015524614624028654,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getIndex()": -0.015524614624028654,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getPrevious()": -0.015524614624028654,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getStrict()": -0.015524614624028654,
        "org.apache.commons.math3.exception$NotANumberException#NotANumberException()": -0.058171298319808676,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])": -0.04209233091426604,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.06908195256360176,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)": -0.06908195256360176,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": -0.05577461027758045,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)": -0.1171606304218899,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": -0.1565557612164434,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": -0.11581749466120282,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.1488383328604485,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)": -0.0971094508284565,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.20654073884962482,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getBoundIsAllowed()": -0.015524614624028654,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getMax()": -0.015524614624028654,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": -0.1742845123374385,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.2893486704143027,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": -0.0271858789054491,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": -0.0271858789054491,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(java.lang.Number,java.lang.Number,java.lang.Number)": -0.10749508825975736,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)": -0.25911718893232194,
        "org.apache.commons.math3.exception$OutOfRangeException#getHi()": -0.015524614624028654,
        "org.apache.commons.math3.exception$OutOfRangeException#getLo()": -0.015524614624028654,
        "org.apache.commons.math3.exception$ZeroException#ZeroException()": -0.022092082543412418,
        "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.053285762033649375,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix()": -0.022092082543412328,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field)": -0.146581019927297,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)": -0.17926703149279197,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)": -0.03151684673695105,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)": -0.14082582616854733,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)": -0.19462623993033112,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkAdditionCompatible(org.apache.commons.math3.linear.FieldMatrix)": -0.050691861283442115,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)": -0.20109877210751426,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkMultiplicationCompatible(org.apache.commons.math3.linear.FieldMatrix)": -0.06908195256360176,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)": -0.20109877210751426,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)": -0.050691861283442115,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int[],int[])": -0.035360325099732776,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubtractionCompatible(org.apache.commons.math3.linear.FieldMatrix)": -0.03151684673695105,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])": -0.022092082543412418,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int[],int[],org.apache.commons.math3.FieldElement[][])": -0.022092082543412418,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#equals(java.lang.Object)": -0.09397974004037869,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[][])": -0.1671415872425754,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumn(int)": -0.050691861283442115,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)": -0.027185878905449094,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnVector(int)": -0.0388575246276057,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getData()": -0.022092082543412418,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()": -0.205640218081111,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRow(int)": -0.04209233091426604,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)": -0.03151684673695105,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowVector(int)": -0.027185878905449094,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)": -0.022092082543412418,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])": -0.027185878905449094,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getTrace()": -0.027185878905449094,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#hashCode()": -0.027185878905449094,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#isSquare()": -0.10314359016975978,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)": -0.050691861283442115,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": -0.022092082543412418,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.linear.FieldVector)": -0.027185878905449094,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)": -0.015524614624028482,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": -0.015524614624028482,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)": -0.027185878905449094,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)": -0.022092082543412418,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)": -0.022092082543412418,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])": -0.015524614624028482,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": -0.015524614624028482,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)": -0.015524614624028482,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])": -0.015524614624028482,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": -0.015524614624028482,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)": -0.015524614624028482,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": -0.022092082543412418,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)": -0.015524614624028482,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#toString()": -0.022092082543412418,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()": -0.0388575246276057,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.015524614624028482,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.015524614624028482,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.015524614624028482,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.015524614624028482,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.027185878905449094,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.015524614624028482,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.07870972997643412,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.022092082543412418,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.015524614624028482,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.022092082543412418,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$1#visit(int,int,org.apache.commons.math3.FieldElement)": -0.0271858789054491,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$2#start(int,int,int,int,int,int)": -0.022092082543412328,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$2#visit(int,int,org.apache.commons.math3.FieldElement)": -0.022092082543412328,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$3#visit(int,int,org.apache.commons.math3.FieldElement)": -0.03885752462760572,
        "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()": 1.2223011594471527,
        "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()": 1.3266638511003324,
        "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)": 1.2808550534951049,
        "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)": -0.10166126460692226,
        "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])": -0.08912396328441155,
        "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])": -0.022092082543412418,
        "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)": -0.12371061055470278,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)": -0.12751920322715898,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)": -0.10166126460692226,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)": -0.06490416342947844,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getData()": -0.022092082543412418,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()": -0.0971094508284565,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()": -0.1565557612164434,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)": -0.21628609413610983,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)": -0.03151684673695105,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)": -0.12371061055470278,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)": -0.053285762033649375,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])": -0.027185878905449094,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()": -0.027185878905449094,
        "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()": -0.04209233091426604,
        "org.apache.commons.math3.linear$AbstractRealMatrix#isSquare()": 1.558545157965517,
        "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": 1.5967983112017818,
        "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])": -0.022092082543412418,
        "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)": -0.2767363495498517,
        "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)": -0.022092082543412418,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])": -0.015524614624028482,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)": -0.027185878905449094,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)": -0.098644933587139,
        "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)": -0.23082449446741354,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])": 1.769308138716558,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)": -0.022092082543412418,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)": -0.11032229555361368,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])": -0.015524614624028482,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)": -0.015524614624028482,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)": -0.12625913237521266,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)": -0.035360325099732776,
        "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": -0.18123405318685598,
        "org.apache.commons.math3.linear$AbstractRealMatrix#toString()": -0.04209233091426604,
        "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()": 1.5601022037742394,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.015524614624028482,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.015524614624028482,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.045119400064613006,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.015524614624028482,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.035360325099732776,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.015524614624028482,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 1.558545157965517,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.08745798425079067,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.015524614624028482,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.022092082543412418,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#end()": -0.15655576121644343,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#start(int,int,int,int,int,int)": -0.15655576121644343,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#visit(int,int,double)": -0.15655576121644343,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#end()": -0.09710945082845668,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#start(int,int,int,int,int,int)": -0.09710945082845668,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#visit(int,int,double)": -0.09710945082845668,
        "org.apache.commons.math3.linear$AbstractRealMatrix$3#visit(int,int,double)": -0.0271858789054491,
        "org.apache.commons.math3.linear$AbstractRealMatrix$4#start(int,int,int,int,int,int)": -0.08912396328441141,
        "org.apache.commons.math3.linear$AbstractRealMatrix$4#visit(int,int,double)": -0.08912396328441141,
        "org.apache.commons.math3.linear$AbstractRealMatrix$5#visit(int,int,double)": 0.2143157661473346,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field)": -0.022092082543412418,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,int,int)": -0.098644933587139,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])": -0.11849226963497515,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)": -0.09238367513314362,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])": -0.1046095931453192,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)": -0.06908195256360176,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": -0.022092082543412418,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()": -0.022092082543412418,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])": -0.11849226963497515,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyOut()": -0.09555468085806,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#createMatrix(int,int)": -0.06908195256360176,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()": -0.1543785462664684,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getData()": -0.09238367513314362,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getDataRef()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)": -0.13965447133705775,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()": -0.1543785462664684,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": -0.015524614624028482,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": -0.022092082543412418,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": -0.015524614624028482,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)": -0.10314359016975978,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": -0.11849226963497515,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": -0.015524614624028482,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.015524614624028482,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.015524614624028482,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.015524614624028482,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.015524614624028482,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.022092082543412418,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.015524614624028482,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.07686402925582447,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.022092082543412418,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix()": -0.03151684673695105,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[])": -0.03151684673695105,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])": 1.3663782815416439,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)": -0.34036564738539543,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)": 1.3756854584156897,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)": -0.022092082543412418,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()": -0.0604862791913209,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])": 1.365221300929207,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()": 1.450818374442683,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)": 1.4572608357567949,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()": -0.0449775857737954,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getData()": 1.4559675914783756,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getDataRef()": -0.14771274104870113,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)": 1.3463267095212972,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()": -0.04443358739927994,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)": -0.053285762033649375,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)": 1.7720233036612323,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#operate(double[])": -0.13368734507662208,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#preMultiply(double[])": 1.7884831532630487,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)": 1.3809619917525717,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)": 1.365221300929207,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)": -0.015524614624028482,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.015524614624028482,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.015524614624028482,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.1510716197667613,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.015524614624028482,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.03151684673695105,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.015524614624028482,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 1.5593229896049143,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.08745798425079067,
        "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()": 1.2835322128421192,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector()": -0.027185878905449094,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[])": 1.3963815024001573,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)": -0.45072309924957354,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],double[])": -0.015524614624028482,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],int,int)": -0.015524614624028482,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],org.apache.commons.math3.linear.ArrayRealVector)": -0.015524614624028482,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int)": -0.24400580240160707,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int,double)": -0.027185878905449094,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[])": -0.015524614624028482,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[],int,int)": -0.015524614624028482,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector)": -0.015524614624028482,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,boolean)": 1.6161685017191978,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,double[])": -0.015524614624028482,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.ArrayRealVector)": -0.027185878905449094,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.RealVector)": -0.022092082543412418,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector)": -0.015524614624028482,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.ArrayRealVector)": -0.015524614624028482,
        "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)": -0.0479766963387677,
        "org.apache.commons.math3.linear$ArrayRealVector#addToEntry(int,double)": -0.027185878905449094,
        "org.apache.commons.math3.linear$ArrayRealVector#append(double)": -0.022092082543412418,
        "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.RealVector)": -0.022092082543412418,
        "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)": -0.36854002563656546,
        "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)": -0.06702035639792955,
        "org.apache.commons.math3.linear$ArrayRealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)": -0.06702035639792955,
        "org.apache.commons.math3.linear$ArrayRealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": -0.10749508825975736,
        "org.apache.commons.math3.linear$ArrayRealVector#copy()": 1.6170767602746319,
        "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)": -0.31856115947254204,
        "org.apache.commons.math3.linear$ArrayRealVector#ebeDivide(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ebeMultiply(org.apache.commons.math3.linear.RealVector)": -0.08404714491416815,
        "org.apache.commons.math3.linear$ArrayRealVector#equals(java.lang.Object)": -0.11849226963497515,
        "org.apache.commons.math3.linear$ArrayRealVector#getDataRef()": 0.1848648919587924,
        "org.apache.commons.math3.linear$ArrayRealVector#getDimension()": -0.3919117384111832,
        "org.apache.commons.math3.linear$ArrayRealVector#getDistance(org.apache.commons.math3.linear.RealVector)": -0.035360325099732776,
        "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)": -0.35296126305172504,
        "org.apache.commons.math3.linear$ArrayRealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)": -0.03151684673695105,
        "org.apache.commons.math3.linear$ArrayRealVector#getL1Norm()": -0.022092082543412418,
        "org.apache.commons.math3.linear$ArrayRealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)": -0.03151684673695105,
        "org.apache.commons.math3.linear$ArrayRealVector#getLInfNorm()": -0.022092082543412418,
        "org.apache.commons.math3.linear$ArrayRealVector#getNorm()": -0.12751920322715898,
        "org.apache.commons.math3.linear$ArrayRealVector#getSubVector(int,int)": -0.04209233091426604,
        "org.apache.commons.math3.linear$ArrayRealVector#hashCode()": -0.08912396328441155,
        "org.apache.commons.math3.linear$ArrayRealVector#isInfinite()": -0.022092082543412418,
        "org.apache.commons.math3.linear$ArrayRealVector#isNaN()": -0.15328182304877247,
        "org.apache.commons.math3.linear$ArrayRealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)": -0.027185878905449094,
        "org.apache.commons.math3.linear$ArrayRealVector#mapAddToSelf(double)": -0.0271858789054491,
        "org.apache.commons.math3.linear$ArrayRealVector#mapDivideToSelf(double)": -0.03536032509973275,
        "org.apache.commons.math3.linear$ArrayRealVector#mapMultiplyToSelf(double)": -0.15328182304877247,
        "org.apache.commons.math3.linear$ArrayRealVector#mapSubtractToSelf(double)": -0.0271858789054491,
        "org.apache.commons.math3.linear$ArrayRealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": -0.0315168467369511,
        "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)": -0.027185878905449094,
        "org.apache.commons.math3.linear$ArrayRealVector#set(double)": -0.11309523763260954,
        "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)": -0.1629645032329479,
        "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,double[])": -0.08229924800908325,
        "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,org.apache.commons.math3.linear.RealVector)": -0.08404714491416815,
        "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)": -0.17827806142596694,
        "org.apache.commons.math3.linear$ArrayRealVector#toArray()": 0.22698030010764214,
        "org.apache.commons.math3.linear$ArrayRealVector#toString()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": -0.022092082543412328,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": -0.03151684673695105,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": -0.022092082543412328,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": -0.03151684673695105,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": -0.015524614624028482,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": -0.022092082543412418,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": -0.015524614624028482,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": -0.022092082543412418,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(int,int,org.apache.commons.math3.FieldElement[][],boolean)": -0.098644933587139,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)": -0.08576619411639405,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.FieldElement[][])": -0.098644933587139,
        "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.BlockFieldMatrix)": -0.03151684673695105,
        "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)": -0.022092082543412418,
        "org.apache.commons.math3.linear$BlockFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#blockHeight(int)": -0.1074950882597574,
        "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)": -0.11446249342779735,
        "org.apache.commons.math3.linear$BlockFieldMatrix#copy()": -0.015524614624028482,
        "org.apache.commons.math3.linear$BlockFieldMatrix#copyBlockPart(org.apache.commons.math3.FieldElement[],int,int,int,int,int,org.apache.commons.math3.FieldElement[],int,int,int)": -0.027185878905449094,
        "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)": -0.08576619411639405,
        "org.apache.commons.math3.linear$BlockFieldMatrix#createMatrix(int,int)": -0.015524614624028482,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumn(int)": -0.035360325099732776,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()": -0.1074950882597574,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnMatrix(int)": -0.027185878905449094,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnVector(int)": -0.027185878905449094,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getData()": -0.035360325099732776,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)": -0.08745798425079067,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRow(int)": -0.035360325099732776,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()": -0.10891571524203347,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowMatrix(int)": -0.03151684673695105,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowVector(int)": -0.027185878905449094,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getSubMatrix(int,int,int,int)": -0.027185878905449094,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.BlockFieldMatrix)": -0.04209233091426604,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)": -0.0388575246276057,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": -0.027185878905449094,
        "org.apache.commons.math3.linear$BlockFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": -0.022092082543412418,
        "org.apache.commons.math3.linear$BlockFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)": -0.03151684673695105,
        "org.apache.commons.math3.linear$BlockFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)": -0.015524614624028482,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])": -0.03151684673695105,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)": -0.022092082543412418,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": -0.022092082543412418,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)": -0.022092082543412418,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)": -0.035360325099732776,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])": -0.03151684673695105,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)": -0.022092082543412418,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": -0.022092082543412418,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)": -0.022092082543412418,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": -0.022092082543412418,
        "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.BlockFieldMatrix)": -0.022092082543412418,
        "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)": -0.015524614624028482,
        "org.apache.commons.math3.linear$BlockFieldMatrix#toBlocksLayout(org.apache.commons.math3.FieldElement[][])": -0.098644933587139,
        "org.apache.commons.math3.linear$BlockFieldMatrix#transpose()": -0.027185878905449094,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.022092082543412418,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.015524614624028482,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.015524614624028482,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.022092082543412418,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.015524614624028482,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.015524614624028482,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.015524614624028482,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.015524614624028482,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])": -0.2374713650176184,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)": -0.14658101992729705,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)": -0.2575517519139141,
        "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)": -0.03151684673695105,
        "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)": -0.022092082543412418,
        "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)": -0.015524614624028482,
        "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)": -0.2630063994345919,
        "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)": -0.26915935741297337,
        "org.apache.commons.math3.linear$BlockRealMatrix#copy()": -0.035360325099732776,
        "org.apache.commons.math3.linear$BlockRealMatrix#copyBlockPart(double[],int,int,int,int,int,double[],int,int,int)": -0.03151684673695105,
        "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)": -0.17226432811060985,
        "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)": -0.015524614624028482,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumn(int)": -0.07498125901344566,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()": -0.26223130160453945,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)": -0.027185878905449094,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)": -0.027185878905449094,
        "org.apache.commons.math3.linear$BlockRealMatrix#getData()": -0.17926703149279197,
        "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)": -0.15871199712662032,
        "org.apache.commons.math3.linear$BlockRealMatrix#getFrobeniusNorm()": -0.015524614624028482,
        "org.apache.commons.math3.linear$BlockRealMatrix#getNorm()": -0.07870972997643412,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRow(int)": -0.035360325099732776,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()": -0.2630063994345919,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)": -0.03151684673695105,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)": -0.027185878905449094,
        "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)": -0.03151684673695105,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)": -0.058171298319808676,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": -0.058171298319808676,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#operate(double[])": -0.15437854626646846,
        "org.apache.commons.math3.linear$BlockRealMatrix#preMultiply(double[])": -0.022092082543412418,
        "org.apache.commons.math3.linear$BlockRealMatrix#scalarAdd(double)": -0.03151684673695105,
        "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)": -0.015524614624028482,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])": -0.045119400064613006,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)": -0.022092082543412418,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)": -0.022092082543412418,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)": -0.022092082543412418,
        "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)": -0.08229924800908325,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRow(int,double[])": -0.03151684673695105,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)": -0.022092082543412418,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)": -0.022092082543412418,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)": -0.022092082543412418,
        "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)": -0.022092082543412418,
        "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)": -0.07109344373888686,
        "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": -0.07686402925582447,
        "org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])": -0.2374713650176184,
        "org.apache.commons.math3.linear$BlockRealMatrix#transpose()": -0.08576619411639405,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.0479766963387677,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.015524614624028482,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.027185878905449094,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.03151684673695105,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.015524614624028482,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.015524614624028482,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.015524614624028482,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.015524614624028482,
        "org.apache.commons.math3.linear$DefaultRealMatrixPreservingVisitor#DefaultRealMatrixPreservingVisitor()": 0.20966101182360808,
        "org.apache.commons.math3.linear$DefaultRealMatrixPreservingVisitor#end()": 0.20966101182360808,
        "org.apache.commons.math3.linear$DefaultRealMatrixPreservingVisitor#start(int,int,int,int,int,int)": 0.2127587203386122,
        "org.apache.commons.math3.linear$DefaultRealMatrixPreservingVisitor#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#EigenDecomposition(double[],double[])": -0.03151684673695105,
        "org.apache.commons.math3.linear$EigenDecomposition#EigenDecomposition(double[],double[],double)": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#EigenDecomposition(org.apache.commons.math3.linear.RealMatrix)": 1.6791741738314525,
        "org.apache.commons.math3.linear$EigenDecomposition#EigenDecomposition(org.apache.commons.math3.linear.RealMatrix,double)": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#cdiv(double,double,double,double)": -0.022092082543412328,
        "org.apache.commons.math3.linear$EigenDecomposition#findEigenVectors(double[][])": 1.6780097898929414,
        "org.apache.commons.math3.linear$EigenDecomposition#findEigenVectorsFromSchur(org.apache.commons.math3.linear.SchurTransformer)": -0.027185878905449094,
        "org.apache.commons.math3.linear$EigenDecomposition#getD()": -0.10166126460692226,
        "org.apache.commons.math3.linear$EigenDecomposition#getDeterminant()": 0.4262368660343273,
        "org.apache.commons.math3.linear$EigenDecomposition#getEigenvector(int)": 1.7618287016801912,
        "org.apache.commons.math3.linear$EigenDecomposition#getImagEigenvalue(int)": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#getImagEigenvalues()": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#getRealEigenvalue(int)": -0.0451194000646129,
        "org.apache.commons.math3.linear$EigenDecomposition#getRealEigenvalues()": 0.40513160980949336,
        "org.apache.commons.math3.linear$EigenDecomposition#getSolver()": 1.7618287016801912,
        "org.apache.commons.math3.linear$EigenDecomposition#getSquareRoot()": -0.027185878905449094,
        "org.apache.commons.math3.linear$EigenDecomposition#getV()": -0.10891571524203342,
        "org.apache.commons.math3.linear$EigenDecomposition#getVT()": -0.03151684673695105,
        "org.apache.commons.math3.linear$EigenDecomposition#hasComplexEigenvalues()": 1.7618287016801912,
        "org.apache.commons.math3.linear$EigenDecomposition#transformToSchur(org.apache.commons.math3.linear.RealMatrix)": -0.027185878905449094,
        "org.apache.commons.math3.linear$EigenDecomposition#transformToTridiagonal(org.apache.commons.math3.linear.RealMatrix)": 1.6827097933187378,
        "org.apache.commons.math3.linear$EigenDecomposition$Solver#EigenDecomposition$Solver(double[],double[],org.apache.commons.math3.linear.ArrayRealVector[])": 0.41604226405328626,
        "org.apache.commons.math3.linear$EigenDecomposition$Solver#getInverse()": 1.7667142379663505,
        "org.apache.commons.math3.linear$EigenDecomposition$Solver#isNonSingular()": 0.41604226405328626,
        "org.apache.commons.math3.linear$EigenDecomposition$Solver#solve(org.apache.commons.math3.linear.RealMatrix)": -0.022092082543412418,
        "org.apache.commons.math3.linear$EigenDecomposition$Solver#solve(org.apache.commons.math3.linear.RealVector)": -0.022092082543412418,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)": -0.1046095931453192,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getExpectedColumnDimension()": -0.015524614624028482,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getExpectedRowDimension()": -0.015524614624028482,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getWrongColumnDimension()": -0.015524614624028482,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getWrongRowDimension()": -0.015524614624028482,
        "org.apache.commons.math3.linear$MatrixUtils#<clinit>()": 1.2517771818557029,
        "org.apache.commons.math3.linear$MatrixUtils#MatrixUtils()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)": -0.062728167688415,
        "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)": -0.015524614624028482,
        "org.apache.commons.math3.linear$MatrixUtils#checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": -0.12242162399524045,
        "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)": 1.2744535467860918,
        "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)": 1.2921391350175073,
        "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": 1.4566139127327071,
        "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)": 1.2744535467860918,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)": -0.11581749466120282,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])": -0.035360325099732776,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": -0.19926349242200386,
        "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)": -0.022092082543412418,
        "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])": -0.015524614624028482,
        "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])": -0.0971094508284565,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)": -0.022092082543412418,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.Field,int,int)": -0.022092082543412418,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])": -0.015524614624028482,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldVector(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])": -0.13965447133705775,
        "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)": -0.13247059771024128,
        "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])": 1.4324542446088184,
        "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)": -0.23082449446741354,
        "org.apache.commons.math3.linear$MatrixUtils#createRealVector(double[])": -0.015524614624028482,
        "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])": -0.015524614624028482,
        "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])": -0.015524614624028482,
        "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)": -0.022092082543412418,
        "org.apache.commons.math3.linear$MatrixUtils#deserializeRealVector(java.lang.Object,java.lang.String,java.io.ObjectInputStream)": -0.022092082543412418,
        "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)": -0.015524614624028482,
        "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)": 1.6768522236305747,
        "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)": 1.674556958650341,
        "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)": -0.022092082543412418,
        "org.apache.commons.math3.linear$MatrixUtils#serializeRealVector(org.apache.commons.math3.linear.RealVector,java.io.ObjectOutputStream)": -0.022092082543412418,
        "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)": -0.015524614624028482,
        "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)": -0.015524614624028482,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#MatrixUtils$BigFractionMatrixConverter()": -0.06272816768841505,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()": -0.062728167688415,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#start(int,int,int,int,int,int)": -0.06272816768841505,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#visit(int,int,org.apache.commons.math3.fraction.BigFraction)": -0.06272816768841505,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#MatrixUtils$FractionMatrixConverter()": -0.015524614624028654,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()": -0.015524614624028482,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#start(int,int,int,int,int,int)": -0.015524614624028654,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#visit(int,int,org.apache.commons.math3.fraction.Fraction)": -0.015524614624028654,
        "org.apache.commons.math3.linear$NonPositiveDefiniteMatrixException#NonPositiveDefiniteMatrixException(double,int,double)": -0.022092082543412418,
        "org.apache.commons.math3.linear$NonPositiveDefiniteMatrixException#getColumn()": 0.0,
        "org.apache.commons.math3.linear$NonPositiveDefiniteMatrixException#getRow()": 0.0,
        "org.apache.commons.math3.linear$NonPositiveDefiniteMatrixException#getThreshold()": 0.0,
        "org.apache.commons.math3.linear$NonSquareMatrixException#NonSquareMatrixException(int,int)": -0.0604862791913209,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#NonSymmetricMatrixException(int,int,double)": -0.022092082543412418,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#getColumn()": 0.0,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#getRow()": 0.0,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#getThreshold()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)": -0.09238367513314362,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix)": -0.0479766963387677,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)": -0.022092082543412418,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)": -0.09076545536020508,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()": -0.022092082543412418,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)": -0.04209233091426604,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()": -0.09076545536020508,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)": -0.08745798425079067,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()": -0.09076545536020508,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)": -0.03151684673695105,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": -0.03151684673695105,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)": -0.09076545536020503,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)": -0.0388575246276057,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": -0.0388575246276057,
        "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()": -0.141789775105723,
        "org.apache.commons.math3.linear$RealLinearOperator#isTransposable()": 0.0,
        "org.apache.commons.math3.linear$RealLinearOperator#operateTranspose(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat()": -0.015524614624028482,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": 1.2517771818557029,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)": -0.1280830595095236,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)": 1.2177033781173812,
        "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)": -0.06908195256360176,
        "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)": -0.06908195256360176,
        "org.apache.commons.math3.linear$RealMatrixFormat#getAvailableLocales()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getColumnSeparator()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()": -0.12399687211194788,
        "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()": 1.2517771818557029,
        "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)": 1.2177033781173812,
        "org.apache.commons.math3.linear$RealMatrixFormat#getPrefix()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowPrefix()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowSeparator()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowSuffix()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getSuffix()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)": -0.05577461027758045,
        "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)": -0.06490416342947844,
        "org.apache.commons.math3.linear$RealVector#RealVector()": -0.1578736132522528,
        "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)": -0.03151684673695105,
        "org.apache.commons.math3.linear$RealVector#addToEntry(int,double)": -0.0388575246276057,
        "org.apache.commons.math3.linear$RealVector#checkIndex(int)": -0.24883744074112038,
        "org.apache.commons.math3.linear$RealVector#checkIndices(int,int)": -0.08052075418857592,
        "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)": -0.14544304134965888,
        "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)": -0.13247059771024128,
        "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)": -0.0479766963387677,
        "org.apache.commons.math3.linear$RealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": -0.06702035639792955,
        "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)": -0.06702035639792955,
        "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)": -0.08745798425079067,
        "org.apache.commons.math3.linear$RealVector#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.linear$RealVector#getDistance(org.apache.commons.math3.linear.RealVector)": -0.03151684673695105,
        "org.apache.commons.math3.linear$RealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)": -0.03151684673695105,
        "org.apache.commons.math3.linear$RealVector#getL1Norm()": -0.022092082543412418,
        "org.apache.commons.math3.linear$RealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)": -0.03151684673695105,
        "org.apache.commons.math3.linear$RealVector#getLInfNorm()": -0.022092082543412418,
        "org.apache.commons.math3.linear$RealVector#getMaxIndex()": -0.035360325099732776,
        "org.apache.commons.math3.linear$RealVector#getMaxValue()": -0.035360325099732776,
        "org.apache.commons.math3.linear$RealVector#getMinIndex()": -0.035360325099732776,
        "org.apache.commons.math3.linear$RealVector#getMinValue()": -0.035360325099732776,
        "org.apache.commons.math3.linear$RealVector#getNorm()": -0.07686402925582447,
        "org.apache.commons.math3.linear$RealVector#hashCode()": 0.0,
        "org.apache.commons.math3.linear$RealVector#iterator()": -0.14544304134965888,
        "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)": -0.022092082543412418,
        "org.apache.commons.math3.linear$RealVector#mapAdd(double)": -0.027185878905449094,
        "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)": -0.03151684673695105,
        "org.apache.commons.math3.linear$RealVector#mapDivide(double)": -0.04209233091426604,
        "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)": -0.04209233091426604,
        "org.apache.commons.math3.linear$RealVector#mapMultiply(double)": -0.1629645032329479,
        "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)": -0.058171298319808676,
        "org.apache.commons.math3.linear$RealVector#mapSubtract(double)": -0.035360325099732776,
        "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)": -0.035360325099732776,
        "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": -0.08229924800908325,
        "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)": -0.035360325099732776,
        "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)": -0.0604862791913209,
        "org.apache.commons.math3.linear$RealVector#set(double)": -0.022092082543412418,
        "org.apache.commons.math3.linear$RealVector#sparseIterator()": -0.022092082543412418,
        "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)": -0.03151684673695105,
        "org.apache.commons.math3.linear$RealVector#toArray()": -0.027185878905449094,
        "org.apache.commons.math3.linear$RealVector#unitVector()": -0.035360325099732776,
        "org.apache.commons.math3.linear$RealVector#unitize()": -0.035360325099732776,
        "org.apache.commons.math3.linear$RealVector#unmodifiableRealVector(org.apache.commons.math3.linear.RealVector)": -0.08745798425079077,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": -0.03151684673695105,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": -0.045119400064613006,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": -0.03151684673695105,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": -0.045119400064613006,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": -0.022092082543412418,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": -0.03151684673695105,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": -0.022092082543412418,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": -0.03151684673695105,
        "org.apache.commons.math3.linear$RealVector$1#hasNext()": -0.1454430413496588,
        "org.apache.commons.math3.linear$RealVector$1#next()": -0.1454430413496588,
        "org.apache.commons.math3.linear$RealVector$1#remove()": -0.0271858789054491,
        "org.apache.commons.math3.linear$RealVector$2#add(org.apache.commons.math3.linear.RealVector)": -0.022092082543412328,
        "org.apache.commons.math3.linear$RealVector$2#addToEntry(int,double)": -0.022092082543412328,
        "org.apache.commons.math3.linear$RealVector$2#append(double)": -0.022092082543412328,
        "org.apache.commons.math3.linear$RealVector$2#append(org.apache.commons.math3.linear.RealVector)": -0.022092082543412328,
        "org.apache.commons.math3.linear$RealVector$2#combine(double,double,org.apache.commons.math3.linear.RealVector)": -0.022092082543412328,
        "org.apache.commons.math3.linear$RealVector$2#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": -0.022092082543412328,
        "org.apache.commons.math3.linear$RealVector$2#copy()": -0.022092082543412328,
        "org.apache.commons.math3.linear$RealVector$2#cosine(org.apache.commons.math3.linear.RealVector)": -0.022092082543412328,
        "org.apache.commons.math3.linear$RealVector$2#dotProduct(org.apache.commons.math3.linear.RealVector)": -0.022092082543412328,
        "org.apache.commons.math3.linear$RealVector$2#ebeDivide(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#ebeMultiply(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getDimension()": -0.03885752462760572,
        "org.apache.commons.math3.linear$RealVector$2#getDistance(org.apache.commons.math3.linear.RealVector)": -0.022092082543412328,
        "org.apache.commons.math3.linear$RealVector$2#getEntry(int)": -0.0451194000646129,
        "org.apache.commons.math3.linear$RealVector$2#getL1Distance(org.apache.commons.math3.linear.RealVector)": -0.022092082543412328,
        "org.apache.commons.math3.linear$RealVector$2#getL1Norm()": -0.022092082543412328,
        "org.apache.commons.math3.linear$RealVector$2#getLInfDistance(org.apache.commons.math3.linear.RealVector)": -0.022092082543412328,
        "org.apache.commons.math3.linear$RealVector$2#getLInfNorm()": -0.022092082543412328,
        "org.apache.commons.math3.linear$RealVector$2#getNorm()": -0.022092082543412328,
        "org.apache.commons.math3.linear$RealVector$2#getSubVector(int,int)": -0.022092082543412328,
        "org.apache.commons.math3.linear$RealVector$2#isInfinite()": -0.022092082543412328,
        "org.apache.commons.math3.linear$RealVector$2#isNaN()": -0.022092082543412328,
        "org.apache.commons.math3.linear$RealVector$2#iterator()": -0.0315168467369511,
        "org.apache.commons.math3.linear$RealVector$2#map(org.apache.commons.math3.analysis.UnivariateFunction)": -0.022092082543412328,
        "org.apache.commons.math3.linear$RealVector$2#mapAdd(double)": -0.022092082543412328,
        "org.apache.commons.math3.linear$RealVector$2#mapAddToSelf(double)": -0.022092082543412328,
        "org.apache.commons.math3.linear$RealVector$2#mapDivide(double)": -0.022092082543412328,
        "org.apache.commons.math3.linear$RealVector$2#mapDivideToSelf(double)": -0.022092082543412328,
        "org.apache.commons.math3.linear$RealVector$2#mapMultiply(double)": -0.022092082543412328,
        "org.apache.commons.math3.linear$RealVector$2#mapMultiplyToSelf(double)": -0.022092082543412328,
        "org.apache.commons.math3.linear$RealVector$2#mapSubtract(double)": -0.022092082543412328,
        "org.apache.commons.math3.linear$RealVector$2#mapSubtractToSelf(double)": -0.022092082543412328,
        "org.apache.commons.math3.linear$RealVector$2#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": -0.022092082543412328,
        "org.apache.commons.math3.linear$RealVector$2#outerProduct(org.apache.commons.math3.linear.RealVector)": -0.022092082543412328,
        "org.apache.commons.math3.linear$RealVector$2#set(double)": -0.0271858789054491,
        "org.apache.commons.math3.linear$RealVector$2#setEntry(int,double)": -0.022092082543412328,
        "org.apache.commons.math3.linear$RealVector$2#setSubVector(int,org.apache.commons.math3.linear.RealVector)": -0.022092082543412328,
        "org.apache.commons.math3.linear$RealVector$2#sparseIterator()": -0.022092082543412328,
        "org.apache.commons.math3.linear$RealVector$2#subtract(org.apache.commons.math3.linear.RealVector)": -0.0315168467369511,
        "org.apache.commons.math3.linear$RealVector$2#toArray()": -0.022092082543412328,
        "org.apache.commons.math3.linear$RealVector$2#unitVector()": -0.022092082543412328,
        "org.apache.commons.math3.linear$RealVector$2#unitize()": -0.022092082543412328,
        "org.apache.commons.math3.linear$RealVector$2$1#hasNext()": -0.0315168467369511,
        "org.apache.commons.math3.linear$RealVector$2$1#next()": -0.0315168467369511,
        "org.apache.commons.math3.linear$RealVector$2$1#remove()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$2#hasNext()": -0.022092082543412328,
        "org.apache.commons.math3.linear$RealVector$2$2#next()": -0.022092082543412328,
        "org.apache.commons.math3.linear$RealVector$2$2#remove()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#RealVector$2$UnmodifiableEntry(org.apache.commons.math3.linear.RealVector$2)": -0.03885752462760572,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#getValue()": -0.03885752462760572,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#setValue(double)": -0.0315168467369511,
        "org.apache.commons.math3.linear$RealVector$Entry#RealVector$Entry(org.apache.commons.math3.linear.RealVector)": -0.1488383328604485,
        "org.apache.commons.math3.linear$RealVector$Entry#getIndex()": -0.14883833286044856,
        "org.apache.commons.math3.linear$RealVector$Entry#getValue()": -0.14544304134965888,
        "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)": -0.14883833286044856,
        "org.apache.commons.math3.linear$RealVector$Entry#setValue(double)": -0.08576619411639405,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#RealVector$SparseEntryIterator(org.apache.commons.math3.linear.RealVector)": -0.022092082543412418,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)": -0.022092082543412418,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()": -0.022092082543412418,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()": -0.022092082543412418,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#remove()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat()": -0.045119400064613006,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)": -0.06760270931020773,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)": 1.2781837283166972,
        "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector)": -0.07686402925582447,
        "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector,java.lang.StringBuffer,java.text.FieldPosition)": -0.07686402925582447,
        "org.apache.commons.math3.linear$RealVectorFormat#getAvailableLocales()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#getFormat()": -0.022092082543412328,
        "org.apache.commons.math3.linear$RealVectorFormat#getInstance()": 1.2835322128421192,
        "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)": 1.2781837283166972,
        "org.apache.commons.math3.linear$RealVectorFormat#getPrefix()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#getSeparator()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#getSuffix()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String)": -0.08745798425079067,
        "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String,java.text.ParsePosition)": -0.10016195007758216,
        "org.apache.commons.math3.linear$SingularMatrixException#SingularMatrixException()": -0.07109344373888686,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#TriDiagonalTransformer(org.apache.commons.math3.linear.RealMatrix)": 1.6722872589512987,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getHouseholderVectorsRef()": 0.0,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getMainDiagonalRef()": 0.3357375758036528,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getQ()": 1.6768522236305747,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getQT()": 1.6757013273593269,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getSecondaryDiagonalRef()": 0.3357375758036528,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getT()": -0.035360325099732776,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#transform()": 1.6734189800727028,
        "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int)": 1.2628017243378336,
        "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int,int)": -0.3844118145765284,
        "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int,int[])": 1.0893840786527185,
        "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int,long)": -0.5656063397386271,
        "org.apache.commons.math3.random$AbstractWell#setSeed(int)": -0.0388575246276057,
        "org.apache.commons.math3.random$AbstractWell#setSeed(int[])": 1.0893840786527185,
        "org.apache.commons.math3.random$AbstractWell#setSeed(long)": 1.1021779999616137,
        "org.apache.commons.math3.random$BitsStreamGenerator#BitsStreamGenerator()": -0.30122869449571865,
        "org.apache.commons.math3.random$BitsStreamGenerator#clear()": -0.30122869449571865,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextBoolean()": -0.08745798425079067,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextBytes(byte[])": -0.07305873764393597,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()": -0.4483977880429871,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextFloat()": -0.08745798425079067,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()": -0.17827806142596694,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextInt()": -0.10016195007758216,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextInt(int)": -0.10166126460692226,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextLong()": -0.08745798425079067,
        "org.apache.commons.math3.random$RandomDataGenerator#RandomDataGenerator()": -0.24835700065529742,
        "org.apache.commons.math3.random$RandomDataGenerator#RandomDataGenerator(org.apache.commons.math3.random.RandomGenerator)": -0.5197348915359663,
        "org.apache.commons.math3.random$RandomDataGenerator#getNatural(int)": -0.08052075418857596,
        "org.apache.commons.math3.random$RandomDataGenerator#getRan()": -0.5614091013580913,
        "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()": -0.06908195256360172,
        "org.apache.commons.math3.random$RandomDataGenerator#initRan()": -0.5598316467681352,
        "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)": -0.053285762033649375,
        "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)": -0.053285762033649375,
        "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)": -0.053285762033649375,
        "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)": -0.053285762033649375,
        "org.apache.commons.math3.random$RandomDataGenerator#nextExponential(double)": -0.058171298319808676,
        "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)": -0.053285762033649375,
        "org.apache.commons.math3.random$RandomDataGenerator#nextGamma(double,double)": -0.053285762033649375,
        "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)": -0.07305873764393597,
        "org.apache.commons.math3.random$RandomDataGenerator#nextHexString(int)": -0.053285762033649375,
        "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)": -0.053285762033649375,
        "org.apache.commons.math3.random$RandomDataGenerator#nextInt(int,int)": -0.1431477763694251,
        "org.apache.commons.math3.random$RandomDataGenerator#nextLong(long,long)": -0.14082582616854733,
        "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)": -0.053285762033649375,
        "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)": -0.08052075418857592,
        "org.apache.commons.math3.random$RandomDataGenerator#nextPoisson(double)": -0.07686402925582447,
        "org.apache.commons.math3.random$RandomDataGenerator#nextSample(java.util.Collection,int)": -0.05577461027758045,
        "org.apache.commons.math3.random$RandomDataGenerator#nextSecureHexString(int)": -0.05577461027758045,
        "org.apache.commons.math3.random$RandomDataGenerator#nextSecureInt(int,int)": -0.03151684673695105,
        "org.apache.commons.math3.random$RandomDataGenerator#nextSecureLong(long,long)": -0.062728167688415,
        "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)": -0.053285762033649375,
        "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double)": -0.1955594353872326,
        "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)": -0.1955594353872326,
        "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)": -0.053285762033649375,
        "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)": -0.053285762033649375,
        "org.apache.commons.math3.random$RandomDataGenerator#reSeed()": -0.053285762033649375,
        "org.apache.commons.math3.random$RandomDataGenerator#reSeed(long)": -0.5582522689476198,
        "org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure()": -0.053285762033649375,
        "org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure(long)": -0.053285762033649375,
        "org.apache.commons.math3.random$RandomDataGenerator#setSecureAlgorithm(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#shuffle(int[],int)": -0.08052075418857592,
        "org.apache.commons.math3.random$RandomDataImpl#RandomDataImpl()": 1.0974294369716073,
        "org.apache.commons.math3.random$RandomDataImpl#RandomDataImpl(org.apache.commons.math3.random.RandomGenerator)": -0.5191911481468905,
        "org.apache.commons.math3.random$RandomDataImpl#getDelegate()": -0.0271858789054491,
        "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)": -0.053285762033649375,
        "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)": -0.053285762033649375,
        "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)": -0.053285762033649375,
        "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)": -0.053285762033649375,
        "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)": -0.058171298319808676,
        "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)": -0.053285762033649375,
        "org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)": -0.053285762033649375,
        "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)": -0.058171298319808676,
        "org.apache.commons.math3.random$RandomDataImpl#nextHexString(int)": -0.053285762033649375,
        "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)": -0.053285762033649375,
        "org.apache.commons.math3.random$RandomDataImpl#nextInt(int,int)": -0.1130952376326096,
        "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)": -0.053285762033649375,
        "org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)": -0.14082582616854733,
        "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)": -0.053285762033649375,
        "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)": -0.05577461027758045,
        "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)": -0.07686402925582447,
        "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)": -0.05577461027758045,
        "org.apache.commons.math3.random$RandomDataImpl#nextSecureHexString(int)": -0.05577461027758045,
        "org.apache.commons.math3.random$RandomDataImpl#nextSecureInt(int,int)": -0.03151684673695105,
        "org.apache.commons.math3.random$RandomDataImpl#nextSecureLong(long,long)": -0.062728167688415,
        "org.apache.commons.math3.random$RandomDataImpl#nextT(double)": -0.053285762033649375,
        "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)": -0.1880092581906157,
        "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)": -0.053285762033649375,
        "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)": -0.053285762033649375,
        "org.apache.commons.math3.random$RandomDataImpl#reSeed()": -0.053285762033649375,
        "org.apache.commons.math3.random$RandomDataImpl#reSeed(long)": -0.5550876925833731,
        "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure()": -0.053285762033649375,
        "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure(long)": -0.053285762033649375,
        "org.apache.commons.math3.random$RandomDataImpl#setSecureAlgorithm(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.math3.random$Well19937c#Well19937c()": 1.2628017243378336,
        "org.apache.commons.math3.random$Well19937c#Well19937c(int)": -0.1510716197667613,
        "org.apache.commons.math3.random$Well19937c#Well19937c(int[])": -0.015524614624028482,
        "org.apache.commons.math3.random$Well19937c#Well19937c(long)": -0.5598316467681352,
        "org.apache.commons.math3.random$Well19937c#next(int)": -0.22660935336241628,
        "org.apache.commons.math3.util$CompositeFormat#CompositeFormat()": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#formatDouble(double,java.text.NumberFormat,java.lang.StringBuffer,java.text.FieldPosition)": -0.16817466219743227,
        "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()": 1.2413623274681587,
        "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)": -0.2854661888155857,
        "org.apache.commons.math3.util$CompositeFormat#parseAndIgnoreWhitespace(java.lang.String,java.text.ParsePosition)": -0.18609028691074658,
        "org.apache.commons.math3.util$CompositeFormat#parseFixedstring(java.lang.String,java.lang.String,java.text.ParsePosition)": -0.18415806043292848,
        "org.apache.commons.math3.util$CompositeFormat#parseNextCharacter(java.lang.String,java.text.ParsePosition)": -0.18609028691074658,
        "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,double,java.text.ParsePosition)": -0.08052075418857596,
        "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,java.text.NumberFormat,java.text.ParsePosition)": -0.18123405318685598,
        "org.apache.commons.math3.util$FastMath#<clinit>()": -1.143747742676413,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0.0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": -0.015524614624028654,
        "org.apache.commons.math3.util$FastMath#abs(double)": -0.6250578229357336,
        "org.apache.commons.math3.util$FastMath#abs(float)": -0.022092082543412328,
        "org.apache.commons.math3.util$FastMath#abs(int)": -0.35427317503569133,
        "org.apache.commons.math3.util$FastMath#abs(long)": -0.20759635169329138,
        "org.apache.commons.math3.util$FastMath#acos(double)": -0.07686402925582447,
        "org.apache.commons.math3.util$FastMath#acosh(double)": -0.022092082543412418,
        "org.apache.commons.math3.util$FastMath#asin(double)": -0.07870972997643412,
        "org.apache.commons.math3.util$FastMath#asinh(double)": -0.022092082543412418,
        "org.apache.commons.math3.util$FastMath#atan(double)": -0.09397974004037869,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": -0.18318686155638078,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": -0.16084800787263515,
        "org.apache.commons.math3.util$FastMath#atanh(double)": -0.022092082543412418,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": -0.10891571524203342,
        "org.apache.commons.math3.util$FastMath#ceil(double)": -0.32956155878667065,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": -0.05817129831980883,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": -0.022092082543412328,
        "org.apache.commons.math3.util$FastMath#cos(double)": -0.3275144270980797,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": -0.38000221591324446,
        "org.apache.commons.math3.util$FastMath#cosh(double)": -0.09076545536020503,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": -0.15217955037027547,
        "org.apache.commons.math3.util$FastMath#exp(double)": 1.2207669268144512,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": 1.1093235340883352,
        "org.apache.commons.math3.util$FastMath#expm1(double)": -0.062728167688415,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": -0.09076545536020503,
        "org.apache.commons.math3.util$FastMath#floor(double)": -0.6160033374788181,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": -0.1510716197667612,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": -0.022092082543412328,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": -0.14544304134965888,
        "org.apache.commons.math3.util$FastMath#log(double)": -0.6440410792910303,
        "org.apache.commons.math3.util$FastMath#log(double,double)": -0.015524614624028482,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": 1.067313002007475,
        "org.apache.commons.math3.util$FastMath#log10(double)": -0.12751920322715898,
        "org.apache.commons.math3.util$FastMath#log1p(double)": -0.4472329694417554,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0.0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": -0.6637682173575272,
        "org.apache.commons.math3.util$FastMath#max(float,float)": -0.022092082543412328,
        "org.apache.commons.math3.util$FastMath#max(int,int)": -0.49277940701631384,
        "org.apache.commons.math3.util$FastMath#max(long,long)": -0.015524614624028654,
        "org.apache.commons.math3.util$FastMath#min(double,double)": -0.44255906298589753,
        "org.apache.commons.math3.util$FastMath#min(float,float)": -0.022092082543412328,
        "org.apache.commons.math3.util$FastMath#min(int,int)": -0.13875485231975426,
        "org.apache.commons.math3.util$FastMath#min(long,long)": -0.09864493358713888,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": -0.06272816768841505,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": -0.0271858789054491,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": -0.027185878905449094,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": -0.015524614624028482,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": -0.4048651876677847,
        "org.apache.commons.math3.util$FastMath#polySine(double)": -0.4048651876677847,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": 1.2889043094102233,
        "org.apache.commons.math3.util$FastMath#pow(double,int)": 0.21902068722525858,
        "org.apache.commons.math3.util$FastMath#random()": -0.07109344373888704,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": -0.035360325099732776,
        "org.apache.commons.math3.util$FastMath#rint(double)": -0.14199021010705856,
        "org.apache.commons.math3.util$FastMath#round(double)": -0.07686402925582447,
        "org.apache.commons.math3.util$FastMath#round(float)": -0.015524614624028482,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": -0.1300122153626304,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": -0.022092082543412328,
        "org.apache.commons.math3.util$FastMath#signum(double)": -0.05577461027758046,
        "org.apache.commons.math3.util$FastMath#signum(float)": -0.022092082543412328,
        "org.apache.commons.math3.util$FastMath#sin(double)": -0.38941993515505186,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": -0.39315463117373356,
        "org.apache.commons.math3.util$FastMath#sinh(double)": -0.09076545536020503,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": -0.6011674193807116,
        "org.apache.commons.math3.util$FastMath#tan(double)": -0.08576619411639405,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": -0.08576619411639405,
        "org.apache.commons.math3.util$FastMath#tanh(double)": -0.05577461027758045,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": -0.03151684673695105,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": -0.03151684673695105,
        "org.apache.commons.math3.util$FastMath#ulp(double)": -0.3240869244107978,
        "org.apache.commons.math3.util$FastMath#ulp(float)": -0.015524614624028482,
        "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)": -0.34768751505939743,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getK()": -0.34768751505939743,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()": -0.34768751505939743,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()": -0.34768751505939743,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": 1.1169760751661282,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": 1.118894240898164,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": 1.0743301595191495,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0.0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()": -0.32008088417970304,
        "org.apache.commons.math3.util$FastMathLiteralArrays#FastMathLiteralArrays()": 0.0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()": 1.1169760751661282,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()": 1.1169760751661282,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()": 1.118894240898164,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()": 1.118894240898164,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()": 1.0743301595191495,
        "org.apache.commons.math3.util$MathArrays#MathArrays()": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkNonNegative(long[])": -0.3875457553911817,
        "org.apache.commons.math3.util$MathArrays#checkNonNegative(long[][])": -0.035360325099732776,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[])": -0.11849226963497515,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": -0.1198127624949438,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)": -0.21802795312975437,
        "org.apache.commons.math3.util$MathArrays#checkPositive(double[])": -0.38189523644794193,
        "org.apache.commons.math3.util$MathArrays#checkRectangular(long[][])": -0.035360325099732776,
        "org.apache.commons.math3.util$MathArrays#copyOf(double[])": 1.6937408676247871,
        "org.apache.commons.math3.util$MathArrays#copyOf(double[],int)": 1.6623635466432365,
        "org.apache.commons.math3.util$MathArrays#copyOf(int[])": -0.0388575246276057,
        "org.apache.commons.math3.util$MathArrays#copyOf(int[],int)": -0.10749508825975736,
        "org.apache.commons.math3.util$MathArrays#distance(double[],double[])": -0.027185878905449094,
        "org.apache.commons.math3.util$MathArrays#distance(int[],int[])": -0.04209233091426604,
        "org.apache.commons.math3.util$MathArrays#distance1(double[],double[])": -0.015524614624028482,
        "org.apache.commons.math3.util$MathArrays#distance1(int[],int[])": -0.015524614624028482,
        "org.apache.commons.math3.util$MathArrays#distanceInf(double[],double[])": -0.015524614624028482,
        "org.apache.commons.math3.util$MathArrays#distanceInf(int[],int[])": -0.015524614624028482,
        "org.apache.commons.math3.util$MathArrays#ebeAdd(double[],double[])": -0.022092082543412418,
        "org.apache.commons.math3.util$MathArrays#ebeDivide(double[],double[])": -0.0479766963387677,
        "org.apache.commons.math3.util$MathArrays#ebeMultiply(double[],double[])": -0.022092082543412418,
        "org.apache.commons.math3.util$MathArrays#ebeSubtract(double[],double[])": -0.022092082543412418,
        "org.apache.commons.math3.util$MathArrays#equals(double[],double[])": -0.015524614624028482,
        "org.apache.commons.math3.util$MathArrays#equals(float[],float[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(double[],double[])": -0.035360325099732776,
        "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(float[],float[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": -0.015524614624028482,
        "org.apache.commons.math3.util$MathArrays#isMonotonic(java.lang.Comparable[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": -0.015524614624028654,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)": -0.11981276249494366,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)": -0.12242162399524026,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double,double,double)": -0.0271858789054491,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double[],double[])": -0.027185878905449094,
        "org.apache.commons.math3.util$MathArrays#normalizeArray(double[],double)": -0.022092082543412418,
        "org.apache.commons.math3.util$MathArrays#safeNorm(double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])": -0.0479766963387677,
        "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])": -0.0479766963387677,
        "org.apache.commons.math3.util$MathArrays$1#compare(org.apache.commons.math3.util.Pair,org.apache.commons.math3.util.Pair)": -0.0451194000646129,
        "org.apache.commons.math3.util$MathArrays$2#<clinit>()": -0.21802795312975443,
        "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()": -0.22234467247167358,
        "org.apache.commons.math3.util$MathArrays$OrderDirection#MathArrays$OrderDirection(java.lang.String,int)": -0.22234467247167378,
        "org.apache.commons.math3.util$MathUtils#MathUtils()": 0.0,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double)": -0.06702035639792955,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double[])": -0.015524614624028482,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)": 1.081552806012864,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.15217955037027547,
        "org.apache.commons.math3.util$MathUtils#copySign(byte,byte)": -0.03151684673695105,
        "org.apache.commons.math3.util$MathUtils#copySign(int,int)": -0.03151684673695105,
        "org.apache.commons.math3.util$MathUtils#copySign(long,long)": -0.022092082543412418,
        "org.apache.commons.math3.util$MathUtils#copySign(short,short)": -0.022092082543412418,
        "org.apache.commons.math3.util$MathUtils#hash(double)": -0.11581749466120272,
        "org.apache.commons.math3.util$MathUtils#hash(double[])": -0.098644933587139,
        "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)": -0.11032229555361368,
        "org.apache.commons.math3.util$MathUtils#reduce(double,double,double)": -0.035360325099732776,
        "org.apache.commons.math3.util$Precision#<clinit>()": -0.37301697424587876,
        "org.apache.commons.math3.util$Precision#Precision()": 0.0,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,double)": -0.17124817099714504,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,int)": -0.1198127624949438,
        "org.apache.commons.math3.util$Precision#equals(double,double)": -0.24963718813270513,
        "org.apache.commons.math3.util$Precision#equals(double,double,double)": 1.3669572983481473,
        "org.apache.commons.math3.util$Precision#equals(double,double,int)": 1.1675456582936943,
        "org.apache.commons.math3.util$Precision#equals(float,float)": -0.015524614624028482,
        "org.apache.commons.math3.util$Precision#equals(float,float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(float,float,int)": -0.15546982506575363,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)": -0.20922729006547885,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)": -0.12242162399524045,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)": -0.015524614624028482,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)": -0.15437854626646846,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsWithRelativeTolerance(double,double,double)": -0.015524614624028482,
        "org.apache.commons.math3.util$Precision#representableDelta(double,double)": -0.015524614624028654,
        "org.apache.commons.math3.util$Precision#round(double,int)": -0.015524614624028482,
        "org.apache.commons.math3.util$Precision#round(double,int,int)": -0.015524614624028654,
        "org.apache.commons.math3.util$Precision#round(float,int)": -0.015524614624028482,
        "org.apache.commons.math3.util$Precision#round(float,int,int)": -0.015524614624028482,
        "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)": -0.015524614624028482
    },
    "Math-13": {
        "org.apache.commons.math3.analysis$FunctionUtils#FunctionUtils()": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#add(org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[])": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#add(org.apache.commons.math3.analysis.UnivariateFunction[])": -0.03610463208830894,
        "org.apache.commons.math3.analysis$FunctionUtils#add(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction[])": -0.022551643999269233,
        "org.apache.commons.math3.analysis$FunctionUtils#collector(org.apache.commons.math3.analysis.BivariateFunction,double)": -0.015845589443974746,
        "org.apache.commons.math3.analysis$FunctionUtils#collector(org.apache.commons.math3.analysis.BivariateFunction,org.apache.commons.math3.analysis.UnivariateFunction,double)": -0.01584558944397485,
        "org.apache.commons.math3.analysis$FunctionUtils#combine(org.apache.commons.math3.analysis.BivariateFunction,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.UnivariateFunction)": -0.022551643999269233,
        "org.apache.commons.math3.analysis$FunctionUtils#compose(org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[])": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#compose(org.apache.commons.math3.analysis.UnivariateFunction[])": -0.027754019642410643,
        "org.apache.commons.math3.analysis$FunctionUtils#compose(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction[])": -0.03217803380518425,
        "org.apache.commons.math3.analysis$FunctionUtils#fix1stArgument(org.apache.commons.math3.analysis.BivariateFunction,double)": -0.01584558944397485,
        "org.apache.commons.math3.analysis$FunctionUtils#fix2ndArgument(org.apache.commons.math3.analysis.BivariateFunction,double)": -0.0822769305035651,
        "org.apache.commons.math3.analysis$FunctionUtils#multiply(org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[])": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#multiply(org.apache.commons.math3.analysis.UnivariateFunction[])": -0.01584558944397485,
        "org.apache.commons.math3.analysis$FunctionUtils#multiply(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction[])": -0.022551643999269233,
        "org.apache.commons.math3.analysis$FunctionUtils#sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)": -0.09766070308069177,
        "org.apache.commons.math3.analysis$FunctionUtils#toDifferentiableMultivariateFunction(org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction)": -0.061785929062798894,
        "org.apache.commons.math3.analysis$FunctionUtils#toDifferentiableMultivariateVectorFunction(org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction)": 0.30643069308789317,
        "org.apache.commons.math3.analysis$FunctionUtils#toDifferentiableUnivariateFunction(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction)": -0.01584558944397485,
        "org.apache.commons.math3.analysis$FunctionUtils#toMultivariateDifferentiableFunction(org.apache.commons.math3.analysis.DifferentiableMultivariateFunction)": -0.01584558944397485,
        "org.apache.commons.math3.analysis$FunctionUtils#toMultivariateDifferentiableVectorFunction(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction)": 0.30643069308789317,
        "org.apache.commons.math3.analysis$FunctionUtils#toUnivariateDifferential(org.apache.commons.math3.analysis.DifferentiableUnivariateFunction)": -0.01584558944397485,
        "org.apache.commons.math3.analysis$FunctionUtils$1#value(double)": -0.027754019642410643,
        "org.apache.commons.math3.analysis$FunctionUtils$10#value(double)": -0.022551643999269233,
        "org.apache.commons.math3.analysis$FunctionUtils$11#value(double[])": -0.01584558944397485,
        "org.apache.commons.math3.analysis$FunctionUtils$12#value(double)": -0.01584558944397485,
        "org.apache.commons.math3.analysis$FunctionUtils$13#value(double)": -0.0822769305035651,
        "org.apache.commons.math3.analysis$FunctionUtils$14#derivative()": -0.01584558944397485,
        "org.apache.commons.math3.analysis$FunctionUtils$14#value(double)": -0.01584558944397485,
        "org.apache.commons.math3.analysis$FunctionUtils$14$1#value(double)": -0.01584558944397485,
        "org.apache.commons.math3.analysis$FunctionUtils$15#value(double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$15#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": -0.01584558944397485,
        "org.apache.commons.math3.analysis$FunctionUtils$16#gradient()": -0.061785929062798894,
        "org.apache.commons.math3.analysis$FunctionUtils$16#partialDerivative(int)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$16#value(double[])": -0.061785929062798894,
        "org.apache.commons.math3.analysis$FunctionUtils$16$2#value(double[])": -0.061785929062798894,
        "org.apache.commons.math3.analysis$FunctionUtils$17#value(double[])": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$17#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure[])": -0.01584558944397485,
        "org.apache.commons.math3.analysis$FunctionUtils$18#jacobian()": -0.16453616003636107,
        "org.apache.commons.math3.analysis$FunctionUtils$18#value(double[])": -0.16778286928520192,
        "org.apache.commons.math3.analysis$FunctionUtils$18$1#value(double[])": -0.16453616003636107,
        "org.apache.commons.math3.analysis$FunctionUtils$19#value(double[])": -0.0804241718294072,
        "org.apache.commons.math3.analysis$FunctionUtils$19#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure[])": -0.16453616003636107,
        "org.apache.commons.math3.analysis$FunctionUtils$2#value(double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$2#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": -0.03217803380518425,
        "org.apache.commons.math3.analysis$FunctionUtils$4#value(double)": -0.03610463208830894,
        "org.apache.commons.math3.analysis$FunctionUtils$5#value(double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$5#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": -0.022551643999269233,
        "org.apache.commons.math3.analysis$FunctionUtils$7#value(double)": -0.01584558944397485,
        "org.apache.commons.math3.analysis$FunctionUtils$8#value(double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$8#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": -0.022551643999269233,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()": -0.29032830580375624,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)": -0.29032830580375635,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#acos(double[],int,double[],int)": -0.015845589443974746,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#acosh(double[],int,double[],int)": -0.015845589443974746,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#add(double[],int,double[],int,double[],int)": -0.19238163747794718,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#asin(double[],int,double[],int)": -0.015845589443974746,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#asinh(double[],int,double[],int)": -0.015845589443974746,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan(double[],int,double[],int)": -0.03217803380518416,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)": -0.022551643999269056,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#atanh(double[],int,double[],int)": -0.015845589443974746,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)": -0.22583575650771587,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])": -0.29032830580375635,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)": -0.29032830580375624,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)": -0.29032830580375635,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])": -0.29032830580375635,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)": -0.29032830580375624,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)": -0.17727593828025517,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])": -0.16344408312958159,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)": -0.04298343273852282,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#cosh(double[],int,double[],int)": -0.027754019642410744,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#divide(double[],int,double[],int,double[],int)": -0.07057606150121515,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#exp(double[],int,double[],int)": -0.06630348727930697,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#expm1(double[],int,double[],int)": -0.022551643999269056,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)": -0.29032830580375635,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()": -0.27643417810965354,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#getOrder()": -0.23457767359972248,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])": -0.28803952929890697,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])": -0.2764341781096534,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeOrders(int)": -0.03967790050007869,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()": -0.29032830580375624,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#linearCombination(double,double[],int,double,double[],int,double,double[],int,double,double[],int,double[],int)": -0.015845589443974746,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#linearCombination(double,double[],int,double,double[],int,double,double[],int,double[],int)": -0.015845589443974746,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#linearCombination(double,double[],int,double,double[],int,double[],int)": -0.015845589443974746,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#log(double[],int,double[],int)": -0.046076997833007435,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#log10(double[],int,double[],int)": -0.022551643999269056,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#log1p(double[],int,double[],int)": -0.022551643999269056,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#multiply(double[],int,double[],int,double[],int)": -0.16992357616543213,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double,double[],int)": -0.03610463208830892,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)": -0.022551643999269056,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,int,double[],int)": -0.09604883500389219,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#remainder(double[],int,double[],int,double[],int)": -0.015845589443974746,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)": -0.09441541270231162,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)": -0.05442421926856768,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#sinh(double[],int,double[],int)": -0.022551643999269056,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#subtract(double[],int,double[],int,double[],int)": -0.12249531834103856,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#tan(double[],int,double[],int)": -0.027754019642410744,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#tanh(double[],int,double[],int)": -0.022551643999269056,
        "org.apache.commons.math3.analysis.differentiation$DSCompiler#taylor(double[],int,double[])": -0.022551643999269056,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": -0.015845589443974746,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": -0.015845589443974746,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": -0.015845589443974746,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)": -0.2849715011182713,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)": -0.2834303470494805,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])": -0.18036436571530737,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)": -0.2811095059893024,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)": -0.2849715011182713,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": -0.22317189067983234,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#abs()": -0.015845589443974746,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acos()": -0.015845589443974746,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acosh()": -0.015845589443974746,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#add(double)": -0.1428187754331388,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": -0.1904138758561749,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asin()": -0.015845589443974746,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asinh()": -0.015845589443974746,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan()": -0.027754019642410744,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": -0.022551643999269056,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atanh()": -0.015845589443974746,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()": -0.022551643999269056,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()": -0.015845589443974746,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#compose(double[])": -0.0726333691086542,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#copySign(double)": -0.015845589443974746,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()": -0.04298343273852282,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cosh()": -0.027754019642410744,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(double)": -0.056968604036525476,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": -0.06846762865011981,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#exp()": -0.061785929062798804,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#expm1()": -0.022551643999269056,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()": -0.015845589443974746,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getAllDerivatives()": -0.05442421926856755,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getExponent()": -0.03217803380518416,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getField()": -0.1510751349170098,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getFreeParameters()": -0.19433623470090516,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getOrder()": -0.21046390315156172,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])": -0.27565049157760985,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getValue()": -0.2267193493339339,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": -0.03217803380518416,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log()": -0.039677900500078606,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log10()": -0.022551643999269056,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log1p()": -0.022551643999269056,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(double)": -0.16453616003636096,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(int)": -0.04899733308362823,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": -0.15222850420481462,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#negate()": -0.0640783254133797,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(double)": -0.03610463208830892,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(int)": -0.027754019642410744,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": -0.022551643999269056,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#reciprocal()": -0.05941895200832652,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#remainder(double)": -0.015845589443974746,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#remainder(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": -0.015845589443974746,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()": -0.015845589443974746,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)": -0.09107960993866118,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#round()": -0.015845589443974746,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#scalb(int)": -0.03217803380518416,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()": -0.015845589443974746,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()": -0.05442421926856768,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sinh()": -0.022551643999269056,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()": -0.08588484234162365,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#subtract(double)": -0.12114307936975119,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#subtract(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": -0.12249531834103856,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()": -0.027754019642410744,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tanh()": -0.022551643999269056,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#taylor(double[])": -0.022551643999269056,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#toDegrees()": -0.022551643999269056,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#toRadians()": -0.022551643999269056,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#writeReplace()": -0.015845589443974746,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$1#getOne()": -0.0684676286501198,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$1#getRuntimeClass()": -0.01584558944397485,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$1#getZero()": -0.14639778570527917,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#DerivativeStructure$DataTransferObject(int,int,double[])": -0.015845589443974746,
        "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()": -0.015845589443974746,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#PolynomialFunction(double[])": 1.665483018355233,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#add(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)": -0.056968604036525476,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#degree()": -0.0705760615012152,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#derivative()": -0.03610463208830892,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#differentiate(double[])": -0.07661006493382683,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#equals(java.lang.Object)": -0.01584558944397485,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#evaluate(double[],double)": 1.685795299750192,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#getCoefficients()": -0.09275938441081832,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#hashCode()": 0.0,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#multiply(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)": -0.061785929062798804,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#negate()": 0.0,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#polynomialDerivative()": -0.07661006493382683,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#subtract(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)": -0.022551643999269056,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#toString()": -0.04899733308362823,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#toString(double)": -0.04899733308362819,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(double)": 1.6935128909295243,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": 0.0,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#PolynomialFunction$Parametric()": 0.399570023610304,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#gradient(double,double[])": -0.07464353876279116,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#value(double,double[])": -0.07464353876279116,
        "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException()": -0.015845589443974746,
        "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.07057606150121515,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)": -0.24480997184755324,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)": -0.2621208132209417,
        "org.apache.commons.math3.exception$DimensionMismatchException#getDimension()": -0.027754019642410643,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": -0.05442421926856755,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.11420384262671665,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": -0.01584558944397485,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.6541077197030002,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": -0.04899733308362819,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.5745538660638044,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": -0.061785929062798894,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": -0.1391742514774964,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.16778286928520206,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": -0.13545947458527952,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": -0.01584558944397485,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int)": 0.0,
        "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int,java.lang.Class)": -0.05941895200832652,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()": -0.07057606150121515,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.07057606150121515,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)": -0.09107960993866118,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.09107960993866118,
        "org.apache.commons.math3.exception$MaxCountExceededException#getMax()": -0.059418952008326587,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(java.lang.Integer[],java.lang.Integer[])": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])": -0.10692914125532058,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getExpectedDimension(int)": -0.01584558944397485,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getExpectedDimensions()": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getWrongDimension(int)": -0.01584558944397485,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getWrongDimensions()": 0.0,
        "org.apache.commons.math3.exception$NoDataException#NoDataException()": -0.05442421926856768,
        "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)": -0.08764375318234421,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])": -0.04298343273852282,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.07057606150121515,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)": -0.07057606150121515,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": -0.056968604036525476,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)": -0.11977946707986692,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": -0.16013708201622062,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": -0.11840412414613245,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.15222850420481462,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)": -0.09925198958519242,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.21138761843012746,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getBoundIsAllowed()": -0.01584558944397485,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getMax()": -0.01584558944397485,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": -0.17830941451873927,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.296382066964406,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": -0.027754019642410643,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": -0.027754019642410643,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(java.lang.Number,java.lang.Number,java.lang.Number)": -0.1098831073681061,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)": -0.2645378970673423,
        "org.apache.commons.math3.exception$OutOfRangeException#getHi()": -0.01584558944397485,
        "org.apache.commons.math3.exception$OutOfRangeException#getLo()": -0.01584558944397485,
        "org.apache.commons.math3.exception$TooManyEvaluationsException#TooManyEvaluationsException(java.lang.Number)": -0.07853603055301973,
        "org.apache.commons.math3.exception$ZeroException#ZeroException()": -0.022551643999269056,
        "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.05442421926856768,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix()": -0.022551643999269233,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field)": -0.14991551151265425,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)": -0.18341767840798154,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)": -0.03217803380518416,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)": -0.14401883958140949,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)": -0.19916736103963983,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkAdditionCompatible(org.apache.commons.math3.linear.FieldMatrix)": -0.051772642882797405,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)": -0.20580569371225232,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkMultiplicationCompatible(org.apache.commons.math3.linear.FieldMatrix)": -0.07057606150121515,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)": -0.20580569371225232,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)": -0.051772642882797405,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int[],int[])": -0.03610463208830892,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubtractionCompatible(org.apache.commons.math3.linear.FieldMatrix)": -0.03217803380518416,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])": -0.022551643999269056,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int[],int[],org.apache.commons.math3.FieldElement[][])": -0.022551643999269056,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#equals(java.lang.Object)": -0.09604883500389219,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[][])": -0.17098703818107402,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumn(int)": -0.051772642882797405,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)": -0.027754019642410744,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnVector(int)": -0.039677900500078606,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getData()": -0.022551643999269056,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()": -0.21046390315156183,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRow(int)": -0.04298343273852282,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)": -0.03217803380518416,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowVector(int)": -0.027754019642410744,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)": -0.022551643999269056,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])": -0.027754019642410744,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getTrace()": -0.027754019642410744,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#hashCode()": -0.027754019642410744,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#isSquare()": -0.10542842924658612,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)": -0.051772642882797405,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": -0.022551643999269056,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.linear.FieldVector)": -0.027754019642410744,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)": -0.015845589443974746,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": -0.015845589443974746,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)": -0.027754019642410744,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)": -0.022551643999269056,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)": -0.022551643999269056,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])": -0.015845589443974746,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": -0.015845589443974746,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)": -0.015845589443974746,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])": -0.015845589443974746,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": -0.015845589443974746,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)": -0.015845589443974746,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": -0.022551643999269056,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)": -0.015845589443974746,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#toString()": -0.022551643999269056,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()": -0.039677900500078606,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.015845589443974746,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.015845589443974746,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.015845589443974746,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.015845589443974746,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.027754019642410744,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.015845589443974746,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.0804241718294071,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.022551643999269056,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.015845589443974746,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.022551643999269056,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$1#visit(int,int,org.apache.commons.math3.FieldElement)": -0.027754019642410643,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$2#start(int,int,int,int,int,int)": -0.022551643999269233,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$2#visit(int,int,org.apache.commons.math3.FieldElement)": -0.022551643999269233,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$3#visit(int,int,org.apache.commons.math3.FieldElement)": -0.03967790050007869,
        "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()": 1.2138492558758043,
        "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()": 1.3196358498358036,
        "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)": -0.5499486070784156,
        "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)": -0.10391106228501665,
        "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])": -0.09107960993866118,
        "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])": -0.022551643999269056,
        "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)": -0.1264871090704757,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)": -0.1303878269668829,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)": -0.10391106228501665,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)": -0.06630348727930697,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getData()": -0.022551643999269056,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()": -0.09925198958519242,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()": -0.16013708201622062,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)": -0.2168768928082729,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)": -0.03217803380518416,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)": -0.1264871090704757,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)": -0.05442421926856768,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])": -0.027754019642410744,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()": -0.027754019642410744,
        "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()": -0.04298343273852282,
        "org.apache.commons.math3.linear$AbstractRealMatrix#isSquare()": 1.5036789517747575,
        "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": -0.27565049157760985,
        "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])": -0.022551643999269056,
        "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)": -0.28265795641044267,
        "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)": -0.022551643999269056,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])": -0.015845589443974746,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)": -0.027754019642410744,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)": -0.10082359614582498,
        "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)": -0.2240620495146737,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])": -0.051772642882797405,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)": -0.022551643999269056,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)": -0.18942494631809298,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])": -0.015845589443974746,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)": -0.015845589443974746,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)": -0.20107850433162874,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)": -0.03610463208830892,
        "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": -0.18543446886130374,
        "org.apache.commons.math3.linear$AbstractRealMatrix#toString()": -0.04298343273852282,
        "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()": -0.3104881190934299,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.015845589443974746,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.015845589443974746,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.046076997833007435,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.015845589443974746,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.03610463208830892,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.015845589443974746,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.31195202117175563,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.08937484989768829,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.015845589443974746,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.022551643999269056,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#end()": -0.16013708201622068,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#start(int,int,int,int,int,int)": -0.16013708201622068,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#visit(int,int,double)": -0.16013708201622068,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#end()": -0.09925198958519243,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#start(int,int,int,int,int,int)": -0.09925198958519243,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#visit(int,int,double)": -0.09925198958519243,
        "org.apache.commons.math3.linear$AbstractRealMatrix$3#visit(int,int,double)": -0.027754019642410643,
        "org.apache.commons.math3.linear$AbstractRealMatrix$4#start(int,int,int,int,int,int)": -0.09107960993866104,
        "org.apache.commons.math3.linear$AbstractRealMatrix$4#visit(int,int,double)": -0.09107960993866104,
        "org.apache.commons.math3.linear$AbstractRealMatrix$5#visit(int,int,double)": -0.3104881190934299,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field)": -0.022551643999269056,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,int,int)": -0.10082359614582498,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])": -0.12114307936975119,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)": -0.09441541270231162,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])": -0.10692914125532058,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)": -0.07057606150121515,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": -0.022551643999269056,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()": -0.022551643999269056,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])": -0.12114307936975119,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyOut()": -0.09766070308069177,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#createMatrix(int,int)": -0.07057606150121515,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()": -0.1579058182870765,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getData()": -0.09441541270231162,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getDataRef()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)": -0.1428187754331388,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()": -0.1579058182870765,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": -0.015845589443974746,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": -0.022551643999269056,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": -0.015845589443974746,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)": -0.10542842924658612,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": -0.12114307936975119,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": -0.015845589443974746,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.015845589443974746,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.015845589443974746,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.015845589443974746,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.015845589443974746,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.022551643999269056,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.015845589443974746,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.07853603055301973,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.022551643999269056,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix()": -0.03217803380518416,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[])": -0.03217803380518416,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])": -0.4640520084355819,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)": -0.3206569586175415,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)": -0.45687125905173864,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)": -0.022551643999269056,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()": -0.13670585556523815,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])": -0.4652436975525742,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()": -0.3790679028666027,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)": -0.37178674830451003,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()": -0.5310360552109308,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getData()": -0.37377977000640294,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getDataRef()": -0.15107513491700986,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)": -0.4852898572884135,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()": -0.5304753375428404,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)": -0.05442421926856768,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)": -0.04899733308362823,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#operate(double[])": -0.18743675657398834,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#preMultiply(double[])": -0.027754019642410744,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)": -0.4514504209107186,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)": -0.4652436975525742,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)": -0.015845589443974746,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.015845589443974746,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.015845589443974746,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.15451698164476702,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.015845589443974746,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.03217803380518416,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.015845589443974746,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.31122054907866065,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.08937484989768829,
        "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()": -0.5505005198880852,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector()": -0.027754019642410744,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[])": -0.43867882589117224,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)": -0.4616642927284518,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],double[])": -0.015845589443974746,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],int,int)": -0.015845589443974746,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],org.apache.commons.math3.linear.ArrayRealVector)": -0.015845589443974746,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int)": -0.24982930161175854,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int,double)": -0.027754019642410744,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[])": -0.015845589443974746,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[],int,int)": -0.015845589443974746,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector)": -0.015845589443974746,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,boolean)": -0.20860863798398382,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,double[])": -0.015845589443974746,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.ArrayRealVector)": -0.027754019642410744,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.RealVector)": -0.022551643999269056,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector)": -0.015845589443974746,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.ArrayRealVector)": -0.015845589443974746,
        "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)": -0.04899733308362823,
        "org.apache.commons.math3.linear$ArrayRealVector#addToEntry(int,double)": -0.027754019642410744,
        "org.apache.commons.math3.linear$ArrayRealVector#append(double)": -0.022551643999269056,
        "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.RealVector)": -0.022551643999269056,
        "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)": -0.377089333726847,
        "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)": -0.06846762865011981,
        "org.apache.commons.math3.linear$ArrayRealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)": -0.06846762865011981,
        "org.apache.commons.math3.linear$ArrayRealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": -0.1098831073681061,
        "org.apache.commons.math3.linear$ArrayRealVector#copy()": -0.20767702735929364,
        "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)": -0.32567513723865144,
        "org.apache.commons.math3.linear$ArrayRealVector#ebeDivide(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ebeMultiply(org.apache.commons.math3.linear.RealVector)": -0.08588484234162365,
        "org.apache.commons.math3.linear$ArrayRealVector#equals(java.lang.Object)": -0.12114307936975119,
        "org.apache.commons.math3.linear$ArrayRealVector#getDataRef()": -0.297133840616461,
        "org.apache.commons.math3.linear$ArrayRealVector#getDimension()": -0.4312998326662405,
        "org.apache.commons.math3.linear$ArrayRealVector#getDistance(org.apache.commons.math3.linear.RealVector)": -0.03610463208830892,
        "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)": -0.39471134034871697,
        "org.apache.commons.math3.linear$ArrayRealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)": -0.03217803380518416,
        "org.apache.commons.math3.linear$ArrayRealVector#getL1Norm()": -0.022551643999269056,
        "org.apache.commons.math3.linear$ArrayRealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)": -0.03217803380518416,
        "org.apache.commons.math3.linear$ArrayRealVector#getLInfNorm()": -0.022551643999269056,
        "org.apache.commons.math3.linear$ArrayRealVector#getNorm()": -0.1303878269668829,
        "org.apache.commons.math3.linear$ArrayRealVector#getSubVector(int,int)": -0.04298343273852282,
        "org.apache.commons.math3.linear$ArrayRealVector#hashCode()": -0.09107960993866118,
        "org.apache.commons.math3.linear$ArrayRealVector#isInfinite()": -0.022551643999269056,
        "org.apache.commons.math3.linear$ArrayRealVector#isNaN()": -0.15678190542453962,
        "org.apache.commons.math3.linear$ArrayRealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)": -0.027754019642410744,
        "org.apache.commons.math3.linear$ArrayRealVector#mapAddToSelf(double)": -0.027754019642410643,
        "org.apache.commons.math3.linear$ArrayRealVector#mapDivideToSelf(double)": -0.03610463208830894,
        "org.apache.commons.math3.linear$ArrayRealVector#mapMultiplyToSelf(double)": -0.15678190542453962,
        "org.apache.commons.math3.linear$ArrayRealVector#mapSubtractToSelf(double)": -0.027754019642410643,
        "org.apache.commons.math3.linear$ArrayRealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": -0.03217803380518416,
        "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)": -0.027754019642410744,
        "org.apache.commons.math3.linear$ArrayRealVector#set(double)": -0.11561672002344658,
        "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)": -0.16670546778482923,
        "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,double[])": -0.08409649639222037,
        "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,org.apache.commons.math3.linear.RealVector)": -0.08588484234162365,
        "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)": -0.18240371279921017,
        "org.apache.commons.math3.linear$ArrayRealVector#toArray()": -0.25314191132245334,
        "org.apache.commons.math3.linear$ArrayRealVector#toString()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": -0.022551643999269233,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": -0.03217803380518416,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": -0.022551643999269233,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": -0.03217803380518416,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": -0.015845589443974746,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": -0.022551643999269056,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": -0.015845589443974746,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": -0.022551643999269056,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(int,int,org.apache.commons.math3.FieldElement[][],boolean)": -0.10082359614582498,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)": -0.08764375318234421,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.FieldElement[][])": -0.10082359614582498,
        "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.BlockFieldMatrix)": -0.03217803380518416,
        "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)": -0.022551643999269056,
        "org.apache.commons.math3.linear$BlockFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#blockHeight(int)": -0.10988310736810591,
        "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)": -0.11701667413126415,
        "org.apache.commons.math3.linear$BlockFieldMatrix#copy()": -0.015845589443974746,
        "org.apache.commons.math3.linear$BlockFieldMatrix#copyBlockPart(org.apache.commons.math3.FieldElement[],int,int,int,int,int,org.apache.commons.math3.FieldElement[],int,int,int)": -0.027754019642410744,
        "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)": -0.08764375318234421,
        "org.apache.commons.math3.linear$BlockFieldMatrix#createMatrix(int,int)": -0.015845589443974746,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumn(int)": -0.03610463208830892,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()": -0.10988310736810591,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnMatrix(int)": -0.027754019642410744,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnVector(int)": -0.027754019642410744,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getData()": -0.03610463208830892,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)": -0.08937484989768829,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRow(int)": -0.03610463208830892,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()": -0.11133751942358572,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowMatrix(int)": -0.03217803380518416,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowVector(int)": -0.027754019642410744,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getSubMatrix(int,int,int,int)": -0.027754019642410744,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.BlockFieldMatrix)": -0.04298343273852282,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)": -0.039677900500078606,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": -0.027754019642410744,
        "org.apache.commons.math3.linear$BlockFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": -0.022551643999269056,
        "org.apache.commons.math3.linear$BlockFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)": -0.03217803380518416,
        "org.apache.commons.math3.linear$BlockFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)": -0.015845589443974746,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])": -0.03217803380518416,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)": -0.022551643999269056,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": -0.022551643999269056,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)": -0.022551643999269056,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)": -0.03610463208830892,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])": -0.03217803380518416,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)": -0.022551643999269056,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": -0.022551643999269056,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)": -0.022551643999269056,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": -0.022551643999269056,
        "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.BlockFieldMatrix)": -0.022551643999269056,
        "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)": -0.015845589443974746,
        "org.apache.commons.math3.linear$BlockFieldMatrix#toBlocksLayout(org.apache.commons.math3.FieldElement[][])": -0.10082359614582498,
        "org.apache.commons.math3.linear$BlockFieldMatrix#transpose()": -0.027754019642410744,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.022551643999269056,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.015845589443974746,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.015845589443974746,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.022551643999269056,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.015845589443974746,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.015845589443974746,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.015845589443974746,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.015845589443974746,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])": -0.2572464259605585,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)": -0.1762383790207623,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)": -0.2748655047774131,
        "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)": -0.03217803380518416,
        "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)": -0.022551643999269056,
        "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)": -0.015845589443974746,
        "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)": -0.28033342914118853,
        "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)": -0.2865078737110873,
        "org.apache.commons.math3.linear$BlockRealMatrix#copy()": -0.0726333691086542,
        "org.apache.commons.math3.linear$BlockRealMatrix#copyBlockPart(double[],int,int,int,int,int,double[],int,int,int)": -0.03217803380518416,
        "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)": -0.19627801247712762,
        "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)": -0.015845589443974746,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumn(int)": -0.07661006493382683,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()": -0.27955610632448336,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)": -0.027754019642410744,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)": -0.027754019642410744,
        "org.apache.commons.math3.linear$BlockRealMatrix#getData()": -0.19820730095193134,
        "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)": -0.16124463737163933,
        "org.apache.commons.math3.linear$BlockRealMatrix#getFrobeniusNorm()": -0.015845589443974746,
        "org.apache.commons.math3.linear$BlockRealMatrix#getNorm()": -0.0804241718294071,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRow(int)": -0.05442421926856768,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()": -0.28033342914118853,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)": -0.03217803380518416,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)": -0.027754019642410744,
        "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)": -0.03217803380518416,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)": -0.10391106228501665,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": -0.10391106228501665,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#operate(double[])": -0.17310055495463927,
        "org.apache.commons.math3.linear$BlockRealMatrix#preMultiply(double[])": -0.022551643999269056,
        "org.apache.commons.math3.linear$BlockRealMatrix#scalarAdd(double)": -0.03217803380518416,
        "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)": -0.0640783254133797,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])": -0.09604883500389219,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)": -0.022551643999269056,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)": -0.022551643999269056,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)": -0.08588484234162365,
        "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)": -0.12114307936975119,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRow(int,double[])": -0.08937484989768829,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)": -0.022551643999269056,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)": -0.022551643999269056,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)": -0.08588484234162365,
        "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)": -0.022551643999269056,
        "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)": -0.0726333691086542,
        "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": -0.07853603055301973,
        "org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])": -0.2572464259605585,
        "org.apache.commons.math3.linear$BlockRealMatrix#transpose()": -0.12383652353844593,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.04899733308362823,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.015845589443974746,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.027754019642410744,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.03217803380518416,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.015845589443974746,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.015845589443974746,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.015845589443974746,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.015845589443974746,
        "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix()": 0.0,
        "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[])": 1.5668580886775465,
        "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[],boolean)": -0.23972726634283342,
        "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(int)": -0.17204600675521148,
        "org.apache.commons.math3.linear$DiagonalMatrix#add(org.apache.commons.math3.linear.DiagonalMatrix)": 0.0,
        "org.apache.commons.math3.linear$DiagonalMatrix#addToEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$DiagonalMatrix#copy()": 1.5668580886775465,
        "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)": 0.0,
        "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()": 1.5668580886775465,
        "org.apache.commons.math3.linear$DiagonalMatrix#getData()": 1.652217130714798,
        "org.apache.commons.math3.linear$DiagonalMatrix#getDataRef()": -0.23972726634283337,
        "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)": 1.5668580886775465,
        "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()": 0.22107165105064175,
        "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)": -0.23972726634283342,
        "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": -0.16885554560609523,
        "org.apache.commons.math3.linear$DiagonalMatrix#multiplyEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])": -0.23972726634283342,
        "org.apache.commons.math3.linear$DiagonalMatrix#preMultiply(double[])": 0.0,
        "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)": -0.17204600675521148,
        "org.apache.commons.math3.linear$DiagonalMatrix#setSubMatrix(double[][],int,int)": 0.0,
        "org.apache.commons.math3.linear$DiagonalMatrix#subtract(org.apache.commons.math3.linear.DiagonalMatrix)": 0.0,
        "org.apache.commons.math3.linear$DiagonalMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$DiagonalMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$DiagonalMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$DiagonalMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$DiagonalMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": 0.0,
        "org.apache.commons.math3.linear$DiagonalMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$DiagonalMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.0,
        "org.apache.commons.math3.linear$DiagonalMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)": -0.10692914125532058,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getExpectedColumnDimension()": -0.015845589443974746,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getExpectedRowDimension()": -0.015845589443974746,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getWrongColumnDimension()": -0.015845589443974746,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getWrongRowDimension()": -0.015845589443974746,
        "org.apache.commons.math3.linear$MatrixUtils#<clinit>()": 1.243281036210544,
        "org.apache.commons.math3.linear$MatrixUtils#MatrixUtils()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)": -0.0640783254133797,
        "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)": -0.015845589443974746,
        "org.apache.commons.math3.linear$MatrixUtils#checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": -0.12383652353844593,
        "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)": 1.2650928033393498,
        "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)": 1.2839292036902723,
        "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": -0.36978817601982633,
        "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)": 1.2656428045244517,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)": -0.11840412414613245,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])": -0.03610463208830892,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": -0.2039233278388978,
        "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)": -0.022551643999269056,
        "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])": -0.015845589443974746,
        "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])": -0.09925198958519242,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)": -0.022551643999269056,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.Field,int,int)": -0.022551643999269056,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])": -0.015845589443974746,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldVector(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])": -0.23110556703723945,
        "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)": -0.13545947458527935,
        "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])": -0.3985730458741392,
        "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)": -0.3001302442046386,
        "org.apache.commons.math3.linear$MatrixUtils#createRealVector(double[])": -0.015845589443974746,
        "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])": -0.015845589443974746,
        "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])": -0.015845589443974746,
        "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)": -0.022551643999269056,
        "org.apache.commons.math3.linear$MatrixUtils#deserializeRealVector(java.lang.Object,java.lang.String,java.io.ObjectInputStream)": -0.022551643999269056,
        "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)": -0.015845589443974746,
        "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)": 1.5862873596543856,
        "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)": 1.5845592571602514,
        "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)": -0.022551643999269056,
        "org.apache.commons.math3.linear$MatrixUtils#serializeRealVector(org.apache.commons.math3.linear.RealVector,java.io.ObjectOutputStream)": -0.022551643999269056,
        "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)": -0.015845589443974746,
        "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)": -0.015845589443974746,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#MatrixUtils$BigFractionMatrixConverter()": -0.06407832541337966,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()": -0.0640783254133797,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#start(int,int,int,int,int,int)": -0.06407832541337966,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#visit(int,int,org.apache.commons.math3.fraction.BigFraction)": -0.06407832541337966,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#MatrixUtils$FractionMatrixConverter()": -0.01584558944397485,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()": -0.015845589443974746,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#start(int,int,int,int,int,int)": -0.01584558944397485,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#visit(int,int,org.apache.commons.math3.fraction.Fraction)": -0.01584558944397485,
        "org.apache.commons.math3.linear$NonSquareMatrixException#NonSquareMatrixException(int,int)": -0.061785929062798804,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#NonSymmetricMatrixException(int,int,double)": -0.022551643999269056,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#getColumn()": 0.0,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#getRow()": 0.0,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#getThreshold()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)": -0.09441541270231162,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix)": -0.04899733308362823,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)": -0.022551643999269056,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)": -0.09275938441081832,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()": -0.022551643999269056,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)": -0.04298343273852282,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()": -0.09275938441081832,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)": -0.08937484989768829,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()": -0.09275938441081832,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)": -0.03217803380518416,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": -0.03217803380518416,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)": -0.0927593844108184,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)": -0.039677900500078606,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": -0.039677900500078606,
        "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()": -0.15088168512957967,
        "org.apache.commons.math3.linear$RealLinearOperator#isTransposable()": 0.0,
        "org.apache.commons.math3.linear$RealLinearOperator#operateTranspose(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat()": -0.015845589443974746,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": 1.243281036210544,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)": -0.13669602087161004,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)": 1.209090416755295,
        "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)": -0.07057606150121515,
        "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)": -0.07057606150121515,
        "org.apache.commons.math3.linear$RealMatrixFormat#getAvailableLocales()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getColumnSeparator()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()": -0.13246670688242002,
        "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()": 1.243281036210544,
        "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)": 1.209090416755295,
        "org.apache.commons.math3.linear$RealMatrixFormat#getPrefix()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowPrefix()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowSeparator()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowSuffix()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getSuffix()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)": -0.056968604036525476,
        "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)": -0.06630348727930697,
        "org.apache.commons.math3.linear$RealVector#RealVector()": -0.6489656380908979,
        "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)": -0.03217803380518416,
        "org.apache.commons.math3.linear$RealVector#addToEntry(int,double)": -0.039677900500078606,
        "org.apache.commons.math3.linear$RealVector#checkIndex(int)": -0.2547884702318467,
        "org.apache.commons.math3.linear$RealVector#checkIndices(int,int)": -0.08227693050356519,
        "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)": -0.14874950323581076,
        "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)": -0.13545947458527935,
        "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)": -0.04899733308362823,
        "org.apache.commons.math3.linear$RealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": -0.06846762865011981,
        "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)": -0.06846762865011981,
        "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)": -0.08937484989768829,
        "org.apache.commons.math3.linear$RealVector#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.linear$RealVector#getDistance(org.apache.commons.math3.linear.RealVector)": -0.03217803380518416,
        "org.apache.commons.math3.linear$RealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)": -0.03217803380518416,
        "org.apache.commons.math3.linear$RealVector#getL1Norm()": -0.022551643999269056,
        "org.apache.commons.math3.linear$RealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)": -0.03217803380518416,
        "org.apache.commons.math3.linear$RealVector#getLInfNorm()": -0.022551643999269056,
        "org.apache.commons.math3.linear$RealVector#getMaxIndex()": -0.03610463208830892,
        "org.apache.commons.math3.linear$RealVector#getMaxValue()": -0.03610463208830892,
        "org.apache.commons.math3.linear$RealVector#getMinIndex()": -0.03610463208830892,
        "org.apache.commons.math3.linear$RealVector#getMinValue()": -0.03610463208830892,
        "org.apache.commons.math3.linear$RealVector#getNorm()": -0.07853603055301973,
        "org.apache.commons.math3.linear$RealVector#hashCode()": 0.0,
        "org.apache.commons.math3.linear$RealVector#iterator()": -0.14874950323581076,
        "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)": -0.022551643999269056,
        "org.apache.commons.math3.linear$RealVector#mapAdd(double)": -0.027754019642410744,
        "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)": -0.03217803380518416,
        "org.apache.commons.math3.linear$RealVector#mapDivide(double)": -0.04298343273852282,
        "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)": -0.04298343273852282,
        "org.apache.commons.math3.linear$RealVector#mapMultiply(double)": -0.16670546778482923,
        "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)": -0.05941895200832652,
        "org.apache.commons.math3.linear$RealVector#mapSubtract(double)": -0.03610463208830892,
        "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)": -0.03610463208830892,
        "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": -0.08409649639222037,
        "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)": -0.03610463208830892,
        "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)": -0.061785929062798804,
        "org.apache.commons.math3.linear$RealVector#set(double)": -0.022551643999269056,
        "org.apache.commons.math3.linear$RealVector#sparseIterator()": -0.022551643999269056,
        "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)": -0.03217803380518416,
        "org.apache.commons.math3.linear$RealVector#toArray()": -0.027754019642410744,
        "org.apache.commons.math3.linear$RealVector#unitVector()": -0.03610463208830892,
        "org.apache.commons.math3.linear$RealVector#unitize()": -0.03610463208830892,
        "org.apache.commons.math3.linear$RealVector#unmodifiableRealVector(org.apache.commons.math3.linear.RealVector)": -0.08937484989768829,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": -0.03217803380518416,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": -0.046076997833007435,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": -0.03217803380518416,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": -0.046076997833007435,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": -0.022551643999269056,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": -0.03217803380518416,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": -0.022551643999269056,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": -0.03217803380518416,
        "org.apache.commons.math3.linear$RealVector$1#hasNext()": -0.14874950323581082,
        "org.apache.commons.math3.linear$RealVector$1#next()": -0.14874950323581082,
        "org.apache.commons.math3.linear$RealVector$1#remove()": -0.027754019642410643,
        "org.apache.commons.math3.linear$RealVector$2#add(org.apache.commons.math3.linear.RealVector)": -0.022551643999269233,
        "org.apache.commons.math3.linear$RealVector$2#addToEntry(int,double)": -0.022551643999269233,
        "org.apache.commons.math3.linear$RealVector$2#append(double)": -0.022551643999269233,
        "org.apache.commons.math3.linear$RealVector$2#append(org.apache.commons.math3.linear.RealVector)": -0.022551643999269233,
        "org.apache.commons.math3.linear$RealVector$2#combine(double,double,org.apache.commons.math3.linear.RealVector)": -0.022551643999269233,
        "org.apache.commons.math3.linear$RealVector$2#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": -0.022551643999269233,
        "org.apache.commons.math3.linear$RealVector$2#copy()": -0.022551643999269233,
        "org.apache.commons.math3.linear$RealVector$2#cosine(org.apache.commons.math3.linear.RealVector)": -0.022551643999269233,
        "org.apache.commons.math3.linear$RealVector$2#dotProduct(org.apache.commons.math3.linear.RealVector)": -0.022551643999269233,
        "org.apache.commons.math3.linear$RealVector$2#ebeDivide(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#ebeMultiply(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getDimension()": -0.03967790050007869,
        "org.apache.commons.math3.linear$RealVector$2#getDistance(org.apache.commons.math3.linear.RealVector)": -0.022551643999269233,
        "org.apache.commons.math3.linear$RealVector$2#getEntry(int)": -0.04607699783300734,
        "org.apache.commons.math3.linear$RealVector$2#getL1Distance(org.apache.commons.math3.linear.RealVector)": -0.022551643999269233,
        "org.apache.commons.math3.linear$RealVector$2#getL1Norm()": -0.022551643999269233,
        "org.apache.commons.math3.linear$RealVector$2#getLInfDistance(org.apache.commons.math3.linear.RealVector)": -0.022551643999269233,
        "org.apache.commons.math3.linear$RealVector$2#getLInfNorm()": -0.022551643999269233,
        "org.apache.commons.math3.linear$RealVector$2#getNorm()": -0.022551643999269233,
        "org.apache.commons.math3.linear$RealVector$2#getSubVector(int,int)": -0.022551643999269233,
        "org.apache.commons.math3.linear$RealVector$2#isInfinite()": -0.022551643999269233,
        "org.apache.commons.math3.linear$RealVector$2#isNaN()": -0.022551643999269233,
        "org.apache.commons.math3.linear$RealVector$2#iterator()": -0.03217803380518425,
        "org.apache.commons.math3.linear$RealVector$2#map(org.apache.commons.math3.analysis.UnivariateFunction)": -0.022551643999269233,
        "org.apache.commons.math3.linear$RealVector$2#mapAdd(double)": -0.022551643999269233,
        "org.apache.commons.math3.linear$RealVector$2#mapAddToSelf(double)": -0.022551643999269233,
        "org.apache.commons.math3.linear$RealVector$2#mapDivide(double)": -0.022551643999269233,
        "org.apache.commons.math3.linear$RealVector$2#mapDivideToSelf(double)": -0.022551643999269233,
        "org.apache.commons.math3.linear$RealVector$2#mapMultiply(double)": -0.022551643999269233,
        "org.apache.commons.math3.linear$RealVector$2#mapMultiplyToSelf(double)": -0.022551643999269233,
        "org.apache.commons.math3.linear$RealVector$2#mapSubtract(double)": -0.022551643999269233,
        "org.apache.commons.math3.linear$RealVector$2#mapSubtractToSelf(double)": -0.022551643999269233,
        "org.apache.commons.math3.linear$RealVector$2#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": -0.022551643999269233,
        "org.apache.commons.math3.linear$RealVector$2#outerProduct(org.apache.commons.math3.linear.RealVector)": -0.022551643999269233,
        "org.apache.commons.math3.linear$RealVector$2#set(double)": -0.027754019642410643,
        "org.apache.commons.math3.linear$RealVector$2#setEntry(int,double)": -0.022551643999269233,
        "org.apache.commons.math3.linear$RealVector$2#setSubVector(int,org.apache.commons.math3.linear.RealVector)": -0.022551643999269233,
        "org.apache.commons.math3.linear$RealVector$2#sparseIterator()": -0.022551643999269233,
        "org.apache.commons.math3.linear$RealVector$2#subtract(org.apache.commons.math3.linear.RealVector)": -0.03217803380518425,
        "org.apache.commons.math3.linear$RealVector$2#toArray()": -0.022551643999269233,
        "org.apache.commons.math3.linear$RealVector$2#unitVector()": -0.022551643999269233,
        "org.apache.commons.math3.linear$RealVector$2#unitize()": -0.022551643999269233,
        "org.apache.commons.math3.linear$RealVector$2$1#hasNext()": -0.03217803380518425,
        "org.apache.commons.math3.linear$RealVector$2$1#next()": -0.03217803380518425,
        "org.apache.commons.math3.linear$RealVector$2$1#remove()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$2#hasNext()": -0.022551643999269233,
        "org.apache.commons.math3.linear$RealVector$2$2#next()": -0.022551643999269233,
        "org.apache.commons.math3.linear$RealVector$2$2#remove()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#RealVector$2$UnmodifiableEntry(org.apache.commons.math3.linear.RealVector$2)": -0.03967790050007869,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#getValue()": -0.03967790050007869,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#setValue(double)": -0.03217803380518425,
        "org.apache.commons.math3.linear$RealVector$Entry#RealVector$Entry(org.apache.commons.math3.linear.RealVector)": -0.15222850420481462,
        "org.apache.commons.math3.linear$RealVector$Entry#getIndex()": -0.1522285042048146,
        "org.apache.commons.math3.linear$RealVector$Entry#getValue()": -0.14874950323581076,
        "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)": -0.1522285042048146,
        "org.apache.commons.math3.linear$RealVector$Entry#setValue(double)": -0.08764375318234421,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#RealVector$SparseEntryIterator(org.apache.commons.math3.linear.RealVector)": -0.022551643999269056,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)": -0.022551643999269056,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()": -0.022551643999269056,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()": -0.022551643999269056,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#remove()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat()": -0.046076997833007435,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)": -0.5560064901891308,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)": -0.5560064901891308,
        "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector)": -0.07853603055301973,
        "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector,java.lang.StringBuffer,java.text.FieldPosition)": -0.07853603055301973,
        "org.apache.commons.math3.linear$RealVectorFormat#getAvailableLocales()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#getFormat()": -0.022551643999269233,
        "org.apache.commons.math3.linear$RealVectorFormat#getInstance()": -0.5505005198880852,
        "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)": -0.5560064901891308,
        "org.apache.commons.math3.linear$RealVectorFormat#getPrefix()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#getSeparator()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#getSuffix()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String)": -0.08937484989768829,
        "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String,java.text.ParsePosition)": -0.10237636042236845,
        "org.apache.commons.math3.optimization$InitialGuess#InitialGuess(double[])": 1.5751900281524467,
        "org.apache.commons.math3.optimization$InitialGuess#getInitialGuess()": 0.2302462160571196,
        "org.apache.commons.math3.optimization$PointVectorValuePair#PointVectorValuePair(double[],double[])": -0.16885554560609523,
        "org.apache.commons.math3.optimization$PointVectorValuePair#PointVectorValuePair(double[],double[],boolean)": -0.16885554560609523,
        "org.apache.commons.math3.optimization$PointVectorValuePair#getPoint()": -0.15565233010136906,
        "org.apache.commons.math3.optimization$PointVectorValuePair#getPointRef()": -0.11977946707986692,
        "org.apache.commons.math3.optimization$PointVectorValuePair#getValue()": -0.039677900500078606,
        "org.apache.commons.math3.optimization$PointVectorValuePair#getValueRef()": -0.07853603055301973,
        "org.apache.commons.math3.optimization$PointVectorValuePair#writeReplace()": -0.015845589443974746,
        "org.apache.commons.math3.optimization$PointVectorValuePair$DataTransferObject#PointVectorValuePair$DataTransferObject(double[],double[])": -0.015845589443974746,
        "org.apache.commons.math3.optimization$PointVectorValuePair$DataTransferObject#readResolve()": -0.015845589443974746,
        "org.apache.commons.math3.optimization$Target#Target(double[])": 1.652217130714798,
        "org.apache.commons.math3.optimization$Target#getTarget()": 0.30643069308789317,
        "org.apache.commons.math3.optimization$Weight#Weight(double[])": 1.652217130714798,
        "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.optimization$Weight#getWeight()": 1.652217130714798,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#BaseAbstractMultivariateVectorOptimizer()": 0.0,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#BaseAbstractMultivariateVectorOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)": 1.6490129618189258,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#checkParameters()": 1.652217130714798,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])": -0.16778286928520206,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getConvergenceChecker()": -0.16234693952388746,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getEvaluations()": -0.03610463208830892,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getMaxEvaluations()": 0.0,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getObjectiveFunction()": -0.16778286928520192,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getStartPoint()": -0.16778286928520192,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getTarget()": -0.16778286928520192,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getTargetRef()": 0.0,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()": 1.652217130714798,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeightRef()": 0.0,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])": 0.0,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])": 0.0,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])": 0.0,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])": 1.652217130714798,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])": 1.652217130714798,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#setUp()": 1.652217130714798,
        "org.apache.commons.math3.optimization.fitting$CurveFitter#CurveFitter(org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer)": 0.38832872003147145,
        "org.apache.commons.math3.optimization.fitting$CurveFitter#CurveFitter(org.apache.commons.math3.optimization.MultivariateDifferentiableVectorOptimizer)": 0.0,
        "org.apache.commons.math3.optimization.fitting$CurveFitter#addObservedPoint(double,double)": -0.0640783254133797,
        "org.apache.commons.math3.optimization.fitting$CurveFitter#addObservedPoint(double,double,double)": 1.7377230694964347,
        "org.apache.commons.math3.optimization.fitting$CurveFitter#addObservedPoint(org.apache.commons.math3.optimization.fitting.WeightedObservedPoint)": 0.0,
        "org.apache.commons.math3.optimization.fitting$CurveFitter#clearObservations()": 0.0,
        "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(int,org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])": 1.7395758281705929,
        "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])": 1.7453564612372088,
        "org.apache.commons.math3.optimization.fitting$CurveFitter#getObservations()": -0.061785929062798894,
        "org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction#CurveFitter$OldTheoreticalValuesFunction(org.apache.commons.math3.optimization.fitting.CurveFitter,org.apache.commons.math3.analysis.ParametricUnivariateFunction)": 0.3937893905436879,
        "org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction#jacobian()": -0.0804241718294072,
        "org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction#value(double[])": -0.0804241718294071,
        "org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction$1#value(double[])": -0.0804241718294072,
        "org.apache.commons.math3.optimization.fitting$PolynomialFitter#PolynomialFitter(int,org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer)": 0.0,
        "org.apache.commons.math3.optimization.fitting$PolynomialFitter#PolynomialFitter(org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer)": 1.7838953679116911,
        "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit()": 0.0,
        "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(double[])": 1.7838953679116911,
        "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(int,double[])": 0.0,
        "org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#WeightedObservedPoint(double,double,double)": 0.3901170659808747,
        "org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#getWeight()": 0.3937893905436879,
        "org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#getX()": -0.0822769305035651,
        "org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#getY()": 0.39193663186953,
        "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#AbstractLeastSquaresOptimizer()": 0.0,
        "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#AbstractLeastSquaresOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)": 1.6490129618189258,
        "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])": -0.15902417587027562,
        "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)": -0.046076997833007435,
        "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeResiduals(double[])": -0.16670546778482923,
        "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)": -0.027754019642410744,
        "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])": -0.16453616003636096,
        "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getChiSquare()": -0.12516701794070384,
        "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()": 0.0,
        "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)": 0.0,
        "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getJacobianEvaluations()": -0.027754019642410643,
        "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getRMS()": -0.11977946707986692,
        "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()": -0.13545947458527935,
        "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()": -0.027754019642410744,
        "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])": 1.7395758281705929,
        "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])": -0.14161143616678348,
        "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])": 1.652217130714798,
        "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setCost(double)": -0.1416114361667835,
        "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()": 1.652217130714798,
        "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#squareRoot(org.apache.commons.math3.linear.RealMatrix)": 0.30643069308789317,
        "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()": 0.0,
        "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()": 0.0,
        "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer()": 1.7086624805764141,
        "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double)": -0.07057606150121515,
        "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double,double,double)": 1.6832941444347618,
        "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,org.apache.commons.math3.optimization.ConvergenceChecker,double,double,double,double)": -0.022551643999269056,
        "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)": -0.022551643999269056,
        "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#determineLMDirection(double[],double[],double[],double[])": -0.08227693050356519,
        "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#determineLMParameter(double[],double,double[],double[],double[],double[])": -0.13545947458527935,
        "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()": -0.13545947458527935,
        "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qTy(double[])": -0.13545947458527935,
        "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)": -0.13545947458527935,
        "org.apache.commons.math3.util$CompositeFormat#CompositeFormat()": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#formatDouble(double,java.text.NumberFormat,java.lang.StringBuffer,java.text.FieldPosition)": -0.17204600675521142,
        "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()": 1.2325068301058364,
        "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)": -0.2995033488577462,
        "org.apache.commons.math3.util$CompositeFormat#parseAndIgnoreWhitespace(java.lang.String,java.text.ParsePosition)": -0.1904138758561749,
        "org.apache.commons.math3.util$CompositeFormat#parseFixedstring(java.lang.String,java.lang.String,java.text.ParsePosition)": -0.18843258913002425,
        "org.apache.commons.math3.util$CompositeFormat#parseNextCharacter(java.lang.String,java.text.ParsePosition)": -0.19041387585617486,
        "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,double,java.text.ParsePosition)": -0.0822769305035651,
        "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,java.text.NumberFormat,java.text.ParsePosition)": -0.18543446886130374,
        "org.apache.commons.math3.util$FastMath#<clinit>()": -1.1869645253178565,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0.0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": -0.01584558944397485,
        "org.apache.commons.math3.util$FastMath#abs(double)": -0.6552639738100238,
        "org.apache.commons.math3.util$FastMath#abs(float)": -0.022551643999269233,
        "org.apache.commons.math3.util$FastMath#abs(int)": -0.36308522024424805,
        "org.apache.commons.math3.util$FastMath#abs(long)": -0.6971902658994709,
        "org.apache.commons.math3.util$FastMath#acos(double)": -0.07853603055301973,
        "org.apache.commons.math3.util$FastMath#acosh(double)": -0.022551643999269056,
        "org.apache.commons.math3.util$FastMath#asin(double)": -0.0804241718294071,
        "org.apache.commons.math3.util$FastMath#asinh(double)": -0.022551643999269056,
        "org.apache.commons.math3.util$FastMath#atan(double)": -0.09604883500389219,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": -0.18743675657398834,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": -0.16453616003636096,
        "org.apache.commons.math3.util$FastMath#atanh(double)": -0.022551643999269056,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": -0.11133751942358573,
        "org.apache.commons.math3.util$FastMath#ceil(double)": -0.3369903360690789,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": -0.059418952008326587,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": -0.022551643999269233,
        "org.apache.commons.math3.util$FastMath#cos(double)": -0.33277163527123765,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": -0.38692990859045107,
        "org.apache.commons.math3.util$FastMath#cosh(double)": -0.0927593844108184,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": -0.15565233010136906,
        "org.apache.commons.math3.util$FastMath#exp(double)": -0.6119650126777328,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": -0.7264911491251226,
        "org.apache.commons.math3.util$FastMath#expm1(double)": -0.0640783254133797,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": -0.0927593844108184,
        "org.apache.commons.math3.util$FastMath#floor(double)": -0.6313575916491998,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": -0.1545169816447669,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": -0.022551643999269233,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": -0.14874950323581076,
        "org.apache.commons.math3.util$FastMath#log(double)": -0.6566726800083376,
        "org.apache.commons.math3.util$FastMath#log(double,double)": -0.015845589443974746,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": -0.7688988837432629,
        "org.apache.commons.math3.util$FastMath#log10(double)": -0.1303878269668829,
        "org.apache.commons.math3.util$FastMath#log1p(double)": -0.45687125905173864,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0.0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": -0.20940821229041162,
        "org.apache.commons.math3.util$FastMath#max(float,float)": -0.022551643999269233,
        "org.apache.commons.math3.util$FastMath#max(int,int)": -0.5043871608814074,
        "org.apache.commons.math3.util$FastMath#max(long,long)": -0.01584558944397485,
        "org.apache.commons.math3.util$FastMath#min(double,double)": -0.4520542610403868,
        "org.apache.commons.math3.util$FastMath#min(float,float)": -0.022551643999269233,
        "org.apache.commons.math3.util$FastMath#min(int,int)": -0.6282296118541948,
        "org.apache.commons.math3.util$FastMath#min(long,long)": -0.10082359614582503,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": -0.06407832541337966,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": -0.027754019642410643,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": -0.027754019642410744,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": -0.015845589443974746,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": -0.41194426802824724,
        "org.apache.commons.math3.util$FastMath#polySine(double)": -0.41194426802824724,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": -0.5433066541944699,
        "org.apache.commons.math3.util$FastMath#pow(double,int)": -0.2605020545872643,
        "org.apache.commons.math3.util$FastMath#random()": -0.07263336910865426,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": -0.03610463208830892,
        "org.apache.commons.math3.util$FastMath#rint(double)": -0.1440188395814095,
        "org.apache.commons.math3.util$FastMath#round(double)": -0.07853603055301973,
        "org.apache.commons.math3.util$FastMath#round(float)": -0.015845589443974746,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": -0.13294131824122246,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": -0.022551643999269233,
        "org.apache.commons.math3.util$FastMath#signum(double)": -0.05696860403652537,
        "org.apache.commons.math3.util$FastMath#signum(float)": -0.022551643999269233,
        "org.apache.commons.math3.util$FastMath#sin(double)": -0.39664456268593623,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": -0.40049684548747655,
        "org.apache.commons.math3.util$FastMath#sinh(double)": -0.0927593844108184,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": -1.1022489639135071,
        "org.apache.commons.math3.util$FastMath#tan(double)": -0.08588484234162365,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": -0.08588484234162365,
        "org.apache.commons.math3.util$FastMath#tanh(double)": -0.056968604036525476,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": -0.03217803380518416,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": -0.03217803380518416,
        "org.apache.commons.math3.util$FastMath#ulp(double)": -0.3313589609355506,
        "org.apache.commons.math3.util$FastMath#ulp(float)": -0.015845589443974746,
        "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)": -0.35563633576400755,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getK()": -0.35563633576400755,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()": -0.35563633576400755,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()": -0.35563633576400755,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": -0.718590698154292,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": -0.7166103966790176,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": -0.7616507791078675,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0.0,
        "org.apache.commons.math3.util$Incrementor#Incrementor()": 1.2906468867463219,
        "org.apache.commons.math3.util$Incrementor#Incrementor(int)": 1.2596057074818403,
        "org.apache.commons.math3.util$Incrementor#Incrementor(int,org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback)": 1.1507682395749936,
        "org.apache.commons.math3.util$Incrementor#canIncrement()": -0.022551643999269233,
        "org.apache.commons.math3.util$Incrementor#getCount()": -0.29032830580375624,
        "org.apache.commons.math3.util$Incrementor#getMaximalCount()": -0.11420384262671668,
        "org.apache.commons.math3.util$Incrementor#incrementCount()": -0.6334394003992228,
        "org.apache.commons.math3.util$Incrementor#incrementCount(int)": -0.015845589443974746,
        "org.apache.commons.math3.util$Incrementor#resetCount()": -0.17320625493229425,
        "org.apache.commons.math3.util$Incrementor#setMaximalCount(int)": -0.1540160494810997,
        "org.apache.commons.math3.util$Incrementor$1#trigger(int)": -0.0705760615012152,
        "org.apache.commons.math3.util$MathUtils#MathUtils()": 0.0,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double)": -0.06846762865011981,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double[])": -0.015845589443974746,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)": 1.0648349406461326,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.15565233010136906,
        "org.apache.commons.math3.util$MathUtils#copySign(byte,byte)": -0.03217803380518416,
        "org.apache.commons.math3.util$MathUtils#copySign(int,int)": -0.03217803380518416,
        "org.apache.commons.math3.util$MathUtils#copySign(long,long)": -0.022551643999269056,
        "org.apache.commons.math3.util$MathUtils#copySign(short,short)": -0.022551643999269056,
        "org.apache.commons.math3.util$MathUtils#hash(double)": -0.11840412414613244,
        "org.apache.commons.math3.util$MathUtils#hash(double[])": -0.10082359614582498,
        "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)": -0.11277759878572818,
        "org.apache.commons.math3.util$MathUtils#reduce(double,double,double)": -0.03610463208830892,
        "org.apache.commons.math3.util$Pair#Pair(java.lang.Object,java.lang.Object)": -0.46702854510892977,
        "org.apache.commons.math3.util$Pair#Pair(org.apache.commons.math3.util.Pair)": 0.0,
        "org.apache.commons.math3.util$Pair#equals(java.lang.Object)": -0.015845589443974746,
        "org.apache.commons.math3.util$Pair#getFirst()": -0.17204600675521142,
        "org.apache.commons.math3.util$Pair#getKey()": -0.37377977000640294,
        "org.apache.commons.math3.util$Pair#getSecond()": -0.17204600675521142,
        "org.apache.commons.math3.util$Pair#getValue()": -0.30754870613745355,
        "org.apache.commons.math3.util$Pair#hashCode()": -0.015845589443974746,
        "org.apache.commons.math3.util$Precision#<clinit>()": -0.39557350138064595,
        "org.apache.commons.math3.util$Precision#Precision()": 0.0,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,double)": -0.17519667277432158,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,int)": -0.12249531834103856,
        "org.apache.commons.math3.util$Precision#equals(double,double)": -0.25314191132245334,
        "org.apache.commons.math3.util$Precision#equals(double,double,double)": -0.4622617666233949,
        "org.apache.commons.math3.util$Precision#equals(double,double,int)": -0.6668928191840575,
        "org.apache.commons.math3.util$Precision#equals(float,float)": -0.015845589443974746,
        "org.apache.commons.math3.util$Precision#equals(float,float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(float,float,int)": -0.15902417587027562,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)": -0.21230876170443272,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)": -0.12249531834103856,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)": -0.015845589443974746,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)": -0.1579058182870765,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsWithRelativeTolerance(double,double,double)": -0.015845589443974746,
        "org.apache.commons.math3.util$Precision#representableDelta(double,double)": -0.01584558944397485,
        "org.apache.commons.math3.util$Precision#round(double,int)": -0.015845589443974746,
        "org.apache.commons.math3.util$Precision#round(double,int,int)": -0.01584558944397485,
        "org.apache.commons.math3.util$Precision#round(float,int)": -0.015845589443974746,
        "org.apache.commons.math3.util$Precision#round(float,int,int)": -0.015845589443974746,
        "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)": -0.015845589443974746
    },
    "Math-14": {
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#PolynomialFunction(double[])": 1.6665824577888504,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#add(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)": -0.05698318834086508,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#degree()": -0.07059431520239157,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#derivative()": -0.0361137206226636,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#differentiate(double[])": -0.0766299658927033,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#equals(java.lang.Object)": -0.0158495073975653,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#evaluate(double[],double)": 1.6870228693756828,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#getCoefficients()": -0.09278375163059427,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#hashCode()": 0.0,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#multiply(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)": -0.06180180505070818,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#negate()": 0.0,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#polynomialDerivative()": -0.0766299658927033,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#subtract(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)": -0.022557254279998426,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#toString()": -0.04900979837389419,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#toString(double)": -0.04900979837389419,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(double)": 1.6947994186037216,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": 0.0,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#PolynomialFunction$Parametric()": 0.4015613792821543,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#gradient(double,double[])": -0.07265218309094079,
        "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#value(double,double[])": -0.07265218309094094,
        "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException()": -0.015849507397565313,
        "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.07059431520239177,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)": -0.24487966689720925,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)": -0.26219596889721086,
        "org.apache.commons.math3.exception$DimensionMismatchException#getDimension()": -0.027760956079833532,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": -0.05443812468053033,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.11423426202545398,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": -0.0158495073975653,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.6543165153094697,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": -0.04900979837389419,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.5747343357594791,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": -0.061801805050708314,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": -0.14043463687170613,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.1689019417751054,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": -0.13549601876670914,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": -0.0158495073975653,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int)": 0.0,
        "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int,java.lang.Class)": -0.059434192305543,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()": -0.07059431520239177,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.07059431520239177,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)": -0.09110350881282944,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.09110350881282944,
        "org.apache.commons.math3.exception$MaxCountExceededException#getMax()": -0.05943419230554303,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(java.lang.Integer[],java.lang.Integer[])": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])": -0.10695749268006954,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getExpectedDimension(int)": -0.0158495073975653,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getExpectedDimensions()": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getWrongDimension(int)": -0.0158495073975653,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getWrongDimensions()": 0.0,
        "org.apache.commons.math3.exception$NoDataException#NoDataException()": -0.054438124680530206,
        "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)": -0.087666696783095,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])": -0.04299431495952886,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.07059431520239177,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)": -0.07059431520239177,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": -0.05698318834086508,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)": -0.11981148140652316,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": -0.16018088075246678,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": -0.11843574426124726,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.15226996202175863,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)": -0.09927817503271309,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.21144692145492938,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getBoundIsAllowed()": -0.0158495073975653,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getMax()": -0.0158495073975653,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": -0.17835864649676442,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.2964681747095529,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": -0.027760956079833532,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": -0.027760956079833532,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(java.lang.Number,java.lang.Number,java.lang.Number)": -0.10991229671800741,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)": -0.26461381922214666,
        "org.apache.commons.math3.exception$OutOfRangeException#getHi()": -0.0158495073975653,
        "org.apache.commons.math3.exception$OutOfRangeException#getLo()": -0.0158495073975653,
        "org.apache.commons.math3.exception$TooManyEvaluationsException#TooManyEvaluationsException(java.lang.Number)": -0.0785564598090808,
        "org.apache.commons.math3.exception$ZeroException#ZeroException()": -0.022557254279998426,
        "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.054438124680530206,
        "org.apache.commons.math3.fitting$CurveFitter#CurveFitter(org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer)": 0.38311005356026573,
        "org.apache.commons.math3.fitting$CurveFitter#addObservedPoint(double,double)": -0.06409481893035893,
        "org.apache.commons.math3.fitting$CurveFitter#addObservedPoint(double,double,double)": 1.732333303216905,
        "org.apache.commons.math3.fitting$CurveFitter#addObservedPoint(org.apache.commons.math3.fitting.WeightedObservedPoint)": 0.0,
        "org.apache.commons.math3.fitting$CurveFitter#clearObservations()": -0.027760956079833532,
        "org.apache.commons.math3.fitting$CurveFitter#fit(int,org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])": 1.7340927016742351,
        "org.apache.commons.math3.fitting$CurveFitter#fit(org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])": 1.7395548798281943,
        "org.apache.commons.math3.fitting$CurveFitter#getObservations()": -0.061801805050708314,
        "org.apache.commons.math3.fitting$CurveFitter$TheoreticalValuesFunction#CurveFitter$TheoreticalValuesFunction(org.apache.commons.math3.fitting.CurveFitter,org.apache.commons.math3.analysis.ParametricUnivariateFunction)": 0.3883062640473304,
        "org.apache.commons.math3.fitting$CurveFitter$TheoreticalValuesFunction#getModelFunction()": 1.7340927016742351,
        "org.apache.commons.math3.fitting$CurveFitter$TheoreticalValuesFunction#getModelFunctionJacobian()": 1.7340927016742351,
        "org.apache.commons.math3.fitting$CurveFitter$TheoreticalValuesFunction$1#value(double[])": -0.08590729832576471,
        "org.apache.commons.math3.fitting$CurveFitter$TheoreticalValuesFunction$2#value(double[])": -0.08590729832576471,
        "org.apache.commons.math3.fitting$PolynomialFitter#PolynomialFitter(org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer)": 1.7739113073192043,
        "org.apache.commons.math3.fitting$PolynomialFitter#fit(double[])": 1.7739113073192043,
        "org.apache.commons.math3.fitting$PolynomialFitter#fit(int,double[])": 0.0,
        "org.apache.commons.math3.fitting$WeightedObservedPoint#WeightedObservedPoint(double,double,double)": 0.38481528803124154,
        "org.apache.commons.math3.fitting$WeightedObservedPoint#getWeight()": 0.3883062640473304,
        "org.apache.commons.math3.fitting$WeightedObservedPoint#getX()": -0.08766669678309502,
        "org.apache.commons.math3.fitting$WeightedObservedPoint#getY()": 0.38654686559000007,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix()": -0.02255725427999833,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field)": -0.1499562874919731,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)": -0.18346845079698174,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)": -0.03218610685553004,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)": -0.14405788315948076,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)": -0.19922291742248333,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkAdditionCompatible(org.apache.commons.math3.linear.FieldMatrix)": -0.05178584329946811,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)": -0.2058632816889,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkMultiplicationCompatible(org.apache.commons.math3.linear.FieldMatrix)": -0.07059431520239177,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)": -0.2058632816889,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)": -0.05178584329946811,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int[],int[])": -0.0361137206226636,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubtractionCompatible(org.apache.commons.math3.linear.FieldMatrix)": -0.03218610685553004,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])": -0.022557254279998426,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int[],int[],org.apache.commons.math3.FieldElement[][])": -0.022557254279998426,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#equals(java.lang.Object)": -0.09607412184478668,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[][])": -0.17103407198945791,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumn(int)": -0.05178584329946811,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)": -0.02776095607983342,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnVector(int)": -0.039687918476830834,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getData()": -0.022557254279998426,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()": -0.21052292194355404,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRow(int)": -0.04299431495952886,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)": -0.03218610685553004,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowVector(int)": -0.02776095607983342,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)": -0.022557254279998426,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])": -0.02776095607983342,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getTrace()": -0.02776095607983342,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#hashCode()": -0.02776095607983342,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#isSquare()": -0.1054563559303703,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)": -0.05178584329946811,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": -0.022557254279998426,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.linear.FieldVector)": -0.02776095607983342,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)": -0.015849507397565313,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": -0.015849507397565313,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)": -0.02776095607983342,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)": -0.022557254279998426,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)": -0.022557254279998426,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])": -0.015849507397565313,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": -0.015849507397565313,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)": -0.015849507397565313,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])": -0.015849507397565313,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": -0.015849507397565313,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)": -0.015849507397565313,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": -0.022557254279998426,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)": -0.015849507397565313,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#toString()": -0.022557254279998426,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()": -0.039687918476830834,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.015849507397565313,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.015849507397565313,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.015849507397565313,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.015849507397565313,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.02776095607983342,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.015849507397565313,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.08044512017180572,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.022557254279998426,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.015849507397565313,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.022557254279998426,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$1#visit(int,int,org.apache.commons.math3.FieldElement)": -0.027760956079833532,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$2#start(int,int,int,int,int,int)": -0.02255725427999833,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$2#visit(int,int,org.apache.commons.math3.FieldElement)": -0.02255725427999833,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$3#visit(int,int,org.apache.commons.math3.FieldElement)": -0.03968791847683084,
        "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()": 1.2141874995480961,
        "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()": -0.49878941379603603,
        "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)": 1.2704319312321215,
        "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)": -0.10393856017208226,
        "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])": -0.09110350881282944,
        "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])": -0.022557254279998426,
        "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)": -0.12652105328287258,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)": -0.13042289894700818,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)": -0.10393856017208226,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)": -0.06632058195265775,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getData()": -0.022557254279998426,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()": -0.09927817503271309,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()": -0.16018088075246678,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)": -0.21236834833571921,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)": -0.03218610685553004,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)": -0.12652105328287258,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)": -0.054438124680530206,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])": -0.02776095607983342,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()": -0.02776095607983342,
        "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()": -0.04299431495952886,
        "org.apache.commons.math3.linear$AbstractRealMatrix#isSquare()": -0.36319314484265297,
        "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": -0.32147067950117214,
        "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])": -0.022557254279998426,
        "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)": -0.2819657962969324,
        "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)": -0.022557254279998426,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])": -0.015849507397565313,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)": -0.02776095607983342,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)": -0.10085022359829507,
        "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)": -0.21144692145492938,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])": -0.05178584329946811,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)": -0.022557254279998426,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)": -0.2515606873366735,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])": -0.015849507397565313,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)": -0.015849507397565313,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)": -0.26138707804894856,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)": -0.0361137206226636,
        "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": -0.1854858509578322,
        "org.apache.commons.math3.linear$AbstractRealMatrix#toString()": -0.04299431495952886,
        "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()": -0.35369533713682383,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.015849507397565313,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.015849507397565313,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.046088692680795684,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.015849507397565313,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.0361137206226636,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.015849507397565313,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.35506033421202754,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.08939827434185361,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.015849507397565313,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.022557254279998426,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#end()": -0.16018088075246673,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#start(int,int,int,int,int,int)": -0.16018088075246673,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#visit(int,int,double)": -0.16018088075246673,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#end()": -0.09927817503271319,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#start(int,int,int,int,int,int)": -0.09927817503271319,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#visit(int,int,double)": -0.09927817503271319,
        "org.apache.commons.math3.linear$AbstractRealMatrix$3#visit(int,int,double)": -0.027760956079833532,
        "org.apache.commons.math3.linear$AbstractRealMatrix$4#start(int,int,int,int,int,int)": -0.09110350881282936,
        "org.apache.commons.math3.linear$AbstractRealMatrix$4#visit(int,int,double)": -0.09110350881282936,
        "org.apache.commons.math3.linear$AbstractRealMatrix$5#visit(int,int,double)": -0.3536953371368239,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field)": -0.022557254279998426,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,int,int)": -0.10085022359829507,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])": -0.1211754850513449,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)": -0.09444024248511124,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])": -0.10695749268006954,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)": -0.07059431520239177,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": -0.022557254279998426,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()": -0.022557254279998426,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])": -0.1211754850513449,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyOut()": -0.09768644173087435,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#createMatrix(int,int)": -0.07059431520239177,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()": -0.15794895508803863,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getData()": -0.09444024248511124,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getDataRef()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)": -0.14285746748292402,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()": -0.15794895508803863,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": -0.015849507397565313,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": -0.022557254279998426,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": -0.015849507397565313,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)": -0.1054563559303703,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": -0.1211754850513449,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": -0.015849507397565313,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.015849507397565313,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.015849507397565313,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.015849507397565313,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.015849507397565313,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.022557254279998426,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.015849507397565313,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.0785564598090808,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.022557254279998426,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix()": -0.03218610685553004,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[])": -0.03218610685553004,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])": -0.464790235780154,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)": -0.3356861459729308,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)": -0.47250887199504876,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)": -0.022557254279998426,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()": -0.24572079671558952,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])": -0.46598161538302274,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()": -0.3961195892919027,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)": -0.3745545880007034,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()": -0.5323222845810058,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getData()": -0.39094762168313557,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getDataRef()": -0.1511162525766312,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)": -0.48660670676669293,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()": -0.5317618947852094,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)": -0.054438124680530206,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)": -0.04900979837389419,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#operate(double[])": -0.2717905673822105,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#preMultiply(double[])": -0.02776095607983342,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)": -0.4671715649559983,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)": -0.46598161538302274,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)": -0.015849507397565313,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.015849507397565313,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.015849507397565313,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.15455911532947078,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.015849507397565313,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.03218610685553004,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.015849507397565313,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.3543781829476311,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.08939827434185361,
        "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()": -0.5501204168050934,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector()": -0.02776095607983342,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[])": -0.44309041995052445,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)": -0.46120742869870185,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],double[])": -0.015849507397565313,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],int,int)": -0.015849507397565313,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],org.apache.commons.math3.linear.ArrayRealVector)": -0.015849507397565313,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int)": -0.24990057470848223,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int,double)": -0.02776095607983342,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[])": -0.015849507397565313,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[],int,int)": -0.015849507397565313,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector)": -0.015849507397565313,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,boolean)": -0.20866708640250065,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,double[])": -0.015849507397565313,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.ArrayRealVector)": -0.02776095607983342,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.RealVector)": -0.022557254279998426,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector)": -0.015849507397565313,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.ArrayRealVector)": -0.015849507397565313,
        "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)": -0.04900979837389419,
        "org.apache.commons.math3.linear$ArrayRealVector#addToEntry(int,double)": -0.02776095607983342,
        "org.apache.commons.math3.linear$ArrayRealVector#append(double)": -0.022557254279998426,
        "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.RealVector)": -0.022557254279998426,
        "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)": -0.37654098247208423,
        "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)": -0.06848530962035203,
        "org.apache.commons.math3.linear$ArrayRealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)": -0.06848530962035203,
        "org.apache.commons.math3.linear$ArrayRealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": -0.10991229671800741,
        "org.apache.commons.math3.linear$ArrayRealVector#copy()": -0.20773518962235468,
        "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)": -0.32505623803602807,
        "org.apache.commons.math3.linear$ArrayRealVector#ebeDivide(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ebeMultiply(org.apache.commons.math3.linear.RealVector)": -0.08590729832576476,
        "org.apache.commons.math3.linear$ArrayRealVector#equals(java.lang.Object)": -0.1211754850513449,
        "org.apache.commons.math3.linear$ArrayRealVector#getDataRef()": -0.29797113060750813,
        "org.apache.commons.math3.linear$ArrayRealVector#getDimension()": -0.4600102404281119,
        "org.apache.commons.math3.linear$ArrayRealVector#getDistance(org.apache.commons.math3.linear.RealVector)": -0.0361137206226636,
        "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)": -0.4283368956425493,
        "org.apache.commons.math3.linear$ArrayRealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)": -0.03218610685553004,
        "org.apache.commons.math3.linear$ArrayRealVector#getL1Norm()": -0.022557254279998426,
        "org.apache.commons.math3.linear$ArrayRealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)": -0.03218610685553004,
        "org.apache.commons.math3.linear$ArrayRealVector#getLInfNorm()": -0.022557254279998426,
        "org.apache.commons.math3.linear$ArrayRealVector#getNorm()": -0.13042289894700818,
        "org.apache.commons.math3.linear$ArrayRealVector#getSubVector(int,int)": -0.04299431495952886,
        "org.apache.commons.math3.linear$ArrayRealVector#hashCode()": -0.09110350881282944,
        "org.apache.commons.math3.linear$ArrayRealVector#isInfinite()": -0.022557254279998426,
        "org.apache.commons.math3.linear$ArrayRealVector#isNaN()": -0.15682470924130087,
        "org.apache.commons.math3.linear$ArrayRealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)": -0.02776095607983342,
        "org.apache.commons.math3.linear$ArrayRealVector#mapAddToSelf(double)": -0.027760956079833532,
        "org.apache.commons.math3.linear$ArrayRealVector#mapDivideToSelf(double)": -0.0361137206226636,
        "org.apache.commons.math3.linear$ArrayRealVector#mapMultiplyToSelf(double)": -0.15682470924130087,
        "org.apache.commons.math3.linear$ArrayRealVector#mapSubtractToSelf(double)": -0.027760956079833532,
        "org.apache.commons.math3.linear$ArrayRealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": -0.03218610685553004,
        "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)": -0.02776095607983342,
        "org.apache.commons.math3.linear$ArrayRealVector#set(double)": -0.11564754277398204,
        "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)": -0.1667512217886538,
        "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,double[])": -0.08411845759182073,
        "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,org.apache.commons.math3.linear.RealVector)": -0.08590729832576476,
        "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)": -0.18245417897796692,
        "org.apache.commons.math3.linear$ArrayRealVector#toArray()": -0.25321422826593776,
        "org.apache.commons.math3.linear$ArrayRealVector#toString()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": -0.02255725427999833,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": -0.03218610685553004,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": -0.02255725427999833,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": -0.03218610685553004,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": -0.015849507397565313,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": -0.022557254279998426,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": -0.015849507397565313,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": -0.022557254279998426,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(int,int,org.apache.commons.math3.FieldElement[][],boolean)": -0.10085022359829507,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)": -0.087666696783095,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.FieldElement[][])": -0.10085022359829507,
        "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.BlockFieldMatrix)": -0.03218610685553004,
        "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)": -0.022557254279998426,
        "org.apache.commons.math3.linear$BlockFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#blockHeight(int)": -0.10991229671800751,
        "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)": -0.11704789708656471,
        "org.apache.commons.math3.linear$BlockFieldMatrix#copy()": -0.015849507397565313,
        "org.apache.commons.math3.linear$BlockFieldMatrix#copyBlockPart(org.apache.commons.math3.FieldElement[],int,int,int,int,int,org.apache.commons.math3.FieldElement[],int,int,int)": -0.02776095607983342,
        "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)": -0.087666696783095,
        "org.apache.commons.math3.linear$BlockFieldMatrix#createMatrix(int,int)": -0.015849507397565313,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumn(int)": -0.0361137206226636,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()": -0.10991229671800751,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnMatrix(int)": -0.02776095607983342,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnVector(int)": -0.02776095607983342,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getData()": -0.0361137206226636,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)": -0.08939827434185361,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRow(int)": -0.0361137206226636,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()": -0.11136712223965484,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowMatrix(int)": -0.03218610685553004,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowVector(int)": -0.02776095607983342,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getSubMatrix(int,int,int,int)": -0.02776095607983342,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.BlockFieldMatrix)": -0.04299431495952886,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)": -0.039687918476830834,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": -0.02776095607983342,
        "org.apache.commons.math3.linear$BlockFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": -0.022557254279998426,
        "org.apache.commons.math3.linear$BlockFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)": -0.03218610685553004,
        "org.apache.commons.math3.linear$BlockFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)": -0.015849507397565313,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])": -0.03218610685553004,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)": -0.022557254279998426,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": -0.022557254279998426,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)": -0.022557254279998426,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)": -0.0361137206226636,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])": -0.03218610685553004,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)": -0.022557254279998426,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": -0.022557254279998426,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)": -0.022557254279998426,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": -0.022557254279998426,
        "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.BlockFieldMatrix)": -0.022557254279998426,
        "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)": -0.015849507397565313,
        "org.apache.commons.math3.linear$BlockFieldMatrix#toBlocksLayout(org.apache.commons.math3.FieldElement[][])": -0.10085022359829507,
        "org.apache.commons.math3.linear$BlockFieldMatrix#transpose()": -0.02776095607983342,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.022557254279998426,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.015849507397565313,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.015849507397565313,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.022557254279998426,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.015849507397565313,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.015849507397565313,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.015849507397565313,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.015849507397565313,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])": -0.2709986833452724,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)": 1.6198197349268288,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)": -0.2858229672293892,
        "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)": -0.03218610685553004,
        "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)": -0.022557254279998426,
        "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)": -0.015849507397565313,
        "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)": -0.29117334393921723,
        "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)": -0.2972201907238152,
        "org.apache.commons.math3.linear$BlockRealMatrix#copy()": -0.11280761157771937,
        "org.apache.commons.math3.linear$BlockRealMatrix#copyBlockPart(double[],int,int,int,int,int,double[],int,int,int)": -0.03218610685553004,
        "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)": 1.6048825198809937,
        "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)": -0.015849507397565313,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumn(int)": -0.0766299658927033,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()": -0.290412465014829,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)": -0.02776095607983342,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)": -0.02776095607983342,
        "org.apache.commons.math3.linear$BlockRealMatrix#getData()": -0.21236834833571921,
        "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)": -0.1854858509578322,
        "org.apache.commons.math3.linear$BlockRealMatrix#getFrobeniusNorm()": -0.015849507397565313,
        "org.apache.commons.math3.linear$BlockRealMatrix#getNorm()": -0.08044512017180572,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRow(int)": -0.06848530962035203,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()": -0.29117334393921723,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)": -0.03218610685553004,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)": -0.02776095607983342,
        "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)": -0.03218610685553004,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)": -0.13674276255386117,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": -0.13674276255386117,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#operate(double[])": -0.195363084614198,
        "org.apache.commons.math3.linear$BlockRealMatrix#preMultiply(double[])": -0.022557254279998426,
        "org.apache.commons.math3.linear$BlockRealMatrix#scalarAdd(double)": -0.03218610685553004,
        "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)": -0.09110350881282944,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])": -0.13042289894700818,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)": -0.022557254279998426,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)": -0.022557254279998426,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)": -0.12252811260798044,
        "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)": -0.1511162525766311,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRow(int,double[])": -0.1252005813962784,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)": -0.022557254279998426,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)": -0.022557254279998426,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)": -0.12252811260798044,
        "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)": -0.022557254279998426,
        "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)": -0.07265218309094094,
        "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": -0.0785564598090808,
        "org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])": -0.2709986833452724,
        "org.apache.commons.math3.linear$BlockRealMatrix#transpose()": -0.15341754221114956,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.04900979837389419,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.015849507397565313,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.02776095607983342,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.03218610685553004,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.015849507397565313,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.015849507397565313,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.015849507397565313,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.015849507397565313,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)": -0.10695749268006954,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getExpectedColumnDimension()": -0.015849507397565313,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getExpectedRowDimension()": -0.015849507397565313,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getWrongColumnDimension()": -0.015849507397565313,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getWrongRowDimension()": -0.015849507397565313,
        "org.apache.commons.math3.linear$MatrixUtils#<clinit>()": 1.2436409421626085,
        "org.apache.commons.math3.linear$MatrixUtils#MatrixUtils()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)": -0.06409481893035893,
        "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)": -0.015849507397565313,
        "org.apache.commons.math3.linear$MatrixUtils#checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": -0.12386970370383127,
        "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)": -0.5545305531097844,
        "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)": -0.5356791672121345,
        "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": -0.369898325827846,
        "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)": -0.5539801216285553,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)": -0.11843574426124726,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])": -0.0361137206226636,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": -0.20398033884260436,
        "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)": -0.022557254279998426,
        "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])": -0.015849507397565313,
        "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])": -0.09927817503271309,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)": -0.022557254279998426,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.Field,int,int)": -0.022557254279998426,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])": -0.015849507397565313,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldVector(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])": -0.3039407107005838,
        "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)": -0.13549601876670908,
        "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])": -0.39997629527852324,
        "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)": 1.4608611615668834,
        "org.apache.commons.math3.linear$MatrixUtils#createRealVector(double[])": -0.015849507397565313,
        "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])": -0.015849507397565313,
        "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])": -0.015849507397565313,
        "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)": -0.022557254279998426,
        "org.apache.commons.math3.linear$MatrixUtils#deserializeRealVector(java.lang.Object,java.lang.String,java.io.ObjectInputStream)": -0.022557254279998426,
        "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)": -0.015849507397565313,
        "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)": -0.3061623408658493,
        "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)": -0.3076384225372821,
        "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)": -0.022557254279998426,
        "org.apache.commons.math3.linear$MatrixUtils#serializeRealVector(org.apache.commons.math3.linear.RealVector,java.io.ObjectOutputStream)": -0.022557254279998426,
        "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)": -0.015849507397565313,
        "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)": -0.015849507397565313,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#MatrixUtils$BigFractionMatrixConverter()": -0.06409481893035895,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()": -0.06409481893035893,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#start(int,int,int,int,int,int)": -0.06409481893035895,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#visit(int,int,org.apache.commons.math3.fraction.BigFraction)": -0.06409481893035895,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#MatrixUtils$FractionMatrixConverter()": -0.0158495073975653,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()": -0.015849507397565313,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#start(int,int,int,int,int,int)": -0.0158495073975653,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#visit(int,int,org.apache.commons.math3.fraction.Fraction)": -0.0158495073975653,
        "org.apache.commons.math3.linear$NonSquareMatrixException#NonSquareMatrixException(int,int)": -0.06180180505070818,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#NonSymmetricMatrixException(int,int,double)": -0.022557254279998426,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#getColumn()": 0.0,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#getRow()": 0.0,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#getThreshold()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)": -0.09444024248511124,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix)": -0.04900979837389419,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)": -0.022557254279998426,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)": -0.09278375163059427,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()": -0.022557254279998426,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)": -0.04299431495952886,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()": -0.09278375163059427,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)": -0.08939827434185361,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()": -0.09278375163059427,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)": -0.03218610685553004,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": -0.03218610685553004,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)": -0.09278375163059431,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)": -0.039687918476830834,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": -0.039687918476830834,
        "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()": -0.15055688871046524,
        "org.apache.commons.math3.linear$RealLinearOperator#isTransposable()": 0.0,
        "org.apache.commons.math3.linear$RealLinearOperator#operateTranspose(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat()": -0.015849507397565313,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": 1.2436409421626085,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)": -0.1363611895873903,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)": 1.2094252480395147,
        "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)": -0.07059431520239177,
        "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)": -0.07059431520239177,
        "org.apache.commons.math3.linear$RealMatrixFormat#getAvailableLocales()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getColumnSeparator()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()": -0.13212884409166425,
        "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()": 1.2436409421626085,
        "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)": 1.2094252480395147,
        "org.apache.commons.math3.linear$RealMatrixFormat#getPrefix()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowPrefix()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowSeparator()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowSuffix()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getSuffix()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)": -0.05698318834086508,
        "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)": -0.06632058195265775,
        "org.apache.commons.math3.linear$RealVector#RealVector()": -0.6486572952659699,
        "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)": -0.03218610685553004,
        "org.apache.commons.math3.linear$RealVector#addToEntry(int,double)": -0.039687918476830834,
        "org.apache.commons.math3.linear$RealVector#checkIndex(int)": -0.25486130672541407,
        "org.apache.commons.math3.linear$RealVector#checkIndices(int,int)": -0.08229838931605815,
        "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)": -0.14878993598000595,
        "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)": -0.13549601876670908,
        "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)": -0.04900979837389419,
        "org.apache.commons.math3.linear$RealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": -0.06848530962035203,
        "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)": -0.06848530962035203,
        "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)": -0.08939827434185361,
        "org.apache.commons.math3.linear$RealVector#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.linear$RealVector#getDistance(org.apache.commons.math3.linear.RealVector)": -0.03218610685553004,
        "org.apache.commons.math3.linear$RealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)": -0.03218610685553004,
        "org.apache.commons.math3.linear$RealVector#getL1Norm()": -0.022557254279998426,
        "org.apache.commons.math3.linear$RealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)": -0.03218610685553004,
        "org.apache.commons.math3.linear$RealVector#getLInfNorm()": -0.022557254279998426,
        "org.apache.commons.math3.linear$RealVector#getMaxIndex()": -0.0361137206226636,
        "org.apache.commons.math3.linear$RealVector#getMaxValue()": -0.0361137206226636,
        "org.apache.commons.math3.linear$RealVector#getMinIndex()": -0.0361137206226636,
        "org.apache.commons.math3.linear$RealVector#getMinValue()": -0.0361137206226636,
        "org.apache.commons.math3.linear$RealVector#getNorm()": -0.0785564598090808,
        "org.apache.commons.math3.linear$RealVector#hashCode()": 0.0,
        "org.apache.commons.math3.linear$RealVector#iterator()": -0.14878993598000595,
        "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)": -0.022557254279998426,
        "org.apache.commons.math3.linear$RealVector#mapAdd(double)": -0.02776095607983342,
        "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)": -0.03218610685553004,
        "org.apache.commons.math3.linear$RealVector#mapDivide(double)": -0.04299431495952886,
        "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)": -0.04299431495952886,
        "org.apache.commons.math3.linear$RealVector#mapMultiply(double)": -0.1667512217886538,
        "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)": -0.059434192305543,
        "org.apache.commons.math3.linear$RealVector#mapSubtract(double)": -0.0361137206226636,
        "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)": -0.0361137206226636,
        "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": -0.08411845759182073,
        "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)": -0.0361137206226636,
        "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)": -0.06180180505070818,
        "org.apache.commons.math3.linear$RealVector#set(double)": -0.022557254279998426,
        "org.apache.commons.math3.linear$RealVector#sparseIterator()": -0.022557254279998426,
        "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)": -0.03218610685553004,
        "org.apache.commons.math3.linear$RealVector#toArray()": -0.02776095607983342,
        "org.apache.commons.math3.linear$RealVector#unitVector()": -0.0361137206226636,
        "org.apache.commons.math3.linear$RealVector#unitize()": -0.0361137206226636,
        "org.apache.commons.math3.linear$RealVector#unmodifiableRealVector(org.apache.commons.math3.linear.RealVector)": -0.08939827434185355,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": -0.03218610685553004,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": -0.046088692680795684,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": -0.03218610685553004,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": -0.046088692680795684,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": -0.022557254279998426,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": -0.03218610685553004,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": -0.022557254279998426,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": -0.03218610685553004,
        "org.apache.commons.math3.linear$RealVector$1#hasNext()": -0.148789935980006,
        "org.apache.commons.math3.linear$RealVector$1#next()": -0.148789935980006,
        "org.apache.commons.math3.linear$RealVector$1#remove()": -0.027760956079833532,
        "org.apache.commons.math3.linear$RealVector$2#add(org.apache.commons.math3.linear.RealVector)": -0.02255725427999833,
        "org.apache.commons.math3.linear$RealVector$2#addToEntry(int,double)": -0.02255725427999833,
        "org.apache.commons.math3.linear$RealVector$2#append(double)": -0.02255725427999833,
        "org.apache.commons.math3.linear$RealVector$2#append(org.apache.commons.math3.linear.RealVector)": -0.02255725427999833,
        "org.apache.commons.math3.linear$RealVector$2#combine(double,double,org.apache.commons.math3.linear.RealVector)": -0.02255725427999833,
        "org.apache.commons.math3.linear$RealVector$2#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": -0.02255725427999833,
        "org.apache.commons.math3.linear$RealVector$2#copy()": -0.02255725427999833,
        "org.apache.commons.math3.linear$RealVector$2#cosine(org.apache.commons.math3.linear.RealVector)": -0.02255725427999833,
        "org.apache.commons.math3.linear$RealVector$2#dotProduct(org.apache.commons.math3.linear.RealVector)": -0.02255725427999833,
        "org.apache.commons.math3.linear$RealVector$2#ebeDivide(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#ebeMultiply(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getDimension()": -0.03968791847683084,
        "org.apache.commons.math3.linear$RealVector$2#getDistance(org.apache.commons.math3.linear.RealVector)": -0.02255725427999833,
        "org.apache.commons.math3.linear$RealVector$2#getEntry(int)": -0.04608869268079574,
        "org.apache.commons.math3.linear$RealVector$2#getL1Distance(org.apache.commons.math3.linear.RealVector)": -0.02255725427999833,
        "org.apache.commons.math3.linear$RealVector$2#getL1Norm()": -0.02255725427999833,
        "org.apache.commons.math3.linear$RealVector$2#getLInfDistance(org.apache.commons.math3.linear.RealVector)": -0.02255725427999833,
        "org.apache.commons.math3.linear$RealVector$2#getLInfNorm()": -0.02255725427999833,
        "org.apache.commons.math3.linear$RealVector$2#getNorm()": -0.02255725427999833,
        "org.apache.commons.math3.linear$RealVector$2#getSubVector(int,int)": -0.02255725427999833,
        "org.apache.commons.math3.linear$RealVector$2#isInfinite()": -0.02255725427999833,
        "org.apache.commons.math3.linear$RealVector$2#isNaN()": -0.02255725427999833,
        "org.apache.commons.math3.linear$RealVector$2#iterator()": -0.03218610685553003,
        "org.apache.commons.math3.linear$RealVector$2#map(org.apache.commons.math3.analysis.UnivariateFunction)": -0.02255725427999833,
        "org.apache.commons.math3.linear$RealVector$2#mapAdd(double)": -0.02255725427999833,
        "org.apache.commons.math3.linear$RealVector$2#mapAddToSelf(double)": -0.02255725427999833,
        "org.apache.commons.math3.linear$RealVector$2#mapDivide(double)": -0.02255725427999833,
        "org.apache.commons.math3.linear$RealVector$2#mapDivideToSelf(double)": -0.02255725427999833,
        "org.apache.commons.math3.linear$RealVector$2#mapMultiply(double)": -0.02255725427999833,
        "org.apache.commons.math3.linear$RealVector$2#mapMultiplyToSelf(double)": -0.02255725427999833,
        "org.apache.commons.math3.linear$RealVector$2#mapSubtract(double)": -0.02255725427999833,
        "org.apache.commons.math3.linear$RealVector$2#mapSubtractToSelf(double)": -0.02255725427999833,
        "org.apache.commons.math3.linear$RealVector$2#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": -0.02255725427999833,
        "org.apache.commons.math3.linear$RealVector$2#outerProduct(org.apache.commons.math3.linear.RealVector)": -0.02255725427999833,
        "org.apache.commons.math3.linear$RealVector$2#set(double)": -0.027760956079833532,
        "org.apache.commons.math3.linear$RealVector$2#setEntry(int,double)": -0.02255725427999833,
        "org.apache.commons.math3.linear$RealVector$2#setSubVector(int,org.apache.commons.math3.linear.RealVector)": -0.02255725427999833,
        "org.apache.commons.math3.linear$RealVector$2#sparseIterator()": -0.02255725427999833,
        "org.apache.commons.math3.linear$RealVector$2#subtract(org.apache.commons.math3.linear.RealVector)": -0.03218610685553003,
        "org.apache.commons.math3.linear$RealVector$2#toArray()": -0.02255725427999833,
        "org.apache.commons.math3.linear$RealVector$2#unitVector()": -0.02255725427999833,
        "org.apache.commons.math3.linear$RealVector$2#unitize()": -0.02255725427999833,
        "org.apache.commons.math3.linear$RealVector$2$1#hasNext()": -0.03218610685553003,
        "org.apache.commons.math3.linear$RealVector$2$1#next()": -0.03218610685553003,
        "org.apache.commons.math3.linear$RealVector$2$1#remove()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$2#hasNext()": -0.02255725427999833,
        "org.apache.commons.math3.linear$RealVector$2$2#next()": -0.02255725427999833,
        "org.apache.commons.math3.linear$RealVector$2$2#remove()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#RealVector$2$UnmodifiableEntry(org.apache.commons.math3.linear.RealVector$2)": -0.03968791847683084,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#getValue()": -0.03968791847683084,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#setValue(double)": -0.03218610685553003,
        "org.apache.commons.math3.linear$RealVector$Entry#RealVector$Entry(org.apache.commons.math3.linear.RealVector)": -0.15226996202175863,
        "org.apache.commons.math3.linear$RealVector$Entry#getIndex()": -0.1522699620217587,
        "org.apache.commons.math3.linear$RealVector$Entry#getValue()": -0.14878993598000595,
        "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)": -0.1522699620217587,
        "org.apache.commons.math3.linear$RealVector$Entry#setValue(double)": -0.087666696783095,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#RealVector$SparseEntryIterator(org.apache.commons.math3.linear.RealVector)": -0.022557254279998426,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)": -0.022557254279998426,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()": -0.022557254279998426,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()": -0.022557254279998426,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#remove()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat()": -0.046088692680795684,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)": -0.5556307054143397,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)": -0.5556307054143397,
        "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector)": -0.0785564598090808,
        "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector,java.lang.StringBuffer,java.text.FieldPosition)": -0.0785564598090808,
        "org.apache.commons.math3.linear$RealVectorFormat#getAvailableLocales()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#getFormat()": -0.02255725427999833,
        "org.apache.commons.math3.linear$RealVectorFormat#getInstance()": -0.5501204168050934,
        "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)": -0.5556307054143397,
        "org.apache.commons.math3.linear$RealVectorFormat#getPrefix()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#getSeparator()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#getSuffix()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String)": -0.08939827434185361,
        "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String,java.text.ParsePosition)": -0.1024034252913831,
        "org.apache.commons.math3.optim$BaseMultivariateOptimizer#BaseMultivariateOptimizer(org.apache.commons.math3.optim.ConvergenceChecker)": 1.5458418345881548,
        "org.apache.commons.math3.optim$BaseMultivariateOptimizer#checkParameters()": -0.27020544034791394,
        "org.apache.commons.math3.optim$BaseMultivariateOptimizer#getLowerBound()": -0.1069574926800696,
        "org.apache.commons.math3.optim$BaseMultivariateOptimizer#getStartPoint()": -0.24487966689720908,
        "org.apache.commons.math3.optim$BaseMultivariateOptimizer#getUpperBound()": -0.1069574926800696,
        "org.apache.commons.math3.optim$BaseMultivariateOptimizer#optimize(org.apache.commons.math3.optim.OptimizationData[])": -0.27020544034791394,
        "org.apache.commons.math3.optim$BaseMultivariateOptimizer#parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])": -0.27020544034791394,
        "org.apache.commons.math3.optim$BaseOptimizer#BaseOptimizer(org.apache.commons.math3.optim.ConvergenceChecker)": 1.5341770327706108,
        "org.apache.commons.math3.optim$BaseOptimizer#getConvergenceChecker()": -0.23979536791239098,
        "org.apache.commons.math3.optim$BaseOptimizer#getEvaluations()": -0.1211754850513449,
        "org.apache.commons.math3.optim$BaseOptimizer#getIterations()": 0.0,
        "org.apache.commons.math3.optim$BaseOptimizer#getMaxEvaluations()": -0.08229838931605815,
        "org.apache.commons.math3.optim$BaseOptimizer#getMaxIterations()": 0.0,
        "org.apache.commons.math3.optim$BaseOptimizer#incrementEvaluationCount()": -0.25321422826593776,
        "org.apache.commons.math3.optim$BaseOptimizer#incrementIterationCount()": -0.08229838931605815,
        "org.apache.commons.math3.optim$BaseOptimizer#optimize(org.apache.commons.math3.optim.OptimizationData[])": -0.2780778953577968,
        "org.apache.commons.math3.optim$BaseOptimizer#parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])": -0.2780778953577968,
        "org.apache.commons.math3.optim$BaseOptimizer$MaxEvalCallback#BaseOptimizer$MaxEvalCallback()": 0.18839059514370582,
        "org.apache.commons.math3.optim$BaseOptimizer$MaxEvalCallback#trigger(int)": -0.046088692680795684,
        "org.apache.commons.math3.optim$BaseOptimizer$MaxIterCallback#BaseOptimizer$MaxIterCallback()": 0.18839059514370582,
        "org.apache.commons.math3.optim$BaseOptimizer$MaxIterCallback#trigger(int)": 0.0,
        "org.apache.commons.math3.optim$InitialGuess#InitialGuess(double[])": -0.24990057470848223,
        "org.apache.commons.math3.optim$InitialGuess#getInitialGuess()": -0.24906801902560338,
        "org.apache.commons.math3.optim$MaxEval#MaxEval(int)": 1.5583105147519154,
        "org.apache.commons.math3.optim$MaxEval#getMaxEval()": -0.256502028951503,
        "org.apache.commons.math3.optim$MaxEval#unlimited()": 0.0,
        "org.apache.commons.math3.optim$MaxIter#MaxIter(int)": -0.08590729832576476,
        "org.apache.commons.math3.optim$MaxIter#getMaxIter()": -0.08590729832576471,
        "org.apache.commons.math3.optim$MaxIter#unlimited()": 0.0,
        "org.apache.commons.math3.optim$PointVectorValuePair#PointVectorValuePair(double[],double[])": -0.172093357732798,
        "org.apache.commons.math3.optim$PointVectorValuePair#PointVectorValuePair(double[],double[],boolean)": -0.172093357732798,
        "org.apache.commons.math3.optim$PointVectorValuePair#getPoint()": -0.087666696783095,
        "org.apache.commons.math3.optim$PointVectorValuePair#getPointRef()": -0.12386970370383127,
        "org.apache.commons.math3.optim$PointVectorValuePair#getValue()": -0.039687918476830834,
        "org.apache.commons.math3.optim$PointVectorValuePair#getValueRef()": -0.08411845759182073,
        "org.apache.commons.math3.optim$PointVectorValuePair#writeReplace()": -0.015849507397565313,
        "org.apache.commons.math3.optim$PointVectorValuePair$DataTransferObject#PointVectorValuePair$DataTransferObject(double[],double[])": -0.015849507397565313,
        "org.apache.commons.math3.optim$PointVectorValuePair$DataTransferObject#readResolve()": -0.015849507397565313,
        "org.apache.commons.math3.optim$SimpleBounds#SimpleBounds(double[],double[])": -0.10991229671800741,
        "org.apache.commons.math3.optim$SimpleBounds#getLower()": -0.10844260720293053,
        "org.apache.commons.math3.optim$SimpleBounds#getUpper()": -0.10844260720293053,
        "org.apache.commons.math3.optim$SimpleBounds#unbounded(int)": -0.09278375163059431,
        "org.apache.commons.math3.optim.nonlinear.vector$JacobianMultivariateVectorOptimizer#JacobianMultivariateVectorOptimizer(org.apache.commons.math3.optim.ConvergenceChecker)": 1.6447550311302814,
        "org.apache.commons.math3.optim.nonlinear.vector$JacobianMultivariateVectorOptimizer#computeJacobian(double[])": -0.16782894494694875,
        "org.apache.commons.math3.optim.nonlinear.vector$JacobianMultivariateVectorOptimizer#optimize(org.apache.commons.math3.optim.OptimizationData[])": -0.17103407198945791,
        "org.apache.commons.math3.optim.nonlinear.vector$JacobianMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])": -0.17103407198945791,
        "org.apache.commons.math3.optim.nonlinear.vector$ModelFunction#ModelFunction(org.apache.commons.math3.analysis.MultivariateVectorFunction)": 0.30317949038363723,
        "org.apache.commons.math3.optim.nonlinear.vector$ModelFunction#getModelFunction()": -0.17103407198945786,
        "org.apache.commons.math3.optim.nonlinear.vector$ModelFunctionJacobian#ModelFunctionJacobian(org.apache.commons.math3.analysis.MultivariateMatrixFunction)": 0.3042432706627084,
        "org.apache.commons.math3.optim.nonlinear.vector$ModelFunctionJacobian#getModelFunctionJacobian()": -0.1699702917103867,
        "org.apache.commons.math3.optim.nonlinear.vector$MultivariateVectorOptimizer#MultivariateVectorOptimizer(org.apache.commons.math3.optim.ConvergenceChecker)": 1.6447550311302814,
        "org.apache.commons.math3.optim.nonlinear.vector$MultivariateVectorOptimizer#checkParameters()": -0.17103407198945791,
        "org.apache.commons.math3.optim.nonlinear.vector$MultivariateVectorOptimizer#computeObjectiveValue(double[])": -0.17103407198945791,
        "org.apache.commons.math3.optim.nonlinear.vector$MultivariateVectorOptimizer#getTarget()": -0.17209335773279788,
        "org.apache.commons.math3.optim.nonlinear.vector$MultivariateVectorOptimizer#getTargetSize()": -0.11981148140652298,
        "org.apache.commons.math3.optim.nonlinear.vector$MultivariateVectorOptimizer#getWeight()": -0.17103407198945791,
        "org.apache.commons.math3.optim.nonlinear.vector$MultivariateVectorOptimizer#optimize(org.apache.commons.math3.optim.OptimizationData[])": -0.17103407198945791,
        "org.apache.commons.math3.optim.nonlinear.vector$MultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])": -0.17103407198945791,
        "org.apache.commons.math3.optim.nonlinear.vector$Target#Target(double[])": 1.6489659280105422,
        "org.apache.commons.math3.optim.nonlinear.vector$Target#getTarget()": -0.17103407198945786,
        "org.apache.commons.math3.optim.nonlinear.vector$Weight#Weight(double[])": 1.6489659280105422,
        "org.apache.commons.math3.optim.nonlinear.vector$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector$Weight#getWeight()": -0.17103407198945791,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#AbstractLeastSquaresOptimizer(org.apache.commons.math3.optim.ConvergenceChecker)": 1.6447550311302814,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#computeCost(double[])": -0.16239139498265204,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)": -0.046088692680795684,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#computeResiduals(double[])": -0.1699702917103868,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#computeSigma(double[],double)": -0.03218610685553004,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])": -0.16782894494694875,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#getChiSquare()": -0.12386970370383121,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#getRMS()": -0.11981148140652316,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#getWeightSquareRoot()": -0.13549601876670908,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#optimize(org.apache.commons.math3.optim.OptimizationData[])": -0.17103407198945791,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])": -0.17103407198945791,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#setCost(double)": -0.16239139498265187,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#squareRoot(org.apache.commons.math3.linear.RealMatrix)": -0.17103407198945786,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$GaussNewtonOptimizer#GaussNewtonOptimizer(boolean,org.apache.commons.math3.optim.ConvergenceChecker)": -0.09110350881282944,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$GaussNewtonOptimizer#GaussNewtonOptimizer(org.apache.commons.math3.optim.ConvergenceChecker)": -0.0785564598090808,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$GaussNewtonOptimizer#doOptimize()": -0.08939827434185361,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer()": 1.708632877760345,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double)": -0.07059431520239177,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double,double,double)": 1.6832572374461388,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,org.apache.commons.math3.optim.ConvergenceChecker,double,double,double,double)": -0.022557254279998426,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(org.apache.commons.math3.optim.ConvergenceChecker)": -0.022557254279998426,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$LevenbergMarquardtOptimizer#determineLMDirection(double[],double[],double[],double[])": -0.08411845759182073,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$LevenbergMarquardtOptimizer#determineLMParameter(double[],double,double[],double[],double[],double[])": -0.13549601876670908,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$LevenbergMarquardtOptimizer#doOptimize()": -0.13549601876670908,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$LevenbergMarquardtOptimizer#qTy(double[])": -0.13549601876670908,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)": -0.13549601876670908,
        "org.apache.commons.math3.util$CompositeFormat#CompositeFormat()": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#formatDouble(double,java.text.NumberFormat,java.lang.StringBuffer,java.text.FieldPosition)": -0.17209335773279788,
        "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()": 1.232858690070918,
        "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)": -0.29927408148725065,
        "org.apache.commons.math3.util$CompositeFormat#parseAndIgnoreWhitespace(java.lang.String,java.text.ParsePosition)": -0.19046676698491388,
        "org.apache.commons.math3.util$CompositeFormat#parseFixedstring(java.lang.String,java.lang.String,java.text.ParsePosition)": -0.1884848791969742,
        "org.apache.commons.math3.util$CompositeFormat#parseNextCharacter(java.lang.String,java.text.ParsePosition)": -0.19046676698491383,
        "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,double,java.text.ParsePosition)": -0.08229838931605804,
        "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,java.text.NumberFormat,java.text.ParsePosition)": -0.1854858509578322,
        "org.apache.commons.math3.util$FastMath#<clinit>()": -1.1871772108425245,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0.0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": -0.0158495073975653,
        "org.apache.commons.math3.util$FastMath#abs(double)": -1.1307113789130012,
        "org.apache.commons.math3.util$FastMath#abs(float)": -0.02255725427999833,
        "org.apache.commons.math3.util$FastMath#abs(int)": -0.36319314484265286,
        "org.apache.commons.math3.util$FastMath#abs(long)": -0.6974145927173865,
        "org.apache.commons.math3.util$FastMath#acos(double)": -0.0785564598090808,
        "org.apache.commons.math3.util$FastMath#acosh(double)": -0.022557254279998426,
        "org.apache.commons.math3.util$FastMath#asin(double)": -0.08044512017180572,
        "org.apache.commons.math3.util$FastMath#asinh(double)": -0.022557254279998426,
        "org.apache.commons.math3.util$FastMath#atan(double)": -0.09607412184478668,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": -0.1874887448463901,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": -0.16458126719219765,
        "org.apache.commons.math3.util$FastMath#atanh(double)": -0.022557254279998426,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": -0.11136712223965478,
        "org.apache.commons.math3.util$FastMath#ceil(double)": -0.33708965300141475,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": -0.05943419230554303,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": -0.02255725427999833,
        "org.apache.commons.math3.util$FastMath#cos(double)": -0.33286956912277355,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": -0.38704577430936443,
        "org.apache.commons.math3.util$FastMath#cosh(double)": -0.09278375163059431,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": -0.15569479955502794,
        "org.apache.commons.math3.util$FastMath#exp(double)": -0.6121587431110246,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": -0.7267261094755761,
        "org.apache.commons.math3.util$FastMath#expm1(double)": -0.06409481893035893,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": -0.09278375163059431,
        "org.apache.commons.math3.util$FastMath#floor(double)": -0.63155823833445,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": -0.15455911532947098,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": -0.02255725427999833,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": -0.14878993598000595,
        "org.apache.commons.math3.util$FastMath#log(double)": -0.6568823966896998,
        "org.apache.commons.math3.util$FastMath#log(double,double)": -0.015849507397565313,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": -0.7691493295635075,
        "org.apache.commons.math3.util$FastMath#log10(double)": -0.13042289894700818,
        "org.apache.commons.math3.util$FastMath#log1p(double)": -0.4570107974521248,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0.0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": -0.6873702682007052,
        "org.apache.commons.math3.util$FastMath#max(float,float)": -0.02255725427999833,
        "org.apache.commons.math3.util$FastMath#max(int,int)": -0.5045430729159197,
        "org.apache.commons.math3.util$FastMath#max(long,long)": -0.0158495073975653,
        "org.apache.commons.math3.util$FastMath#min(double,double)": -0.45158810561114415,
        "org.apache.commons.math3.util$FastMath#min(float,float)": -0.02255725427999833,
        "org.apache.commons.math3.util$FastMath#min(int,int)": -0.1536934435897125,
        "org.apache.commons.math3.util$FastMath#min(long,long)": -0.1008502235982951,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": -0.06409481893035895,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": -0.027760956079833532,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": -0.02776095607983342,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": -0.015849507397565313,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": -0.412068537580766,
        "org.apache.commons.math3.util$FastMath#polySine(double)": -0.412068537580766,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": -0.5434761349807185,
        "org.apache.commons.math3.util$FastMath#pow(double,int)": -0.26057669748327306,
        "org.apache.commons.math3.util$FastMath#random()": -0.07265218309094079,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": -0.0361137206226636,
        "org.apache.commons.math3.util$FastMath#rint(double)": -0.14405788315948082,
        "org.apache.commons.math3.util$FastMath#round(double)": -0.0785564598090808,
        "org.apache.commons.math3.util$FastMath#round(float)": -0.015849507397565313,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": -0.13297713062431704,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": -0.02255725427999833,
        "org.apache.commons.math3.util$FastMath#signum(double)": -0.05698318834086513,
        "org.apache.commons.math3.util$FastMath#signum(float)": -0.02255725427999833,
        "org.apache.commons.math3.util$FastMath#sin(double)": -0.39676368347738145,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": -0.40061726013093757,
        "org.apache.commons.math3.util$FastMath#sinh(double)": -0.09278375163059431,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": -1.1021971688890106,
        "org.apache.commons.math3.util$FastMath#tan(double)": -0.08590729832576476,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": -0.08590729832576476,
        "org.apache.commons.math3.util$FastMath#tanh(double)": -0.05698318834086508,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": -0.03218610685553004,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": -0.03218610685553004,
        "org.apache.commons.math3.util$FastMath#ulp(double)": -0.3314564321917283,
        "org.apache.commons.math3.util$FastMath#ulp(float)": -0.015849507397565313,
        "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)": -0.35574179421393093,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getK()": -0.35574179421393093,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()": -0.35574179421393093,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()": -0.35574179421393093,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": -0.7188227859273828,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": -0.7168417650442263,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": -0.7618985705007764,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0.0,
        "org.apache.commons.math3.util$Incrementor#Incrementor()": -0.5295177137989265,
        "org.apache.commons.math3.util$Incrementor#Incrementor(int)": -0.5605697725075112,
        "org.apache.commons.math3.util$Incrementor#Incrementor(int,org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback)": 1.1510632008412793,
        "org.apache.commons.math3.util$Incrementor#canIncrement()": -0.02255725427999833,
        "org.apache.commons.math3.util$Incrementor#getCount()": -0.290412465014829,
        "org.apache.commons.math3.util$Incrementor#getMaximalCount()": -0.11423426202545417,
        "org.apache.commons.math3.util$Incrementor#incrementCount()": -0.6331204148941102,
        "org.apache.commons.math3.util$Incrementor#incrementCount(int)": -0.015849507397565313,
        "org.apache.commons.math3.util$Incrementor#resetCount()": -0.6471104244298056,
        "org.apache.commons.math3.util$Incrementor#setMaximalCount(int)": -0.6279070059628076,
        "org.apache.commons.math3.util$Incrementor$1#trigger(int)": -0.07059431520239157,
        "org.apache.commons.math3.util$MathUtils#MathUtils()": 0.0,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double)": -0.06848530962035203,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double[])": -0.015849507397565313,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)": 1.0645896323754511,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.15569479955502794,
        "org.apache.commons.math3.util$MathUtils#copySign(byte,byte)": -0.03218610685553004,
        "org.apache.commons.math3.util$MathUtils#copySign(int,int)": -0.03218610685553004,
        "org.apache.commons.math3.util$MathUtils#copySign(long,long)": -0.022557254279998426,
        "org.apache.commons.math3.util$MathUtils#copySign(short,short)": -0.022557254279998426,
        "org.apache.commons.math3.util$MathUtils#hash(double)": -0.11843574426124714,
        "org.apache.commons.math3.util$MathUtils#hash(double[])": -0.10085022359829507,
        "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)": -0.11280761157771937,
        "org.apache.commons.math3.util$MathUtils#reduce(double,double,double)": -0.0361137206226636,
        "org.apache.commons.math3.util$Pair#Pair(java.lang.Object,java.lang.Object)": -0.46657676837895656,
        "org.apache.commons.math3.util$Pair#Pair(org.apache.commons.math3.util.Pair)": 0.0,
        "org.apache.commons.math3.util$Pair#equals(java.lang.Object)": -0.015849507397565313,
        "org.apache.commons.math3.util$Pair#getFirst()": -0.17209335773279788,
        "org.apache.commons.math3.util$Pair#getKey()": -0.3732272983414857,
        "org.apache.commons.math3.util$Pair#getSecond()": -0.17209335773279788,
        "org.apache.commons.math3.util$Pair#getValue()": -0.30763842253728213,
        "org.apache.commons.math3.util$Pair#hashCode()": -0.015849507397565313,
        "org.apache.commons.math3.util$Precision#<clinit>()": -0.4082949146179248,
        "org.apache.commons.math3.util$Precision#Precision()": 0.0,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,double)": -0.1752449688697185,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,int)": -0.12252811260798044,
        "org.apache.commons.math3.util$Precision#equals(double,double)": -0.25321422826593776,
        "org.apache.commons.math3.util$Precision#equals(double,double,double)": -0.46240315133775123,
        "org.apache.commons.math3.util$Precision#equals(double,double,int)": -0.6671062104968927,
        "org.apache.commons.math3.util$Precision#equals(float,float)": -0.015849507397565313,
        "org.apache.commons.math3.util$Precision#equals(float,float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(float,float,int)": -0.15906764430263687,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)": -0.21236834833571921,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)": -0.12252811260798044,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)": -0.015849507397565313,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)": -0.15794895508803863,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsWithRelativeTolerance(double,double,double)": -0.015849507397565313,
        "org.apache.commons.math3.util$Precision#representableDelta(double,double)": -0.0158495073975653,
        "org.apache.commons.math3.util$Precision#round(double,int)": -0.015849507397565313,
        "org.apache.commons.math3.util$Precision#round(double,int,int)": -0.0158495073975653,
        "org.apache.commons.math3.util$Precision#round(float,int)": -0.015849507397565313,
        "org.apache.commons.math3.util$Precision#round(float,int,int)": -0.015849507397565313,
        "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)": -0.015849507397565313
    },
    "Math-15": {
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.Dfp)": 0.29787089040121517,
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.DfpField)": -0.024306019942111262,
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.DfpField,byte)": -0.024306019942111262,
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.DfpField,byte,byte)": -0.10040908590147843,
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.DfpField,double)": -0.09672740481664897,
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.DfpField,int)": 1.6436573280281204,
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.DfpField,java.lang.String)": 1.6436573280281204,
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.DfpField,long)": 1.6436573280281204,
        "org.apache.commons.math3.dfp$Dfp#abs()": -0.024306019942111262,
        "org.apache.commons.math3.dfp$Dfp#add(org.apache.commons.math3.dfp.Dfp)": 1.6436573280281204,
        "org.apache.commons.math3.dfp$Dfp#align(int)": 1.6436573280281204,
        "org.apache.commons.math3.dfp$Dfp#ceil()": -0.017070205875800933,
        "org.apache.commons.math3.dfp$Dfp#classify()": -0.07853388100981462,
        "org.apache.commons.math3.dfp$Dfp#compare(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)": 0.29787089040121517,
        "org.apache.commons.math3.dfp$Dfp#complement(int)": 0.29787089040121517,
        "org.apache.commons.math3.dfp$Dfp#copysign(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)": -0.034704109609550005,
        "org.apache.commons.math3.dfp$Dfp#dfp2sci()": -0.01707020587580077,
        "org.apache.commons.math3.dfp$Dfp#dfp2string()": 0.29787089040121517,
        "org.apache.commons.math3.dfp$Dfp#divide(int)": 1.6436573280281204,
        "org.apache.commons.math3.dfp$Dfp#divide(org.apache.commons.math3.dfp.Dfp)": 1.6436573280281204,
        "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)": 1.6436573280281204,
        "org.apache.commons.math3.dfp$Dfp#equals(java.lang.Object)": 1.6436573280281204,
        "org.apache.commons.math3.dfp$Dfp#floor()": -0.0497394356001188,
        "org.apache.commons.math3.dfp$Dfp#getField()": 0.29787089040121517,
        "org.apache.commons.math3.dfp$Dfp#getOne()": -0.11087670312402771,
        "org.apache.commons.math3.dfp$Dfp#getRadixDigits()": 1.6436573280281204,
        "org.apache.commons.math3.dfp$Dfp#getTwo()": -0.08901019057424792,
        "org.apache.commons.math3.dfp$Dfp#getZero()": 1.6436573280281204,
        "org.apache.commons.math3.dfp$Dfp#greaterThan(org.apache.commons.math3.dfp.Dfp)": 1.6436573280281204,
        "org.apache.commons.math3.dfp$Dfp#hashCode()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#intValue()": -0.06419531787923924,
        "org.apache.commons.math3.dfp$Dfp#isInfinite()": -0.09293223182635701,
        "org.apache.commons.math3.dfp$Dfp#isNaN()": 0.29787089040121517,
        "org.apache.commons.math3.dfp$Dfp#isZero()": -0.029923833994428255,
        "org.apache.commons.math3.dfp$Dfp#lessThan(org.apache.commons.math3.dfp.Dfp)": 1.6436573280281204,
        "org.apache.commons.math3.dfp$Dfp#log10()": -0.08901019057424775,
        "org.apache.commons.math3.dfp$Dfp#log10K()": -0.04973943560011884,
        "org.apache.commons.math3.dfp$Dfp#multiply(int)": -0.09484478270481801,
        "org.apache.commons.math3.dfp$Dfp#multiply(org.apache.commons.math3.dfp.Dfp)": 1.6436573280281204,
        "org.apache.commons.math3.dfp$Dfp#multiplyFast(int)": -0.09484478270481801,
        "org.apache.commons.math3.dfp$Dfp#negate()": 1.6436573280281204,
        "org.apache.commons.math3.dfp$Dfp#negativeOrNull()": -0.029923833994428255,
        "org.apache.commons.math3.dfp$Dfp#newInstance()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#newInstance(byte)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#newInstance(byte,byte)": -0.029923833994428255,
        "org.apache.commons.math3.dfp$Dfp#newInstance(double)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#newInstance(int)": -0.06676216478752933,
        "org.apache.commons.math3.dfp$Dfp#newInstance(java.lang.String)": -0.09672740481664897,
        "org.apache.commons.math3.dfp$Dfp#newInstance(long)": -0.08494505044236743,
        "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)": 1.6436573280281204,
        "org.apache.commons.math3.dfp$Dfp#nextAfter(org.apache.commons.math3.dfp.Dfp)": -0.017070205875800933,
        "org.apache.commons.math3.dfp$Dfp#positiveOrNull()": -0.029923833994428255,
        "org.apache.commons.math3.dfp$Dfp#power10(int)": -0.024306019942111262,
        "org.apache.commons.math3.dfp$Dfp#power10K(int)": -0.07630024697402261,
        "org.apache.commons.math3.dfp$Dfp#reciprocal()": -0.017070205875800933,
        "org.apache.commons.math3.dfp$Dfp#remainder(org.apache.commons.math3.dfp.Dfp)": -0.05290171120124723,
        "org.apache.commons.math3.dfp$Dfp#rint()": -0.09672740481664897,
        "org.apache.commons.math3.dfp$Dfp#round(int)": 1.6436573280281204,
        "org.apache.commons.math3.dfp$Dfp#shiftLeft()": 0.29787089040121517,
        "org.apache.commons.math3.dfp$Dfp#shiftRight()": 0.29787089040121517,
        "org.apache.commons.math3.dfp$Dfp#sqrt()": 1.6436573280281204,
        "org.apache.commons.math3.dfp$Dfp#strictlyNegative()": -0.017070205875800933,
        "org.apache.commons.math3.dfp$Dfp#strictlyPositive()": -0.017070205875800933,
        "org.apache.commons.math3.dfp$Dfp#subtract(org.apache.commons.math3.dfp.Dfp)": 1.6436573280281204,
        "org.apache.commons.math3.dfp$Dfp#toDouble()": -0.08699665683662197,
        "org.apache.commons.math3.dfp$Dfp#toSplitDouble()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#toString()": 1.6436573280281204,
        "org.apache.commons.math3.dfp$Dfp#trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)": 0.29787089040121517,
        "org.apache.commons.math3.dfp$Dfp#trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode)": -0.10040908590147843,
        "org.apache.commons.math3.dfp$Dfp#unequal(org.apache.commons.math3.dfp.Dfp)": 1.6436573280281204,
        "org.apache.commons.math3.dfp$Dfp$1#<clinit>()": 0.29787089040121517,
        "org.apache.commons.math3.dfp$DfpField#DfpField(int)": 1.6436573280281204,
        "org.apache.commons.math3.dfp$DfpField#DfpField(int,boolean)": 1.6436573280281204,
        "org.apache.commons.math3.dfp$DfpField#clearIEEEFlags()": -0.10221093231720868,
        "org.apache.commons.math3.dfp$DfpField#computeExp(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)": 1.6436573280281204,
        "org.apache.commons.math3.dfp$DfpField#computeLn(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)": 1.6436573280281204,
        "org.apache.commons.math3.dfp$DfpField#computePi(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)": 1.6436573280281204,
        "org.apache.commons.math3.dfp$DfpField#computeStringConstants(int)": 1.6436573280281204,
        "org.apache.commons.math3.dfp$DfpField#getE()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getESplit()": -0.052901711201247315,
        "org.apache.commons.math3.dfp$DfpField#getIEEEFlags()": -0.08285274401122722,
        "org.apache.commons.math3.dfp$DfpField#getLn10()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getLn2()": -0.029923833994428106,
        "org.apache.commons.math3.dfp$DfpField#getLn2Split()": -0.04639075990550601,
        "org.apache.commons.math3.dfp$DfpField#getLn5()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getLn5Split()": -0.04639075990550601,
        "org.apache.commons.math3.dfp$DfpField#getOne()": -0.11420064195087565,
        "org.apache.commons.math3.dfp$DfpField#getPi()": -0.061538761562700994,
        "org.apache.commons.math3.dfp$DfpField#getPiSplit()": -0.05590793541362382,
        "org.apache.commons.math3.dfp$DfpField#getRadixDigits()": 0.29787089040121517,
        "org.apache.commons.math3.dfp$DfpField#getRoundingMode()": 0.29787089040121517,
        "org.apache.commons.math3.dfp$DfpField#getRuntimeClass()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getSqr2()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getSqr2Reciprocal()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getSqr2Split()": -0.03894915200850613,
        "org.apache.commons.math3.dfp$DfpField#getSqr3()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getSqr3Reciprocal()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getTwo()": -0.09672740481664888,
        "org.apache.commons.math3.dfp$DfpField#getZero()": 0.29787089040121517,
        "org.apache.commons.math3.dfp$DfpField#newDfp()": -0.024306019942111262,
        "org.apache.commons.math3.dfp$DfpField#newDfp(byte)": 0.0,
        "org.apache.commons.math3.dfp$DfpField#newDfp(byte,byte)": -0.10040908590147843,
        "org.apache.commons.math3.dfp$DfpField#newDfp(double)": -0.09672740481664897,
        "org.apache.commons.math3.dfp$DfpField#newDfp(int)": -0.017070205875800933,
        "org.apache.commons.math3.dfp$DfpField#newDfp(java.lang.String)": -0.09858168793991214,
        "org.apache.commons.math3.dfp$DfpField#newDfp(long)": 0.0,
        "org.apache.commons.math3.dfp$DfpField#newDfp(org.apache.commons.math3.dfp.Dfp)": 0.0,
        "org.apache.commons.math3.dfp$DfpField#setIEEEFlags(int)": 0.0,
        "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)": 0.29787089040121517,
        "org.apache.commons.math3.dfp$DfpField#setRoundingMode(org.apache.commons.math3.dfp.DfpField$RoundingMode)": -0.029923833994428106,
        "org.apache.commons.math3.dfp$DfpField#split(java.lang.String)": 1.6436573280281204,
        "org.apache.commons.math3.dfp$DfpField$RoundingMode#<clinit>()": 1.6436573280281204,
        "org.apache.commons.math3.dfp$DfpField$RoundingMode#DfpField$RoundingMode(java.lang.String,int)": 0.29787089040121517,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.6962706247572236,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": -0.052901711201247315,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.6106113797704777,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": -0.06419531787923916,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)": -0.12220812254874061,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": -0.17392497576834148,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": -0.1811122257423551,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.313555943287315,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": -0.029923833994428106,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": -0.029923833994428106,
        "org.apache.commons.math3.random$BitsStreamGenerator#BitsStreamGenerator()": -0.3705958691129835,
        "org.apache.commons.math3.random$BitsStreamGenerator#clear()": -0.3705958691129835,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextBoolean()": -0.09672740481664897,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextBytes(byte[])": -0.08071679330675278,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()": -0.4809322012601096,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextFloat()": -0.09672740481664897,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()": -0.167778021320644,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextInt()": -0.11087670312402771,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextInt(int)": -0.11254799895347088,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextLong()": -0.09672740481664897,
        "org.apache.commons.math3.random$MersenneTwister#<clinit>()": 0.2451398247220703,
        "org.apache.commons.math3.random$MersenneTwister#MersenneTwister()": -0.08901019057424792,
        "org.apache.commons.math3.random$MersenneTwister#MersenneTwister(int)": -0.14831404407037801,
        "org.apache.commons.math3.random$MersenneTwister#MersenneTwister(int[])": -0.017070205875800933,
        "org.apache.commons.math3.random$MersenneTwister#MersenneTwister(long)": 1.6931707725793195,
        "org.apache.commons.math3.random$MersenneTwister#next(int)": -0.17754314303936553,
        "org.apache.commons.math3.random$MersenneTwister#setSeed(int)": 1.590926262348975,
        "org.apache.commons.math3.random$MersenneTwister#setSeed(int[])": 1.6412618378010317,
        "org.apache.commons.math3.random$MersenneTwister#setSeed(long)": 1.6424568569606346,
        "org.apache.commons.math3.util$FastMath#<clinit>()": -1.281726548773765,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0.0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": -0.01707020587580077,
        "org.apache.commons.math3.util$FastMath#abs(double)": -1.1430870124438464,
        "org.apache.commons.math3.util$FastMath#abs(float)": -0.024306019942111234,
        "org.apache.commons.math3.util$FastMath#abs(int)": -0.39724151184897716,
        "org.apache.commons.math3.util$FastMath#abs(long)": -0.7147342074710519,
        "org.apache.commons.math3.util$FastMath#acos(double)": -0.08494505044236743,
        "org.apache.commons.math3.util$FastMath#acosh(double)": -0.024306019942111262,
        "org.apache.commons.math3.util$FastMath#asin(double)": -0.08699665683662197,
        "org.apache.commons.math3.util$FastMath#asinh(double)": -0.024306019942111262,
        "org.apache.commons.math3.util$FastMath#atan(double)": -0.08699665683662197,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": -0.18926295894405878,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": -0.17392497576834148,
        "org.apache.commons.math3.util$FastMath#atanh(double)": -0.024306019942111262,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": -0.12063864314161013,
        "org.apache.commons.math3.util$FastMath#ceil(double)": -0.3574860995164421,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": -0.06419531787923916,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": -0.024306019942111234,
        "org.apache.commons.math3.util$FastMath#cos(double)": -0.33996003853992085,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": -0.39649652468357904,
        "org.apache.commons.math3.util$FastMath#cosh(double)": -0.10040908590147843,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": -0.16401475644652352,
        "org.apache.commons.math3.util$FastMath#exp(double)": -0.6504339847426878,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": 1.0414522947908944,
        "org.apache.commons.math3.util$FastMath#expm1(double)": -0.0692487607998571,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": -0.10040908590147843,
        "org.apache.commons.math3.util$FastMath#floor(double)": -0.7066793469051371,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": -0.16777802132064412,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": -0.024306019942111234,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": -0.1614724840366679,
        "org.apache.commons.math3.util$FastMath#log(double)": -0.7003255848625183,
        "org.apache.commons.math3.util$FastMath#log(double,double)": -0.017070205875800933,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": 0.993615171437072,
        "org.apache.commons.math3.util$FastMath#log10(double)": -0.14141609958633264,
        "org.apache.commons.math3.util$FastMath#log1p(double)": -0.4984371849989466,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0.0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": -0.5970992000457127,
        "org.apache.commons.math3.util$FastMath#max(float,float)": -0.024306019942111234,
        "org.apache.commons.math3.util$FastMath#max(int,int)": -0.05388069578549748,
        "org.apache.commons.math3.util$FastMath#max(long,long)": -0.01707020587580077,
        "org.apache.commons.math3.util$FastMath#min(double,double)": -0.35116688866686085,
        "org.apache.commons.math3.util$FastMath#min(float,float)": -0.024306019942111234,
        "org.apache.commons.math3.util$FastMath#min(int,int)": -0.6063256818258467,
        "org.apache.commons.math3.util$FastMath#min(long,long)": -0.10918597163867494,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": -0.06924876079985709,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": -0.029923833994428106,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": -0.029923833994428255,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": -0.017070205875800933,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": -0.4250572083414572,
        "org.apache.commons.math3.util$FastMath#polySine(double)": -0.4250572083414572,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": 1.225371265945065,
        "org.apache.commons.math3.util$FastMath#pow(double,int)": -0.28407119708441475,
        "org.apache.commons.math3.util$FastMath#random()": -0.07853388100981462,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": -0.038949152008506044,
        "org.apache.commons.math3.util$FastMath#rint(double)": -0.08699665683662197,
        "org.apache.commons.math3.util$FastMath#round(double)": -0.08494505044236743,
        "org.apache.commons.math3.util$FastMath#round(float)": -0.017070205875800933,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": -0.1442035552077836,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": -0.024306019942111234,
        "org.apache.commons.math3.util$FastMath#signum(double)": -0.061538761562700994,
        "org.apache.commons.math3.util$FastMath#signum(float)": -0.024306019942111234,
        "org.apache.commons.math3.util$FastMath#sin(double)": -0.4075989044569186,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": -0.4119976664587972,
        "org.apache.commons.math3.util$FastMath#sinh(double)": -0.10040908590147843,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": -1.1494387307468612,
        "org.apache.commons.math3.util$FastMath#tan(double)": -0.09293223182635699,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": -0.09293223182635699,
        "org.apache.commons.math3.util$FastMath#tanh(double)": -0.061538761562700925,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": -0.034704109609550005,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": -0.034704109609550005,
        "org.apache.commons.math3.util$FastMath#ulp(double)": -0.33590946286293355,
        "org.apache.commons.math3.util$FastMath#ulp(float)": -0.017070205875800933,
        "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double,double)": -0.36062369342473133,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getK()": -0.36062369342473133,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()": -0.36062369342473133,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()": -0.36062369342473133,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": 1.0503660136824617,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": 1.052600401527414,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": 1.0017902513969643,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0.0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()": -0.39690294331142384,
        "org.apache.commons.math3.util$FastMathLiteralArrays#FastMathLiteralArrays()": 0.0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()": 1.0503660136824617,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()": 1.0503660136824617,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()": 1.052600401527414,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()": 1.052600401527414,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()": 1.0017902513969643
    },
    "Math-16": {
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.Dfp)": 0.30020534706202284,
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.DfpField)": -0.024316540970404383,
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.DfpField,byte)": -0.024316540970404383,
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.DfpField,byte,byte)": -0.10045514165935306,
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.DfpField,double)": -0.09677166450136543,
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.DfpField,int)": 1.6459917846889276,
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.DfpField,java.lang.String)": 1.6459917846889276,
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.DfpField,long)": 1.6459917846889276,
        "org.apache.commons.math3.dfp$Dfp#abs()": -0.024316540970404383,
        "org.apache.commons.math3.dfp$Dfp#add(org.apache.commons.math3.dfp.Dfp)": 1.6459917846889276,
        "org.apache.commons.math3.dfp$Dfp#align(int)": 1.6459917846889276,
        "org.apache.commons.math3.dfp$Dfp#ceil()": -0.017077546568805863,
        "org.apache.commons.math3.dfp$Dfp#classify()": -0.07856937051691015,
        "org.apache.commons.math3.dfp$Dfp#compare(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)": 0.30020534706202284,
        "org.apache.commons.math3.dfp$Dfp#complement(int)": 0.30020534706202284,
        "org.apache.commons.math3.dfp$Dfp#copysign(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)": -0.03471926803182893,
        "org.apache.commons.math3.dfp$Dfp#dfp2sci()": -0.01707754656880578,
        "org.apache.commons.math3.dfp$Dfp#dfp2string()": 0.30020534706202284,
        "org.apache.commons.math3.dfp$Dfp#divide(int)": 1.6459917846889276,
        "org.apache.commons.math3.dfp$Dfp#divide(org.apache.commons.math3.dfp.Dfp)": 1.6459917846889276,
        "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)": 1.6459917846889276,
        "org.apache.commons.math3.dfp$Dfp#equals(java.lang.Object)": 1.6459917846889276,
        "org.apache.commons.math3.dfp$Dfp#floor()": -0.04976143172924318,
        "org.apache.commons.math3.dfp$Dfp#getField()": 0.30020534706202284,
        "org.apache.commons.math3.dfp$Dfp#getOne()": -0.11092790282609329,
        "org.apache.commons.math3.dfp$Dfp#getRadixDigits()": 1.6459917846889276,
        "org.apache.commons.math3.dfp$Dfp#getTwo()": -0.0890507084184697,
        "org.apache.commons.math3.dfp$Dfp#getZero()": 1.6459917846889276,
        "org.apache.commons.math3.dfp$Dfp#greaterThan(org.apache.commons.math3.dfp.Dfp)": 1.6459917846889276,
        "org.apache.commons.math3.dfp$Dfp#hashCode()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#intValue()": -0.0642240258706507,
        "org.apache.commons.math3.dfp$Dfp#isInfinite()": -0.09297464742610795,
        "org.apache.commons.math3.dfp$Dfp#isNaN()": 0.30020534706202284,
        "org.apache.commons.math3.dfp$Dfp#isZero()": -0.029936850876551617,
        "org.apache.commons.math3.dfp$Dfp#lessThan(org.apache.commons.math3.dfp.Dfp)": 1.6459917846889276,
        "org.apache.commons.math3.dfp$Dfp#log10()": -0.08905070841846974,
        "org.apache.commons.math3.dfp$Dfp#log10K()": -0.04976143172924319,
        "org.apache.commons.math3.dfp$Dfp#multiply(int)": -0.09488812667760971,
        "org.apache.commons.math3.dfp$Dfp#multiply(org.apache.commons.math3.dfp.Dfp)": 1.6459917846889276,
        "org.apache.commons.math3.dfp$Dfp#multiplyFast(int)": -0.09488812667760971,
        "org.apache.commons.math3.dfp$Dfp#negate()": 1.6459917846889276,
        "org.apache.commons.math3.dfp$Dfp#negativeOrNull()": -0.029936850876551617,
        "org.apache.commons.math3.dfp$Dfp#newInstance()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#newInstance(byte)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#newInstance(byte,byte)": -0.029936850876551617,
        "org.apache.commons.math3.dfp$Dfp#newInstance(double)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#newInstance(int)": -0.06679207794647878,
        "org.apache.commons.math3.dfp$Dfp#newInstance(java.lang.String)": -0.09677166450136543,
        "org.apache.commons.math3.dfp$Dfp#newInstance(long)": -0.08498360999426828,
        "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)": 1.6459917846889276,
        "org.apache.commons.math3.dfp$Dfp#nextAfter(org.apache.commons.math3.dfp.Dfp)": -0.017077546568805863,
        "org.apache.commons.math3.dfp$Dfp#positiveOrNull()": -0.029936850876551617,
        "org.apache.commons.math3.dfp$Dfp#power10(int)": -0.024316540970404383,
        "org.apache.commons.math3.dfp$Dfp#power10K(int)": -0.07633467227651639,
        "org.apache.commons.math3.dfp$Dfp#reciprocal()": -0.017077546568805863,
        "org.apache.commons.math3.dfp$Dfp#remainder(org.apache.commons.math3.dfp.Dfp)": -0.05292516438906921,
        "org.apache.commons.math3.dfp$Dfp#rint()": -0.09677166450136543,
        "org.apache.commons.math3.dfp$Dfp#round(int)": 1.6459917846889276,
        "org.apache.commons.math3.dfp$Dfp#shiftLeft()": 0.30020534706202284,
        "org.apache.commons.math3.dfp$Dfp#shiftRight()": 0.30020534706202284,
        "org.apache.commons.math3.dfp$Dfp#sqrt()": 1.6459917846889276,
        "org.apache.commons.math3.dfp$Dfp#strictlyNegative()": -0.017077546568805863,
        "org.apache.commons.math3.dfp$Dfp#strictlyPositive()": -0.017077546568805863,
        "org.apache.commons.math3.dfp$Dfp#subtract(org.apache.commons.math3.dfp.Dfp)": 1.6459917846889276,
        "org.apache.commons.math3.dfp$Dfp#toDouble()": -0.08703620358784375,
        "org.apache.commons.math3.dfp$Dfp#toSplitDouble()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#toString()": 1.6459917846889276,
        "org.apache.commons.math3.dfp$Dfp#trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)": 0.30020534706202284,
        "org.apache.commons.math3.dfp$Dfp#trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode)": -0.10045514165935306,
        "org.apache.commons.math3.dfp$Dfp#unequal(org.apache.commons.math3.dfp.Dfp)": 1.6459917846889276,
        "org.apache.commons.math3.dfp$Dfp$1#<clinit>()": 0.30020534706202284,
        "org.apache.commons.math3.dfp$DfpField#DfpField(int)": 1.6459917846889276,
        "org.apache.commons.math3.dfp$DfpField#DfpField(int,boolean)": 1.6459917846889276,
        "org.apache.commons.math3.dfp$DfpField#clearIEEEFlags()": -0.10225786961552097,
        "org.apache.commons.math3.dfp$DfpField#computeExp(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)": 1.6459917846889276,
        "org.apache.commons.math3.dfp$DfpField#computeLn(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)": 1.6459917846889276,
        "org.apache.commons.math3.dfp$DfpField#computePi(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)": 1.6459917846889276,
        "org.apache.commons.math3.dfp$DfpField#computeStringConstants(int)": 1.6459917846889276,
        "org.apache.commons.math3.dfp$DfpField#getE()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getESplit()": -0.05292516438906936,
        "org.apache.commons.math3.dfp$DfpField#getIEEEFlags()": -0.08289029914599477,
        "org.apache.commons.math3.dfp$DfpField#getLn10()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getLn2()": -0.029936850876551624,
        "org.apache.commons.math3.dfp$DfpField#getLn2Split()": -0.04641122012092236,
        "org.apache.commons.math3.dfp$DfpField#getLn5()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getLn5Split()": -0.04641122012092236,
        "org.apache.commons.math3.dfp$DfpField#getOne()": -0.11425348638621058,
        "org.apache.commons.math3.dfp$DfpField#getPi()": -0.06156622643575482,
        "org.apache.commons.math3.dfp$DfpField#getPiSplit()": -0.05593277964390042,
        "org.apache.commons.math3.dfp$DfpField#getRadixDigits()": 0.30020534706202284,
        "org.apache.commons.math3.dfp$DfpField#getRoundingMode()": 0.30020534706202284,
        "org.apache.commons.math3.dfp$DfpField#getRuntimeClass()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getSqr2()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getSqr2Reciprocal()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getSqr2Split()": -0.03896622554497697,
        "org.apache.commons.math3.dfp$DfpField#getSqr3()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getSqr3Reciprocal()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getTwo()": -0.09677166450136543,
        "org.apache.commons.math3.dfp$DfpField#getZero()": 0.30020534706202284,
        "org.apache.commons.math3.dfp$DfpField#newDfp()": -0.024316540970404383,
        "org.apache.commons.math3.dfp$DfpField#newDfp(byte)": 0.0,
        "org.apache.commons.math3.dfp$DfpField#newDfp(byte,byte)": -0.10045514165935306,
        "org.apache.commons.math3.dfp$DfpField#newDfp(double)": -0.09677166450136543,
        "org.apache.commons.math3.dfp$DfpField#newDfp(int)": -0.017077546568805863,
        "org.apache.commons.math3.dfp$DfpField#newDfp(java.lang.String)": -0.09862685134797979,
        "org.apache.commons.math3.dfp$DfpField#newDfp(long)": 0.0,
        "org.apache.commons.math3.dfp$DfpField#newDfp(org.apache.commons.math3.dfp.Dfp)": 0.0,
        "org.apache.commons.math3.dfp$DfpField#setIEEEFlags(int)": 0.0,
        "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)": 0.30020534706202284,
        "org.apache.commons.math3.dfp$DfpField#setRoundingMode(org.apache.commons.math3.dfp.DfpField$RoundingMode)": -0.029936850876551624,
        "org.apache.commons.math3.dfp$DfpField#split(java.lang.String)": 1.6459917846889276,
        "org.apache.commons.math3.dfp$DfpField$RoundingMode#<clinit>()": 1.6459917846889276,
        "org.apache.commons.math3.dfp$DfpField$RoundingMode#DfpField$RoundingMode(java.lang.String,int)": 0.30020534706202284,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.6966597686981478,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": -0.05292516438906936,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.6109471093423344,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": -0.06422402587065079,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)": -0.12226495090362702,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": -0.17400821531107225,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": -0.18119922149717702,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.3137151909191707,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": -0.029936850876551624,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": -0.029936850876551624,
        "org.apache.commons.math3.random$BitsStreamGenerator#BitsStreamGenerator()": -0.3699990500459055,
        "org.apache.commons.math3.random$BitsStreamGenerator#clear()": -0.3699990500459055,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextBoolean()": -0.09677166450136543,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextBytes(byte[])": -0.08075332556104005,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()": -0.4811889757072048,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextFloat()": -0.09677166450136543,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()": -0.16785806402394737,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextInt()": -0.11092790282609329,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextInt(int)": -0.11260002496763388,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextLong()": -0.09677166450136543,
        "org.apache.commons.math3.random$MersenneTwister#<clinit>()": 0.24706453574057752,
        "org.apache.commons.math3.random$MersenneTwister#MersenneTwister()": -0.0890507084184697,
        "org.apache.commons.math3.random$MersenneTwister#MersenneTwister(int)": -0.14838406343556432,
        "org.apache.commons.math3.random$MersenneTwister#MersenneTwister(int[])": -0.017077546568805863,
        "org.apache.commons.math3.random$MersenneTwister#MersenneTwister(long)": 1.6961796801503777,
        "org.apache.commons.math3.random$MersenneTwister#next(int)": -0.17762827107055115,
        "org.apache.commons.math3.random$MersenneTwister#setSeed(int)": 1.5928509733674823,
        "org.apache.commons.math3.random$MersenneTwister#setSeed(int[])": 1.6435728271305297,
        "org.apache.commons.math3.random$MersenneTwister#setSeed(long)": 1.6447794784182825,
        "org.apache.commons.math3.util$FastMath#<clinit>()": -1.2815167729661323,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0.0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": -0.01707754656880578,
        "org.apache.commons.math3.util$FastMath#abs(double)": -0.6685741055015816,
        "org.apache.commons.math3.util$FastMath#abs(float)": -0.024316540970404255,
        "org.apache.commons.math3.util$FastMath#abs(int)": -0.3974488060995598,
        "org.apache.commons.math3.util$FastMath#abs(long)": -0.7157093496932156,
        "org.apache.commons.math3.util$FastMath#acos(double)": -0.08498360999426828,
        "org.apache.commons.math3.util$FastMath#acosh(double)": -0.024316540970404383,
        "org.apache.commons.math3.util$FastMath#asin(double)": -0.08703620358784375,
        "org.apache.commons.math3.util$FastMath#asinh(double)": -0.024316540970404383,
        "org.apache.commons.math3.util$FastMath#atan(double)": -0.08703620358784375,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": -0.18935423778883104,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": -0.17400821531107225,
        "org.apache.commons.math3.util$FastMath#atanh(double)": -0.024316540970404383,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": -0.12069468825699033,
        "org.apache.commons.math3.util$FastMath#ceil(double)": -0.3576703727873027,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": -0.06422402587065079,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": -0.024316540970404255,
        "org.apache.commons.math3.util$FastMath#cos(double)": -0.340134273302023,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": -0.39670338448924575,
        "org.apache.commons.math3.util$FastMath#cosh(double)": 1.7232283354986344,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": -0.164092849279037,
        "org.apache.commons.math3.util$FastMath#exp(double)": 1.1703982956090493,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": 1.0421239066986414,
        "org.apache.commons.math3.util$FastMath#expm1(double)": -0.06927984517687,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": -0.10045514165935306,
        "org.apache.commons.math3.util$FastMath#floor(double)": -0.705920734000286,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": -0.16785806402394732,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": -0.024316540970404255,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": -0.16154926281339305,
        "org.apache.commons.math3.util$FastMath#log(double)": -0.700138194346851,
        "org.apache.commons.math3.util$FastMath#log(double,double)": -0.017077546568805863,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": -0.8263122377335224,
        "org.apache.commons.math3.util$FastMath#log10(double)": -0.14148260441199845,
        "org.apache.commons.math3.util$FastMath#log1p(double)": -0.4987044661754008,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0.0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": -0.12197757011221355,
        "org.apache.commons.math3.util$FastMath#max(float,float)": -0.024316540970404255,
        "org.apache.commons.math3.util$FastMath#max(int,int)": -0.052863052245959996,
        "org.apache.commons.math3.util$FastMath#max(long,long)": -0.01707754656880578,
        "org.apache.commons.math3.util$FastMath#min(double,double)": -0.35134753437379174,
        "org.apache.commons.math3.util$FastMath#min(float,float)": -0.024316540970404255,
        "org.apache.commons.math3.util$FastMath#min(int,int)": -0.6066587633787945,
        "org.apache.commons.math3.util$FastMath#min(long,long)": -0.10923633680655032,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": -0.06927984517686991,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": -0.029936850876551624,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": -0.029936850876551617,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": -0.017077546568805863,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": -0.42528080259418477,
        "org.apache.commons.math3.util$FastMath#polySine(double)": -0.42528080259418477,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": -0.5949546009098806,
        "org.apache.commons.math3.util$FastMath#pow(double,int)": -0.2842139157736687,
        "org.apache.commons.math3.util$FastMath#random()": -0.07856937051691015,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": -0.038966225544977,
        "org.apache.commons.math3.util$FastMath#rint(double)": -0.0828902991459949,
        "org.apache.commons.math3.util$FastMath#round(double)": -0.08498360999426828,
        "org.apache.commons.math3.util$FastMath#round(float)": -0.017077546568805863,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": -0.14427147781195782,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": -0.024316540970404255,
        "org.apache.commons.math3.util$FastMath#signum(double)": -0.06156622643575482,
        "org.apache.commons.math3.util$FastMath#signum(float)": -0.024316540970404255,
        "org.apache.commons.math3.util$FastMath#sin(double)": -0.40781225029638685,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": -0.4122135888636965,
        "org.apache.commons.math3.util$FastMath#sinh(double)": -0.09677166450136543,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": -1.1501224067445368,
        "org.apache.commons.math3.util$FastMath#tan(double)": -0.09297464742610795,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": -0.09297464742610795,
        "org.apache.commons.math3.util$FastMath#tanh(double)": -0.06156622643575486,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": -0.03471926803182893,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": -0.03471926803182893,
        "org.apache.commons.math3.util$FastMath#ulp(double)": 1.4855471583732909,
        "org.apache.commons.math3.util$FastMath#ulp(float)": -0.017077546568805863,
        "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double,double)": -0.36080977116576785,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getK()": -0.36080977116576785,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()": -0.36080977116576785,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()": -0.36080977116576785,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": 1.0510480504781254,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": 1.053285066429849,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": -0.8181299680769474,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0.0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()": -0.3957999975496981,
        "org.apache.commons.math3.util$FastMathLiteralArrays#FastMathLiteralArrays()": 0.0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()": 1.0510480504781254,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()": 1.0510480504781254,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()": 1.053285066429849,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()": 1.053285066429849,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()": -0.8181299680769474
    },
    "Math-17": {
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.Dfp)": -1.525786437626905,
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.DfpField)": -0.18311388300841897,
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.DfpField,byte)": -0.18311388300841897,
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.DfpField,byte,byte)": 0.8554202710603852,
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.DfpField,double)": -0.9416079783099616,
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.DfpField,int)": -0.18000000000000005,
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.DfpField,java.lang.String)": -0.18000000000000005,
        "org.apache.commons.math3.dfp$Dfp#Dfp(org.apache.commons.math3.dfp.DfpField,long)": -0.18000000000000005,
        "org.apache.commons.math3.dfp$Dfp#abs()": -0.18311388300841897,
        "org.apache.commons.math3.dfp$Dfp#add(org.apache.commons.math3.dfp.Dfp)": -0.18000000000000005,
        "org.apache.commons.math3.dfp$Dfp#align(int)": -0.18000000000000005,
        "org.apache.commons.math3.dfp$Dfp#ceil()": -0.12430339887498948,
        "org.apache.commons.math3.dfp$Dfp#classify()": -0.7248397172404482,
        "org.apache.commons.math3.dfp$Dfp#compare(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)": -1.525786437626905,
        "org.apache.commons.math3.dfp$Dfp#complement(int)": -1.525786437626905,
        "org.apache.commons.math3.dfp$Dfp#copysign(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)": -0.273606797749979,
        "org.apache.commons.math3.dfp$Dfp#dfp2sci()": -0.12430339887498953,
        "org.apache.commons.math3.dfp$Dfp#dfp2string()": -1.525786437626905,
        "org.apache.commons.math3.dfp$Dfp#divide(int)": -0.18000000000000005,
        "org.apache.commons.math3.dfp$Dfp#divide(org.apache.commons.math3.dfp.Dfp)": -0.18000000000000005,
        "org.apache.commons.math3.dfp$Dfp#dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)": -0.18000000000000005,
        "org.apache.commons.math3.dfp$Dfp#equals(java.lang.Object)": -0.18000000000000005,
        "org.apache.commons.math3.dfp$Dfp#floor()": -0.416227766016838,
        "org.apache.commons.math3.dfp$Dfp#getField()": -1.525786437626905,
        "org.apache.commons.math3.dfp$Dfp#getOne()": -1.120820393249937,
        "org.apache.commons.math3.dfp$Dfp#getRadixDigits()": -0.18000000000000005,
        "org.apache.commons.math3.dfp$Dfp#getTwo()": -0.8477225575051661,
        "org.apache.commons.math3.dfp$Dfp#getZero()": -0.18000000000000005,
        "org.apache.commons.math3.dfp$Dfp#greaterThan(org.apache.commons.math3.dfp.Dfp)": -0.18000000000000005,
        "org.apache.commons.math3.dfp$Dfp#hashCode()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#intValue()": -0.5656128874149275,
        "org.apache.commons.math3.dfp$Dfp#isInfinite()": -0.8950877125495689,
        "org.apache.commons.math3.dfp$Dfp#isNaN()": -1.525786437626905,
        "org.apache.commons.math3.dfp$Dfp#isZero()": -0.23114916731037086,
        "org.apache.commons.math3.dfp$Dfp#lessThan(org.apache.commons.math3.dfp.Dfp)": -0.18000000000000005,
        "org.apache.commons.math3.dfp$Dfp#log10()": -0.8477225575051661,
        "org.apache.commons.math3.dfp$Dfp#log10K()": -0.4162277660168381,
        "org.apache.commons.math3.dfp$Dfp#multiply(int)": 0.9249122874504309,
        "org.apache.commons.math3.dfp$Dfp#multiply(org.apache.commons.math3.dfp.Dfp)": -0.18000000000000005,
        "org.apache.commons.math3.dfp$Dfp#multiplyFast(int)": 0.9249122874504309,
        "org.apache.commons.math3.dfp$Dfp#negate()": -0.18000000000000005,
        "org.apache.commons.math3.dfp$Dfp#negativeOrNull()": -0.23114916731037086,
        "org.apache.commons.math3.dfp$Dfp#newInstance()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#newInstance(byte)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#newInstance(byte,byte)": -0.23114916731037086,
        "org.apache.commons.math3.dfp$Dfp#newInstance(double)": 0.0,
        "org.apache.commons.math3.dfp$Dfp#newInstance(int)": -0.5656128874149275,
        "org.apache.commons.math3.dfp$Dfp#newInstance(java.lang.String)": -0.9416079783099616,
        "org.apache.commons.math3.dfp$Dfp#newInstance(long)": -0.7994044240850758,
        "org.apache.commons.math3.dfp$Dfp#newInstance(org.apache.commons.math3.dfp.Dfp)": -0.18000000000000005,
        "org.apache.commons.math3.dfp$Dfp#nextAfter(org.apache.commons.math3.dfp.Dfp)": -0.12430339887498948,
        "org.apache.commons.math3.dfp$Dfp#positiveOrNull()": -0.23114916731037086,
        "org.apache.commons.math3.dfp$Dfp#power10(int)": -0.18311388300841897,
        "org.apache.commons.math3.dfp$Dfp#power10K(int)": -0.6993416490252569,
        "org.apache.commons.math3.dfp$Dfp#reciprocal()": -0.12430339887498948,
        "org.apache.commons.math3.dfp$Dfp#remainder(org.apache.commons.math3.dfp.Dfp)": -0.44791019662496845,
        "org.apache.commons.math3.dfp$Dfp#rint()": -0.9416079783099616,
        "org.apache.commons.math3.dfp$Dfp#round(int)": -0.18000000000000005,
        "org.apache.commons.math3.dfp$Dfp#shiftLeft()": -1.525786437626905,
        "org.apache.commons.math3.dfp$Dfp#shiftRight()": -1.525786437626905,
        "org.apache.commons.math3.dfp$Dfp#sqrt()": -0.18000000000000005,
        "org.apache.commons.math3.dfp$Dfp#strictlyNegative()": -0.12430339887498948,
        "org.apache.commons.math3.dfp$Dfp#strictlyPositive()": -0.12430339887498948,
        "org.apache.commons.math3.dfp$Dfp#subtract(org.apache.commons.math3.dfp.Dfp)": -0.18000000000000005,
        "org.apache.commons.math3.dfp$Dfp#toDouble()": -0.8236902647381804,
        "org.apache.commons.math3.dfp$Dfp#toSplitDouble()": 0.0,
        "org.apache.commons.math3.dfp$Dfp#toString()": -0.18000000000000005,
        "org.apache.commons.math3.dfp$Dfp#trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)": -1.525786437626905,
        "org.apache.commons.math3.dfp$Dfp#trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode)": -0.9873724356957945,
        "org.apache.commons.math3.dfp$Dfp#unequal(org.apache.commons.math3.dfp.Dfp)": -0.18000000000000005,
        "org.apache.commons.math3.dfp$Dfp$1#<clinit>()": -1.525786437626905,
        "org.apache.commons.math3.dfp$DfpField#DfpField(int)": -0.18000000000000005,
        "org.apache.commons.math3.dfp$DfpField#DfpField(int,boolean)": -0.18000000000000005,
        "org.apache.commons.math3.dfp$DfpField#clearIEEEFlags()": -0.5131588733226994,
        "org.apache.commons.math3.dfp$DfpField#computeExp(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)": -0.18000000000000005,
        "org.apache.commons.math3.dfp$DfpField#computeLn(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)": -0.18000000000000005,
        "org.apache.commons.math3.dfp$DfpField#computePi(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)": -0.18000000000000005,
        "org.apache.commons.math3.dfp$DfpField#computeStringConstants(int)": -0.18000000000000005,
        "org.apache.commons.math3.dfp$DfpField#getE()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getESplit()": -0.44791019662496856,
        "org.apache.commons.math3.dfp$DfpField#getIEEEFlags()": -0.2757864376269049,
        "org.apache.commons.math3.dfp$DfpField#getLn10()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getLn2()": -0.23114916731037094,
        "org.apache.commons.math3.dfp$DfpField#getLn2Split()": -0.38330398915498076,
        "org.apache.commons.math3.dfp$DfpField#getLn5()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getLn5Split()": -0.38330398915498076,
        "org.apache.commons.math3.dfp$DfpField#getOne()": -1.1642024376045113,
        "org.apache.commons.math3.dfp$DfpField#getPi()": -0.5372983346207416,
        "org.apache.commons.math3.dfp$DfpField#getPiSplit()": -0.47855339059327373,
        "org.apache.commons.math3.dfp$DfpField#getRadixDigits()": -1.525786437626905,
        "org.apache.commons.math3.dfp$DfpField#getRoundingMode()": -1.525786437626905,
        "org.apache.commons.math3.dfp$DfpField#getRuntimeClass()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getSqr2()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getSqr2Reciprocal()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getSqr2Split()": -0.3125,
        "org.apache.commons.math3.dfp$DfpField#getSqr3()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getSqr3Reciprocal()": 0.0,
        "org.apache.commons.math3.dfp$DfpField#getTwo()": -0.9416079783099618,
        "org.apache.commons.math3.dfp$DfpField#getZero()": -1.525786437626905,
        "org.apache.commons.math3.dfp$DfpField#newDfp()": -0.18311388300841897,
        "org.apache.commons.math3.dfp$DfpField#newDfp(byte)": 0.0,
        "org.apache.commons.math3.dfp$DfpField#newDfp(byte,byte)": 0.8554202710603852,
        "org.apache.commons.math3.dfp$DfpField#newDfp(double)": -0.9416079783099616,
        "org.apache.commons.math3.dfp$DfpField#newDfp(int)": -0.12430339887498948,
        "org.apache.commons.math3.dfp$DfpField#newDfp(java.lang.String)": 0.8783920216900384,
        "org.apache.commons.math3.dfp$DfpField#newDfp(long)": 0.0,
        "org.apache.commons.math3.dfp$DfpField#newDfp(org.apache.commons.math3.dfp.Dfp)": 0.0,
        "org.apache.commons.math3.dfp$DfpField#setIEEEFlags(int)": 0.0,
        "org.apache.commons.math3.dfp$DfpField#setIEEEFlagsBits(int)": -1.525786437626905,
        "org.apache.commons.math3.dfp$DfpField#setRoundingMode(org.apache.commons.math3.dfp.DfpField$RoundingMode)": -0.23114916731037094,
        "org.apache.commons.math3.dfp$DfpField#split(java.lang.String)": -0.18000000000000005,
        "org.apache.commons.math3.dfp$DfpField$RoundingMode#<clinit>()": -0.18000000000000005,
        "org.apache.commons.math3.dfp$DfpField$RoundingMode#DfpField$RoundingMode(java.lang.String,int)": -1.525786437626905
    },
    "Math-18": {
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)": -0.23800048655025843,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)": -0.25551066971161335,
        "org.apache.commons.math3.exception$DimensionMismatchException#getDimension()": -0.028388598326265946,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": -0.05569694840712214,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.11552689658199461,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": -0.016203939800984113,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.6362923931744884,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": -0.047147249957081305,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.5560101240396849,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": -0.06081397268407174,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": -0.12271236837502059,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.148821769248345,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": -0.12130086206260726,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": -0.016203939800984113,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int)": 0.0,
        "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int,java.lang.Class)": -0.06081397268407166,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()": -0.07224720411394828,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.07224720411394828,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)": -0.0784321796528094,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.0784321796528094,
        "org.apache.commons.math3.exception$MaxCountExceededException#getMax()": -0.06081397268407174,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(java.lang.Integer[],java.lang.Integer[])": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])": -0.10952605750517708,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getExpectedDimension(int)": -0.016203939800984113,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getExpectedDimensions()": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getWrongDimension(int)": -0.016203939800984113,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getWrongDimensions()": 0.0,
        "org.apache.commons.math3.exception$NoDataException#NoDataException()": -0.055696948407122145,
        "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)": -0.08974478251377625,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int)": -0.016203939800984214,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int,org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": -0.0678684175605891,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getDirection()": -0.016203939800984113,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getIndex()": -0.016203939800984113,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getPrevious()": -0.016203939800984113,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getStrict()": -0.016203939800984113,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])": -0.04397926444346742,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.07224720411394828,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)": -0.0529807926927952,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": -0.05830352583085804,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)": -0.10642969814184203,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": -0.16300818210508972,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": -0.11844031363300199,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.1536523832978533,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)": -0.09668937911520925,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.2120496191115446,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getBoundIsAllowed()": -0.016203939800984113,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getMax()": -0.016203939800984113,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": -0.148821769248345,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.279700354566242,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": -0.028388598326265946,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": -0.028388598326265946,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(java.lang.Number,java.lang.Number,java.lang.Number)": -0.09668937911520925,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)": -0.2623145748309355,
        "org.apache.commons.math3.exception$OutOfRangeException#getHi()": -0.016203939800984113,
        "org.apache.commons.math3.exception$OutOfRangeException#getLo()": -0.016203939800984113,
        "org.apache.commons.math3.exception$TooManyEvaluationsException#TooManyEvaluationsException(java.lang.Number)": -0.0632391923264984,
        "org.apache.commons.math3.exception$ZeroException#ZeroException()": -0.016203939800984214,
        "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.0529807926927952,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix()": -0.023064848585765407,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field)": -0.15365238329785336,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)": -0.18807225397482458,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)": -0.0329166559947438,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)": -0.14759671559478194,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)": -0.20426126218220442,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkAdditionCompatible(org.apache.commons.math3.linear.FieldMatrix)": -0.0529807926927952,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)": -0.21108618547606092,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkMultiplicationCompatible(org.apache.commons.math3.linear.FieldMatrix)": -0.07224720411394828,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)": -0.21108618547606092,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)": -0.0529807926927952,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int[],int[])": -0.03693622258045712,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubtractionCompatible(org.apache.commons.math3.linear.FieldMatrix)": -0.0329166559947438,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])": -0.02306484858576534,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int[],int[],org.apache.commons.math3.FieldElement[][])": -0.02306484858576534,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#equals(java.lang.Object)": -0.09836471105636588,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[][])": -0.1752983510777513,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumn(int)": -0.0529807926927952,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)": -0.028388598326265956,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnVector(int)": -0.04059459223577629,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getData()": -0.02306484858576534,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()": -0.21587581572586045,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRow(int)": -0.04397926444346742,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)": -0.0329166559947438,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowVector(int)": -0.028388598326265956,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)": -0.02306484858576534,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])": -0.028388598326265956,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getTrace()": -0.028388598326265956,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#hashCode()": -0.028388598326265956,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#isSquare()": -0.10798639071518326,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)": -0.0529807926927952,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": -0.02306484858576534,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.linear.FieldVector)": -0.028388598326265956,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)": -0.016203939800984214,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": -0.016203939800984214,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)": -0.028388598326265956,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)": -0.02306484858576534,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)": -0.02306484858576534,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])": -0.016203939800984214,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": -0.016203939800984214,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)": -0.016203939800984214,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])": -0.016203939800984214,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": -0.016203939800984214,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)": -0.016203939800984214,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": -0.02306484858576534,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)": -0.016203939800984214,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#toString()": -0.02306484858576534,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()": -0.04059459223577629,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.016203939800984214,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.016203939800984214,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.016203939800984214,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.016203939800984214,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.028388598326265956,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.016203939800984214,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.08234229088494381,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.02306484858576534,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.016203939800984214,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.02306484858576534,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$1#visit(int,int,org.apache.commons.math3.FieldElement)": -0.028388598326265946,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$2#start(int,int,int,int,int,int)": -0.023064848585765407,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$2#visit(int,int,org.apache.commons.math3.FieldElement)": -0.023064848585765407,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$3#visit(int,int,org.apache.commons.math3.FieldElement)": -0.04059459223577622,
        "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()": 1.3246166758050995,
        "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()": 1.4490927961073865,
        "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)": 1.3850023069315345,
        "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)": 1.7499137147144181,
        "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])": -0.08610746293267482,
        "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])": -0.02306484858576534,
        "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)": -0.1282420384742232,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)": 1.715144715302464,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)": 1.7499137147144181,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)": -0.0678684175605891,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getData()": -0.02306484858576534,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()": 1.7567608076735015,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()": -0.1641514083487714,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)": 1.6972876316249792,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)": -0.0329166559947438,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)": -0.09151996363636246,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)": -0.055696948407122145,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])": -0.028388598326265956,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()": -0.028388598326265956,
        "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()": -0.04397926444346742,
        "org.apache.commons.math3.linear$AbstractRealMatrix#isSquare()": 1.5901401580308385,
        "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": 1.6288241669473935,
        "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])": -0.02306484858576534,
        "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)": -0.11104934931334415,
        "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)": -0.02306484858576534,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])": -0.016203939800984214,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)": -0.028388598326265956,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)": 1.7544118293101065,
        "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)": 1.7477527958860517,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])": -0.03693622258045712,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)": -0.02306484858576534,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)": 1.737657709115056,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])": -0.016203939800984214,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)": -0.016203939800984214,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)": -0.09326822168589181,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)": -0.028388598326265956,
        "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": 1.6513294032145818,
        "org.apache.commons.math3.linear$AbstractRealMatrix#toString()": -0.04397926444346742,
        "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()": 1.5749044806279713,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.016203939800984214,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.016203939800984214,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.04714724995708144,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.016203939800984214,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.03693622258045712,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.016203939800984214,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 1.5731502477095676,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.08424184282820484,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.016203939800984214,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.02306484858576534,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#end()": -0.1641514083487714,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#start(int,int,int,int,int,int)": -0.1641514083487714,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#visit(int,int,double)": -0.1641514083487714,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#end()": 0.41097437004659654,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#start(int,int,int,int,int,int)": 0.41097437004659654,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#visit(int,int,double)": 0.41097437004659654,
        "org.apache.commons.math3.linear$AbstractRealMatrix$3#visit(int,int,double)": -0.028388598326265946,
        "org.apache.commons.math3.linear$AbstractRealMatrix$4#start(int,int,int,int,int,int)": -0.0861074629326748,
        "org.apache.commons.math3.linear$AbstractRealMatrix$4#visit(int,int,double)": -0.0861074629326748,
        "org.apache.commons.math3.linear$AbstractRealMatrix$5#visit(int,int,double)": 0.22911804300106653,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field)": -0.02306484858576534,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,int,int)": -0.10326240667102661,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])": -0.12411188285517237,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)": -0.09668937911520925,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])": -0.10952605750517708,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)": -0.07224720411394828,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": -0.02306484858576534,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()": -0.02306484858576534,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])": -0.12411188285517237,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyOut()": -0.10001800885758956,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#createMatrix(int,int)": -0.07224720411394828,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()": -0.16185938304528902,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getData()": -0.09668937911520925,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getDataRef()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)": -0.14636439073405264,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()": -0.16185938304528902,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": -0.016203939800984214,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": -0.02306484858576534,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": -0.016203939800984214,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)": -0.10798639071518326,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": -0.12411188285517237,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": -0.016203939800984214,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.016203939800984214,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.016203939800984214,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.016203939800984214,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.016203939800984214,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.02306484858576534,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.016203939800984214,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.08040656852884574,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.02306484858576534,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix()": -0.0329166559947438,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[])": -0.0329166559947438,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])": 1.4862855780062985,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)": 1.6267734723675122,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)": 1.4796951523324129,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)": -0.02306484858576534,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()": -0.06081397268407166,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])": 1.4848150058738288,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()": 1.5419278642891143,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)": 1.5484971423049831,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()": 0.0786641200176118,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getData()": 1.5476709345073347,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getDataRef()": -0.11552689658199466,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)": 1.485549854759098,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()": 0.0793379429898059,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)": -0.055696948407122145,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)": -0.0329166559947438,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#operate(double[])": -0.11552689658199461,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#preMultiply(double[])": -0.02306484858576534,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)": 1.4862855780062985,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)": 1.4848150058738288,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)": -0.016203939800984214,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.016203939800984214,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.016203939800984214,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.15837847020391077,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.016203939800984214,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.0329166559947438,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.016203939800984214,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 1.574026414881263,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.08424184282820484,
        "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()": 1.3901579204997212,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector()": -0.028388598326265956,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[])": 1.540299645433758,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)": -0.34538365359038503,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],double[])": -0.016203939800984214,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],int,int)": -0.016203939800984214,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],org.apache.commons.math3.linear.ArrayRealVector)": -0.016203939800984214,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int)": -0.22059893101023553,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int,double)": -0.028388598326265956,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[])": -0.016203939800984214,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[],int,int)": -0.016203939800984214,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector)": -0.016203939800984214,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,boolean)": -0.18807225397482458,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,double[])": -0.016203939800984214,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.ArrayRealVector)": -0.028388598326265956,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.RealVector)": -0.02306484858576534,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector)": -0.016203939800984214,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.ArrayRealVector)": -0.016203939800984214,
        "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)": -0.05013814858127877,
        "org.apache.commons.math3.linear$ArrayRealVector#addToEntry(int,double)": -0.028388598326265956,
        "org.apache.commons.math3.linear$ArrayRealVector#append(double)": -0.02306484858576534,
        "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.RealVector)": -0.02306484858576534,
        "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)": -0.22802651953498534,
        "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)": -0.07008628528558182,
        "org.apache.commons.math3.linear$ArrayRealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)": -0.07008628528558182,
        "org.apache.commons.math3.linear$ArrayRealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": -0.11255687650747319,
        "org.apache.commons.math3.linear$ArrayRealVector#copy()": -0.18703017122682755,
        "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)": -0.17310831838103094,
        "org.apache.commons.math3.linear$ArrayRealVector#ebeDivide(org.apache.commons.math3.linear.RealVector)": -0.04397926444346742,
        "org.apache.commons.math3.linear$ArrayRealVector#ebeMultiply(org.apache.commons.math3.linear.RealVector)": -0.06081397268407166,
        "org.apache.commons.math3.linear$ArrayRealVector#equals(java.lang.Object)": -0.12130086206260735,
        "org.apache.commons.math3.linear$ArrayRealVector#getDataRef()": -0.1282420384742231,
        "org.apache.commons.math3.linear$ArrayRealVector#getDimension()": 0.1223579625051584,
        "org.apache.commons.math3.linear$ArrayRealVector#getDistance(org.apache.commons.math3.linear.RealVector)": -0.03693622258045712,
        "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)": 1.5072615615910672,
        "org.apache.commons.math3.linear$ArrayRealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)": -0.0329166559947438,
        "org.apache.commons.math3.linear$ArrayRealVector#getL1Norm()": -0.02306484858576534,
        "org.apache.commons.math3.linear$ArrayRealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)": -0.0329166559947438,
        "org.apache.commons.math3.linear$ArrayRealVector#getLInfNorm()": -0.02306484858576534,
        "org.apache.commons.math3.linear$ArrayRealVector#getNorm()": -0.13360125415185203,
        "org.apache.commons.math3.linear$ArrayRealVector#getSubVector(int,int)": -0.04397926444346742,
        "org.apache.commons.math3.linear$ArrayRealVector#hashCode()": -0.028388598326265956,
        "org.apache.commons.math3.linear$ArrayRealVector#isInfinite()": -0.02306484858576534,
        "org.apache.commons.math3.linear$ArrayRealVector#isNaN()": -0.12687637926734885,
        "org.apache.commons.math3.linear$ArrayRealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)": -0.028388598326265956,
        "org.apache.commons.math3.linear$ArrayRealVector#mapAddToSelf(double)": -0.028388598326265946,
        "org.apache.commons.math3.linear$ArrayRealVector#mapDivideToSelf(double)": -0.036936222580457034,
        "org.apache.commons.math3.linear$ArrayRealVector#mapMultiplyToSelf(double)": -0.13491660112560888,
        "org.apache.commons.math3.linear$ArrayRealVector#mapSubtractToSelf(double)": -0.028388598326265946,
        "org.apache.commons.math3.linear$ArrayRealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": -0.032916655994743804,
        "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)": -0.028388598326265956,
        "org.apache.commons.math3.linear$ArrayRealVector#set(double)": -0.11844031363300189,
        "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)": -0.15484336698210915,
        "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,double[])": -0.08610746293267482,
        "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,org.apache.commons.math3.linear.RealVector)": -0.08794116797097268,
        "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)": -0.15837847020391077,
        "org.apache.commons.math3.linear$ArrayRealVector#toArray()": -0.1870301712268274,
        "org.apache.commons.math3.linear$ArrayRealVector#toString()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": -0.023064848585765407,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": -0.0329166559947438,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": -0.023064848585765407,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": -0.0329166559947438,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": -0.016203939800984214,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": -0.02306484858576534,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": -0.016203939800984214,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": -0.02306484858576534,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(int,int,org.apache.commons.math3.FieldElement[][],boolean)": -0.10326240667102661,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)": -0.08974478251377625,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.FieldElement[][])": -0.10326240667102661,
        "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.BlockFieldMatrix)": -0.0329166559947438,
        "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)": -0.02306484858576534,
        "org.apache.commons.math3.linear$BlockFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#blockHeight(int)": -0.11255687650747315,
        "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)": -0.11987697909909234,
        "org.apache.commons.math3.linear$BlockFieldMatrix#copy()": -0.016203939800984214,
        "org.apache.commons.math3.linear$BlockFieldMatrix#copyBlockPart(org.apache.commons.math3.FieldElement[],int,int,int,int,int,org.apache.commons.math3.FieldElement[],int,int,int)": -0.028388598326265956,
        "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)": -0.08974478251377625,
        "org.apache.commons.math3.linear$BlockFieldMatrix#createMatrix(int,int)": -0.016203939800984214,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumn(int)": -0.03693622258045712,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()": -0.11255687650747315,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnMatrix(int)": -0.028388598326265956,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnVector(int)": -0.028388598326265956,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getData()": -0.03693622258045712,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)": -0.09151996363636246,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRow(int)": -0.03693622258045712,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()": -0.11404921245354793,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowMatrix(int)": -0.0329166559947438,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowVector(int)": -0.028388598326265956,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getSubMatrix(int,int,int,int)": -0.028388598326265956,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.BlockFieldMatrix)": -0.04397926444346742,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)": -0.04059459223577629,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": -0.028388598326265956,
        "org.apache.commons.math3.linear$BlockFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": -0.02306484858576534,
        "org.apache.commons.math3.linear$BlockFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)": -0.0329166559947438,
        "org.apache.commons.math3.linear$BlockFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)": -0.016203939800984214,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])": -0.0329166559947438,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)": -0.02306484858576534,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": -0.02306484858576534,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)": -0.02306484858576534,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)": -0.03693622258045712,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])": -0.0329166559947438,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)": -0.02306484858576534,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": -0.02306484858576534,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)": -0.02306484858576534,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": -0.02306484858576534,
        "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.BlockFieldMatrix)": -0.02306484858576534,
        "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)": -0.016203939800984214,
        "org.apache.commons.math3.linear$BlockFieldMatrix#toBlocksLayout(org.apache.commons.math3.FieldElement[][])": -0.10326240667102661,
        "org.apache.commons.math3.linear$BlockFieldMatrix#transpose()": -0.028388598326265956,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.02306484858576534,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.016203939800984214,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.016203939800984214,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.02306484858576534,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.016203939800984214,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.016203939800984214,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.016203939800984214,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.016203939800984214,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])": -0.2012909587622695,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)": -0.14008766023030542,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)": -0.22153589814745223,
        "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)": -0.0329166559947438,
        "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)": -0.02306484858576534,
        "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)": -0.016203939800984214,
        "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)": -0.22802651953498532,
        "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)": -0.23530628435583067,
        "org.apache.commons.math3.linear$BlockRealMatrix#copy()": -0.03693622258045712,
        "org.apache.commons.math3.linear$BlockRealMatrix#copyBlockPart(double[],int,int,int,int,int,double[],int,int,int)": -0.0329166559947438,
        "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)": -0.1641514083487714,
        "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)": -0.016203939800984214,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumn(int)": -0.0784321796528094,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()": -0.22802651953498532,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)": -0.028388598326265956,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)": -0.028388598326265956,
        "org.apache.commons.math3.linear$BlockRealMatrix#getData()": -0.14008766023030542,
        "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)": -0.1641514083487714,
        "org.apache.commons.math3.linear$BlockRealMatrix#getFrobeniusNorm()": -0.016203939800984214,
        "org.apache.commons.math3.linear$BlockRealMatrix#getNorm()": -0.08234229088494381,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRow(int)": -0.03693622258045712,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()": -0.22894432261229225,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)": -0.0329166559947438,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)": -0.028388598326265956,
        "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)": -0.0329166559947438,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)": -0.06081397268407166,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": -0.06081397268407166,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#operate(double[])": -0.11255687650747319,
        "org.apache.commons.math3.linear$BlockRealMatrix#preMultiply(double[])": -0.02306484858576534,
        "org.apache.commons.math3.linear$BlockRealMatrix#scalarAdd(double)": -0.0329166559947438,
        "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)": -0.016203939800984214,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])": -0.04714724995708144,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)": -0.02306484858576534,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)": -0.02306484858576534,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)": -0.02306484858576534,
        "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)": -0.08424184282820484,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRow(int,double[])": -0.0329166559947438,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)": -0.02306484858576534,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)": -0.02306484858576534,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)": -0.02306484858576534,
        "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)": -0.02306484858576534,
        "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)": -0.07435585937058932,
        "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": -0.08040656852884574,
        "org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])": -0.2012909587622695,
        "org.apache.commons.math3.linear$BlockRealMatrix#transpose()": -0.0678684175605891,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.05013814858127877,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.016203939800984214,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.028388598326265956,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.0329166559947438,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.016203939800984214,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.016203939800984214,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.016203939800984214,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.016203939800984214,
        "org.apache.commons.math3.linear$DefaultRealMatrixPreservingVisitor#DefaultRealMatrixPreservingVisitor()": 0.22387778632382116,
        "org.apache.commons.math3.linear$DefaultRealMatrixPreservingVisitor#end()": 0.22387778632382116,
        "org.apache.commons.math3.linear$DefaultRealMatrixPreservingVisitor#start(int,int,int,int,int,int)": 0.2273638100826626,
        "org.apache.commons.math3.linear$DefaultRealMatrixPreservingVisitor#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#EigenDecomposition(double[],double[])": -0.0329166559947438,
        "org.apache.commons.math3.linear$EigenDecomposition#EigenDecomposition(double[],double[],double)": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#EigenDecomposition(org.apache.commons.math3.linear.RealMatrix)": 1.7089506506866559,
        "org.apache.commons.math3.linear$EigenDecomposition#EigenDecomposition(org.apache.commons.math3.linear.RealMatrix,double)": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#cdiv(double,double,double,double)": -0.023064848585765407,
        "org.apache.commons.math3.linear$EigenDecomposition#findEigenVectors(double[][])": 1.7059507875464521,
        "org.apache.commons.math3.linear$EigenDecomposition#findEigenVectorsFromSchur(org.apache.commons.math3.linear.SchurTransformer)": -0.02306484858576534,
        "org.apache.commons.math3.linear$EigenDecomposition#getD()": 1.7477527958860517,
        "org.apache.commons.math3.linear$EigenDecomposition#getDeterminant()": -0.032916655994743804,
        "org.apache.commons.math3.linear$EigenDecomposition#getEigenvector(int)": -0.04714724995708144,
        "org.apache.commons.math3.linear$EigenDecomposition#getImagEigenvalue(int)": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#getImagEigenvalues()": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#getRealEigenvalue(int)": -0.047147249957081305,
        "org.apache.commons.math3.linear$EigenDecomposition#getRealEigenvalues()": -0.06081397268407174,
        "org.apache.commons.math3.linear$EigenDecomposition#getSolver()": -0.04714724995708144,
        "org.apache.commons.math3.linear$EigenDecomposition#getV()": 1.739593431471154,
        "org.apache.commons.math3.linear$EigenDecomposition#getVT()": -0.028388598326265956,
        "org.apache.commons.math3.linear$EigenDecomposition#hasComplexEigenvalues()": -0.04714724995708144,
        "org.apache.commons.math3.linear$EigenDecomposition#isSymmetric(org.apache.commons.math3.linear.RealMatrix,boolean)": 1.7089506506866559,
        "org.apache.commons.math3.linear$EigenDecomposition#transformToSchur(org.apache.commons.math3.linear.RealMatrix)": -0.02306484858576534,
        "org.apache.commons.math3.linear$EigenDecomposition#transformToTridiagonal(org.apache.commons.math3.linear.RealMatrix)": 1.7120136092848166,
        "org.apache.commons.math3.linear$EigenDecomposition$Solver#EigenDecomposition$Solver(double[],double[],org.apache.commons.math3.linear.ArrayRealVector[])": -0.047147249957081305,
        "org.apache.commons.math3.linear$EigenDecomposition$Solver#getInverse()": -0.04059459223577629,
        "org.apache.commons.math3.linear$EigenDecomposition$Solver#isNonSingular()": -0.047147249957081305,
        "org.apache.commons.math3.linear$EigenDecomposition$Solver#solve(org.apache.commons.math3.linear.RealMatrix)": -0.02306484858576534,
        "org.apache.commons.math3.linear$EigenDecomposition$Solver#solve(org.apache.commons.math3.linear.RealVector)": -0.02306484858576534,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)": -0.10952605750517708,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getExpectedColumnDimension()": -0.016203939800984214,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getExpectedRowDimension()": -0.016203939800984214,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getWrongColumnDimension()": -0.016203939800984214,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getWrongRowDimension()": -0.016203939800984214,
        "org.apache.commons.math3.linear$MatrixUtils#<clinit>()": 1.3552819416759623,
        "org.apache.commons.math3.linear$MatrixUtils#MatrixUtils()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)": -0.06558817068989344,
        "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)": -0.016203939800984214,
        "org.apache.commons.math3.linear$MatrixUtils#checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": 1.7233106208847908,
        "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)": 1.3805153239801355,
        "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)": 1.4025255938253385,
        "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": 1.6031743613232334,
        "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)": 1.3811549626163517,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)": -0.11552689658199461,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])": -0.03693622258045712,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": 1.6308894778458949,
        "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])": -0.016203939800984214,
        "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])": 1.7567608076735015,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)": -0.02306484858576534,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.Field,int,int)": -0.02306484858576534,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])": -0.016203939800984214,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldVector(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])": 1.7415678203471905,
        "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)": -0.1322763912811858,
        "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])": 1.5551609127029504,
        "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)": 1.620705135044715,
        "org.apache.commons.math3.linear$MatrixUtils#createRealVector(double[])": -0.016203939800984214,
        "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])": -0.016203939800984214,
        "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])": -0.016203939800984214,
        "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)": -0.016203939800984214,
        "org.apache.commons.math3.linear$MatrixUtils#deserializeRealVector(java.lang.Object,java.lang.String,java.io.ObjectInputStream)": -0.016203939800984214,
        "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)": -0.016203939800984214,
        "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)": -0.016203939800984214,
        "org.apache.commons.math3.linear$MatrixUtils#serializeRealVector(org.apache.commons.math3.linear.RealVector,java.io.ObjectOutputStream)": -0.016203939800984214,
        "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)": -0.016203939800984214,
        "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)": -0.016203939800984214,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#MatrixUtils$BigFractionMatrixConverter()": -0.06558817068989353,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()": -0.06558817068989344,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#start(int,int,int,int,int,int)": -0.06558817068989353,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#visit(int,int,org.apache.commons.math3.fraction.BigFraction)": -0.06558817068989353,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#MatrixUtils$FractionMatrixConverter()": -0.016203939800984113,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()": -0.016203939800984214,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#start(int,int,int,int,int,int)": -0.016203939800984113,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#visit(int,int,org.apache.commons.math3.fraction.Fraction)": -0.016203939800984113,
        "org.apache.commons.math3.linear$NonSquareMatrixException#NonSquareMatrixException(int,int)": -0.0632391923264984,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#NonSymmetricMatrixException(int,int,double)": -0.016203939800984214,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#getColumn()": 0.0,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#getRow()": 0.0,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#getThreshold()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)": -0.09668937911520925,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix)": -0.05013814858127877,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)": -0.02306484858576534,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)": -0.09499093785093282,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()": -0.02306484858576534,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)": -0.04397926444346742,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()": -0.09499093785093282,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)": -0.09151996363636246,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()": -0.09499093785093282,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)": -0.0329166559947438,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": -0.0329166559947438,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)": -0.09499093785093297,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)": -0.04059459223577629,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": -0.04059459223577629,
        "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()": -0.042718408888301806,
        "org.apache.commons.math3.linear$RealLinearOperator#isTransposable()": 0.0,
        "org.apache.commons.math3.linear$RealLinearOperator#operateTranspose(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat()": -0.016203939800984214,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": 1.3552819416759623,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)": -0.02659619882678743,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)": 1.3191902388001173,
        "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)": -0.07224720411394828,
        "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)": -0.07224720411394828,
        "org.apache.commons.math3.linear$RealMatrixFormat#getAvailableLocales()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getColumnSeparator()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()": -0.02177403536673206,
        "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()": 1.3552819416759623,
        "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)": 1.3191902388001173,
        "org.apache.commons.math3.linear$RealMatrixFormat#getPrefix()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowPrefix()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowSeparator()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowSuffix()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getSuffix()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)": -0.05830352583085804,
        "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)": -0.0678684175605891,
        "org.apache.commons.math3.linear$RealVector#RealVector()": -0.06910198603401929,
        "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)": -0.0329166559947438,
        "org.apache.commons.math3.linear$RealVector#addToEntry(int,double)": -0.04059459223577629,
        "org.apache.commons.math3.linear$RealVector#checkIndex(int)": -0.25465258146431136,
        "org.apache.commons.math3.linear$RealVector#checkIndices(int,int)": -0.08424184282820484,
        "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)": -0.15245487257886145,
        "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)": -0.1388079872714175,
        "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)": -0.05013814858127877,
        "org.apache.commons.math3.linear$RealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": -0.07008628528558182,
        "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)": -0.07008628528558182,
        "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)": -0.09151996363636246,
        "org.apache.commons.math3.linear$RealVector#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.linear$RealVector#getDistance(org.apache.commons.math3.linear.RealVector)": -0.0329166559947438,
        "org.apache.commons.math3.linear$RealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)": -0.0329166559947438,
        "org.apache.commons.math3.linear$RealVector#getL1Norm()": -0.02306484858576534,
        "org.apache.commons.math3.linear$RealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)": -0.0329166559947438,
        "org.apache.commons.math3.linear$RealVector#getLInfNorm()": -0.02306484858576534,
        "org.apache.commons.math3.linear$RealVector#getMaxIndex()": -0.03693622258045712,
        "org.apache.commons.math3.linear$RealVector#getMaxValue()": -0.03693622258045712,
        "org.apache.commons.math3.linear$RealVector#getMinIndex()": -0.03693622258045712,
        "org.apache.commons.math3.linear$RealVector#getMinValue()": -0.03693622258045712,
        "org.apache.commons.math3.linear$RealVector#getNorm()": -0.08040656852884574,
        "org.apache.commons.math3.linear$RealVector#hashCode()": 0.0,
        "org.apache.commons.math3.linear$RealVector#iterator()": -0.10326240667102661,
        "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)": -0.02306484858576534,
        "org.apache.commons.math3.linear$RealVector#mapAdd(double)": -0.028388598326265956,
        "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)": -0.0329166559947438,
        "org.apache.commons.math3.linear$RealVector#mapDivide(double)": -0.04397926444346742,
        "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)": -0.04397926444346742,
        "org.apache.commons.math3.linear$RealVector#mapMultiply(double)": -0.14636439073405264,
        "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)": -0.06081397268407166,
        "org.apache.commons.math3.linear$RealVector#mapSubtract(double)": -0.03693622258045712,
        "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)": -0.03693622258045712,
        "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": -0.08610746293267482,
        "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)": -0.03693622258045712,
        "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)": -0.0632391923264984,
        "org.apache.commons.math3.linear$RealVector#set(double)": -0.02306484858576534,
        "org.apache.commons.math3.linear$RealVector#sparseIterator()": -0.09668937911520925,
        "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)": -0.0329166559947438,
        "org.apache.commons.math3.linear$RealVector#toArray()": -0.028388598326265956,
        "org.apache.commons.math3.linear$RealVector#unitVector()": -0.03693622258045712,
        "org.apache.commons.math3.linear$RealVector#unitize()": -0.03693622258045712,
        "org.apache.commons.math3.linear$RealVector#unmodifiableRealVector(org.apache.commons.math3.linear.RealVector)": -0.09151996363636239,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": -0.0329166559947438,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": -0.04714724995708144,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": -0.0329166559947438,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": -0.04714724995708144,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": -0.02306484858576534,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": -0.0329166559947438,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": -0.02306484858576534,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": -0.0329166559947438,
        "org.apache.commons.math3.linear$RealVector$1#hasNext()": -0.1032624066710266,
        "org.apache.commons.math3.linear$RealVector$1#next()": -0.1032624066710266,
        "org.apache.commons.math3.linear$RealVector$1#remove()": -0.028388598326265946,
        "org.apache.commons.math3.linear$RealVector$2#add(org.apache.commons.math3.linear.RealVector)": -0.023064848585765407,
        "org.apache.commons.math3.linear$RealVector$2#addToEntry(int,double)": -0.023064848585765407,
        "org.apache.commons.math3.linear$RealVector$2#append(double)": -0.023064848585765407,
        "org.apache.commons.math3.linear$RealVector$2#append(org.apache.commons.math3.linear.RealVector)": -0.023064848585765407,
        "org.apache.commons.math3.linear$RealVector$2#combine(double,double,org.apache.commons.math3.linear.RealVector)": -0.023064848585765407,
        "org.apache.commons.math3.linear$RealVector$2#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": -0.023064848585765407,
        "org.apache.commons.math3.linear$RealVector$2#copy()": -0.023064848585765407,
        "org.apache.commons.math3.linear$RealVector$2#cosine(org.apache.commons.math3.linear.RealVector)": -0.023064848585765407,
        "org.apache.commons.math3.linear$RealVector$2#dotProduct(org.apache.commons.math3.linear.RealVector)": -0.023064848585765407,
        "org.apache.commons.math3.linear$RealVector$2#ebeDivide(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#ebeMultiply(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getDimension()": -0.04059459223577622,
        "org.apache.commons.math3.linear$RealVector$2#getDistance(org.apache.commons.math3.linear.RealVector)": -0.023064848585765407,
        "org.apache.commons.math3.linear$RealVector$2#getEntry(int)": -0.047147249957081305,
        "org.apache.commons.math3.linear$RealVector$2#getL1Distance(org.apache.commons.math3.linear.RealVector)": -0.023064848585765407,
        "org.apache.commons.math3.linear$RealVector$2#getL1Norm()": -0.023064848585765407,
        "org.apache.commons.math3.linear$RealVector$2#getLInfDistance(org.apache.commons.math3.linear.RealVector)": -0.023064848585765407,
        "org.apache.commons.math3.linear$RealVector$2#getLInfNorm()": -0.023064848585765407,
        "org.apache.commons.math3.linear$RealVector$2#getNorm()": -0.023064848585765407,
        "org.apache.commons.math3.linear$RealVector$2#getSubVector(int,int)": -0.023064848585765407,
        "org.apache.commons.math3.linear$RealVector$2#isInfinite()": -0.023064848585765407,
        "org.apache.commons.math3.linear$RealVector$2#isNaN()": -0.023064848585765407,
        "org.apache.commons.math3.linear$RealVector$2#iterator()": -0.032916655994743804,
        "org.apache.commons.math3.linear$RealVector$2#map(org.apache.commons.math3.analysis.UnivariateFunction)": -0.023064848585765407,
        "org.apache.commons.math3.linear$RealVector$2#mapAdd(double)": -0.023064848585765407,
        "org.apache.commons.math3.linear$RealVector$2#mapAddToSelf(double)": -0.023064848585765407,
        "org.apache.commons.math3.linear$RealVector$2#mapDivide(double)": -0.023064848585765407,
        "org.apache.commons.math3.linear$RealVector$2#mapDivideToSelf(double)": -0.023064848585765407,
        "org.apache.commons.math3.linear$RealVector$2#mapMultiply(double)": -0.023064848585765407,
        "org.apache.commons.math3.linear$RealVector$2#mapMultiplyToSelf(double)": -0.023064848585765407,
        "org.apache.commons.math3.linear$RealVector$2#mapSubtract(double)": -0.023064848585765407,
        "org.apache.commons.math3.linear$RealVector$2#mapSubtractToSelf(double)": -0.023064848585765407,
        "org.apache.commons.math3.linear$RealVector$2#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": -0.023064848585765407,
        "org.apache.commons.math3.linear$RealVector$2#outerProduct(org.apache.commons.math3.linear.RealVector)": -0.023064848585765407,
        "org.apache.commons.math3.linear$RealVector$2#set(double)": -0.028388598326265946,
        "org.apache.commons.math3.linear$RealVector$2#setEntry(int,double)": -0.023064848585765407,
        "org.apache.commons.math3.linear$RealVector$2#setSubVector(int,org.apache.commons.math3.linear.RealVector)": -0.023064848585765407,
        "org.apache.commons.math3.linear$RealVector$2#sparseIterator()": -0.023064848585765407,
        "org.apache.commons.math3.linear$RealVector$2#subtract(org.apache.commons.math3.linear.RealVector)": -0.032916655994743804,
        "org.apache.commons.math3.linear$RealVector$2#toArray()": -0.023064848585765407,
        "org.apache.commons.math3.linear$RealVector$2#unitVector()": -0.023064848585765407,
        "org.apache.commons.math3.linear$RealVector$2#unitize()": -0.023064848585765407,
        "org.apache.commons.math3.linear$RealVector$2$1#hasNext()": -0.032916655994743804,
        "org.apache.commons.math3.linear$RealVector$2$1#next()": -0.032916655994743804,
        "org.apache.commons.math3.linear$RealVector$2$1#remove()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$2#hasNext()": -0.023064848585765407,
        "org.apache.commons.math3.linear$RealVector$2$2#next()": -0.023064848585765407,
        "org.apache.commons.math3.linear$RealVector$2$2#remove()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#RealVector$2$UnmodifiableEntry(org.apache.commons.math3.linear.RealVector$2)": -0.04059459223577622,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#getValue()": -0.04059459223577622,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#setValue(double)": -0.032916655994743804,
        "org.apache.commons.math3.linear$RealVector$Entry#RealVector$Entry(org.apache.commons.math3.linear.RealVector)": -0.15602795729890984,
        "org.apache.commons.math3.linear$RealVector$Entry#getIndex()": -0.1400876602303056,
        "org.apache.commons.math3.linear$RealVector$Entry#getValue()": -0.13622268155136064,
        "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)": -0.15602795729890984,
        "org.apache.commons.math3.linear$RealVector$Entry#setValue(double)": -0.08610746293267482,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#RealVector$SparseEntryIterator(org.apache.commons.math3.linear.RealVector)": -0.09668937911520925,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)": -0.09668937911520925,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()": -0.09668937911520925,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()": -0.09326822168589181,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#remove()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat()": -0.04714724995708144,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)": 0.03793159863369244,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)": 1.3837180362605972,
        "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector)": -0.08040656852884574,
        "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector,java.lang.StringBuffer,java.text.FieldPosition)": -0.08040656852884574,
        "org.apache.commons.math3.linear$RealVectorFormat#getAvailableLocales()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#getFormat()": -0.023064848585765407,
        "org.apache.commons.math3.linear$RealVectorFormat#getInstance()": 1.3901579204997212,
        "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)": 1.3837180362605972,
        "org.apache.commons.math3.linear$RealVectorFormat#getPrefix()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#getSeparator()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#getSuffix()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String)": -0.09151996363636246,
        "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String,java.text.ParsePosition)": -0.10485528469753591,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#TriDiagonalTransformer(org.apache.commons.math3.linear.RealMatrix)": 1.6986991379373926,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getHouseholderVectorsRef()": 0.0,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getMainDiagonalRef()": 0.364687504867918,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getQ()": 1.7044731034180054,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getQT()": 1.7030095628652266,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getSecondaryDiagonalRef()": 0.364687504867918,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getT()": -0.03693622258045712,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#transform()": 1.7001230209009077,
        "org.apache.commons.math3.optimization$AbstractConvergenceChecker#<clinit>()": 1.6414508694427075,
        "org.apache.commons.math3.optimization$AbstractConvergenceChecker#AbstractConvergenceChecker()": 1.7338925370673253,
        "org.apache.commons.math3.optimization$AbstractConvergenceChecker#AbstractConvergenceChecker(double,double)": -0.1500397115123353,
        "org.apache.commons.math3.optimization$AbstractConvergenceChecker#getAbsoluteThreshold()": 0.31120538026800537,
        "org.apache.commons.math3.optimization$AbstractConvergenceChecker#getRelativeThreshold()": 0.3100621540243237,
        "org.apache.commons.math3.optimization$GoalType#<clinit>()": 1.6050766666604859,
        "org.apache.commons.math3.optimization$GoalType#GoalType(java.lang.String,int)": 0.2592902290335807,
        "org.apache.commons.math3.optimization$PointValuePair#PointValuePair(double[],double)": 1.6340157823259993,
        "org.apache.commons.math3.optimization$PointValuePair#PointValuePair(double[],double,boolean)": 1.6340157823259993,
        "org.apache.commons.math3.optimization$PointValuePair#getPoint()": 1.662793716585409,
        "org.apache.commons.math3.optimization$PointValuePair#getPointRef()": -0.09326822168589181,
        "org.apache.commons.math3.optimization$PointValuePair#writeReplace()": -0.016203939800984214,
        "org.apache.commons.math3.optimization$PointValuePair$DataTransferObject#PointValuePair$DataTransferObject(double[],double)": -0.016203939800984214,
        "org.apache.commons.math3.optimization$PointValuePair$DataTransferObject#readResolve()": -0.016203939800984214,
        "org.apache.commons.math3.optimization$SimpleValueChecker#SimpleValueChecker()": 1.739593431471154,
        "org.apache.commons.math3.optimization$SimpleValueChecker#SimpleValueChecker(double,double)": -0.10798639071518326,
        "org.apache.commons.math3.optimization$SimpleValueChecker#converged(int,org.apache.commons.math3.optimization.PointValuePair,org.apache.commons.math3.optimization.PointValuePair)": 1.693123620732651,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateOptimizer#BaseAbstractMultivariateOptimizer()": 0.0,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateOptimizer#BaseAbstractMultivariateOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)": 1.6535784491890109,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateOptimizer#computeObjectiveValue(double[])": 1.6675451274211386,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateOptimizer#getConvergenceChecker()": 0.3392969612474862,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateOptimizer#getEvaluations()": -0.09836471105636588,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateOptimizer#getGoalType()": 0.3217586897942336,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateOptimizer#getMaxEvaluations()": 1.7320588320290273,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateOptimizer#getStartPoint()": 0.31350865735790345,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateFunction,org.apache.commons.math3.optimization.GoalType,double[])": 1.6748753712287545,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateFunction,org.apache.commons.math3.optimization.GoalType,double[])": 1.6592950949848082,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateSimpleBoundsOptimizer#BaseAbstractMultivariateSimpleBoundsOptimizer()": 0.0,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateSimpleBoundsOptimizer#BaseAbstractMultivariateSimpleBoundsOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)": 1.710473942494823,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateSimpleBoundsOptimizer#getLowerBound()": 0.3725632955451589,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateSimpleBoundsOptimizer#getUpperBound()": 0.3725632955451589,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateSimpleBoundsOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateFunction,org.apache.commons.math3.optimization.GoalType,double[])": 1.8199999999999998,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateSimpleBoundsOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateFunction,org.apache.commons.math3.optimization.GoalType,double[],double[],double[])": 1.710473942494823,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#<clinit>()": 1.739593431471154,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#CMAESOptimizer()": 1.7969351514142347,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#CMAESOptimizer(int)": 1.7969351514142347,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#CMAESOptimizer(int,double[])": 0.0,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#CMAESOptimizer(int,double[],int,double,boolean,int,int,org.apache.commons.math3.random.RandomGenerator,boolean)": 1.739593431471154,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#CMAESOptimizer(int,double[],int,double,boolean,int,int,org.apache.commons.math3.random.RandomGenerator,boolean,org.apache.commons.math3.optimization.ConvergenceChecker)": 1.739593431471154,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#checkParameters()": 1.7456441406294108,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#copyColumn(org.apache.commons.math3.linear.RealMatrix,int,org.apache.commons.math3.linear.RealMatrix,int)": 1.7591860273159283,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#diag(org.apache.commons.math3.linear.RealMatrix)": 1.7591860273159283,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#divide(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix)": 1.7591860273159283,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#doOptimize()": 1.7456441406294108,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#eye(int,int)": 1.7591860273159283,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#getStatisticsDHistory()": 0.0,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#getStatisticsFitnessHistory()": 0.0,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#getStatisticsMeanHistory()": 0.0,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#getStatisticsSigmaHistory()": 0.0,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#initializeCMA(double[])": 1.7591860273159283,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#inverse(int[])": 1.7591860273159283,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#log(org.apache.commons.math3.linear.RealMatrix)": 1.7591860273159283,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#max(double[])": 1.7591860273159283,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#max(org.apache.commons.math3.linear.RealMatrix)": 1.7591860273159283,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#min(double[])": 1.7591860273159283,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#min(org.apache.commons.math3.linear.RealMatrix)": 1.7591860273159283,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#ones(int,int)": 1.7591860273159283,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#push(double[],double)": 1.7591860273159283,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#randn(int)": 0.0,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#randn1(int,int)": 1.7591860273159283,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#repmat(org.apache.commons.math3.linear.RealMatrix,int,int)": 1.7591860273159283,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#reverse(int[])": 1.7591860273159283,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#selectColumns(org.apache.commons.math3.linear.RealMatrix,int[])": 1.7591860273159283,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#sequence(double,double,double)": 1.7591860273159283,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#sortedIndices(double[])": 1.7591860273159283,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#sqrt(org.apache.commons.math3.linear.RealMatrix)": 1.7591860273159283,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#square(org.apache.commons.math3.linear.RealMatrix)": 1.7591860273159283,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#sumRows(org.apache.commons.math3.linear.RealMatrix)": 1.7591860273159283,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#times(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix)": 1.7591860273159283,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#triu(org.apache.commons.math3.linear.RealMatrix,int)": 1.7591860273159283,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#updateBD(double)": 1.7591860273159283,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#updateCovariance(boolean,org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix,int[],org.apache.commons.math3.linear.RealMatrix)": 1.7591860273159283,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#updateCovarianceDiagonalOnly(boolean,org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#updateEvolutionPaths(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix)": 1.7591860273159283,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#zeros(int,int)": 1.7591860273159283,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$DoubleIndex#CMAESOptimizer$DoubleIndex(double,int)": 0.41339958968902335,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$DoubleIndex#compareTo(org.apache.commons.math3.optimization.direct.CMAESOptimizer$DoubleIndex)": 0.41339958968902335,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$DoubleIndex#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$DoubleIndex#hashCode()": 0.0,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$FitnessFunction#CMAESOptimizer$FitnessFunction(org.apache.commons.math3.optimization.direct.CMAESOptimizer)": 0.41339958968902335,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$FitnessFunction#decode(double[])": 1.7591860273159283,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$FitnessFunction#encode(double[])": 1.7591860273159283,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$FitnessFunction#isFeasible(double[])": 0.0,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$FitnessFunction#penalty(double[],double[])": 1.7969351514142347,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$FitnessFunction#repair(double[])": 1.7969351514142347,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$FitnessFunction#repairAndDecode(double[])": 1.7591860273159283,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$FitnessFunction#setValueRange(double)": 0.41339958968902335,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$FitnessFunction#value(double[])": 1.7591860273159283,
        "org.apache.commons.math3.random$BitsStreamGenerator#BitsStreamGenerator()": -0.3037041568963289,
        "org.apache.commons.math3.random$BitsStreamGenerator#clear()": -0.3037041568963289,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextBoolean()": -0.08974478251377625,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextBytes(byte[])": -0.07435585937058932,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()": 1.372240297306174,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextFloat()": -0.08974478251377625,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()": 1.6675451274211386,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextInt()": -0.10326240667102661,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextInt(int)": -0.10485528469753591,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextLong()": -0.08974478251377625,
        "org.apache.commons.math3.random$MersenneTwister#<clinit>()": 0.26120329569155143,
        "org.apache.commons.math3.random$MersenneTwister#MersenneTwister()": 1.7357581571717953,
        "org.apache.commons.math3.random$MersenneTwister#MersenneTwister(int)": -0.1388079872714175,
        "org.apache.commons.math3.random$MersenneTwister#MersenneTwister(int[])": -0.016203939800984214,
        "org.apache.commons.math3.random$MersenneTwister#MersenneTwister(long)": -0.11699043713477342,
        "org.apache.commons.math3.random$MersenneTwister#next(int)": 1.6569918178949101,
        "org.apache.commons.math3.random$MersenneTwister#setSeed(int)": 1.6069897333184562,
        "org.apache.commons.math3.random$MersenneTwister#setSeed(int[])": 1.6535784491890109,
        "org.apache.commons.math3.random$MersenneTwister#setSeed(long)": 1.6547108353359903,
        "org.apache.commons.math3.util$CompositeFormat#CompositeFormat()": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#formatDouble(double,java.text.NumberFormat,java.lang.StringBuffer,java.text.FieldPosition)": -0.1763864388037213,
        "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()": 1.3429062445078386,
        "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)": -0.20807726538479077,
        "org.apache.commons.math3.util$CompositeFormat#parseAndIgnoreWhitespace(java.lang.String,java.text.ParsePosition)": -0.19526301007511837,
        "org.apache.commons.math3.util$CompositeFormat#parseFixedstring(java.lang.String,java.lang.String,java.text.ParsePosition)": -0.19322652763248782,
        "org.apache.commons.math3.util$CompositeFormat#parseNextCharacter(java.lang.String,java.text.ParsePosition)": -0.19526301007511848,
        "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,double,java.text.ParsePosition)": -0.0842418428282048,
        "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,java.text.NumberFormat,java.text.ParsePosition)": -0.19014503065213972,
        "org.apache.commons.math3.util$FastMath#<clinit>()": -1.1316720698913505,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0.0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": -0.016203939800984113,
        "org.apache.commons.math3.util$FastMath#abs(double)": -0.5716970066859023,
        "org.apache.commons.math3.util$FastMath#abs(float)": -0.023064848585765407,
        "org.apache.commons.math3.util$FastMath#abs(int)": -0.370210794481157,
        "org.apache.commons.math3.util$FastMath#abs(long)": -0.18577307326119674,
        "org.apache.commons.math3.util$FastMath#acos(double)": -0.08040656852884574,
        "org.apache.commons.math3.util$FastMath#acosh(double)": -0.02306484858576534,
        "org.apache.commons.math3.util$FastMath#asin(double)": -0.08234229088494381,
        "org.apache.commons.math3.util$FastMath#asinh(double)": -0.02306484858576534,
        "org.apache.commons.math3.util$FastMath#atan(double)": -0.08234229088494381,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": -0.17310831838103094,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": -0.15837847020391077,
        "org.apache.commons.math3.util$FastMath#atanh(double)": -0.02306484858576534,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": -0.11404921245354796,
        "org.apache.commons.math3.util$FastMath#ceil(double)": -0.3874246566210444,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": -0.06081397268407174,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": -0.023064848585765407,
        "org.apache.commons.math3.util$FastMath#cos(double)": 1.5095547646438656,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": 1.4560878988801673,
        "org.apache.commons.math3.util$FastMath#cosh(double)": -0.09151996363636246,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": -0.148821769248345,
        "org.apache.commons.math3.util$FastMath#exp(double)": -0.5995012940428656,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": -0.7183282308627548,
        "org.apache.commons.math3.util$FastMath#expm1(double)": -0.06558817068989344,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": -0.09499093785093297,
        "org.apache.commons.math3.util$FastMath#floor(double)": -0.6865065170847737,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": -0.1500397115123353,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": -0.023064848585765407,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": -0.1438772574055842,
        "org.apache.commons.math3.util$FastMath#log(double)": 1.1799144939696085,
        "org.apache.commons.math3.util$FastMath#log(double,double)": -0.016203939800984214,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": 1.063269998084007,
        "org.apache.commons.math3.util$FastMath#log10(double)": -0.13360125415185203,
        "org.apache.commons.math3.util$FastMath#log1p(double)": -0.46034996373750414,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0.0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": -0.06852189321196545,
        "org.apache.commons.math3.util$FastMath#max(float,float)": -0.023064848585765407,
        "org.apache.commons.math3.util$FastMath#max(int,int)": 0.00019954002033062412,
        "org.apache.commons.math3.util$FastMath#max(long,long)": -0.016203939800984113,
        "org.apache.commons.math3.util$FastMath#min(double,double)": -0.32928144950551386,
        "org.apache.commons.math3.util$FastMath#min(float,float)": -0.023064848585765407,
        "org.apache.commons.math3.util$FastMath#min(int,int)": -0.09834120402767244,
        "org.apache.commons.math3.util$FastMath#min(long,long)": -0.1032624066710266,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": -0.06786841756058926,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": -0.028388598326265946,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": -0.0329166559947438,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": -0.016203939800984214,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": 0.08339317435360993,
        "org.apache.commons.math3.util$FastMath#polySine(double)": 0.08339317435360993,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": -0.5479465804135186,
        "org.apache.commons.math3.util$FastMath#pow(double,int)": -0.2665142145856574,
        "org.apache.commons.math3.util$FastMath#random()": -0.0743558593705893,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": -0.03693622258045712,
        "org.apache.commons.math3.util$FastMath#rint(double)": -0.0784321796528094,
        "org.apache.commons.math3.util$FastMath#round(double)": -0.07641632712479111,
        "org.apache.commons.math3.util$FastMath#round(float)": -0.028388598326265956,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": -0.12687637926734885,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": -0.023064848585765407,
        "org.apache.commons.math3.util$FastMath#signum(double)": -0.05830352583085818,
        "org.apache.commons.math3.util$FastMath#signum(float)": -0.023064848585765407,
        "org.apache.commons.math3.util$FastMath#sin(double)": 1.4456208487263986,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": 1.4414763312393215,
        "org.apache.commons.math3.util$FastMath#sinh(double)": -0.09151996363636246,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": -0.5784945398233668,
        "org.apache.commons.math3.util$FastMath#tan(double)": -0.08794116797097268,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": -0.08794116797097268,
        "org.apache.commons.math3.util$FastMath#tanh(double)": -0.05830352583085804,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": -0.0329166559947438,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": -0.0329166559947438,
        "org.apache.commons.math3.util$FastMath#ulp(double)": -0.3119750793046142,
        "org.apache.commons.math3.util$FastMath#ulp(float)": -0.016203939800984214,
        "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double,double)": 0.14345087347051233,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getK()": 0.14345087347051233,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()": 0.14345087347051233,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()": 0.14345087347051233,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": -0.7100351542662966,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": -0.7079560651437562,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": 1.0708905570486569,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0.0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()": -0.3231897765377635,
        "org.apache.commons.math3.util$FastMathLiteralArrays#FastMathLiteralArrays()": 0.0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()": -0.7100351542662966,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()": -0.7100351542662966,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()": -0.7079560651437562,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()": -0.7079560651437562,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()": 1.0708905570486569,
        "org.apache.commons.math3.util$Incrementor#Incrementor()": 1.2871683022863751,
        "org.apache.commons.math3.util$Incrementor#Incrementor(int)": 1.254835999576489,
        "org.apache.commons.math3.util$Incrementor#Incrementor(int,org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback)": 1.2539510027907372,
        "org.apache.commons.math3.util$Incrementor#canIncrement()": -0.023064848585765407,
        "org.apache.commons.math3.util$Incrementor#getCount()": -0.2468497522904325,
        "org.apache.commons.math3.util$Incrementor#getMaximalCount()": 0.3741955535155056,
        "org.apache.commons.math3.util$Incrementor#incrementCount()": -0.05978747491043224,
        "org.apache.commons.math3.util$Incrementor#incrementCount(int)": -0.016203939800984214,
        "org.apache.commons.math3.util$Incrementor#resetCount()": -0.07084063935910112,
        "org.apache.commons.math3.util$Incrementor#setMaximalCount(int)": -0.04981146859750607,
        "org.apache.commons.math3.util$Incrementor$1#trigger(int)": -0.07224720411394836,
        "org.apache.commons.math3.util$MathArrays#MathArrays()": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[])": -0.12130086206260735,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": -0.12271236837502059,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)": -0.2261839664797636,
        "org.apache.commons.math3.util$MathArrays#copyOf(double[])": -0.10642969814184203,
        "org.apache.commons.math3.util$MathArrays#copyOf(double[],int)": -0.1438772574055842,
        "org.apache.commons.math3.util$MathArrays#copyOf(int[])": -0.04059459223577629,
        "org.apache.commons.math3.util$MathArrays#copyOf(int[],int)": 1.7415678203471905,
        "org.apache.commons.math3.util$MathArrays#distance(double[],double[])": -0.016203939800984214,
        "org.apache.commons.math3.util$MathArrays#distance(int[],int[])": -0.04059459223577629,
        "org.apache.commons.math3.util$MathArrays#distance1(double[],double[])": -0.016203939800984214,
        "org.apache.commons.math3.util$MathArrays#distance1(int[],int[])": -0.016203939800984214,
        "org.apache.commons.math3.util$MathArrays#distanceInf(double[],double[])": -0.016203939800984214,
        "org.apache.commons.math3.util$MathArrays#distanceInf(int[],int[])": -0.016203939800984214,
        "org.apache.commons.math3.util$MathArrays#equals(double[],double[])": -0.016203939800984214,
        "org.apache.commons.math3.util$MathArrays#equals(float[],float[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(double[],double[])": -0.03693622258045712,
        "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(float[],float[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": -0.016203939800984214,
        "org.apache.commons.math3.util$MathArrays#isMonotonic(java.lang.Comparable[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": -0.016203939800984113,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)": -0.12549977078433416,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)": -0.12687637926734885,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double,double,double)": -0.028388598326265946,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double[],double[])": -0.028388598326265956,
        "org.apache.commons.math3.util$MathArrays#normalizeArray(double[],double)": -0.02306484858576534,
        "org.apache.commons.math3.util$MathArrays#safeNorm(double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])": -0.05013814858127877,
        "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])": -0.05013814858127877,
        "org.apache.commons.math3.util$MathArrays$1#compare(org.apache.commons.math3.util.Pair,org.apache.commons.math3.util.Pair)": -0.047147249957081305,
        "org.apache.commons.math3.util$MathArrays$2#<clinit>()": -0.22618396647976358,
        "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()": -0.23077310102871035,
        "org.apache.commons.math3.util$MathArrays$OrderDirection#MathArrays$OrderDirection(java.lang.String,int)": -0.2307731010287104,
        "org.apache.commons.math3.util$MathUtils#MathUtils()": 0.0,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double)": -0.07008628528558182,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double[])": -0.016203939800984214,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)": 1.1677368963645265,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.15954463844705932,
        "org.apache.commons.math3.util$MathUtils#copySign(byte,byte)": -0.0329166559947438,
        "org.apache.commons.math3.util$MathUtils#copySign(int,int)": -0.0329166559947438,
        "org.apache.commons.math3.util$MathUtils#copySign(long,long)": -0.02306484858576534,
        "org.apache.commons.math3.util$MathUtils#copySign(short,short)": -0.02306484858576534,
        "org.apache.commons.math3.util$MathUtils#hash(double)": -0.12130086206260726,
        "org.apache.commons.math3.util$MathUtils#hash(double[])": -0.05013814858127877,
        "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)": -0.10485528469753591,
        "org.apache.commons.math3.util$MathUtils#reduce(double,double,double)": -0.03693622258045712,
        "org.apache.commons.math3.util$Pair#Pair(java.lang.Object,java.lang.Object)": 0.1331806933283205,
        "org.apache.commons.math3.util$Pair#Pair(org.apache.commons.math3.util.Pair)": 0.0,
        "org.apache.commons.math3.util$Pair#equals(java.lang.Object)": -0.016203939800984214,
        "org.apache.commons.math3.util$Pair#getFirst()": -0.1697874416445908,
        "org.apache.commons.math3.util$Pair#getKey()": 0.22387778632382116,
        "org.apache.commons.math3.util$Pair#getSecond()": -0.1697874416445908,
        "org.apache.commons.math3.util$Pair#getValue()": 0.26216394326155046,
        "org.apache.commons.math3.util$Pair#hashCode()": -0.016203939800984214,
        "org.apache.commons.math3.util$Precision#<clinit>()": -0.3296463790619505,
        "org.apache.commons.math3.util$Precision#Precision()": 0.0,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,double)": 1.6972876316249792,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,int)": -0.08794116797097268,
        "org.apache.commons.math3.util$Precision#equals(double,double)": -0.23168412281637293,
        "org.apache.commons.math3.util$Precision#equals(double,double,double)": 1.3959942460763184,
        "org.apache.commons.math3.util$Precision#equals(double,double,int)": 1.1924123929127224,
        "org.apache.commons.math3.util$Precision#equals(float,float)": -0.016203939800984214,
        "org.apache.commons.math3.util$Precision#equals(float,float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(float,float,int)": -0.16300818210508972,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)": -0.2158758157258603,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)": -0.12271236837502059,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)": -0.016203939800984214,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)": -0.16185938304528907,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsWithRelativeTolerance(double,double,double)": -0.016203939800984214,
        "org.apache.commons.math3.util$Precision#representableDelta(double,double)": -0.016203939800984113,
        "org.apache.commons.math3.util$Precision#round(double,int)": -0.016203939800984214,
        "org.apache.commons.math3.util$Precision#round(double,int,int)": -0.016203939800984113,
        "org.apache.commons.math3.util$Precision#round(float,int)": -0.016203939800984214,
        "org.apache.commons.math3.util$Precision#round(float,int,int)": -0.016203939800984214,
        "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)": -0.016203939800984214
    },
    "Math-2": {
        "org.apache.commons.math3.distribution$AbstractIntegerDistribution#AbstractIntegerDistribution()": 0.0,
        "org.apache.commons.math3.distribution$AbstractIntegerDistribution#AbstractIntegerDistribution(org.apache.commons.math3.random.RandomGenerator)": 1.506009477312018,
        "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)": -0.1352010527184928,
        "org.apache.commons.math3.distribution$AbstractIntegerDistribution#cumulativeProbability(int,int)": -0.07199153792597528,
        "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)": 1.662679082097033,
        "org.apache.commons.math3.distribution$AbstractIntegerDistribution#reseedRandomGenerator(long)": -0.07199153792597528,
        "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()": 1.6981571064462646,
        "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)": -0.044474109454628805,
        "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)": 1.6787478963836442,
        "org.apache.commons.math3.distribution$HypergeometricDistribution#HypergeometricDistribution(int,int,int)": 1.7354977856859541,
        "org.apache.commons.math3.distribution$HypergeometricDistribution#HypergeometricDistribution(org.apache.commons.math3.random.RandomGenerator,int,int,int)": 1.7354977856859541,
        "org.apache.commons.math3.distribution$HypergeometricDistribution#calculateNumericalVariance()": 1.751924269068,
        "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)": -0.07573820778242031,
        "org.apache.commons.math3.distribution$HypergeometricDistribution#getDomain(int,int,int)": -0.07755538005432012,
        "org.apache.commons.math3.distribution$HypergeometricDistribution#getLowerDomain(int,int,int)": -0.07755538005432012,
        "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumberOfSuccesses()": 0.40222202444711985,
        "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalMean()": 1.751924269068,
        "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalVariance()": 1.751924269068,
        "org.apache.commons.math3.distribution$HypergeometricDistribution#getPopulationSize()": 0.40222202444711985,
        "org.apache.commons.math3.distribution$HypergeometricDistribution#getSampleSize()": 0.40222202444711985,
        "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportLowerBound()": 1.751924269068,
        "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportUpperBound()": 1.751924269068,
        "org.apache.commons.math3.distribution$HypergeometricDistribution#getUpperDomain(int,int)": -0.07755538005432012,
        "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)": -0.07005641568742345,
        "org.apache.commons.math3.distribution$HypergeometricDistribution#isSupportConnected()": 0.0,
        "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)": -0.07755538005432012,
        "org.apache.commons.math3.distribution$HypergeometricDistribution#upperCumulativeProbability(int)": -0.02680283802129175,
        "org.apache.commons.math3.distribution$SaddlePointExpansion#<clinit>()": -0.1044758916290777,
        "org.apache.commons.math3.distribution$SaddlePointExpansion#SaddlePointExpansion()": 0.0,
        "org.apache.commons.math3.distribution$SaddlePointExpansion#getDeviancePart(double,double)": -0.10304868299603112,
        "org.apache.commons.math3.distribution$SaddlePointExpansion#getStirlingError(double)": -0.10160599139856462,
        "org.apache.commons.math3.distribution$SaddlePointExpansion#logBinomialProbability(int,int,double,double)": -0.08450221431404584,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.6661780344266013,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": -0.04728897789429265,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": -0.021782199143962178,
        "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()": -0.5805531829235164,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.5805531829235167,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": -0.059610836270474366,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": -0.14655882286530908,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.17452945926442165,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": -0.14209421148347356,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": -0.01530813704807854,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$NotANumberException#NotANumberException()": -0.06396168169242812,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])": -0.047288977894292664,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.07388447532628448,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)": -0.07573820778242031,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": -0.05497024279264036,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)": -0.12310122866287118,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": -0.16044970949971535,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)": -0.10160599139856462,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.22383673374280139,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getBoundIsAllowed()": -0.01530813704807854,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getMax()": -0.01530813704807854,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": -0.18412961594894947,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.2988137016877894,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": -0.026802838021291686,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": -0.026802838021291686,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(java.lang.Number,java.lang.Number,java.lang.Number)": -0.1180081073868563,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)": -0.2617908811144568,
        "org.apache.commons.math3.exception$OutOfRangeException#getHi()": -0.01530813704807854,
        "org.apache.commons.math3.exception$OutOfRangeException#getLo()": -0.01530813704807854,
        "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int)": 1.2214250343192243,
        "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int,int)": -0.39258530179850626,
        "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int,int[])": 1.0078262580529227,
        "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int,long)": -0.6378411098083402,
        "org.apache.commons.math3.random$AbstractWell#setSeed(int)": -0.06807573093200006,
        "org.apache.commons.math3.random$AbstractWell#setSeed(int[])": 1.0078262580529227,
        "org.apache.commons.math3.random$AbstractWell#setSeed(long)": 1.0443493581046952,
        "org.apache.commons.math3.random$BitsStreamGenerator#BitsStreamGenerator()": -0.3804162434164192,
        "org.apache.commons.math3.random$BitsStreamGenerator#clear()": -0.3804162434164192,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextBoolean()": -0.08616759074075342,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextBytes(byte[])": -0.07199153792597528,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()": 1.4065357813973856,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextFloat()": -0.08616759074075342,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()": -0.18412961594894947,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextInt()": -0.12558965070788083,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextInt(int)": -0.21114081925201816,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextLong()": -0.11539875258550814,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextLong(long)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#RandomDataGenerator()": -0.3117436244006059,
        "org.apache.commons.math3.random$RandomDataGenerator#RandomDataGenerator(org.apache.commons.math3.random.RandomGenerator)": -0.5592219632981423,
        "org.apache.commons.math3.random$RandomDataGenerator#getNatural(int)": -0.08280995336079533,
        "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()": -0.6070062945959787,
        "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()": -0.07199153792597528,
        "org.apache.commons.math3.random$RandomDataGenerator#initRan()": -0.6055219765784808,
        "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)": -0.05497024279264036,
        "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)": -0.05497024279264036,
        "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)": -0.05497024279264036,
        "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)": -0.05497024279264036,
        "org.apache.commons.math3.random$RandomDataGenerator#nextExponential(double)": -0.05961083627047442,
        "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)": -0.05497024279264036,
        "org.apache.commons.math3.random$RandomDataGenerator#nextGamma(double,double)": -0.05497024279264036,
        "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)": -0.05961083627047442,
        "org.apache.commons.math3.random$RandomDataGenerator#nextHexString(int)": -0.05497024279264036,
        "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)": -0.05497024279264036,
        "org.apache.commons.math3.random$RandomDataGenerator#nextInt(int,int)": -0.14433886236434126,
        "org.apache.commons.math3.random$RandomDataGenerator#nextLong(long,long)": -0.15836863172938298,
        "org.apache.commons.math3.random$RandomDataGenerator#nextLong(org.apache.commons.math3.random.RandomGenerator,long)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)": -0.05497024279264036,
        "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)": -0.08280995336079519,
        "org.apache.commons.math3.random$RandomDataGenerator#nextPoisson(double)": -0.07933835227513374,
        "org.apache.commons.math3.random$RandomDataGenerator#nextSample(java.util.Collection,int)": -0.05733083178611333,
        "org.apache.commons.math3.random$RandomDataGenerator#nextSecureHexString(int)": -0.05733083178611333,
        "org.apache.commons.math3.random$RandomDataGenerator#nextSecureInt(int,int)": -0.03107112967950949,
        "org.apache.commons.math3.random$RandomDataGenerator#nextSecureLong(long,long)": -0.06396168169242812,
        "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)": -0.05497024279264036,
        "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double)": -0.20328462665651056,
        "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)": -0.20328462665651056,
        "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)": -0.05497024279264036,
        "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)": -0.05497024279264036,
        "org.apache.commons.math3.random$RandomDataGenerator#reSeed()": -0.05497024279264036,
        "org.apache.commons.math3.random$RandomDataGenerator#reSeed(long)": -0.5995694515791958,
        "org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure()": -0.05497024279264036,
        "org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure(long)": -0.05497024279264036,
        "org.apache.commons.math3.random$RandomDataGenerator#setSecureAlgorithm(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#shuffle(int[],int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#RandomDataImpl()": 1.1816744131431935,
        "org.apache.commons.math3.random$RandomDataImpl#RandomDataImpl(org.apache.commons.math3.random.RandomGenerator)": -0.047288977894292664,
        "org.apache.commons.math3.random$RandomDataImpl#getDelegate()": -0.026802838021291686,
        "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)": -0.02178219914396212,
        "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)": -0.02178219914396212,
        "org.apache.commons.math3.random$RandomDataImpl#nextHexString(int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextInt(int,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)": -0.015308137048078603,
        "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)": -0.015308137048078603,
        "org.apache.commons.math3.random$RandomDataImpl#nextSecureHexString(int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextSecureInt(int,int)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextSecureLong(long,long)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextT(double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)": -0.02178219914396212,
        "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#reSeed()": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#reSeed(long)": -0.11670892658694822,
        "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure()": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure(long)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#setSecureAlgorithm(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.math3.random$Well19937c#Well19937c()": 1.2214250343192243,
        "org.apache.commons.math3.random$Well19937c#Well19937c(int)": -0.16353667119390083,
        "org.apache.commons.math3.random$Well19937c#Well19937c(int[])": -0.015308137048078603,
        "org.apache.commons.math3.random$Well19937c#Well19937c(long)": -0.6075007317237986,
        "org.apache.commons.math3.random$Well19937c#next(int)": 0.22858622303588072,
        "org.apache.commons.math3.util$FastMath#<clinit>()": -1.2793202535106154,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0.0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": -0.04728897789429265,
        "org.apache.commons.math3.util$FastMath#abs(double)": -1.2084654096880394,
        "org.apache.commons.math3.util$FastMath#abs(float)": -0.021782199143962178,
        "org.apache.commons.math3.util$FastMath#abs(int)": -0.35157090114163303,
        "org.apache.commons.math3.util$FastMath#abs(long)": -0.6902909785032847,
        "org.apache.commons.math3.util$FastMath#acos(double)": -0.0986716560387559,
        "org.apache.commons.math3.util$FastMath#acosh(double)": -0.03485863000460692,
        "org.apache.commons.math3.util$FastMath#asin(double)": -0.10014720148718369,
        "org.apache.commons.math3.util$FastMath#asinh(double)": -0.03485863000460692,
        "org.apache.commons.math3.util$FastMath#atan(double)": -0.10304868299603112,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": -0.20328462665651056,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": -0.16859421190524523,
        "org.apache.commons.math3.util$FastMath#atanh(double)": -0.03485863000460692,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": -0.11274402497359573,
        "org.apache.commons.math3.util$FastMath#ceil(double)": -0.3307579783788576,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": -0.07933835227513386,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": -0.021782199143962178,
        "org.apache.commons.math3.util$FastMath#cos(double)": -0.3470754845678354,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": -0.3980064367342311,
        "org.apache.commons.math3.util$FastMath#cosh(double)": -0.09566743513121984,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": -0.16557243852574288,
        "org.apache.commons.math3.util$FastMath#exp(double)": -0.6237251654781207,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": -0.7585105116291723,
        "org.apache.commons.math3.util$FastMath#expm1(double)": -0.06807573093200006,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": -0.1044758916290777,
        "org.apache.commons.math3.util$FastMath#floor(double)": -0.6060169173396728,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": -0.15414803443338965,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": -0.021782199143962178,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": -0.14875508745854032,
        "org.apache.commons.math3.util$FastMath#log(double)": -0.6680815987094535,
        "org.apache.commons.math3.util$FastMath#log(double,double)": -0.015308137048078603,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": -0.7984379208958093,
        "org.apache.commons.math3.util$FastMath#log10(double)": -0.12558965070788083,
        "org.apache.commons.math3.util$FastMath#log1p(double)": -0.47435824849218255,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0.0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": -0.6996569529032737,
        "org.apache.commons.math3.util$FastMath#max(float,float)": -0.021782199143962178,
        "org.apache.commons.math3.util$FastMath#max(int,int)": -0.08347142640331195,
        "org.apache.commons.math3.util$FastMath#max(long,long)": -0.05733083178611342,
        "org.apache.commons.math3.util$FastMath#min(double,double)": -0.4704916842424609,
        "org.apache.commons.math3.util$FastMath#min(float,float)": -0.021782199143962178,
        "org.apache.commons.math3.util$FastMath#min(int,int)": -0.2444938303300329,
        "org.apache.commons.math3.util$FastMath#min(long,long)": -0.11800810738685641,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": -0.06181875267418491,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": -0.026802838021291686,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": -0.02680283802129175,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": -0.015308137048078603,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": -0.42458104809286623,
        "org.apache.commons.math3.util$FastMath#polySine(double)": -0.42458104809286623,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": -0.5805531829235167,
        "org.apache.commons.math3.util$FastMath#pow(double,int)": -0.28678166549154427,
        "org.apache.commons.math3.util$FastMath#random()": -0.07005641568742349,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": -0.03485863000460692,
        "org.apache.commons.math3.util$FastMath#rint(double)": -0.14655882286530908,
        "org.apache.commons.math3.util$FastMath#round(double)": -0.07933835227513374,
        "org.apache.commons.math3.util$FastMath#round(float)": -0.015308137048078603,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": -0.1363673715112177,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": -0.021782199143962178,
        "org.apache.commons.math3.util$FastMath#signum(double)": -0.059610836270474366,
        "org.apache.commons.math3.util$FastMath#signum(float)": -0.021782199143962178,
        "org.apache.commons.math3.util$FastMath#sin(double)": -0.40696019320604215,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": -0.41110503829773337,
        "org.apache.commons.math3.util$FastMath#sinh(double)": -0.09566743513121984,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": -0.6834790455238696,
        "org.apache.commons.math3.util$FastMath#tan(double)": -0.09101609710595887,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": -0.09101609710595887,
        "org.apache.commons.math3.util$FastMath#tanh(double)": -0.0618187526741849,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": -0.03107112967950949,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": -0.03107112967950949,
        "org.apache.commons.math3.util$FastMath#ulp(double)": -0.3227692841855615,
        "org.apache.commons.math3.util$FastMath#ulp(float)": -0.015308137048078603,
        "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)": -0.35983993072827447,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getK()": -0.35983993072827447,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()": -0.35983993072827447,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()": -0.35983993072827447,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": -0.7512504621845207,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": -0.7489763128194158,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": -0.7895304492525049,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0.0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()": -0.845502828041024,
        "org.apache.commons.math3.util$FastMathLiteralArrays#FastMathLiteralArrays()": 0.0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()": -0.7512504621845207,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()": -0.7512504621845207,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()": -0.7489763128194158,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()": -0.7489763128194158,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()": -0.7895304492525049
    },
    "Math-20": {
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)": -0.23824786107262683,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)": -0.2557781954678868,
        "org.apache.commons.math3.exception$DimensionMismatchException#getDimension()": -0.028414589174350358,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": -0.05574910201788219,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.11563965561730524,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": -0.016218613418313765,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.6359467073327784,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": -0.04402006315066198,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.5554967415132455,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": -0.060871142379363974,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": -0.12283266862400688,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.1489698873600258,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": -0.12141967688186983,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": -0.016218613418313765,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int)": 0.0,
        "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int,java.lang.Class)": -0.06087114237936406,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()": -0.0723157021111624,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.0723157021111624,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)": -0.07850687286792468,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.07850687286792468,
        "org.apache.commons.math3.exception$MaxCountExceededException#getMax()": -0.060871142379363974,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(java.lang.Integer[],java.lang.Integer[])": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])": -0.10963255848748037,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getExpectedDimension(int)": -0.016218613418313765,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getExpectedDimensions()": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getWrongDimension(int)": -0.016218613418313765,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getWrongDimensions()": 0.0,
        "org.apache.commons.math3.exception$NoDataException#NoDataException()": -0.055749102017882114,
        "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)": -0.08983092348635378,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int)": -0.01621861341831379,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int,org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": -0.06793255764879033,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getDirection()": -0.016218613418313765,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getIndex()": -0.016218613418313765,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getPrevious()": -0.016218613418313765,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getStrict()": -0.016218613418313765,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])": -0.044020063150661974,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.0723157021111624,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)": -0.05303029771422786,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": -0.05835823033646827,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)": -0.10653298456253268,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": -0.16317167212960756,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": -0.11855612412778672,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.1538057161489303,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)": -0.09508243703667155,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.21130298151031754,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getBoundIsAllowed()": -0.016218613418313765,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getMax()": -0.016218613418313765,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": -0.1489698873600258,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.27999602968022863,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": -0.028414589174350358,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": -0.028414589174350358,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(java.lang.Number,java.lang.Number,java.lang.Number)": -0.09508243703667155,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)": -0.26174429438034996,
        "org.apache.commons.math3.exception$OutOfRangeException#getHi()": -0.016218613418313765,
        "org.apache.commons.math3.exception$OutOfRangeException#getLo()": -0.016218613418313765,
        "org.apache.commons.math3.exception$TooManyEvaluationsException#TooManyEvaluationsException(java.lang.Number)": -0.06329875122719045,
        "org.apache.commons.math3.exception$ZeroException#ZeroException()": -0.01621861341831379,
        "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.05303029771422786,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix()": -0.023085866045208903,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field)": -0.15380571614893013,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)": -0.18826331090508616,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)": -0.03294691083255011,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)": -0.1477435145085253,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)": -0.2044703844458653,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkAdditionCompatible(org.apache.commons.math3.linear.FieldMatrix)": -0.05303029771422786,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)": -0.21130298151031754,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkMultiplicationCompatible(org.apache.commons.math3.linear.FieldMatrix)": -0.0723157021111624,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)": -0.21130298151031754,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)": -0.05303029771422786,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int[],int[])": -0.03697028806298293,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubtractionCompatible(org.apache.commons.math3.linear.FieldMatrix)": -0.03294691083255011,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])": -0.023085866045209076,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int[],int[],org.apache.commons.math3.FieldElement[][])": -0.023085866045209076,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#equals(java.lang.Object)": -0.09845967213190664,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[][])": -0.1754752954178125,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumn(int)": -0.05303029771422786,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)": -0.028414589174350344,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnVector(int)": -0.04063214633805634,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getData()": -0.023085866045209076,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()": -0.2160980169623128,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRow(int)": -0.044020063150661974,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)": -0.03294691083255011,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowVector(int)": -0.028414589174350344,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)": -0.023085866045209076,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])": -0.028414589174350344,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getTrace()": -0.028414589174350344,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#hashCode()": -0.028414589174350344,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#isSquare()": -0.10809129200634507,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)": -0.05303029771422786,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": -0.023085866045209076,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.linear.FieldVector)": -0.028414589174350344,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)": -0.01621861341831379,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": -0.01621861341831379,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)": -0.028414589174350344,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)": -0.023085866045209076,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)": -0.023085866045209076,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])": -0.01621861341831379,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": -0.01621861341831379,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)": -0.01621861341831379,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])": -0.01621861341831379,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": -0.01621861341831379,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)": -0.01621861341831379,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": -0.023085866045209076,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)": -0.01621861341831379,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#toString()": -0.023085866045209076,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()": -0.04063214633805634,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.01621861341831379,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.01621861341831379,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.01621861341831379,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.01621861341831379,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.028414589174350344,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.01621861341831379,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.08242092416179436,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.023085866045209076,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.01621861341831379,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.023085866045209076,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$1#visit(int,int,org.apache.commons.math3.FieldElement)": -0.028414589174350358,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$2#start(int,int,int,int,int,int)": -0.023085866045208903,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$2#visit(int,int,org.apache.commons.math3.FieldElement)": -0.023085866045208903,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$3#visit(int,int,org.apache.commons.math3.FieldElement)": -0.04063214633805634,
        "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()": 1.3264807453862135,
        "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()": 1.451481240156796,
        "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)": 1.3870959671087602,
        "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)": 1.7520674423512097,
        "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])": -0.08618990705079421,
        "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])": -0.023085866045209076,
        "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)": -0.12836817670572098,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)": 1.7166375847093847,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)": 1.7520674423512097,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)": -0.06793255764879033,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getData()": -0.023085866045209076,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()": 1.7591288576206359,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()": -0.1620216218566193,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)": 1.6985803231181302,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)": -0.03294691083255011,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)": -0.09160791427278164,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)": -0.05303029771422786,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])": -0.028414589174350344,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()": -0.028414589174350344,
        "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()": -0.044020063150661974,
        "org.apache.commons.math3.linear$AbstractRealMatrix#isSquare()": 1.5926586532036935,
        "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": 1.6327799279132174,
        "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])": -0.023085866045209076,
        "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)": -0.11115743538768101,
        "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)": -0.023085866045209076,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])": -0.01621861341831379,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)": -0.028414589174350344,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)": 1.7567012487728095,
        "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)": 1.7520674423512097,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])": -0.03697028806298293,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)": -0.023085866045209076,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)": 1.7414931271320753,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])": -0.01621861341831379,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)": -0.01621861341831379,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)": -0.09335795798289866,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)": -0.023085866045209076,
        "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": 1.6556838553819648,
        "org.apache.commons.math3.linear$AbstractRealMatrix#toString()": -0.04063214633805634,
        "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()": 1.5781846239248134,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.01621861341831379,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.01621861341831379,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.04719110008226321,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.01621861341831379,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.03697028806298293,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.01621861341831379,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 1.5764128868230816,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.08432239665164784,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.01621861341831379,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.023085866045209076,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#end()": -0.16202162185661928,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#start(int,int,int,int,int,int)": -0.16202162185661928,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#visit(int,int,double)": -0.16202162185661928,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#end()": 0.4133424199937311,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#start(int,int,int,int,int,int)": 0.4133424199937311,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#visit(int,int,double)": 0.4133424199937311,
        "org.apache.commons.math3.linear$AbstractRealMatrix$3#visit(int,int,double)": -0.028414589174350358,
        "org.apache.commons.math3.linear$AbstractRealMatrix$4#start(int,int,int,int,int,int)": -0.08618990705079432,
        "org.apache.commons.math3.linear$AbstractRealMatrix$4#visit(int,int,double)": -0.08618990705079432,
        "org.apache.commons.math3.linear$AbstractRealMatrix$5#visit(int,int,double)": 0.2323981862979082,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field)": -0.023085866045209076,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,int,int)": -0.10336241529061525,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])": -0.12423365784256961,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)": -0.09678261954740237,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])": -0.10963255848748037,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)": -0.0723157021111624,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": -0.023085866045209076,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()": -0.023085866045209076,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])": -0.12423365784256961,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyOut()": -0.10011467093195014,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#createMatrix(int,int)": -0.0723157021111624,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()": -0.16202162185661928,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getData()": -0.09678261954740237,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getDataRef()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)": -0.14650986396721727,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()": -0.16202162185661928,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": -0.01621861341831379,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": -0.023085866045209076,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": -0.01621861341831379,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)": -0.10809129200634507,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": -0.12423365784256961,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": -0.01621861341831379,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.01621861341831379,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.01621861341831379,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.01621861341831379,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.01621861341831379,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.023085866045209076,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.01621861341831379,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.08048324901138815,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.023085866045209076,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix()": -0.03294691083255011,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[])": -0.03294691083255011,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])": 1.4888811292569577,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)": 1.629661610430682,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)": 1.4822515297369976,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)": -0.023085866045209076,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()": -0.06087114237936406,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])": 1.4874017135572166,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()": 1.5449111092349486,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)": 1.551534616861996,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()": 0.08093139714348652,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getData()": 1.5507014679442124,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getDataRef()": -0.11563965561730516,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)": 1.4881409741127238,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()": 0.08160838991372554,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)": -0.055749102017882114,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)": -0.03294691083255011,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#operate(double[])": -0.11563965561730524,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#preMultiply(double[])": -0.023085866045209076,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)": 1.4888811292569577,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)": 1.4874017135572166,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)": -0.01621861341831379,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.01621861341831379,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.01621861341831379,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.156183862095725,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.01621861341831379,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.03294691083255011,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.01621861341831379,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 1.5772977693877368,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.08432239665164784,
        "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()": 1.3909759266098072,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector()": -0.028414589174350344,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[])": 1.5416340948167129,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)": -0.34575741078328337,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],double[])": -0.01621861341831379,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],int,int)": -0.01621861341831379,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],org.apache.commons.math3.linear.ArrayRealVector)": -0.01621861341831379,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int)": -0.2208264781474955,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int,double)": -0.028414589174350344,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[])": -0.01621861341831379,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[],int,int)": -0.01621861341831379,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector)": -0.01621861341831379,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,boolean)": -0.18826331090508616,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,double[])": -0.01621861341831379,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.ArrayRealVector)": -0.028414589174350344,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.RealVector)": -0.023085866045209076,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector)": -0.01621861341831379,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.ArrayRealVector)": -0.01621861341831379,
        "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)": -0.050184892242708945,
        "org.apache.commons.math3.linear$ArrayRealVector#addToEntry(int,double)": -0.028414589174350344,
        "org.apache.commons.math3.linear$ArrayRealVector#append(double)": -0.023085866045209076,
        "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.RealVector)": -0.023085866045209076,
        "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)": -0.2282625047506523,
        "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)": -0.07015262971467141,
        "org.apache.commons.math3.linear$ArrayRealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)": -0.07015262971467141,
        "org.apache.commons.math3.linear$ArrayRealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": -0.11266653361890888,
        "org.apache.commons.math3.linear$ArrayRealVector#copy()": -0.18722007208678262,
        "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)": -0.17328285619462264,
        "org.apache.commons.math3.linear$ArrayRealVector#ebeDivide(org.apache.commons.math3.linear.RealVector)": -0.044020063150661974,
        "org.apache.commons.math3.linear$ArrayRealVector#ebeMultiply(org.apache.commons.math3.linear.RealVector)": -0.06087114237936406,
        "org.apache.commons.math3.linear$ArrayRealVector#equals(java.lang.Object)": -0.12141967688186989,
        "org.apache.commons.math3.linear$ArrayRealVector#getDataRef()": -0.12836817670572076,
        "org.apache.commons.math3.linear$ArrayRealVector#getDimension()": 0.12341083398091446,
        "org.apache.commons.math3.linear$ArrayRealVector#getDistance(org.apache.commons.math3.linear.RealVector)": -0.03697028806298293,
        "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)": 1.5084564713733393,
        "org.apache.commons.math3.linear$ArrayRealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)": -0.03294691083255011,
        "org.apache.commons.math3.linear$ArrayRealVector#getL1Norm()": -0.023085866045209076,
        "org.apache.commons.math3.linear$ArrayRealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)": -0.03294691083255011,
        "org.apache.commons.math3.linear$ArrayRealVector#getLInfNorm()": -0.023085866045209076,
        "org.apache.commons.math3.linear$ArrayRealVector#getNorm()": -0.13373307839729628,
        "org.apache.commons.math3.linear$ArrayRealVector#getSubVector(int,int)": -0.044020063150661974,
        "org.apache.commons.math3.linear$ArrayRealVector#hashCode()": -0.028414589174350344,
        "org.apache.commons.math3.linear$ArrayRealVector#isInfinite()": -0.023085866045209076,
        "org.apache.commons.math3.linear$ArrayRealVector#isNaN()": -0.1270010729440898,
        "org.apache.commons.math3.linear$ArrayRealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)": -0.028414589174350344,
        "org.apache.commons.math3.linear$ArrayRealVector#mapAddToSelf(double)": -0.028414589174350358,
        "org.apache.commons.math3.linear$ArrayRealVector#mapDivideToSelf(double)": -0.03697028806298297,
        "org.apache.commons.math3.linear$ArrayRealVector#mapMultiplyToSelf(double)": -0.13504982506996055,
        "org.apache.commons.math3.linear$ArrayRealVector#mapSubtractToSelf(double)": -0.028414589174350358,
        "org.apache.commons.math3.linear$ArrayRealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": -0.03294691083255019,
        "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)": -0.028414589174350344,
        "org.apache.commons.math3.linear$ArrayRealVector#set(double)": -0.11855612412778682,
        "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)": -0.1549979886560572,
        "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,double[])": -0.08618990705079421,
        "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,org.apache.commons.math3.linear.RealVector)": -0.08802547392990519,
        "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)": -0.1585369246032549,
        "org.apache.commons.math3.linear$ArrayRealVector#toArray()": -0.1872200720867827,
        "org.apache.commons.math3.linear$ArrayRealVector#toString()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": -0.023085866045208903,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": -0.03294691083255011,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": -0.023085866045208903,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": -0.03294691083255011,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": -0.01621861341831379,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": -0.023085866045209076,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": -0.01621861341831379,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": -0.023085866045209076,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(int,int,org.apache.commons.math3.FieldElement[][],boolean)": -0.10336241529061525,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)": -0.08983092348635378,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.FieldElement[][])": -0.10336241529061525,
        "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.BlockFieldMatrix)": -0.03294691083255011,
        "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)": -0.023085866045209076,
        "org.apache.commons.math3.linear$BlockFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#blockHeight(int)": -0.11266653361890899,
        "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)": -0.11999429745423318,
        "org.apache.commons.math3.linear$BlockFieldMatrix#copy()": -0.01621861341831379,
        "org.apache.commons.math3.linear$BlockFieldMatrix#copyBlockPart(org.apache.commons.math3.FieldElement[],int,int,int,int,int,org.apache.commons.math3.FieldElement[],int,int,int)": -0.028414589174350344,
        "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)": -0.08983092348635378,
        "org.apache.commons.math3.linear$BlockFieldMatrix#createMatrix(int,int)": -0.01621861341831379,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumn(int)": -0.03697028806298293,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()": -0.11266653361890899,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnMatrix(int)": -0.028414589174350344,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnVector(int)": -0.028414589174350344,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getData()": -0.03697028806298293,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)": -0.09160791427278164,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRow(int)": -0.03697028806298293,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()": -0.11416042705833185,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowMatrix(int)": -0.03294691083255011,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowVector(int)": -0.028414589174350344,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getSubMatrix(int,int,int,int)": -0.028414589174350344,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.BlockFieldMatrix)": -0.044020063150661974,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)": -0.04063214633805634,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": -0.028414589174350344,
        "org.apache.commons.math3.linear$BlockFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": -0.023085866045209076,
        "org.apache.commons.math3.linear$BlockFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)": -0.03294691083255011,
        "org.apache.commons.math3.linear$BlockFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)": -0.01621861341831379,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])": -0.03294691083255011,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)": -0.023085866045209076,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": -0.023085866045209076,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)": -0.023085866045209076,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)": -0.03697028806298293,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])": -0.03294691083255011,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)": -0.023085866045209076,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": -0.023085866045209076,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)": -0.023085866045209076,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": -0.023085866045209076,
        "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.BlockFieldMatrix)": -0.023085866045209076,
        "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)": -0.01621861341831379,
        "org.apache.commons.math3.linear$BlockFieldMatrix#toBlocksLayout(org.apache.commons.math3.FieldElement[][])": -0.10336241529061525,
        "org.apache.commons.math3.linear$BlockFieldMatrix#transpose()": -0.028414589174350344,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.023085866045209076,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.01621861341831379,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.01621861341831379,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.023085866045209076,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.01621861341831379,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.01621861341831379,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.01621861341831379,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.01621861341831379,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])": -0.20149675184755064,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)": -0.1402264024376933,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)": -0.22176450763924188,
        "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)": -0.03294691083255011,
        "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)": -0.023085866045209076,
        "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)": -0.01621861341831379,
        "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)": -0.22826250475065235,
        "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)": -0.2355505758577463,
        "org.apache.commons.math3.linear$BlockRealMatrix#copy()": -0.03697028806298293,
        "org.apache.commons.math3.linear$BlockRealMatrix#copyBlockPart(double[],int,int,int,int,int,double[],int,int,int)": -0.03294691083255011,
        "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)": -0.16431614461803512,
        "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)": -0.01621861341831379,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumn(int)": -0.07850687286792468,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()": -0.22826250475065235,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)": -0.028414589174350344,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)": -0.028414589174350344,
        "org.apache.commons.math3.linear$BlockRealMatrix#getData()": -0.1402264024376933,
        "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)": -0.16431614461803512,
        "org.apache.commons.math3.linear$BlockRealMatrix#getFrobeniusNorm()": -0.01621861341831379,
        "org.apache.commons.math3.linear$BlockRealMatrix#getNorm()": -0.08242092416179436,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRow(int)": -0.03697028806298293,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()": -0.22918135309677967,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)": -0.03294691083255011,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)": -0.028414589174350344,
        "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)": -0.03294691083255011,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)": -0.06087114237936406,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": -0.06087114237936406,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#operate(double[])": -0.11266653361890888,
        "org.apache.commons.math3.linear$BlockRealMatrix#preMultiply(double[])": -0.023085866045209076,
        "org.apache.commons.math3.linear$BlockRealMatrix#scalarAdd(double)": -0.03294691083255011,
        "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)": -0.01621861341831379,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])": -0.04719110008226321,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)": -0.023085866045209076,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)": -0.023085866045209076,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)": -0.023085866045209076,
        "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)": -0.08432239665164784,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRow(int,double[])": -0.03294691083255011,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)": -0.023085866045209076,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)": -0.023085866045209076,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)": -0.023085866045209076,
        "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)": -0.023085866045209076,
        "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)": -0.07442646434036343,
        "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": -0.08048324901138815,
        "org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])": -0.20149675184755064,
        "org.apache.commons.math3.linear$BlockRealMatrix#transpose()": -0.06793255764879033,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.050184892242708945,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.01621861341831379,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.028414589174350344,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.03294691083255011,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.01621861341831379,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.01621861341831379,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.01621861341831379,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.01621861341831379,
        "org.apache.commons.math3.linear$DefaultRealMatrixPreservingVisitor#DefaultRealMatrixPreservingVisitor()": 0.22710627598241084,
        "org.apache.commons.math3.linear$DefaultRealMatrixPreservingVisitor#end()": 0.22710627598241084,
        "org.apache.commons.math3.linear$DefaultRealMatrixPreservingVisitor#start(int,int,int,int,int,int)": 0.23062644919617659,
        "org.apache.commons.math3.linear$DefaultRealMatrixPreservingVisitor#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#EigenDecomposition(double[],double[])": -0.03294691083255011,
        "org.apache.commons.math3.linear$EigenDecomposition#EigenDecomposition(double[],double[],double)": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#EigenDecomposition(org.apache.commons.math3.linear.RealMatrix)": 1.711908707993655,
        "org.apache.commons.math3.linear$EigenDecomposition#EigenDecomposition(org.apache.commons.math3.linear.RealMatrix,double)": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#cdiv(double,double,double,double)": -0.016218613418313765,
        "org.apache.commons.math3.linear$EigenDecomposition#findEigenVectors(double[][])": 1.707333466381091,
        "org.apache.commons.math3.linear$EigenDecomposition#findEigenVectorsFromSchur(org.apache.commons.math3.linear.SchurTransformer)": -0.01621861341831379,
        "org.apache.commons.math3.linear$EigenDecomposition#getD()": 1.7520674423512097,
        "org.apache.commons.math3.linear$EigenDecomposition#getDeterminant()": -0.03294691083255019,
        "org.apache.commons.math3.linear$EigenDecomposition#getEigenvector(int)": -0.04719110008226321,
        "org.apache.commons.math3.linear$EigenDecomposition#getImagEigenvalue(int)": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#getImagEigenvalues()": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#getRealEigenvalue(int)": -0.04719110008226335,
        "org.apache.commons.math3.linear$EigenDecomposition#getRealEigenvalues()": -0.060871142379363974,
        "org.apache.commons.math3.linear$EigenDecomposition#getSolver()": -0.04719110008226321,
        "org.apache.commons.math3.linear$EigenDecomposition#getV()": 1.7435110038944215,
        "org.apache.commons.math3.linear$EigenDecomposition#getVT()": -0.028414589174350344,
        "org.apache.commons.math3.linear$EigenDecomposition#hasComplexEigenvalues()": -0.04719110008226321,
        "org.apache.commons.math3.linear$EigenDecomposition#isSymmetric(org.apache.commons.math3.linear.RealMatrix,boolean)": 1.711908707993655,
        "org.apache.commons.math3.linear$EigenDecomposition#transformToSchur(org.apache.commons.math3.linear.RealMatrix)": -0.01621861341831379,
        "org.apache.commons.math3.linear$EigenDecomposition#transformToTridiagonal(org.apache.commons.math3.linear.RealMatrix)": 1.7134670154374674,
        "org.apache.commons.math3.linear$EigenDecomposition$Solver#EigenDecomposition$Solver(double[],double[],org.apache.commons.math3.linear.ArrayRealVector[])": -0.04719110008226335,
        "org.apache.commons.math3.linear$EigenDecomposition$Solver#getInverse()": -0.04063214633805634,
        "org.apache.commons.math3.linear$EigenDecomposition$Solver#isNonSingular()": -0.04719110008226335,
        "org.apache.commons.math3.linear$EigenDecomposition$Solver#solve(org.apache.commons.math3.linear.RealMatrix)": -0.023085866045209076,
        "org.apache.commons.math3.linear$EigenDecomposition$Solver#solve(org.apache.commons.math3.linear.RealVector)": -0.023085866045209076,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)": -0.10963255848748037,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getExpectedColumnDimension()": -0.01621861341831379,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getExpectedRowDimension()": -0.01621861341831379,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getWrongColumnDimension()": -0.01621861341831379,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getWrongRowDimension()": -0.01621861341831379,
        "org.apache.commons.math3.linear$MatrixUtils#<clinit>()": 1.3572579604731585,
        "org.apache.commons.math3.linear$MatrixUtils#MatrixUtils()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)": -0.0656500508231062,
        "org.apache.commons.math3.linear$MatrixUtils#checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": 1.7249175629633284,
        "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)": 1.3825905721198133,
        "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)": 1.4046936336521125,
        "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": 1.6067707678666658,
        "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)": 1.3832328204660074,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)": -0.11416042705833193,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])": -0.03697028806298293,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": 1.6348780860003482,
        "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])": -0.01621861341831379,
        "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])": 1.7591288576206359,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)": -0.023085866045209076,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.Field,int,int)": -0.023085866045209076,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])": -0.01621861341831379,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldVector(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])": 1.7455735356596365,
        "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)": -0.13107075094077453,
        "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])": 1.55825570561965,
        "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)": 1.622513019568606,
        "org.apache.commons.math3.linear$MatrixUtils#createRealVector(double[])": -0.01621861341831379,
        "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])": -0.01621861341831379,
        "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])": -0.01621861341831379,
        "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)": -0.01621861341831379,
        "org.apache.commons.math3.linear$MatrixUtils#deserializeRealVector(java.lang.Object,java.lang.String,java.io.ObjectInputStream)": -0.01621861341831379,
        "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)": -0.01621861341831379,
        "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)": -0.01621861341831379,
        "org.apache.commons.math3.linear$MatrixUtils#serializeRealVector(org.apache.commons.math3.linear.RealVector,java.io.ObjectOutputStream)": -0.01621861341831379,
        "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)": -0.01621861341831379,
        "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)": -0.01621861341831379,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#MatrixUtils$BigFractionMatrixConverter()": -0.06565005082310638,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()": -0.0656500508231062,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#start(int,int,int,int,int,int)": -0.06565005082310638,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#visit(int,int,org.apache.commons.math3.fraction.BigFraction)": -0.06565005082310638,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#MatrixUtils$FractionMatrixConverter()": -0.016218613418313765,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()": -0.01621861341831379,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#start(int,int,int,int,int,int)": -0.016218613418313765,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#visit(int,int,org.apache.commons.math3.fraction.Fraction)": -0.016218613418313765,
        "org.apache.commons.math3.linear$NonSquareMatrixException#NonSquareMatrixException(int,int)": -0.06329875122719045,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#NonSymmetricMatrixException(int,int,double)": -0.01621861341831379,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#getColumn()": 0.0,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#getRow()": 0.0,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#getThreshold()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)": -0.09678261954740237,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix)": -0.050184892242708945,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)": -0.023085866045209076,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)": -0.09508243703667163,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()": -0.023085866045209076,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)": -0.044020063150661974,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()": -0.09508243703667163,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)": -0.09160791427278164,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()": -0.09508243703667163,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)": -0.03294691083255011,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": -0.03294691083255011,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)": -0.09508243703667155,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)": -0.04063214633805634,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": -0.04063214633805634,
        "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()": -0.040928197971521585,
        "org.apache.commons.math3.linear$RealLinearOperator#isTransposable()": 0.0,
        "org.apache.commons.math3.linear$RealLinearOperator#operateTranspose(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat()": -0.01621861341831379,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": 1.3572579604731585,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)": -0.02475107501738172,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)": 1.3210353626095233,
        "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)": -0.07015262971467141,
        "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)": -0.07015262971467141,
        "org.apache.commons.math3.linear$RealMatrixFormat#getAvailableLocales()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getColumnSeparator()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()": -0.019912087572868553,
        "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()": 1.3572579604731585,
        "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)": 1.3210353626095233,
        "org.apache.commons.math3.linear$RealMatrixFormat#getPrefix()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowPrefix()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowSeparator()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowSuffix()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getSuffix()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)": -0.05835823033646827,
        "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)": -0.06793255764879033,
        "org.apache.commons.math3.linear$RealVector#RealVector()": -0.06856063366586962,
        "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)": -0.03294691083255011,
        "org.apache.commons.math3.linear$RealVector#addToEntry(int,double)": -0.04063214633805634,
        "org.apache.commons.math3.linear$RealVector#checkIndex(int)": -0.254919115190495,
        "org.apache.commons.math3.linear$RealVector#checkIndices(int,int)": -0.08432239665164784,
        "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)": -0.15260691078789237,
        "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)": -0.13894536158505033,
        "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)": -0.050184892242708945,
        "org.apache.commons.math3.linear$RealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": -0.07015262971467141,
        "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)": -0.07015262971467141,
        "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)": -0.09160791427278164,
        "org.apache.commons.math3.linear$RealVector#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.linear$RealVector#getDistance(org.apache.commons.math3.linear.RealVector)": -0.03294691083255011,
        "org.apache.commons.math3.linear$RealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)": -0.03294691083255011,
        "org.apache.commons.math3.linear$RealVector#getL1Norm()": -0.023085866045209076,
        "org.apache.commons.math3.linear$RealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)": -0.03294691083255011,
        "org.apache.commons.math3.linear$RealVector#getLInfNorm()": -0.023085866045209076,
        "org.apache.commons.math3.linear$RealVector#getMaxIndex()": -0.03697028806298293,
        "org.apache.commons.math3.linear$RealVector#getMaxValue()": -0.03697028806298293,
        "org.apache.commons.math3.linear$RealVector#getMinIndex()": -0.03697028806298293,
        "org.apache.commons.math3.linear$RealVector#getMinValue()": -0.03697028806298293,
        "org.apache.commons.math3.linear$RealVector#getNorm()": -0.08048324901138815,
        "org.apache.commons.math3.linear$RealVector#hashCode()": 0.0,
        "org.apache.commons.math3.linear$RealVector#iterator()": -0.10336241529061525,
        "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)": -0.023085866045209076,
        "org.apache.commons.math3.linear$RealVector#mapAdd(double)": -0.028414589174350344,
        "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)": -0.03294691083255011,
        "org.apache.commons.math3.linear$RealVector#mapDivide(double)": -0.044020063150661974,
        "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)": -0.044020063150661974,
        "org.apache.commons.math3.linear$RealVector#mapMultiply(double)": -0.14650986396721727,
        "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)": -0.06087114237936406,
        "org.apache.commons.math3.linear$RealVector#mapSubtract(double)": -0.03697028806298293,
        "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)": -0.03697028806298293,
        "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": -0.08618990705079421,
        "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)": -0.03697028806298293,
        "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)": -0.06329875122719045,
        "org.apache.commons.math3.linear$RealVector#set(double)": -0.023085866045209076,
        "org.apache.commons.math3.linear$RealVector#sparseIterator()": -0.09678261954740237,
        "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)": -0.03294691083255011,
        "org.apache.commons.math3.linear$RealVector#toArray()": -0.028414589174350344,
        "org.apache.commons.math3.linear$RealVector#unitVector()": -0.03697028806298293,
        "org.apache.commons.math3.linear$RealVector#unitize()": -0.03697028806298293,
        "org.apache.commons.math3.linear$RealVector#unmodifiableRealVector(org.apache.commons.math3.linear.RealVector)": -0.0916079142727817,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": -0.03294691083255011,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": -0.04719110008226321,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": -0.03294691083255011,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": -0.04719110008226321,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": -0.023085866045209076,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": -0.03294691083255011,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": -0.023085866045209076,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": -0.03294691083255011,
        "org.apache.commons.math3.linear$RealVector$1#hasNext()": -0.1033624152906154,
        "org.apache.commons.math3.linear$RealVector$1#next()": -0.1033624152906154,
        "org.apache.commons.math3.linear$RealVector$1#remove()": -0.028414589174350358,
        "org.apache.commons.math3.linear$RealVector$2#add(org.apache.commons.math3.linear.RealVector)": -0.023085866045208903,
        "org.apache.commons.math3.linear$RealVector$2#addToEntry(int,double)": -0.023085866045208903,
        "org.apache.commons.math3.linear$RealVector$2#append(double)": -0.023085866045208903,
        "org.apache.commons.math3.linear$RealVector$2#append(org.apache.commons.math3.linear.RealVector)": -0.023085866045208903,
        "org.apache.commons.math3.linear$RealVector$2#combine(double,double,org.apache.commons.math3.linear.RealVector)": -0.023085866045208903,
        "org.apache.commons.math3.linear$RealVector$2#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": -0.023085866045208903,
        "org.apache.commons.math3.linear$RealVector$2#copy()": -0.023085866045208903,
        "org.apache.commons.math3.linear$RealVector$2#cosine(org.apache.commons.math3.linear.RealVector)": -0.023085866045208903,
        "org.apache.commons.math3.linear$RealVector$2#dotProduct(org.apache.commons.math3.linear.RealVector)": -0.023085866045208903,
        "org.apache.commons.math3.linear$RealVector$2#ebeDivide(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#ebeMultiply(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getDimension()": -0.04063214633805634,
        "org.apache.commons.math3.linear$RealVector$2#getDistance(org.apache.commons.math3.linear.RealVector)": -0.023085866045208903,
        "org.apache.commons.math3.linear$RealVector$2#getEntry(int)": -0.04719110008226335,
        "org.apache.commons.math3.linear$RealVector$2#getL1Distance(org.apache.commons.math3.linear.RealVector)": -0.023085866045208903,
        "org.apache.commons.math3.linear$RealVector$2#getL1Norm()": -0.023085866045208903,
        "org.apache.commons.math3.linear$RealVector$2#getLInfDistance(org.apache.commons.math3.linear.RealVector)": -0.023085866045208903,
        "org.apache.commons.math3.linear$RealVector$2#getLInfNorm()": -0.023085866045208903,
        "org.apache.commons.math3.linear$RealVector$2#getNorm()": -0.023085866045208903,
        "org.apache.commons.math3.linear$RealVector$2#getSubVector(int,int)": -0.023085866045208903,
        "org.apache.commons.math3.linear$RealVector$2#isInfinite()": -0.023085866045208903,
        "org.apache.commons.math3.linear$RealVector$2#isNaN()": -0.023085866045208903,
        "org.apache.commons.math3.linear$RealVector$2#iterator()": -0.03294691083255019,
        "org.apache.commons.math3.linear$RealVector$2#map(org.apache.commons.math3.analysis.UnivariateFunction)": -0.023085866045208903,
        "org.apache.commons.math3.linear$RealVector$2#mapAdd(double)": -0.023085866045208903,
        "org.apache.commons.math3.linear$RealVector$2#mapAddToSelf(double)": -0.023085866045208903,
        "org.apache.commons.math3.linear$RealVector$2#mapDivide(double)": -0.023085866045208903,
        "org.apache.commons.math3.linear$RealVector$2#mapDivideToSelf(double)": -0.023085866045208903,
        "org.apache.commons.math3.linear$RealVector$2#mapMultiply(double)": -0.023085866045208903,
        "org.apache.commons.math3.linear$RealVector$2#mapMultiplyToSelf(double)": -0.023085866045208903,
        "org.apache.commons.math3.linear$RealVector$2#mapSubtract(double)": -0.023085866045208903,
        "org.apache.commons.math3.linear$RealVector$2#mapSubtractToSelf(double)": -0.023085866045208903,
        "org.apache.commons.math3.linear$RealVector$2#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": -0.023085866045208903,
        "org.apache.commons.math3.linear$RealVector$2#outerProduct(org.apache.commons.math3.linear.RealVector)": -0.023085866045208903,
        "org.apache.commons.math3.linear$RealVector$2#set(double)": -0.028414589174350358,
        "org.apache.commons.math3.linear$RealVector$2#setEntry(int,double)": -0.023085866045208903,
        "org.apache.commons.math3.linear$RealVector$2#setSubVector(int,org.apache.commons.math3.linear.RealVector)": -0.023085866045208903,
        "org.apache.commons.math3.linear$RealVector$2#sparseIterator()": -0.023085866045208903,
        "org.apache.commons.math3.linear$RealVector$2#subtract(org.apache.commons.math3.linear.RealVector)": -0.03294691083255019,
        "org.apache.commons.math3.linear$RealVector$2#toArray()": -0.023085866045208903,
        "org.apache.commons.math3.linear$RealVector$2#unitVector()": -0.023085866045208903,
        "org.apache.commons.math3.linear$RealVector$2#unitize()": -0.023085866045208903,
        "org.apache.commons.math3.linear$RealVector$2$1#hasNext()": -0.03294691083255019,
        "org.apache.commons.math3.linear$RealVector$2$1#next()": -0.03294691083255019,
        "org.apache.commons.math3.linear$RealVector$2$1#remove()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$2#hasNext()": -0.023085866045208903,
        "org.apache.commons.math3.linear$RealVector$2$2#next()": -0.023085866045208903,
        "org.apache.commons.math3.linear$RealVector$2$2#remove()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#RealVector$2$UnmodifiableEntry(org.apache.commons.math3.linear.RealVector$2)": -0.04063214633805634,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#getValue()": -0.04063214633805634,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#setValue(double)": -0.03294691083255019,
        "org.apache.commons.math3.linear$RealVector$Entry#RealVector$Entry(org.apache.commons.math3.linear.RealVector)": -0.156183862095725,
        "org.apache.commons.math3.linear$RealVector$Entry#getIndex()": -0.14022640243769335,
        "org.apache.commons.math3.linear$RealVector$Entry#getValue()": -0.13635729693303295,
        "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)": -0.156183862095725,
        "org.apache.commons.math3.linear$RealVector$Entry#setValue(double)": -0.08618990705079421,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#RealVector$SparseEntryIterator(org.apache.commons.math3.linear.RealVector)": -0.09678261954740237,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)": -0.09678261954740237,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()": -0.09678261954740237,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()": -0.09335795798289866,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#remove()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat()": -0.04719110008226321,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)": 0.038732252504771636,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)": 1.3845186901316766,
        "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector)": -0.08048324901138815,
        "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector,java.lang.StringBuffer,java.text.FieldPosition)": -0.08048324901138815,
        "org.apache.commons.math3.linear$RealVectorFormat#getAvailableLocales()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#getFormat()": -0.023085866045208903,
        "org.apache.commons.math3.linear$RealVectorFormat#getInstance()": 1.3909759266098072,
        "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)": 1.3845186901316766,
        "org.apache.commons.math3.linear$RealVectorFormat#getPrefix()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#getSeparator()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#getSuffix()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String)": -0.09160791427278164,
        "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String,java.text.ParsePosition)": -0.10495694044872064,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#TriDiagonalTransformer(org.apache.commons.math3.linear.RealMatrix)": 1.7000057025457667,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getHouseholderVectorsRef()": 0.0,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getMainDiagonalRef()": 0.3661222703667498,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getQ()": 1.705839572941668,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getQT()": 1.7043603443826947,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getSecondaryDiagonalRef()": 0.3661222703667498,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getT()": -0.03697028806298293,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#transform()": 1.7014438758722132,
        "org.apache.commons.math3.optimization$AbstractConvergenceChecker#<clinit>()": 1.643435419770193,
        "org.apache.commons.math3.optimization$AbstractConvergenceChecker#AbstractConvergenceChecker()": 1.7375790758382057,
        "org.apache.commons.math3.optimization$AbstractConvergenceChecker#AbstractConvergenceChecker(double,double)": -0.15018914248179693,
        "org.apache.commons.math3.optimization$AbstractConvergenceChecker#getAbsoluteThreshold()": 0.3121919405164758,
        "org.apache.commons.math3.optimization$AbstractConvergenceChecker#getRelativeThreshold()": 0.3110418902434876,
        "org.apache.commons.math3.optimization$GoalType#<clinit>()": 1.6067707678666658,
        "org.apache.commons.math3.optimization$GoalType#GoalType(java.lang.String,int)": 0.26098433023976086,
        "org.apache.commons.math3.optimization$PointValuePair#PointValuePair(double[],double)": 1.6348780860003482,
        "org.apache.commons.math3.optimization$PointValuePair#PointValuePair(double[],double,boolean)": 1.6348780860003482,
        "org.apache.commons.math3.optimization$PointValuePair#getPoint()": 1.6638161379042749,
        "org.apache.commons.math3.optimization$PointValuePair#getPointRef()": -0.09335795798289866,
        "org.apache.commons.math3.optimization$PointValuePair#writeReplace()": -0.01621861341831379,
        "org.apache.commons.math3.optimization$PointValuePair$DataTransferObject#PointValuePair$DataTransferObject(double[],double)": -0.01621861341831379,
        "org.apache.commons.math3.optimization$PointValuePair$DataTransferObject#readResolve()": -0.01621861341831379,
        "org.apache.commons.math3.optimization$SimpleValueChecker#SimpleValueChecker()": 1.7435110038944215,
        "org.apache.commons.math3.optimization$SimpleValueChecker#SimpleValueChecker(double,double)": -0.10809129200634507,
        "org.apache.commons.math3.optimization$SimpleValueChecker#converged(int,org.apache.commons.math3.optimization.PointValuePair,org.apache.commons.math3.optimization.PointValuePair)": 1.694376989855504,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateOptimizer#BaseAbstractMultivariateOptimizer()": 0.0,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateOptimizer#BaseAbstractMultivariateOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)": 1.6556838553819648,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateOptimizer#computeObjectiveValue(double[])": 1.668598565941351,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateOptimizer#getConvergenceChecker()": 0.3404804839757988,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateOptimizer#getEvaluations()": -0.09845967213190664,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateOptimizer#getGoalType()": 0.32281212831444595,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateOptimizer#getMaxEvaluations()": 1.7338100929492057,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateOptimizer#getStartPoint()": 0.31567663776984023,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateFunction,org.apache.commons.math3.optimization.GoalType,double[])": 1.677236446633641,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateFunction,org.apache.commons.math3.optimization.GoalType,double[])": 1.6614630753967452,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateSimpleBoundsOptimizer#BaseAbstractMultivariateSimpleBoundsOptimizer()": 0.0,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateSimpleBoundsOptimizer#BaseAbstractMultivariateSimpleBoundsOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)": 1.7134670154374674,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateSimpleBoundsOptimizer#getLowerBound()": 0.37575389024118844,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateSimpleBoundsOptimizer#getUpperBound()": 0.37575389024118844,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateSimpleBoundsOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateFunction,org.apache.commons.math3.optimization.GoalType,double[])": 0.0,
        "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateSimpleBoundsOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateFunction,org.apache.commons.math3.optimization.GoalType,double[],double[],double[])": 1.7134670154374674,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#<clinit>()": 1.7435110038944215,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#CMAESOptimizer()": 1.8199999999999998,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#CMAESOptimizer(int)": 1.8199999999999998,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#CMAESOptimizer(int,double[])": 0.0,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#CMAESOptimizer(int,double[],int,double,boolean,int,int,org.apache.commons.math3.random.RandomGenerator,boolean)": 1.7435110038944215,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#CMAESOptimizer(int,double[],int,double,boolean,int,int,org.apache.commons.math3.random.RandomGenerator,boolean,org.apache.commons.math3.optimization.ConvergenceChecker)": 1.7435110038944215,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#checkParameters()": 1.7498473702853286,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#copyColumn(org.apache.commons.math3.linear.RealMatrix,int,org.apache.commons.math3.linear.RealMatrix,int)": 1.7616417696635316,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#diag(org.apache.commons.math3.linear.RealMatrix)": 1.7616417696635316,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#divide(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix)": 1.7616417696635316,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#doOptimize()": 1.7498473702853286,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#eye(int,int)": 1.7616417696635316,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#getStatisticsDHistory()": 0.0,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#getStatisticsFitnessHistory()": 0.0,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#getStatisticsMeanHistory()": 0.0,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#getStatisticsSigmaHistory()": 0.0,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#initializeCMA(double[])": 1.7616417696635316,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#inverse(int[])": 1.7616417696635316,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#log(org.apache.commons.math3.linear.RealMatrix)": 1.7616417696635316,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#max(double[])": 1.7616417696635316,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#max(org.apache.commons.math3.linear.RealMatrix)": 1.7616417696635316,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#min(double[])": 1.7616417696635316,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#min(org.apache.commons.math3.linear.RealMatrix)": 1.7616417696635316,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#ones(int,int)": 1.7616417696635316,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#push(double[],double)": 1.7616417696635316,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#randn(int)": 0.0,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#randn1(int,int)": 1.7616417696635316,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#repmat(org.apache.commons.math3.linear.RealMatrix,int,int)": 1.7616417696635316,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#reverse(int[])": 1.7616417696635316,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#selectColumns(org.apache.commons.math3.linear.RealMatrix,int[])": 1.7616417696635316,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#sequence(double,double,double)": 1.7616417696635316,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#sortedIndices(double[])": 1.7616417696635316,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#sqrt(org.apache.commons.math3.linear.RealMatrix)": 1.7616417696635316,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#square(org.apache.commons.math3.linear.RealMatrix)": 1.7616417696635316,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#sumRows(org.apache.commons.math3.linear.RealMatrix)": 1.7616417696635316,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#times(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix)": 1.7616417696635316,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#triu(org.apache.commons.math3.linear.RealMatrix,int)": 1.7616417696635316,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#updateBD(double)": 1.7616417696635316,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#updateCovariance(boolean,org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix,int[],org.apache.commons.math3.linear.RealMatrix)": 1.7616417696635316,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#updateCovarianceDiagonalOnly(boolean,org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#updateEvolutionPaths(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix)": 1.7616417696635316,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer#zeros(int,int)": 1.7616417696635316,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$DoubleIndex#CMAESOptimizer$DoubleIndex(double,int)": 0.41585533203662683,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$DoubleIndex#compareTo(org.apache.commons.math3.optimization.direct.CMAESOptimizer$DoubleIndex)": 0.41585533203662683,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$DoubleIndex#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$DoubleIndex#hashCode()": 0.0,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$FitnessFunction#CMAESOptimizer$FitnessFunction(org.apache.commons.math3.optimization.direct.CMAESOptimizer)": 0.41585533203662683,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$FitnessFunction#decode(double[])": 1.7616417696635316,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$FitnessFunction#encode(double[])": 1.7616417696635316,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$FitnessFunction#isFeasible(double[])": 0.0,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$FitnessFunction#penalty(double[],double[])": 1.803781386581686,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$FitnessFunction#repair(double[])": 1.803781386581686,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$FitnessFunction#repairAndDecode(double[])": 1.7616417696635316,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$FitnessFunction#setValueRange(double)": 0.41585533203662683,
        "org.apache.commons.math3.optimization.direct$CMAESOptimizer$FitnessFunction#value(double[])": 1.7616417696635316,
        "org.apache.commons.math3.random$BitsStreamGenerator#BitsStreamGenerator()": -0.30362792195435884,
        "org.apache.commons.math3.random$BitsStreamGenerator#clear()": -0.30362792195435884,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextBoolean()": -0.08983092348635378,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextBytes(byte[])": -0.07442646434036343,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()": 1.3723754790716796,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextFloat()": -0.08983092348635378,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()": 1.668598565941351,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextInt()": -0.10336241529061525,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextInt(int)": -0.10495694044872064,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextLong()": -0.08983092348635378,
        "org.apache.commons.math3.random$MersenneTwister#<clinit>()": 0.26291058086277774,
        "org.apache.commons.math3.random$MersenneTwister#MersenneTwister()": 1.7395167509886118,
        "org.apache.commons.math3.random$MersenneTwister#MersenneTwister(int)": -0.13894536158505033,
        "org.apache.commons.math3.random$MersenneTwister#MersenneTwister(int[])": -0.01621861341831379,
        "org.apache.commons.math3.random$MersenneTwister#MersenneTwister(long)": -0.11710472799091204,
        "org.apache.commons.math3.random$MersenneTwister#next(int)": 1.6579783781433806,
        "org.apache.commons.math3.random$MersenneTwister#setSeed(int)": 1.6086970184896825,
        "org.apache.commons.math3.random$MersenneTwister#setSeed(int[])": 1.6556838553819648,
        "org.apache.commons.math3.random$MersenneTwister#setSeed(long)": 1.6568283278703924,
        "org.apache.commons.math3.util$CompositeFormat#CompositeFormat()": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#formatDouble(double,java.text.NumberFormat,java.lang.StringBuffer,java.text.FieldPosition)": -0.17547529541781248,
        "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()": 1.3448360339642584,
        "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)": -0.20676449264814523,
        "org.apache.commons.math3.util$CompositeFormat#parseAndIgnoreWhitespace(java.lang.String,java.text.ParsePosition)": -0.19546206693405418,
        "org.apache.commons.math3.util$CompositeFormat#parseFixedstring(java.lang.String,java.lang.String,java.text.ParsePosition)": -0.19342331486261588,
        "org.apache.commons.math3.util$CompositeFormat#parseNextCharacter(java.lang.String,java.text.ParsePosition)": -0.1954620669340541,
        "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,double,java.text.ParsePosition)": -0.08432239665164798,
        "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,java.text.NumberFormat,java.text.ParsePosition)": -0.19033838956931795,
        "org.apache.commons.math3.util$FastMath#<clinit>()": -1.131352002406901,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0.0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": -0.016218613418313765,
        "org.apache.commons.math3.util$FastMath#abs(double)": -0.5720844911790283,
        "org.apache.commons.math3.util$FastMath#abs(float)": -0.023085866045208903,
        "org.apache.commons.math3.util$FastMath#abs(int)": -0.3699166929057949,
        "org.apache.commons.math3.util$FastMath#abs(long)": -0.1849386844769313,
        "org.apache.commons.math3.util$FastMath#acos(double)": -0.08048324901138815,
        "org.apache.commons.math3.util$FastMath#acosh(double)": -0.023085866045209076,
        "org.apache.commons.math3.util$FastMath#asin(double)": -0.08242092416179436,
        "org.apache.commons.math3.util$FastMath#asinh(double)": -0.023085866045209076,
        "org.apache.commons.math3.util$FastMath#atan(double)": -0.08242092416179436,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": -0.17328285619462264,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": -0.1585369246032549,
        "org.apache.commons.math3.util$FastMath#atanh(double)": -0.023085866045209076,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": -0.11266653361890888,
        "org.apache.commons.math3.util$FastMath#ceil(double)": -0.38784951556510616,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": -0.060871142379363974,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": -0.023085866045208903,
        "org.apache.commons.math3.util$FastMath#cos(double)": 1.5099902339512221,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": 1.456395934556289,
        "org.apache.commons.math3.util$FastMath#cosh(double)": -0.09160791427278164,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": -0.1489698873600258,
        "org.apache.commons.math3.util$FastMath#exp(double)": -0.6001944534792889,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": -0.7191777248219372,
        "org.apache.commons.math3.util$FastMath#expm1(double)": -0.0656500508231062,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": -0.09508243703667155,
        "org.apache.commons.math3.util$FastMath#floor(double)": -0.6873137932937676,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": -0.1489698873600258,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": -0.023085866045208903,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": -0.14276355336635904,
        "org.apache.commons.math3.util$FastMath#log(double)": 1.17971037693865,
        "org.apache.commons.math3.util$FastMath#log(double,double)": -0.01621861341831379,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": 1.0628770631406992,
        "org.apache.commons.math3.util$FastMath#log10(double)": -0.13373307839729628,
        "org.apache.commons.math3.util$FastMath#log1p(double)": -0.46086526341872186,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0.0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": -0.06681566573570097,
        "org.apache.commons.math3.util$FastMath#max(float,float)": -0.023085866045208903,
        "org.apache.commons.math3.util$FastMath#max(int,int)": 0.0033797826874185644,
        "org.apache.commons.math3.util$FastMath#max(long,long)": -0.016218613418313765,
        "org.apache.commons.math3.util$FastMath#min(double,double)": -0.3296358567438602,
        "org.apache.commons.math3.util$FastMath#min(float,float)": -0.023085866045208903,
        "org.apache.commons.math3.util$FastMath#min(int,int)": -0.09615804439489029,
        "org.apache.commons.math3.util$FastMath#min(long,long)": -0.1033624152906154,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": -0.06565005082310638,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": -0.028414589174350358,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": -0.028414589174350344,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": -0.01621861341831379,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": 0.08364292819758223,
        "org.apache.commons.math3.util$FastMath#polySine(double)": 0.08364292819758223,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": -0.5479944356736755,
        "org.apache.commons.math3.util$FastMath#pow(double,int)": -0.2659567445420039,
        "org.apache.commons.math3.util$FastMath#random()": -0.07442646434036337,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": -0.03697028806298293,
        "org.apache.commons.math3.util$FastMath#rint(double)": -0.07850687286792468,
        "org.apache.commons.math3.util$FastMath#round(double)": -0.0764889961055785,
        "org.apache.commons.math3.util$FastMath#round(float)": -0.028414589174350344,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": -0.12562301014449595,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": -0.023085866045208903,
        "org.apache.commons.math3.util$FastMath#signum(double)": -0.05835823033646825,
        "org.apache.commons.math3.util$FastMath#signum(float)": -0.023085866045208903,
        "org.apache.commons.math3.util$FastMath#sin(double)": 1.4459058315114124,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": 1.4417523250420627,
        "org.apache.commons.math3.util$FastMath#sinh(double)": -0.09160791427278164,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": -0.577532687815184,
        "org.apache.commons.math3.util$FastMath#tan(double)": -0.08802547392990519,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": -0.08802547392990519,
        "org.apache.commons.math3.util$FastMath#tanh(double)": -0.05835823033646827,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": -0.03294691083255011,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": -0.03294691083255011,
        "org.apache.commons.math3.util$FastMath#ulp(double)": -0.31230883601274595,
        "org.apache.commons.math3.util$FastMath#ulp(float)": -0.01621861341831379,
        "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double,double)": 0.14309469163005295,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getK()": 0.14309469163005295,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()": 0.14309469163005295,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()": 0.14309469163005295,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": -0.7108736225064534,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": -0.7087917717653619,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": 1.0705097489734885,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0.0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()": -0.3236470646010988,
        "org.apache.commons.math3.util$FastMathLiteralArrays#FastMathLiteralArrays()": 0.0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()": -0.7108736225064534,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()": -0.7108736225064534,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()": -0.7087917717653619,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()": -0.7087917717653619,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()": 1.0705097489734885,
        "org.apache.commons.math3.util$Incrementor#Incrementor()": 1.2877331143976742,
        "org.apache.commons.math3.util$Incrementor#Incrementor(int)": 1.2553294924979448,
        "org.apache.commons.math3.util$Incrementor#Incrementor(int,org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback)": 1.254443264646078,
        "org.apache.commons.math3.util$Incrementor#canIncrement()": -0.023085866045208903,
        "org.apache.commons.math3.util$Incrementor#getCount()": -0.24710728639068424,
        "org.apache.commons.math3.util$Incrementor#getMaximalCount()": 0.37575389024118844,
        "org.apache.commons.math3.util$Incrementor#incrementCount()": -0.05981085611203418,
        "org.apache.commons.math3.util$Incrementor#incrementCount(int)": -0.01621861341831379,
        "org.apache.commons.math3.util$Incrementor#resetCount()": -0.0703031453624926,
        "org.apache.commons.math3.util$Incrementor#setMaximalCount(int)": -0.04922668133564645,
        "org.apache.commons.math3.util$Incrementor$1#trigger(int)": -0.07231570211116245,
        "org.apache.commons.math3.util$MathArrays#MathArrays()": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[])": -0.12141967688186989,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": -0.12283266862400688,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)": -0.22641785496428352,
        "org.apache.commons.math3.util$MathArrays#copyOf(double[])": -0.10653298456253268,
        "org.apache.commons.math3.util$MathArrays#copyOf(double[],int)": -0.1440200592323411,
        "org.apache.commons.math3.util$MathArrays#copyOf(int[])": -0.04063214633805634,
        "org.apache.commons.math3.util$MathArrays#copyOf(int[],int)": 1.7435110038944215,
        "org.apache.commons.math3.util$MathArrays#distance(double[],double[])": -0.01621861341831379,
        "org.apache.commons.math3.util$MathArrays#distance(int[],int[])": -0.04063214633805634,
        "org.apache.commons.math3.util$MathArrays#distance1(double[],double[])": -0.01621861341831379,
        "org.apache.commons.math3.util$MathArrays#distance1(int[],int[])": -0.01621861341831379,
        "org.apache.commons.math3.util$MathArrays#distanceInf(double[],double[])": -0.01621861341831379,
        "org.apache.commons.math3.util$MathArrays#distanceInf(int[],int[])": -0.01621861341831379,
        "org.apache.commons.math3.util$MathArrays#equals(double[],double[])": -0.01621861341831379,
        "org.apache.commons.math3.util$MathArrays#equals(float[],float[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(double[],double[])": -0.03697028806298293,
        "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(float[],float[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": -0.01621861341831379,
        "org.apache.commons.math3.util$MathArrays#isMonotonic(java.lang.Comparable[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": -0.016218613418313765,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)": -0.12562301014449595,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)": -0.1270010729440898,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double,double,double)": -0.028414589174350358,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double[],double[])": -0.028414589174350344,
        "org.apache.commons.math3.util$MathArrays#normalizeArray(double[],double)": -0.023085866045209076,
        "org.apache.commons.math3.util$MathArrays#safeNorm(double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])": -0.050184892242708945,
        "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])": -0.050184892242708945,
        "org.apache.commons.math3.util$MathArrays$1#compare(org.apache.commons.math3.util.Pair,org.apache.commons.math3.util.Pair)": -0.04719110008226335,
        "org.apache.commons.math3.util$MathArrays$2#<clinit>()": -0.22641785496428368,
        "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()": -0.2310122159635717,
        "org.apache.commons.math3.util$MathArrays$OrderDirection#MathArrays$OrderDirection(java.lang.String,int)": -0.2310122159635717,
        "org.apache.commons.math3.util$MathUtils#MathUtils()": 0.0,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double)": -0.07015262971467141,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double[])": -0.01621861341831379,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)": 1.1691283350065502,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.15970435954507886,
        "org.apache.commons.math3.util$MathUtils#copySign(byte,byte)": -0.03294691083255011,
        "org.apache.commons.math3.util$MathUtils#copySign(int,int)": -0.03294691083255011,
        "org.apache.commons.math3.util$MathUtils#copySign(long,long)": -0.023085866045209076,
        "org.apache.commons.math3.util$MathUtils#copySign(short,short)": -0.023085866045209076,
        "org.apache.commons.math3.util$MathUtils#hash(double)": -0.12141967688186983,
        "org.apache.commons.math3.util$MathUtils#hash(double[])": -0.050184892242708945,
        "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)": -0.10495694044872064,
        "org.apache.commons.math3.util$MathUtils#reduce(double,double,double)": -0.03697028806298293,
        "org.apache.commons.math3.util$Pair#Pair(java.lang.Object,java.lang.Object)": 0.1335410745330271,
        "org.apache.commons.math3.util$Pair#Pair(org.apache.commons.math3.util.Pair)": 0.0,
        "org.apache.commons.math3.util$Pair#equals(java.lang.Object)": -0.01621861341831379,
        "org.apache.commons.math3.util$Pair#getFirst()": -0.16995833772631563,
        "org.apache.commons.math3.util$Pair#getKey()": 0.22448598042768497,
        "org.apache.commons.math3.util$Pair#getSecond()": -0.16995833772631563,
        "org.apache.commons.math3.util$Pair#getValue()": 0.26291058086277774,
        "org.apache.commons.math3.util$Pair#hashCode()": -0.01621861341831379,
        "org.apache.commons.math3.util$Precision#<clinit>()": -0.32812607092196144,
        "org.apache.commons.math3.util$Precision#Precision()": 0.0,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,double)": 1.7000057025457667,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,int)": -0.08802547392990519,
        "org.apache.commons.math3.util$Precision#equals(double,double)": -0.2300979156864192,
        "org.apache.commons.math3.util$Precision#equals(double,double,double)": 1.3974808950906459,
        "org.apache.commons.math3.util$Precision#equals(double,double,int)": 1.1933223899296446,
        "org.apache.commons.math3.util$Precision#equals(float,float)": -0.01621861341831379,
        "org.apache.commons.math3.util$Precision#equals(float,float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(float,float,int)": -0.16317167212960756,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)": -0.21609801696231276,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)": -0.12283266862400688,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)": -0.01621861341831379,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)": -0.1620216218566193,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsWithRelativeTolerance(double,double,double)": -0.01621861341831379,
        "org.apache.commons.math3.util$Precision#representableDelta(double,double)": -0.016218613418313765,
        "org.apache.commons.math3.util$Precision#round(double,int)": -0.01621861341831379,
        "org.apache.commons.math3.util$Precision#round(double,int,int)": -0.016218613418313765,
        "org.apache.commons.math3.util$Precision#round(float,int)": -0.01621861341831379,
        "org.apache.commons.math3.util$Precision#round(float,int,int)": -0.01621861341831379,
        "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)": -0.01621861341831379
    },
    "Math-21": {
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)": -0.24361193040976437,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)": -0.2619270855903739,
        "org.apache.commons.math3.exception$DimensionMismatchException#getDimension()": -0.029269295795042005,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": -0.05746528901529202,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.11935447152088889,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": -0.016700997899247394,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.654744072301939,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": -0.04536224018978485,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.5705030704828791,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": -0.0627526025289169,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": -0.12679640564237096,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.15385218916720578,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": -0.12533437928865743,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": -0.016700997899247394,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int)": 0.0,
        "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int,java.lang.Class)": -0.06275260252891685,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(java.lang.Integer[],java.lang.Integer[])": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])": -0.11314084154104015,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getExpectedDimension(int)": -0.016700997899247394,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getExpectedDimensions()": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getWrongDimension(int)": -0.016700997899247394,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getWrongDimensions()": 0.0,
        "org.apache.commons.math3.exception$NoDataException#NoDataException()": -0.05746528901529216,
        "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)": -0.09266749861622746,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])": -0.04536224018978476,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.07457052308212747,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)": -0.1099351905980412,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": -0.16856177828253993,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": -0.12237165768598704,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.15886026862645797,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": -0.1513048079392085,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.2872155648372152,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": -0.029269295795042005,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": -0.029269295795042005,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(java.lang.Number,java.lang.Number,java.lang.Number)": -0.09809575226782147,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)": -0.2708026410518535,
        "org.apache.commons.math3.exception$OutOfRangeException#getHi()": -0.016700997899247394,
        "org.apache.commons.math3.exception$OutOfRangeException#getLo()": -0.016700997899247394,
        "org.apache.commons.math3.exception$ZeroException#ZeroException()": -0.016700997899247238,
        "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.0486337684478402,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix()": -0.023776927420464222,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field)": -0.15886026862645797,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)": -0.19456441056220994,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)": -0.033941952601950195,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)": -0.15258224390447728,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)": -0.2113686912540207,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkAdditionCompatible(org.apache.commons.math3.linear.FieldMatrix)": -0.0546592299080752,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)": -0.21845501504307063,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkMultiplicationCompatible(org.apache.commons.math3.linear.FieldMatrix)": -0.07457052308212747,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)": -0.21845501504307063,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)": -0.0546592299080752,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int[],int[])": -0.03809076854471706,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubtractionCompatible(org.apache.commons.math3.linear.FieldMatrix)": -0.033941952601950195,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])": -0.02377692742046438,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int[],int[],org.apache.commons.math3.FieldElement[][])": -0.02377692742046438,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#equals(java.lang.Object)": -0.10158719132332619,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[][])": -0.18130997073653435,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumn(int)": -0.0546592299080752,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)": -0.029269295795041984,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnVector(int)": -0.041867484133011286,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getData()": -0.02377692742046438,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()": -0.22342878453612647,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRow(int)": -0.04536224018978476,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)": -0.033941952601950195,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowVector(int)": -0.029269295795041984,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)": -0.02377692742046438,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])": -0.029269295795041984,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getTrace()": -0.029269295795041984,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#hashCode()": -0.029269295795041984,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#isSquare()": -0.11154678593922344,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)": -0.0546592299080752,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": -0.02377692742046438,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.linear.FieldVector)": -0.029269295795041984,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)": -0.016700997899247238,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": -0.016700997899247238,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)": -0.029269295795041984,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)": -0.02377692742046438,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)": -0.02377692742046438,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])": -0.016700997899247238,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": -0.016700997899247238,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)": -0.016700997899247238,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])": -0.016700997899247238,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": -0.016700997899247238,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)": -0.016700997899247238,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": -0.02377692742046438,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)": -0.016700997899247238,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#toString()": -0.02377692742046438,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()": -0.041867484133011286,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.016700997899247238,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.016700997899247238,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.016700997899247238,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.016700997899247238,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.029269295795041984,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.016700997899247238,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.08500990450611014,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.02377692742046438,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.016700997899247238,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.02377692742046438,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$1#visit(int,int,org.apache.commons.math3.FieldElement)": -0.029269295795042005,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$2#start(int,int,int,int,int,int)": -0.023776927420464222,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$2#visit(int,int,org.apache.commons.math3.FieldElement)": -0.023776927420464222,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$3#visit(int,int,org.apache.commons.math3.FieldElement)": -0.041867484133011335,
        "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()": 1.309979528443196,
        "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()": 1.440409497876232,
        "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)": 1.3732336479614595,
        "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)": -0.07004373241772328,
        "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])": -0.0889045575307934,
        "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])": -0.02377692742046438,
        "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)": -0.1325246435027581,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)": -0.10665646632546513,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)": -0.07004373241772328,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)": -0.07004373241772328,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getData()": -0.02377692742046438,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()": -0.06275260252891685,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()": 1.6562393344106157,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)": -0.12533437928865743,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)": -0.033941952601950195,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)": -0.0945041780037596,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)": -0.0546592299080752,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])": -0.029269295795041984,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()": -0.029269295795041984,
        "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()": -0.04536224018978476,
        "org.apache.commons.math3.linear$AbstractRealMatrix#isSquare()": -0.23509332687340379,
        "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": 1.6297855584400844,
        "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])": -0.02377692742046438,
        "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)": -0.11471802785070763,
        "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)": -0.02377692742046438,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])": -0.016700997899247238,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)": -0.029269295795041984,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)": -0.06525894309931007,
        "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)": -0.07004373241772328,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])": -0.03809076854471706,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)": -0.02377692742046438,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)": -0.0809659370289629,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])": -0.016700997899247238,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)": -0.016700997899247238,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)": -0.09631312159349018,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)": -0.02377692742046438,
        "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": 1.1957928580892363,
        "org.apache.commons.math3.linear$AbstractRealMatrix#toString()": -0.041867484133011286,
        "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()": 1.5726600015831464,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.016700997899247238,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.016700997899247238,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.0486337684478402,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.016700997899247238,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.03809076854471706,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.016700997899247238,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 1.570808700013575,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.0869747090867569,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.016700997899247238,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.02377692742046438,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#end()": 0.3104528967837107,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#start(int,int,int,int,int,int)": 0.3104528967837107,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#visit(int,int,double)": 0.3104528967837107,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#end()": -0.0627526025289169,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#start(int,int,int,int,int,int)": -0.0627526025289169,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#visit(int,int,double)": -0.0627526025289169,
        "org.apache.commons.math3.linear$AbstractRealMatrix$3#visit(int,int,double)": -0.029269295795042005,
        "org.apache.commons.math3.linear$AbstractRealMatrix$4#start(int,int,int,int,int,int)": -0.0889045575307934,
        "org.apache.commons.math3.linear$AbstractRealMatrix$4#visit(int,int,double)": -0.0889045575307934,
        "org.apache.commons.math3.linear$AbstractRealMatrix$5#visit(int,int,double)": 0.2268735639562417,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field)": -0.02377692742046438,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,int,int)": -0.10665646632546513,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])": -0.12824607816730083,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)": -0.09985337525681734,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])": -0.11314084154104015,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)": -0.07457052308212747,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": -0.02377692742046438,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()": -0.02377692742046438,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])": -0.12824607816730083,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyOut()": -0.10329830810700727,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#createMatrix(int,int)": -0.07457052308212747,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()": -0.16737038950515637,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getData()": -0.09985337525681734,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getDataRef()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)": -0.1513048079392085,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()": -0.16737038950515637,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": -0.016700997899247238,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": -0.02377692742046438,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": -0.016700997899247238,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)": -0.11154678593922344,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": -0.12824607816730083,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": -0.016700997899247238,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.016700997899247238,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.016700997899247238,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.016700997899247238,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.016700997899247238,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.02377692742046438,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.016700997899247238,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.08300783763914388,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.02377692742046438,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix()": -0.033941952601950195,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[])": -0.033941952601950195,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])": 1.4794306959035415,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)": -0.1967155800070287,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)": 1.472513363822777,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)": -0.02377692742046438,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()": -0.06275260252891685,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])": 1.477887053092188,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()": 1.5379075112358587,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)": 1.5448232265967476,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()": 0.06878710126893217,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getData()": 1.543953271660266,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getDataRef()": -0.11935447152088874,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)": 1.478658406359512,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()": 0.0694934211538859,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)": -0.05746528901529216,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)": -0.033941952601950195,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#operate(double[])": -0.11935447152088889,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#preMultiply(double[])": -0.02377692742046438,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)": 1.4794306959035415,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)": 1.477887053092188,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)": -0.016700997899247238,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.016700997899247238,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.016700997899247238,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 1.6623813022652425,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.016700997899247238,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.033941952601950195,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.016700997899247238,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 1.5717333067261143,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.0869747090867569,
        "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()": -0.4447443718803594,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector()": -0.029269295795041984,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[])": -0.2880643016616058,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)": -0.3581039159104072,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],double[])": -0.016700997899247238,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],int,int)": -0.016700997899247238,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],org.apache.commons.math3.linear.ArrayRealVector)": -0.016700997899247238,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int)": -0.2283340311815905,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int,double)": -0.029269295795041984,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[])": -0.016700997899247238,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[],int,int)": -0.016700997899247238,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector)": -0.016700997899247238,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,boolean)": -0.19456441056220994,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,double[])": -0.016700997899247238,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.ArrayRealVector)": -0.029269295795041984,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.RealVector)": -0.02377692742046438,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector)": -0.016700997899247238,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.ArrayRealVector)": -0.016700997899247238,
        "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)": -0.051722864108108876,
        "org.apache.commons.math3.linear$ArrayRealVector#addToEntry(int,double)": -0.029269295795041984,
        "org.apache.commons.math3.linear$ArrayRealVector#append(double)": -0.02377692742046438,
        "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.RealVector)": -0.02377692742046438,
        "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)": -0.23604912381904458,
        "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)": -0.07233646175422924,
        "org.apache.commons.math3.linear$ArrayRealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)": -0.07233646175422924,
        "org.apache.commons.math3.linear$ArrayRealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": -0.11627897366114033,
        "org.apache.commons.math3.linear$ArrayRealVector#copy()": -0.19348295953376238,
        "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)": -0.17903800567383163,
        "org.apache.commons.math3.linear$ArrayRealVector#ebeDivide(org.apache.commons.math3.linear.RealVector)": -0.04536224018978476,
        "org.apache.commons.math3.linear$ArrayRealVector#ebeMultiply(org.apache.commons.math3.linear.RealVector)": -0.06275260252891685,
        "org.apache.commons.math3.linear$ArrayRealVector#equals(java.lang.Object)": -0.12533437928865743,
        "org.apache.commons.math3.linear$ArrayRealVector#getDataRef()": -0.13252464350275805,
        "org.apache.commons.math3.linear$ArrayRealVector#getDimension()": -0.3633506478631383,
        "org.apache.commons.math3.linear$ArrayRealVector#getDistance(org.apache.commons.math3.linear.RealVector)": -0.03809076854471706,
        "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)": -0.32253545943223144,
        "org.apache.commons.math3.linear$ArrayRealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)": -0.033941952601950195,
        "org.apache.commons.math3.linear$ArrayRealVector#getL1Norm()": -0.02377692742046438,
        "org.apache.commons.math3.linear$ArrayRealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)": -0.033941952601950195,
        "org.apache.commons.math3.linear$ArrayRealVector#getLInfNorm()": -0.02377692742046438,
        "org.apache.commons.math3.linear$ArrayRealVector#getNorm()": -0.1380772814470003,
        "org.apache.commons.math3.linear$ArrayRealVector#getSubVector(int,int)": -0.04536224018978476,
        "org.apache.commons.math3.linear$ArrayRealVector#hashCode()": -0.029269295795041984,
        "org.apache.commons.math3.linear$ArrayRealVector#isInfinite()": -0.02377692742046438,
        "org.apache.commons.math3.linear$ArrayRealVector#isNaN()": -0.13110984823764782,
        "org.apache.commons.math3.linear$ArrayRealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)": -0.029269295795041984,
        "org.apache.commons.math3.linear$ArrayRealVector#mapAddToSelf(double)": -0.029269295795042005,
        "org.apache.commons.math3.linear$ArrayRealVector#mapDivideToSelf(double)": -0.038090768544716935,
        "org.apache.commons.math3.linear$ArrayRealVector#mapMultiplyToSelf(double)": -0.13944024570746505,
        "org.apache.commons.math3.linear$ArrayRealVector#mapSubtractToSelf(double)": -0.029269295795042005,
        "org.apache.commons.math3.linear$ArrayRealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": -0.03394195260195021,
        "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)": -0.029269295795041984,
        "org.apache.commons.math3.linear$ArrayRealVector#set(double)": -0.12237165768598723,
        "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)": -0.1600951154523248,
        "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,double[])": -0.0889045575307934,
        "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,org.apache.commons.math3.linear.RealVector)": -0.09080152749099919,
        "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)": -0.1637606655893843,
        "org.apache.commons.math3.linear$ArrayRealVector#toArray()": -0.19348295953376238,
        "org.apache.commons.math3.linear$ArrayRealVector#toString()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": -0.023776927420464222,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": -0.033941952601950195,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": -0.023776927420464222,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": -0.033941952601950195,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": -0.016700997899247238,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": -0.02377692742046438,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": -0.016700997899247238,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": -0.02377692742046438,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(int,int,org.apache.commons.math3.FieldElement[][],boolean)": -0.10665646632546513,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)": -0.09266749861622746,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.FieldElement[][])": -0.10665646632546513,
        "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.BlockFieldMatrix)": -0.033941952601950195,
        "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)": -0.02377692742046438,
        "org.apache.commons.math3.linear$BlockFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#blockHeight(int)": -0.11627897366114026,
        "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)": -0.12385960267082319,
        "org.apache.commons.math3.linear$BlockFieldMatrix#copy()": -0.016700997899247238,
        "org.apache.commons.math3.linear$BlockFieldMatrix#copyBlockPart(org.apache.commons.math3.FieldElement[],int,int,int,int,int,org.apache.commons.math3.FieldElement[],int,int,int)": -0.029269295795041984,
        "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)": -0.09266749861622746,
        "org.apache.commons.math3.linear$BlockFieldMatrix#createMatrix(int,int)": -0.016700997899247238,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumn(int)": -0.03809076854471706,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()": -0.11627897366114026,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnMatrix(int)": -0.029269295795041984,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnVector(int)": -0.029269295795041984,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getData()": -0.03809076854471706,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)": -0.0945041780037596,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRow(int)": -0.03809076854471706,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()": -0.11782426964647708,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowMatrix(int)": -0.033941952601950195,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowVector(int)": -0.029269295795041984,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getSubMatrix(int,int,int,int)": -0.029269295795041984,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.BlockFieldMatrix)": -0.04536224018978476,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)": -0.041867484133011286,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": -0.029269295795041984,
        "org.apache.commons.math3.linear$BlockFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": -0.02377692742046438,
        "org.apache.commons.math3.linear$BlockFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)": -0.033941952601950195,
        "org.apache.commons.math3.linear$BlockFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)": -0.016700997899247238,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])": -0.033941952601950195,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)": -0.02377692742046438,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": -0.02377692742046438,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)": -0.02377692742046438,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)": -0.03809076854471706,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])": -0.033941952601950195,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)": -0.02377692742046438,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": -0.02377692742046438,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)": -0.02377692742046438,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": -0.02377692742046438,
        "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.BlockFieldMatrix)": -0.02377692742046438,
        "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)": -0.016700997899247238,
        "org.apache.commons.math3.linear$BlockFieldMatrix#toBlocksLayout(org.apache.commons.math3.FieldElement[][])": -0.10665646632546513,
        "org.apache.commons.math3.linear$BlockFieldMatrix#transpose()": -0.029269295795041984,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.02377692742046438,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.016700997899247238,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.016700997899247238,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.02377692742046438,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.016700997899247238,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.016700997899247238,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.016700997899247238,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.016700997899247238,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])": -0.20828499048719631,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)": -0.15886026862645797,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)": -0.2293071934823645,
        "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)": -0.033941952601950195,
        "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)": -0.02377692742046438,
        "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)": -0.016700997899247238,
        "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)": -0.23604912381904453,
        "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)": -0.24361193040976437,
        "org.apache.commons.math3.linear$BlockRealMatrix#copy()": -0.03809076854471706,
        "org.apache.commons.math3.linear$BlockRealMatrix#copyBlockPart(double[],int,int,int,int,int,double[],int,int,int)": -0.033941952601950195,
        "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)": -0.18243881549170193,
        "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)": -0.016700997899247238,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumn(int)": -0.0809659370289629,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()": -0.23604912381904453,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)": -0.029269295795041984,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)": -0.029269295795041984,
        "org.apache.commons.math3.linear$BlockRealMatrix#getData()": -0.1613233759146427,
        "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)": -0.11935447152088889,
        "org.apache.commons.math3.linear$BlockRealMatrix#getFrobeniusNorm()": -0.016700997899247238,
        "org.apache.commons.math3.linear$BlockRealMatrix#getNorm()": -0.08500990450611014,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRow(int)": -0.03809076854471706,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()": -0.23700254355589978,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)": -0.033941952601950195,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)": -0.029269295795041984,
        "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)": -0.033941952601950195,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)": -0.06275260252891685,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": -0.06275260252891685,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#operate(double[])": -0.11627897366114033,
        "org.apache.commons.math3.linear$BlockRealMatrix#preMultiply(double[])": -0.02377692742046438,
        "org.apache.commons.math3.linear$BlockRealMatrix#scalarAdd(double)": -0.033941952601950195,
        "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)": -0.016700997899247238,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])": -0.0486337684478402,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)": -0.02377692742046438,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)": -0.02377692742046438,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)": -0.02377692742046438,
        "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)": -0.0869747090867569,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRow(int,double[])": -0.033941952601950195,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)": -0.02377692742046438,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)": -0.02377692742046438,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)": -0.02377692742046438,
        "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)": -0.02377692742046438,
        "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)": -0.07675074316186277,
        "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": -0.08300783763914388,
        "org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])": -0.20828499048719631,
        "org.apache.commons.math3.linear$BlockRealMatrix#transpose()": -0.09266749861622746,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.051722864108108876,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.016700997899247238,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.029269295795041984,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.033941952601950195,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.016700997899247238,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.016700997899247238,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.016700997899247238,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.016700997899247238,
        "org.apache.commons.math3.linear$DefaultRealMatrixPreservingVisitor#DefaultRealMatrixPreservingVisitor()": 0.22134432574010365,
        "org.apache.commons.math3.linear$DefaultRealMatrixPreservingVisitor#end()": 0.22134432574010365,
        "org.apache.commons.math3.linear$DefaultRealMatrixPreservingVisitor#start(int,int,int,int,int,int)": 0.2250222623866701,
        "org.apache.commons.math3.linear$DefaultRealMatrixPreservingVisitor#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)": -0.11314084154104015,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getExpectedColumnDimension()": -0.016700997899247238,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getExpectedRowDimension()": -0.016700997899247238,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getWrongColumnDimension()": -0.016700997899247238,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getWrongRowDimension()": -0.016700997899247238,
        "org.apache.commons.math3.linear$MatrixUtils#<clinit>()": 1.3665250346413806,
        "org.apache.commons.math3.linear$MatrixUtils#MatrixUtils()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)": -0.06768674090101981,
        "org.apache.commons.math3.linear$MatrixUtils#checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": -0.09809575226782147,
        "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)": 1.3936584321691199,
        "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)": 1.41740252937256,
        "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": 1.6025483171036283,
        "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)": 1.3943473839553482,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)": -0.11782426964647706,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])": -0.03809076854471706,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": 1.1740465699060016,
        "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])": -0.016700997899247238,
        "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])": -0.06275260252891685,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)": -0.02377692742046438,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.Field,int,int)": -0.02377692742046438,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])": -0.016700997899247238,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldVector(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])": -0.07675074316186277,
        "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)": -0.13532167486123686,
        "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])": 1.094121876066911,
        "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)": 1.6190274744036754,
        "org.apache.commons.math3.linear$MatrixUtils#createRealVector(double[])": -0.016700997899247238,
        "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])": -0.016700997899247238,
        "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])": -0.016700997899247238,
        "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)": -0.016700997899247238,
        "org.apache.commons.math3.linear$MatrixUtils#deserializeRealVector(java.lang.Object,java.lang.String,java.io.ObjectInputStream)": -0.016700997899247238,
        "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)": -0.016700997899247238,
        "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)": -0.016700997899247238,
        "org.apache.commons.math3.linear$MatrixUtils#serializeRealVector(org.apache.commons.math3.linear.RealVector,java.io.ObjectOutputStream)": -0.016700997899247238,
        "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)": -0.016700997899247238,
        "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)": -0.016700997899247238,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#MatrixUtils$BigFractionMatrixConverter()": -0.06768674090101978,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()": -0.06768674090101981,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#start(int,int,int,int,int,int)": -0.06768674090101978,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#visit(int,int,org.apache.commons.math3.fraction.BigFraction)": -0.06768674090101978,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#MatrixUtils$FractionMatrixConverter()": -0.016700997899247394,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()": -0.016700997899247238,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#start(int,int,int,int,int,int)": -0.016700997899247394,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#visit(int,int,org.apache.commons.math3.fraction.Fraction)": -0.016700997899247394,
        "org.apache.commons.math3.linear$NonPositiveDefiniteMatrixException#NonPositiveDefiniteMatrixException(double,int,double)": -0.02377692742046438,
        "org.apache.commons.math3.linear$NonPositiveDefiniteMatrixException#getColumn()": 0.0,
        "org.apache.commons.math3.linear$NonPositiveDefiniteMatrixException#getRow()": 0.0,
        "org.apache.commons.math3.linear$NonPositiveDefiniteMatrixException#getThreshold()": 0.0,
        "org.apache.commons.math3.linear$NonSquareMatrixException#NonSquareMatrixException(int,int)": -0.06525894309931007,
        "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()": -0.05837490666506795,
        "org.apache.commons.math3.linear$RealLinearOperator#isTransposable()": 0.0,
        "org.apache.commons.math3.linear$RealLinearOperator#operateTranspose(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat()": -0.016700997899247238,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": 1.3665250346413806,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)": -0.04149017862816484,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)": 1.3042962589987401,
        "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)": -0.07233646175422924,
        "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)": -0.07233646175422924,
        "org.apache.commons.math3.linear$RealMatrixFormat#getAvailableLocales()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getColumnSeparator()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()": -0.036439788140228635,
        "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()": 1.3665250346413806,
        "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)": 1.3042962589987401,
        "org.apache.commons.math3.linear$RealMatrixFormat#getPrefix()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowPrefix()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowSeparator()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowSuffix()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getSuffix()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)": -0.060158462000451135,
        "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)": -0.07004373241772328,
        "org.apache.commons.math3.linear$RealVector#RealVector()": -0.5632518679694201,
        "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)": -0.033941952601950195,
        "org.apache.commons.math3.linear$RealVector#addToEntry(int,double)": -0.041867484133011286,
        "org.apache.commons.math3.linear$RealVector#checkIndex(int)": -0.2637162748909747,
        "org.apache.commons.math3.linear$RealVector#checkIndices(int,int)": -0.0869747090867569,
        "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)": -0.15761869773475734,
        "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)": -0.1434728338538755,
        "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)": -0.051722864108108876,
        "org.apache.commons.math3.linear$RealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": -0.07233646175422924,
        "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)": -0.07233646175422924,
        "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)": -0.0945041780037596,
        "org.apache.commons.math3.linear$RealVector#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.linear$RealVector#getDistance(org.apache.commons.math3.linear.RealVector)": -0.033941952601950195,
        "org.apache.commons.math3.linear$RealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)": -0.033941952601950195,
        "org.apache.commons.math3.linear$RealVector#getL1Norm()": -0.02377692742046438,
        "org.apache.commons.math3.linear$RealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)": -0.033941952601950195,
        "org.apache.commons.math3.linear$RealVector#getLInfNorm()": -0.02377692742046438,
        "org.apache.commons.math3.linear$RealVector#getMaxIndex()": -0.03809076854471706,
        "org.apache.commons.math3.linear$RealVector#getMaxValue()": -0.03809076854471706,
        "org.apache.commons.math3.linear$RealVector#getMinIndex()": -0.03809076854471706,
        "org.apache.commons.math3.linear$RealVector#getMinValue()": -0.03809076854471706,
        "org.apache.commons.math3.linear$RealVector#getNorm()": -0.08300783763914388,
        "org.apache.commons.math3.linear$RealVector#hashCode()": 0.0,
        "org.apache.commons.math3.linear$RealVector#iterator()": -0.10665646632546513,
        "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)": -0.02377692742046438,
        "org.apache.commons.math3.linear$RealVector#mapAdd(double)": -0.029269295795041984,
        "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)": -0.033941952601950195,
        "org.apache.commons.math3.linear$RealVector#mapDivide(double)": -0.04536224018978476,
        "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)": -0.04536224018978476,
        "org.apache.commons.math3.linear$RealVector#mapMultiply(double)": -0.1513048079392085,
        "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)": -0.06275260252891685,
        "org.apache.commons.math3.linear$RealVector#mapSubtract(double)": -0.03809076854471706,
        "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)": -0.03809076854471706,
        "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": -0.0889045575307934,
        "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)": -0.03809076854471706,
        "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)": -0.06525894309931007,
        "org.apache.commons.math3.linear$RealVector#set(double)": -0.02377692742046438,
        "org.apache.commons.math3.linear$RealVector#sparseIterator()": -0.09985337525681734,
        "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)": -0.033941952601950195,
        "org.apache.commons.math3.linear$RealVector#toArray()": -0.029269295795041984,
        "org.apache.commons.math3.linear$RealVector#unitVector()": -0.03809076854471706,
        "org.apache.commons.math3.linear$RealVector#unitize()": -0.03809076854471706,
        "org.apache.commons.math3.linear$RealVector#unmodifiableRealVector(org.apache.commons.math3.linear.RealVector)": -0.09450417800375965,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": -0.033941952601950195,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": -0.0486337684478402,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": -0.033941952601950195,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": -0.0486337684478402,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": -0.02377692742046438,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": -0.033941952601950195,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": -0.02377692742046438,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": -0.033941952601950195,
        "org.apache.commons.math3.linear$RealVector$1#hasNext()": -0.10665646632546522,
        "org.apache.commons.math3.linear$RealVector$1#next()": -0.10665646632546522,
        "org.apache.commons.math3.linear$RealVector$1#remove()": -0.029269295795042005,
        "org.apache.commons.math3.linear$RealVector$2#add(org.apache.commons.math3.linear.RealVector)": -0.023776927420464222,
        "org.apache.commons.math3.linear$RealVector$2#addToEntry(int,double)": -0.023776927420464222,
        "org.apache.commons.math3.linear$RealVector$2#append(double)": -0.023776927420464222,
        "org.apache.commons.math3.linear$RealVector$2#append(org.apache.commons.math3.linear.RealVector)": -0.023776927420464222,
        "org.apache.commons.math3.linear$RealVector$2#combine(double,double,org.apache.commons.math3.linear.RealVector)": -0.023776927420464222,
        "org.apache.commons.math3.linear$RealVector$2#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": -0.023776927420464222,
        "org.apache.commons.math3.linear$RealVector$2#copy()": -0.023776927420464222,
        "org.apache.commons.math3.linear$RealVector$2#cosine(org.apache.commons.math3.linear.RealVector)": -0.023776927420464222,
        "org.apache.commons.math3.linear$RealVector$2#dotProduct(org.apache.commons.math3.linear.RealVector)": -0.023776927420464222,
        "org.apache.commons.math3.linear$RealVector$2#ebeDivide(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#ebeMultiply(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getDimension()": -0.041867484133011335,
        "org.apache.commons.math3.linear$RealVector$2#getDistance(org.apache.commons.math3.linear.RealVector)": -0.023776927420464222,
        "org.apache.commons.math3.linear$RealVector$2#getEntry(int)": -0.048633768447840175,
        "org.apache.commons.math3.linear$RealVector$2#getL1Distance(org.apache.commons.math3.linear.RealVector)": -0.023776927420464222,
        "org.apache.commons.math3.linear$RealVector$2#getL1Norm()": -0.023776927420464222,
        "org.apache.commons.math3.linear$RealVector$2#getLInfDistance(org.apache.commons.math3.linear.RealVector)": -0.023776927420464222,
        "org.apache.commons.math3.linear$RealVector$2#getLInfNorm()": -0.023776927420464222,
        "org.apache.commons.math3.linear$RealVector$2#getNorm()": -0.023776927420464222,
        "org.apache.commons.math3.linear$RealVector$2#getSubVector(int,int)": -0.023776927420464222,
        "org.apache.commons.math3.linear$RealVector$2#isInfinite()": -0.023776927420464222,
        "org.apache.commons.math3.linear$RealVector$2#isNaN()": -0.023776927420464222,
        "org.apache.commons.math3.linear$RealVector$2#iterator()": -0.03394195260195021,
        "org.apache.commons.math3.linear$RealVector$2#map(org.apache.commons.math3.analysis.UnivariateFunction)": -0.023776927420464222,
        "org.apache.commons.math3.linear$RealVector$2#mapAdd(double)": -0.023776927420464222,
        "org.apache.commons.math3.linear$RealVector$2#mapAddToSelf(double)": -0.023776927420464222,
        "org.apache.commons.math3.linear$RealVector$2#mapDivide(double)": -0.023776927420464222,
        "org.apache.commons.math3.linear$RealVector$2#mapDivideToSelf(double)": -0.023776927420464222,
        "org.apache.commons.math3.linear$RealVector$2#mapMultiply(double)": -0.023776927420464222,
        "org.apache.commons.math3.linear$RealVector$2#mapMultiplyToSelf(double)": -0.023776927420464222,
        "org.apache.commons.math3.linear$RealVector$2#mapSubtract(double)": -0.023776927420464222,
        "org.apache.commons.math3.linear$RealVector$2#mapSubtractToSelf(double)": -0.023776927420464222,
        "org.apache.commons.math3.linear$RealVector$2#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": -0.023776927420464222,
        "org.apache.commons.math3.linear$RealVector$2#outerProduct(org.apache.commons.math3.linear.RealVector)": -0.023776927420464222,
        "org.apache.commons.math3.linear$RealVector$2#set(double)": -0.029269295795042005,
        "org.apache.commons.math3.linear$RealVector$2#setEntry(int,double)": -0.023776927420464222,
        "org.apache.commons.math3.linear$RealVector$2#setSubVector(int,org.apache.commons.math3.linear.RealVector)": -0.023776927420464222,
        "org.apache.commons.math3.linear$RealVector$2#sparseIterator()": -0.023776927420464222,
        "org.apache.commons.math3.linear$RealVector$2#subtract(org.apache.commons.math3.linear.RealVector)": -0.03394195260195021,
        "org.apache.commons.math3.linear$RealVector$2#toArray()": -0.023776927420464222,
        "org.apache.commons.math3.linear$RealVector$2#unitVector()": -0.023776927420464222,
        "org.apache.commons.math3.linear$RealVector$2#unitize()": -0.023776927420464222,
        "org.apache.commons.math3.linear$RealVector$2$1#hasNext()": -0.03394195260195021,
        "org.apache.commons.math3.linear$RealVector$2$1#next()": -0.03394195260195021,
        "org.apache.commons.math3.linear$RealVector$2$1#remove()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$2#hasNext()": -0.023776927420464222,
        "org.apache.commons.math3.linear$RealVector$2$2#next()": -0.023776927420464222,
        "org.apache.commons.math3.linear$RealVector$2$2#remove()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#RealVector$2$UnmodifiableEntry(org.apache.commons.math3.linear.RealVector$2)": -0.041867484133011335,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#getValue()": -0.041867484133011335,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#setValue(double)": -0.03394195260195021,
        "org.apache.commons.math3.linear$RealVector$Entry#RealVector$Entry(org.apache.commons.math3.linear.RealVector)": -0.1613233759146427,
        "org.apache.commons.math3.linear$RealVector$Entry#getIndex()": -0.14479904721071613,
        "org.apache.commons.math3.linear$RealVector$Entry#getValue()": -0.14079366369134952,
        "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)": -0.16132337591464263,
        "org.apache.commons.math3.linear$RealVector$Entry#setValue(double)": -0.0889045575307934,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#RealVector$SparseEntryIterator(org.apache.commons.math3.linear.RealVector)": -0.09985337525681734,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)": -0.09985337525681734,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()": -0.09985337525681734,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()": -0.09631312159349018,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#remove()": 0.0,
        "org.apache.commons.math3.linear$RectangularCholeskyDecomposition#RectangularCholeskyDecomposition(org.apache.commons.math3.linear.RealMatrix,double)": 1.7781325158669885,
        "org.apache.commons.math3.linear$RectangularCholeskyDecomposition#getRank()": 0.13660976983453452,
        "org.apache.commons.math3.linear$RectangularCholeskyDecomposition#getRootMatrix()": 0.43234607824008375,
        "org.apache.commons.math3.util$CompositeFormat#CompositeFormat()": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#formatDouble(double,java.text.NumberFormat,java.lang.StringBuffer,java.text.FieldPosition)": -0.18130997073653443,
        "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()": 1.3532468752145226,
        "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)": -0.23154958205595888,
        "org.apache.commons.math3.util$CompositeFormat#parseAndIgnoreWhitespace(java.lang.String,java.text.ParsePosition)": -0.20202761052461077,
        "org.apache.commons.math3.util$CompositeFormat#parseFixedstring(java.lang.String,java.lang.String,java.text.ParsePosition)": -0.19991383092575932,
        "org.apache.commons.math3.util$CompositeFormat#parseNextCharacter(java.lang.String,java.text.ParsePosition)": -0.20202761052461082,
        "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,double,java.text.ParsePosition)": -0.08697470908675675,
        "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,java.text.NumberFormat,java.text.ParsePosition)": -0.1967155800070287,
        "org.apache.commons.math3.util$FastMath#<clinit>()": -1.1893345987639674,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0.0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": -0.016700997899247394,
        "org.apache.commons.math3.util$FastMath#abs(double)": -0.6092836279114103,
        "org.apache.commons.math3.util$FastMath#abs(float)": -0.023776927420464222,
        "org.apache.commons.math3.util$FastMath#abs(int)": -0.38323135311517587,
        "org.apache.commons.math3.util$FastMath#abs(long)": -0.506021595343211,
        "org.apache.commons.math3.util$FastMath#acos(double)": -0.0809659370289629,
        "org.apache.commons.math3.util$FastMath#acosh(double)": -0.02377692742046438,
        "org.apache.commons.math3.util$FastMath#asin(double)": -0.08300783763914388,
        "org.apache.commons.math3.util$FastMath#asinh(double)": -0.02377692742046438,
        "org.apache.commons.math3.util$FastMath#atan(double)": -0.08500990450611014,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": -0.17789472495431366,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": -0.1637606655893843,
        "org.apache.commons.math3.util$FastMath#atanh(double)": -0.02377692742046438,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": -0.11627897366114033,
        "org.apache.commons.math3.util$FastMath#ceil(double)": -0.4018886679803517,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": -0.0627526025289169,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": -0.023776927420464222,
        "org.apache.commons.math3.util$FastMath#cos(double)": -0.31774028248842756,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": -0.37372746798680306,
        "org.apache.commons.math3.util$FastMath#cosh(double)": -0.09266749861622746,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": -0.15258224390447728,
        "org.apache.commons.math3.util$FastMath#exp(double)": -0.6219663083022793,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": -0.7456756604587386,
        "org.apache.commons.math3.util$FastMath#expm1(double)": -0.06768674090101981,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": -0.09631312159349018,
        "org.apache.commons.math3.util$FastMath#floor(double)": -0.7140335039145604,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": -0.15258224390447728,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": -0.023776927420464222,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": -0.14611663780863654,
        "org.apache.commons.math3.util$FastMath#log(double)": -0.6649573622516004,
        "org.apache.commons.math3.util$FastMath#log(double,double)": -0.016700997899247238,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": -0.7869223546751726,
        "org.apache.commons.math3.util$FastMath#log10(double)": -0.1380772814470003,
        "org.apache.commons.math3.util$FastMath#log1p(double)": -0.47790139869198867,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0.0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": -0.08296478610090519,
        "org.apache.commons.math3.util$FastMath#max(float,float)": -0.023776927420464222,
        "org.apache.commons.math3.util$FastMath#max(int,int)": -0.42840516900962555,
        "org.apache.commons.math3.util$FastMath#max(long,long)": -0.016700997899247394,
        "org.apache.commons.math3.util$FastMath#min(double,double)": -0.3413415936404878,
        "org.apache.commons.math3.util$FastMath#min(float,float)": -0.023776927420464222,
        "org.apache.commons.math3.util$FastMath#min(int,int)": -0.583695774918854,
        "org.apache.commons.math3.util$FastMath#min(long,long)": -0.10665646632546522,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": -0.06525894309931024,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": -0.029269295795042005,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": -0.02377692742046438,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": -0.016700997899247238,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": -0.4018886679803517,
        "org.apache.commons.math3.util$FastMath#polySine(double)": -0.4018886679803517,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": -0.568693996514047,
        "org.apache.commons.math3.util$FastMath#pow(double,int)": -0.2637162748909747,
        "org.apache.commons.math3.util$FastMath#random()": -0.07675074316186281,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": -0.03809076854471706,
        "org.apache.commons.math3.util$FastMath#rint(double)": -0.0809659370289629,
        "org.apache.commons.math3.util$FastMath#round(double)": -0.07888132110671274,
        "org.apache.commons.math3.util$FastMath#round(float)": -0.029269295795041984,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": -0.12824607816730071,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": -0.023776927420464222,
        "org.apache.commons.math3.util$FastMath#signum(double)": -0.06015846200045116,
        "org.apache.commons.math3.util$FastMath#signum(float)": -0.023776927420464222,
        "org.apache.commons.math3.util$FastMath#sin(double)": -0.38468273997119573,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": -0.3890202529132004,
        "org.apache.commons.math3.util$FastMath#sinh(double)": -0.09266749861622746,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": -0.6145172620449445,
        "org.apache.commons.math3.util$FastMath#tan(double)": -0.09080152749099919,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": -0.09080152749099919,
        "org.apache.commons.math3.util$FastMath#tanh(double)": -0.060158462000451135,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": -0.033941952601950195,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": -0.033941952601950195,
        "org.apache.commons.math3.util$FastMath#ulp(double)": -0.32333084417587044,
        "org.apache.commons.math3.util$FastMath#ulp(float)": -0.016700997899247238,
        "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double,double)": -0.3413415936404878,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getK()": -0.3413415936404878,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()": -0.3413415936404878,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()": -0.3413415936404878,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": -0.7369984999935091,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": -0.7348231844105877,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": -0.7789511051983933,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0.0,
        "org.apache.commons.math3.util$MathUtils#MathUtils()": 0.0,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double)": -0.07233646175422924,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double[])": -0.016700997899247238,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)": 1.1449956404672632,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.16496994787232344,
        "org.apache.commons.math3.util$MathUtils#copySign(byte,byte)": -0.033941952601950195,
        "org.apache.commons.math3.util$MathUtils#copySign(int,int)": -0.033941952601950195,
        "org.apache.commons.math3.util$MathUtils#copySign(long,long)": -0.02377692742046438,
        "org.apache.commons.math3.util$MathUtils#copySign(short,short)": -0.02377692742046438,
        "org.apache.commons.math3.util$MathUtils#hash(double)": -0.12533437928865743,
        "org.apache.commons.math3.util$MathUtils#hash(double[])": -0.051722864108108876,
        "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)": -0.10830533944731927,
        "org.apache.commons.math3.util$MathUtils#reduce(double,double,double)": -0.03809076854471706
    },
    "Math-22": {
        "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#BaseAbstractUnivariateIntegrator(double,double)": 0.0,
        "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#BaseAbstractUnivariateIntegrator(double,double,int,int)": -0.10926599490281891,
        "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#BaseAbstractUnivariateIntegrator(int,int)": -0.05680600768800377,
        "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)": -0.10390840232154286,
        "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#getAbsoluteAccuracy()": -0.10207464858673587,
        "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#getEvaluations()": -0.050534499738969396,
        "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#getIterations()": -0.050534499738969396,
        "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#getMax()": -0.10390840232154286,
        "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#getMaximalIterationCount()": 0.0,
        "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#getMin()": -0.10390840232154286,
        "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#getMinimalIterationCount()": -0.10390840232154286,
        "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#getRelativeAccuracy()": -0.10390840232154286,
        "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#integrate(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)": -0.10926599490281891,
        "org.apache.commons.math3.analysis.integration$BaseAbstractUnivariateIntegrator#setup(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)": -0.10926599490281896,
        "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#<clinit>()": -0.08203770458388204,
        "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#IterativeLegendreGaussIntegrator(int,double,double)": -0.05972736851224268,
        "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#IterativeLegendreGaussIntegrator(int,double,double,int,int)": -0.08203770458388203,
        "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#IterativeLegendreGaussIntegrator(int,int,int)": -0.017335433055052443,
        "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#doIntegrate()": -0.08203770458388203,
        "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator#stage(int)": -0.08203770458388203,
        "org.apache.commons.math3.analysis.integration$IterativeLegendreGaussIntegrator$1#value(double)": -0.08203770458388204,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#AbstractRealDistribution()": 0.0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#AbstractRealDistribution(org.apache.commons.math3.random.RandomGenerator)": 1.2345687434842776,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)": -0.12105231905758877,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()": -0.024686192344789637,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)": -0.2062840791950441,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double)": 0.0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)": -0.12584636979612976,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#reseedRandomGenerator(long)": -0.05972736851224268,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()": -0.16425045856645928,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)": -0.06253162563839741,
        "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)": -0.19256618208333243,
        "org.apache.commons.math3.distribution$FDistribution#FDistribution(double,double)": 1.015032132599812,
        "org.apache.commons.math3.distribution$FDistribution#FDistribution(double,double,double)": 1.015032132599812,
        "org.apache.commons.math3.distribution$FDistribution#FDistribution(org.apache.commons.math3.random.RandomGenerator,double,double,double)": 1.015032132599812,
        "org.apache.commons.math3.distribution$FDistribution#calculateNumericalVariance()": -0.07521692973727352,
        "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)": -0.08842665085279468,
        "org.apache.commons.math3.distribution$FDistribution#density(double)": 1.0867125546543912,
        "org.apache.commons.math3.distribution$FDistribution#getDenominatorDegreesOfFreedom()": -0.07754492218253883,
        "org.apache.commons.math3.distribution$FDistribution#getNumeratorDegreesOfFreedom()": -0.07521692973727356,
        "org.apache.commons.math3.distribution$FDistribution#getNumericalMean()": -0.07521692973727352,
        "org.apache.commons.math3.distribution$FDistribution#getNumericalVariance()": -0.07521692973727352,
        "org.apache.commons.math3.distribution$FDistribution#getSolverAbsoluteAccuracy()": -0.0728280773683796,
        "org.apache.commons.math3.distribution$FDistribution#getSupportLowerBound()": 0.17952794165431535,
        "org.apache.commons.math3.distribution$FDistribution#getSupportUpperBound()": -0.07754492218253883,
        "org.apache.commons.math3.distribution$FDistribution#isSupportConnected()": -0.0728280773683796,
        "org.apache.commons.math3.distribution$FDistribution#isSupportLowerBoundInclusive()": 0.2547448713915889,
        "org.apache.commons.math3.distribution$FDistribution#isSupportUpperBoundInclusive()": -0.017335433055052363,
        "org.apache.commons.math3.distribution$UniformRealDistribution#UniformRealDistribution()": 0.0,
        "org.apache.commons.math3.distribution$UniformRealDistribution#UniformRealDistribution(double,double)": 1.041889851449274,
        "org.apache.commons.math3.distribution$UniformRealDistribution#UniformRealDistribution(double,double,double)": 1.041889851449274,
        "org.apache.commons.math3.distribution$UniformRealDistribution#UniformRealDistribution(org.apache.commons.math3.random.RandomGenerator,double,double,double)": 1.0350690766026656,
        "org.apache.commons.math3.distribution$UniformRealDistribution#cumulativeProbability(double)": -0.039566208480203535,
        "org.apache.commons.math3.distribution$UniformRealDistribution#density(double)": 0.22435064485943274,
        "org.apache.commons.math3.distribution$UniformRealDistribution#getNumericalMean()": -0.030394226532156177,
        "org.apache.commons.math3.distribution$UniformRealDistribution#getNumericalVariance()": -0.030394226532156177,
        "org.apache.commons.math3.distribution$UniformRealDistribution#getSolverAbsoluteAccuracy()": -0.024686192344789637,
        "org.apache.commons.math3.distribution$UniformRealDistribution#getSupportLowerBound()": -0.0352519236347999,
        "org.apache.commons.math3.distribution$UniformRealDistribution#getSupportUpperBound()": 0.22435064485943274,
        "org.apache.commons.math3.distribution$UniformRealDistribution#isSupportConnected()": -0.024686192344789637,
        "org.apache.commons.math3.distribution$UniformRealDistribution#isSupportLowerBoundInclusive()": -0.017335433055052363,
        "org.apache.commons.math3.distribution$UniformRealDistribution#isSupportUpperBoundInclusive()": 0.2547448713915889,
        "org.apache.commons.math3.distribution$UniformRealDistribution#sample()": -0.0505344997389693,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.6864947427610311,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": -0.0471302792158268,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.582863299421585,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": -0.06523315032324106,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": -0.13203594157313417,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.16163209334091344,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": -0.1305088283580096,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": -0.017335433055052363,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)": -0.08421066814389519,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.08421066814389519,
        "org.apache.commons.math3.exception$MaxCountExceededException#getMax()": -0.06523315032324106,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)": -0.11442966937104157,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": -0.17569655966166295,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)": -0.09641219731872337,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.199501919161797,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getBoundIsAllowed()": -0.017335433055052363,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getMax()": -0.017335433055052363,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": -0.15764835539221272,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.3000495063951779,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": -0.030394226532156177,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": -0.030394226532156177,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(java.lang.Number,java.lang.Number,java.lang.Number)": -0.10207464858673569,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)": -0.28282456535053,
        "org.apache.commons.math3.exception$OutOfRangeException#getHi()": -0.017335433055052363,
        "org.apache.commons.math3.exception$OutOfRangeException#getLo()": -0.017335433055052363,
        "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int)": 1.2135603162229942,
        "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int,int)": -0.43315744730759953,
        "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int,int[])": 1.008455192005562,
        "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int,long)": -0.642036282642086,
        "org.apache.commons.math3.random$AbstractWell#setSeed(int)": -0.04349449080578663,
        "org.apache.commons.math3.random$AbstractWell#setSeed(int[])": 1.008455192005562,
        "org.apache.commons.math3.random$AbstractWell#setSeed(long)": 1.019205548688665,
        "org.apache.commons.math3.random$BitsStreamGenerator#BitsStreamGenerator()": -0.3742869109976511,
        "org.apache.commons.math3.random$BitsStreamGenerator#clear()": -0.3742869109976511,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextBoolean()": -0.09641219731872337,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextBytes(byte[])": -0.07981706179882557,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()": -0.48606617434203975,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextFloat()": -0.09641219731872337,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()": -0.16294491414237627,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextInt()": -0.11100752037310128,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextInt(int)": -0.11272846120073884,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextLong()": -0.09641219731872337,
        "org.apache.commons.math3.random$RandomDataGenerator#RandomDataGenerator()": -0.34184234258987367,
        "org.apache.commons.math3.random$RandomDataGenerator#RandomDataGenerator(org.apache.commons.math3.random.RandomGenerator)": -0.5918304397255014,
        "org.apache.commons.math3.random$RandomDataGenerator#getNatural(int)": -0.0904753267597429,
        "org.apache.commons.math3.random$RandomDataGenerator#getRan()": -0.637708915373766,
        "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()": -0.07754492218253883,
        "org.apache.commons.math3.random$RandomDataGenerator#initRan()": -0.6370897480983013,
        "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)": -0.05972736851224268,
        "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)": -0.05972736851224268,
        "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)": -0.05972736851224268,
        "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)": -0.05972736851224268,
        "org.apache.commons.math3.random$RandomDataGenerator#nextExponential(double)": -0.06523315032324119,
        "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)": -0.05972736851224268,
        "org.apache.commons.math3.random$RandomDataGenerator#nextGamma(double,double)": -0.05972736851224268,
        "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)": -0.07754492218253879,
        "org.apache.commons.math3.random$RandomDataGenerator#nextHexString(int)": -0.05972736851224268,
        "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)": -0.05972736851224268,
        "org.apache.commons.math3.random$RandomDataGenerator#nextInt(int,int)": -0.16163209334091344,
        "org.apache.commons.math3.random$RandomDataGenerator#nextLong(long,long)": -0.15898398167587394,
        "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)": -0.05972736851224268,
        "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)": -0.09047532675974292,
        "org.apache.commons.math3.random$RandomDataGenerator#nextPoisson(double)": -0.08633932049082983,
        "org.apache.commons.math3.random$RandomDataGenerator#nextSample(java.util.Collection,int)": -0.06253162563839741,
        "org.apache.commons.math3.random$RandomDataGenerator#nextSecureHexString(int)": -0.06253162563839741,
        "org.apache.commons.math3.random$RandomDataGenerator#nextSecureInt(int,int)": -0.03525192363479983,
        "org.apache.commons.math3.random$RandomDataGenerator#nextSecureLong(long,long)": -0.07037256189855776,
        "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)": -0.05972736851224268,
        "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double)": -0.21943744778217214,
        "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)": -0.21943744778217214,
        "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)": -0.05972736851224268,
        "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)": -0.05972736851224268,
        "org.apache.commons.math3.random$RandomDataGenerator#reSeed()": -0.05972736851224268,
        "org.apache.commons.math3.random$RandomDataGenerator#reSeed(long)": -0.6339902315425633,
        "org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure()": -0.05972736851224268,
        "org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure(long)": -0.05972736851224268,
        "org.apache.commons.math3.random$RandomDataGenerator#setSecureAlgorithm(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#shuffle(int[],int)": -0.09047532675974292,
        "org.apache.commons.math3.random$RandomDataImpl#RandomDataImpl()": 1.0039440950370313,
        "org.apache.commons.math3.random$RandomDataImpl#RandomDataImpl(org.apache.commons.math3.random.RandomGenerator)": -0.5918304397255013,
        "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)": -0.05972736851224268,
        "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)": -0.05972736851224268,
        "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)": -0.05972736851224268,
        "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)": -0.05972736851224268,
        "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)": -0.06523315032324119,
        "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)": -0.05972736851224268,
        "org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)": -0.05972736851224268,
        "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)": -0.07754492218253879,
        "org.apache.commons.math3.random$RandomDataImpl#nextHexString(int)": -0.05972736851224268,
        "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)": -0.05972736851224268,
        "org.apache.commons.math3.random$RandomDataImpl#nextInt(int,int)": -0.12741448831103513,
        "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)": -0.05972736851224268,
        "org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)": -0.15898398167587394,
        "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)": -0.05972736851224268,
        "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)": -0.06253162563839741,
        "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)": -0.08633932049082983,
        "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)": -0.06253162563839741,
        "org.apache.commons.math3.random$RandomDataImpl#nextSecureHexString(int)": -0.06253162563839741,
        "org.apache.commons.math3.random$RandomDataImpl#nextSecureInt(int,int)": -0.03525192363479983,
        "org.apache.commons.math3.random$RandomDataImpl#nextSecureLong(long,long)": -0.07037256189855776,
        "org.apache.commons.math3.random$RandomDataImpl#nextT(double)": -0.05972736851224268,
        "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)": -0.21943744778217214,
        "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)": -0.05972736851224268,
        "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)": -0.05972736851224268,
        "org.apache.commons.math3.random$RandomDataImpl#reSeed()": -0.05972736851224268,
        "org.apache.commons.math3.random$RandomDataImpl#reSeed(long)": -0.6339902315425633,
        "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure()": -0.05972736851224268,
        "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure(long)": -0.05972736851224268,
        "org.apache.commons.math3.random$RandomDataImpl#setSecureAlgorithm(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.math3.random$Well19937c#Well19937c()": 1.2135603162229942,
        "org.apache.commons.math3.random$Well19937c#Well19937c(int)": -0.15898398167587394,
        "org.apache.commons.math3.random$Well19937c#Well19937c(int[])": -0.017335433055052443,
        "org.apache.commons.math3.random$Well19937c#Well19937c(long)": -0.6370897480983013,
        "org.apache.commons.math3.random$Well19937c#next(int)": -0.24235205411052552,
        "org.apache.commons.math3.special$Beta#Beta()": 0.0,
        "org.apache.commons.math3.special$Beta#logBeta(double,double)": 1.0603007734985437,
        "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)": 0.8788188355412816,
        "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)": -0.23726527430694577,
        "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double)": 0.0,
        "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)": -0.23726527430694577,
        "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,int)": 0.0,
        "org.apache.commons.math3.special$Beta$1#getA(int,double)": -0.2289834688797605,
        "org.apache.commons.math3.special$Beta$1#getB(int,double)": -0.2289834688797605,
        "org.apache.commons.math3.special$Gamma#<clinit>()": 0.5900352792966097,
        "org.apache.commons.math3.special$Gamma#Gamma()": 0.0,
        "org.apache.commons.math3.special$Gamma#digamma(double)": -0.024686192344789703,
        "org.apache.commons.math3.special$Gamma#gamma(double)": -0.017335433055052443,
        "org.apache.commons.math3.special$Gamma#invGamma1pm1(double)": 0.6259821038610464,
        "org.apache.commons.math3.special$Gamma#lanczos(double)": -0.4592571569090276,
        "org.apache.commons.math3.special$Gamma#logGamma(double)": 0.6172034062812963,
        "org.apache.commons.math3.special$Gamma#logGamma1p(double)": 0.6275645269576664,
        "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)": -0.4175764989408788,
        "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)": -0.44629874614613524,
        "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)": -0.04713027921582695,
        "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)": -0.3261722608749298,
        "org.apache.commons.math3.special$Gamma#trigamma(double)": -0.017335433055052443,
        "org.apache.commons.math3.special$Gamma$1#getA(int,double)": -0.31326212205726467,
        "org.apache.commons.math3.special$Gamma$1#getB(int,double)": -0.31326212205726467,
        "org.apache.commons.math3.util$ContinuedFraction#ContinuedFraction()": -0.4100559206871437,
        "org.apache.commons.math3.util$ContinuedFraction#evaluate(double)": 0.0,
        "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double)": -0.017335433055052443,
        "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)": -0.4100559206871438,
        "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#<clinit>()": -1.498500636927947,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0.0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": -0.017335433055052363,
        "org.apache.commons.math3.util$FastMath#abs(double)": -1.1385761850754421,
        "org.apache.commons.math3.util$FastMath#abs(float)": -0.024686192344789637,
        "org.apache.commons.math3.util$FastMath#abs(int)": -0.40093959626927056,
        "org.apache.commons.math3.util$FastMath#abs(long)": -0.7127493283982358,
        "org.apache.commons.math3.util$FastMath#acos(double)": -0.08421066814389519,
        "org.apache.commons.math3.util$FastMath#acosh(double)": -0.024686192344789703,
        "org.apache.commons.math3.util$FastMath#asin(double)": -0.08633932049082983,
        "org.apache.commons.math3.util$FastMath#asinh(double)": -0.024686192344789703,
        "org.apache.commons.math3.util$FastMath#atan(double)": -0.08842665085279468,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": -0.18546190652494846,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": -0.1706742165668551,
        "org.apache.commons.math3.util$FastMath#atanh(double)": -0.024686192344789703,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": -0.12105231905758877,
        "org.apache.commons.math3.util$FastMath#ceil(double)": -0.42056602708988744,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": -0.06523315032324106,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": -0.024686192344789637,
        "org.apache.commons.math3.util$FastMath#cos(double)": -0.3312582828873886,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": -0.39017042463387835,
        "org.apache.commons.math3.util$FastMath#cosh(double)": -0.09641219731872337,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": -0.15898398167587402,
        "org.apache.commons.math3.util$FastMath#exp(double)": 0.4652233034070394,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": 0.33453798035859167,
        "org.apache.commons.math3.util$FastMath#expm1(double)": -0.07037256189855776,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": -0.10021495284612736,
        "org.apache.commons.math3.util$FastMath#floor(double)": -0.49438335223999613,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": -0.15898398167587402,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": -0.024686192344789637,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": -0.15222449387807996,
        "org.apache.commons.math3.util$FastMath#log(double)": 0.4198251781912426,
        "org.apache.commons.math3.util$FastMath#log(double,double)": -0.017335433055052443,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": 0.29093344520620773,
        "org.apache.commons.math3.util$FastMath#log10(double)": -0.1438219947987673,
        "org.apache.commons.math3.util$FastMath#log1p(double)": 0.6172034062812963,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0.0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": -0.5835057373691672,
        "org.apache.commons.math3.util$FastMath#max(float,float)": -0.024686192344789637,
        "org.apache.commons.math3.util$FastMath#max(int,int)": -0.4441215784044743,
        "org.apache.commons.math3.util$FastMath#max(long,long)": -0.017335433055052363,
        "org.apache.commons.math3.util$FastMath#min(double,double)": -0.35608721058767423,
        "org.apache.commons.math3.util$FastMath#min(float,float)": -0.024686192344789637,
        "org.apache.commons.math3.util$FastMath#min(int,int)": -0.6083343743827403,
        "org.apache.commons.math3.util$FastMath#min(long,long)": -0.11100752037310135,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": -0.06784359472651902,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": -0.030394226532156177,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": -0.024686192344789703,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": -0.017335433055052443,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": -0.4198196282441775,
        "org.apache.commons.math3.util$FastMath#polySine(double)": -0.4198196282441775,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": -0.5962925722400727,
        "org.apache.commons.math3.util$FastMath#pow(double,int)": -0.27538973424129387,
        "org.apache.commons.math3.util$FastMath#random()": -0.07981706179882542,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": -0.03956620848020365,
        "org.apache.commons.math3.util$FastMath#rint(double)": -0.08421066814389519,
        "org.apache.commons.math3.util$FastMath#round(double)": -0.08203770458388203,
        "org.apache.commons.math3.util$FastMath#round(float)": -0.03039422653215629,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": -0.13355023940396094,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": -0.024686192344789637,
        "org.apache.commons.math3.util$FastMath#signum(double)": -0.06253162563839743,
        "org.apache.commons.math3.util$FastMath#signum(float)": -0.024686192344789637,
        "org.apache.commons.math3.util$FastMath#sin(double)": -0.4017032298265487,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": -0.4062698741155593,
        "org.apache.commons.math3.util$FastMath#sinh(double)": -0.09641219731872337,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": -1.1446272978800116,
        "org.apache.commons.math3.util$FastMath#tan(double)": -0.09446604741685836,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": -0.09446604741685836,
        "org.apache.commons.math3.util$FastMath#tanh(double)": -0.06253162563839741,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": -0.03525192363479983,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": -0.03525192363479983,
        "org.apache.commons.math3.util$FastMath#ulp(double)": -0.33797449945439473,
        "org.apache.commons.math3.util$FastMath#ulp(float)": -0.017335433055052443,
        "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double,double)": -0.35608721058767423,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getK()": -0.35608721058767423,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()": -0.35608721058767423,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()": -0.35608721058767423,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": 0.3437092346598986,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": 0.3460083091848422,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": 0.29936152672184696,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0.0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()": -0.6147761802392744,
        "org.apache.commons.math3.util$FastMathLiteralArrays#FastMathLiteralArrays()": 0.0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()": 0.3437092346598986,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()": 0.3437092346598986,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()": 0.3460083091848422,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()": 0.3460083091848422,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()": 0.29936152672184696
    },
    "Math-23": {
        "org.apache.commons.math3.analysis$FunctionUtils#FunctionUtils()": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#add(org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[])": -0.025053885526627795,
        "org.apache.commons.math3.analysis$FunctionUtils#add(org.apache.commons.math3.analysis.UnivariateFunction[])": 0.4491596768464673,
        "org.apache.commons.math3.analysis$FunctionUtils#add(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[])": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#collector(org.apache.commons.math3.analysis.BivariateFunction,double)": -0.017591904658852825,
        "org.apache.commons.math3.analysis$FunctionUtils#collector(org.apache.commons.math3.analysis.BivariateFunction,org.apache.commons.math3.analysis.UnivariateFunction,double)": -0.017591904658852853,
        "org.apache.commons.math3.analysis$FunctionUtils#combine(org.apache.commons.math3.analysis.BivariateFunction,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.UnivariateFunction)": -0.025053885526627795,
        "org.apache.commons.math3.analysis$FunctionUtils#compose(org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[])": -0.025053885526627795,
        "org.apache.commons.math3.analysis$FunctionUtils#compose(org.apache.commons.math3.analysis.UnivariateFunction[])": -0.030849244080260574,
        "org.apache.commons.math3.analysis$FunctionUtils#compose(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[])": -0.025053885526627795,
        "org.apache.commons.math3.analysis$FunctionUtils#fix1stArgument(org.apache.commons.math3.analysis.BivariateFunction,double)": -0.017591904658852853,
        "org.apache.commons.math3.analysis$FunctionUtils#fix2ndArgument(org.apache.commons.math3.analysis.BivariateFunction,double)": -0.09189440770155866,
        "org.apache.commons.math3.analysis$FunctionUtils#multiply(org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[])": -0.025053885526627795,
        "org.apache.commons.math3.analysis$FunctionUtils#multiply(org.apache.commons.math3.analysis.UnivariateFunction[])": -0.017591904658852853,
        "org.apache.commons.math3.analysis$FunctionUtils#multiply(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[])": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)": -0.10920834783250986,
        "org.apache.commons.math3.analysis$FunctionUtils#toDifferentiableUnivariateFunction(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable)": -0.04415294547757376,
        "org.apache.commons.math3.analysis$FunctionUtils#toUnivariateDifferential(org.apache.commons.math3.analysis.DifferentiableUnivariateFunction)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$1#value(double)": -0.030849244080260574,
        "org.apache.commons.math3.analysis$FunctionUtils$10#value(double)": -0.025053885526627795,
        "org.apache.commons.math3.analysis$FunctionUtils$11#value(double[])": -0.017591904658852853,
        "org.apache.commons.math3.analysis$FunctionUtils$12#value(double)": -0.017591904658852853,
        "org.apache.commons.math3.analysis$FunctionUtils$13#value(double)": -0.09189440770155866,
        "org.apache.commons.math3.analysis$FunctionUtils$14#derivative()": -0.04415294547757376,
        "org.apache.commons.math3.analysis$FunctionUtils$14#value(double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$14$1#value(double)": -0.04016322936661387,
        "org.apache.commons.math3.analysis$FunctionUtils$2#value(double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$2#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": -0.025053885526627795,
        "org.apache.commons.math3.analysis$FunctionUtils$3#derivative()": -0.025053885526627795,
        "org.apache.commons.math3.analysis$FunctionUtils$3#value(double)": -0.017591904658852853,
        "org.apache.commons.math3.analysis$FunctionUtils$3$1#value(double)": -0.025053885526627795,
        "org.apache.commons.math3.analysis$FunctionUtils$4#value(double)": 0.4491596768464673,
        "org.apache.commons.math3.analysis$FunctionUtils$6#derivative()": -0.025053885526627795,
        "org.apache.commons.math3.analysis$FunctionUtils$6#value(double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$6$1#value(double)": -0.025053885526627795,
        "org.apache.commons.math3.analysis$FunctionUtils$7#value(double)": -0.017591904658852853,
        "org.apache.commons.math3.analysis$FunctionUtils$9#derivative()": -0.025053885526627795,
        "org.apache.commons.math3.analysis$FunctionUtils$9#value(double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$9$1#value(double)": -0.025053885526627795,
        "org.apache.commons.math3.analysis.function$Sin#Sin()": 0.2760706799843319,
        "org.apache.commons.math3.analysis.function$Sin#derivative()": -0.025053885526627795,
        "org.apache.commons.math3.analysis.function$Sin#value(double)": 0.2981617852052868,
        "org.apache.commons.math3.analysis.function$Sin#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": -0.030849244080260574,
        "org.apache.commons.math3.analysis.function$StepFunction#StepFunction(double[],double[])": 1.7623247394705146,
        "org.apache.commons.math3.analysis.function$StepFunction#value(double)": 0.43843166693098745,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)": -0.2586552618101559,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)": -0.2782291603571797,
        "org.apache.commons.math3.exception$DimensionMismatchException#getDimension()": -0.030849244080260574,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": -0.060643407151851125,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.1262557285039487,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": -0.017591904658852853,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.6997101686109796,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": -0.047845912676806934,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.5938550899184241,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": -0.06623785899484291,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": -0.13570314122440996,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.16561547477711547,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": -0.13260891008262976,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": -0.017591904658852853,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)": -0.08552575155527217,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.08552575155527217,
        "org.apache.commons.math3.exception$MaxCountExceededException#getMax()": -0.06623785899484291,
        "org.apache.commons.math3.exception$NoDataException#NoDataException()": -0.06064340715185097,
        "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)": -0.09595175834441202,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int)": -0.017591904658852825,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int,org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": -0.07395613538182277,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getDirection()": -0.017591904658852853,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getIndex()": -0.017591904658852853,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getPrevious()": -0.017591904658852853,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getStrict()": -0.017591904658852853,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)": -0.11625296386318243,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": -0.17859550119851303,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": -0.12946097996587044,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.16826589689182445,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)": -0.0979305073603989,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.20283292218661433,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getBoundIsAllowed()": -0.017591904658852853,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getMax()": -0.017591904658852853,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": -0.16022471384251724,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.3052762821706354,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": -0.030849244080260574,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": -0.030849244080260574,
        "org.apache.commons.math3.exception$TooManyEvaluationsException#TooManyEvaluationsException(java.lang.Number)": -0.06889056620238526,
        "org.apache.commons.math3.optimization$GoalType#<clinit>()": 1.5871408781368723,
        "org.apache.commons.math3.optimization$GoalType#GoalType(java.lang.String,int)": 0.24135444050996735,
        "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#BaseAbstractUnivariateOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)": 1.7460438646181773,
        "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#computeObjectiveValue(double)": 1.7460438646181773,
        "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getConvergenceChecker()": 0.4002574269912723,
        "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getEvaluations()": 1.7721540873231931,
        "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getGoalType()": 0.4002574269912723,
        "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getMax()": 0.4002574269912723,
        "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getMaxEvaluations()": -0.017591904658852825,
        "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getMin()": 0.4002574269912723,
        "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getStartValue()": 0.4002574269912723,
        "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)": -0.0513039433020595,
        "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)": 1.7460438646181773,
        "org.apache.commons.math3.optimization.univariate$BrentOptimizer#<clinit>()": 1.7460438646181773,
        "org.apache.commons.math3.optimization.univariate$BrentOptimizer#BrentOptimizer(double,double)": 1.759356592848149,
        "org.apache.commons.math3.optimization.univariate$BrentOptimizer#BrentOptimizer(double,double,org.apache.commons.math3.optimization.ConvergenceChecker)": 1.7460438646181773,
        "org.apache.commons.math3.optimization.univariate$BrentOptimizer#best(org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair,org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair,boolean)": 1.748539389094883,
        "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()": 1.7460438646181773,
        "org.apache.commons.math3.optimization.univariate$UnivariatePointValuePair#UnivariatePointValuePair(double,double)": 0.4027529514679783,
        "org.apache.commons.math3.optimization.univariate$UnivariatePointValuePair#getPoint()": 0.4027529514679783,
        "org.apache.commons.math3.optimization.univariate$UnivariatePointValuePair#getValue()": 0.4027529514679783,
        "org.apache.commons.math3.util$FastMath#<clinit>()": -1.308617809171157,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0.0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": -0.017591904658852853,
        "org.apache.commons.math3.util$FastMath#abs(double)": -0.6861686624483857,
        "org.apache.commons.math3.util$FastMath#abs(float)": -0.025053885526627795,
        "org.apache.commons.math3.util$FastMath#abs(int)": -0.40816146089284366,
        "org.apache.commons.math3.util$FastMath#abs(long)": -0.2511107769042854,
        "org.apache.commons.math3.util$FastMath#acos(double)": -0.08552575155527217,
        "org.apache.commons.math3.util$FastMath#acosh(double)": -0.025053885526627837,
        "org.apache.commons.math3.util$FastMath#asin(double)": -0.08768965793380232,
        "org.apache.commons.math3.util$FastMath#asinh(double)": -0.025053885526627837,
        "org.apache.commons.math3.util$FastMath#atan(double)": -0.08981164120412896,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": -0.18853721060444675,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": -0.17348294501615455,
        "org.apache.commons.math3.util$FastMath#atanh(double)": -0.025053885526627837,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": -0.12298910677433252,
        "org.apache.commons.math3.util$FastMath#ceil(double)": -0.4266611356950823,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": -0.06623785899484291,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": -0.025053885526627795,
        "org.apache.commons.math3.util$FastMath#cos(double)": -0.3370934261262302,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": 1.4236149275789887,
        "org.apache.commons.math3.util$FastMath#cosh(double)": -0.0979305073603989,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": -0.1615840577712251,
        "org.apache.commons.math3.util$FastMath#exp(double)": -0.655552692150803,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": -0.78968565680935,
        "org.apache.commons.math3.util$FastMath#expm1(double)": -0.07146061090511684,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": -0.10179715848876517,
        "org.apache.commons.math3.util$FastMath#floor(double)": -0.7607368837599022,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": -0.1615840577712251,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": -0.025053885526627795,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": -0.1547047982326926,
        "org.apache.commons.math3.util$FastMath#log(double)": -0.7046166008644376,
        "org.apache.commons.math3.util$FastMath#log(double,double)": -0.017591904658852825,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": -0.836714245333366,
        "org.apache.commons.math3.util$FastMath#log10(double)": -0.14615433814639733,
        "org.apache.commons.math3.util$FastMath#log1p(double)": -0.5056381093016346,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0.0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": -0.5931987135811427,
        "org.apache.commons.math3.util$FastMath#max(float,float)": -0.025053885526627795,
        "org.apache.commons.math3.util$FastMath#max(int,int)": -0.45222032189267214,
        "org.apache.commons.math3.util$FastMath#max(long,long)": -0.017591904658852853,
        "org.apache.commons.math3.util$FastMath#min(double,double)": -0.36241218437961376,
        "org.apache.commons.math3.util$FastMath#min(float,float)": -0.025053885526627795,
        "org.apache.commons.math3.util$FastMath#min(int,int)": -0.14500989141879972,
        "org.apache.commons.math3.util$FastMath#min(long,long)": -0.11277245606092534,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": -0.0688905662023851,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": -0.030849244080260574,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": -0.025053885526627837,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": -0.017591904658852825,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": 0.04755242667801263,
        "org.apache.commons.math3.util$FastMath#polySine(double)": 0.04755242667801263,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": -0.6036645935293204,
        "org.apache.commons.math3.util$FastMath#pow(double,int)": -0.2782291603571796,
        "org.apache.commons.math3.util$FastMath#random()": -0.08105965432625895,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": -0.04016322936661391,
        "org.apache.commons.math3.util$FastMath#rint(double)": -0.08552575155527217,
        "org.apache.commons.math3.util$FastMath#round(double)": -0.08331688935523739,
        "org.apache.commons.math3.util$FastMath#round(float)": -0.030849244080260563,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": -0.13570314122440985,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": -0.025053885526627795,
        "org.apache.commons.math3.util$FastMath#signum(double)": -0.06349274653372694,
        "org.apache.commons.math3.util$FastMath#signum(float)": -0.025053885526627795,
        "org.apache.commons.math3.util$FastMath#sin(double)": 1.4118385391071562,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": 1.4071753582549125,
        "org.apache.commons.math3.util$FastMath#sinh(double)": -0.0979305073603989,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": -0.6892664198939505,
        "org.apache.commons.math3.util$FastMath#tan(double)": -0.09595175834441202,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": -0.09595175834441202,
        "org.apache.commons.math3.util$FastMath#tanh(double)": -0.06349274653372687,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": -0.03578189544210756,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": -0.03578189544210756,
        "org.apache.commons.math3.util$FastMath#ulp(double)": 1.478617785522883,
        "org.apache.commons.math3.util$FastMath#ulp(float)": -0.017591904658852825,
        "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double,double)": 0.11345975936476338,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getK()": 0.11345975936476338,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()": 0.11345975936476338,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()": 0.11345975936476338,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": -0.7843981675565841,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": -0.7820439789157039,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": -0.8286548840090651,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0.0,
        "org.apache.commons.math3.util$Incrementor#Incrementor()": 1.2307459884599412,
        "org.apache.commons.math3.util$Incrementor#Incrementor(int)": 1.1943412679762229,
        "org.apache.commons.math3.util$Incrementor#Incrementor(int,org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback)": 1.1933212255075112,
        "org.apache.commons.math3.util$Incrementor#canIncrement()": -0.025053885526627795,
        "org.apache.commons.math3.util$Incrementor#getCount()": 0.20371381772395158,
        "org.apache.commons.math3.util$Incrementor#getMaximalCount()": -0.10739257559933435,
        "org.apache.commons.math3.util$Incrementor#incrementCount()": -0.11701418578955558,
        "org.apache.commons.math3.util$Incrementor#incrementCount(int)": -0.017591904658852825,
        "org.apache.commons.math3.util$Incrementor#resetCount()": -0.12879914599115783,
        "org.apache.commons.math3.util$Incrementor#setMaximalCount(int)": -0.1051294332331344,
        "org.apache.commons.math3.util$Incrementor$1#trigger(int)": -0.07875017332629497,
        "org.apache.commons.math3.util$MathArrays#MathArrays()": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[])": 1.6889581254377486,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 1.68739108991737,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)": 1.5724935739672201,
        "org.apache.commons.math3.util$MathArrays#copyOf(double[])": 1.7054772801808542,
        "org.apache.commons.math3.util$MathArrays#copyOf(double[],int)": 1.6639024533571392,
        "org.apache.commons.math3.util$MathArrays#copyOf(int[])": -0.044152945477573625,
        "org.apache.commons.math3.util$MathArrays#copyOf(int[],int)": -0.08331688935523739,
        "org.apache.commons.math3.util$MathArrays#distance(double[],double[])": -0.017591904658852825,
        "org.apache.commons.math3.util$MathArrays#distance(int[],int[])": -0.044152945477573625,
        "org.apache.commons.math3.util$MathArrays#distance1(double[],double[])": -0.017591904658852825,
        "org.apache.commons.math3.util$MathArrays#distance1(int[],int[])": -0.017591904658852825,
        "org.apache.commons.math3.util$MathArrays#distanceInf(double[],double[])": -0.017591904658852825,
        "org.apache.commons.math3.util$MathArrays#distanceInf(int[],int[])": -0.017591904658852825,
        "org.apache.commons.math3.util$MathArrays#equals(double[],double[])": -0.017591904658852825,
        "org.apache.commons.math3.util$MathArrays#equals(float[],float[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(double[],double[])": -0.04016322936661391,
        "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(float[],float[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": -0.017591904658852825,
        "org.apache.commons.math3.util$MathArrays#isMonotonic(java.lang.Comparable[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": -0.017591904658852853,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)": -0.1341625265602766,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)": -0.13570314122440985,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double,double,double)": -0.030849244080260574,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double[],double[])": -0.030849244080260563,
        "org.apache.commons.math3.util$MathArrays#normalizeArray(double[],double)": -0.025053885526627837,
        "org.apache.commons.math3.util$MathArrays#safeNorm(double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])": -0.05456997234976421,
        "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])": -0.05456997234976421,
        "org.apache.commons.math3.util$MathArrays$1#compare(org.apache.commons.math3.util.Pair,org.apache.commons.math3.util.Pair)": -0.051303943302059674,
        "org.apache.commons.math3.util$MathArrays$2#<clinit>()": 0.22670713634031514,
        "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()": 1.5673892712313076,
        "org.apache.commons.math3.util$MathArrays$OrderDirection#MathArrays$OrderDirection(java.lang.String,int)": 0.22160283360440303,
        "org.apache.commons.math3.util$Precision#<clinit>()": -0.4108633592456655,
        "org.apache.commons.math3.util$Precision#Precision()": 0.0,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,double)": -0.13104187456225147,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,int)": -0.09595175834441202,
        "org.apache.commons.math3.util$Precision#equals(double,double)": 1.5684051275268125,
        "org.apache.commons.math3.util$Precision#equals(double,double,double)": -0.4640106440948527,
        "org.apache.commons.math3.util$Precision#equals(double,double,int)": 1.1313785944775794,
        "org.apache.commons.math3.util$Precision#equals(float,float)": -0.017591904658852825,
        "org.apache.commons.math3.util$Precision#equals(float,float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(float,float,int)": -0.17859550119851303,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)": -0.23072045305316524,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)": -0.12463036055379627,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)": -0.017591904658852825,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)": -0.17732671781664786,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)": 0.0,
        "org.apache.commons.math3.util$Precision#representableDelta(double,double)": -0.017591904658852853,
        "org.apache.commons.math3.util$Precision#round(double,int)": -0.017591904658852825,
        "org.apache.commons.math3.util$Precision#round(double,int,int)": -0.017591904658852853,
        "org.apache.commons.math3.util$Precision#round(float,int)": -0.017591904658852825,
        "org.apache.commons.math3.util$Precision#round(float,int,int)": -0.017591904658852825,
        "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)": -0.017591904658852825
    },
    "Math-24": {
        "org.apache.commons.math3.analysis$FunctionUtils#FunctionUtils()": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#add(org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[])": -0.025057721922536302,
        "org.apache.commons.math3.analysis$FunctionUtils#add(org.apache.commons.math3.analysis.UnivariateFunction[])": 0.4566189820255345,
        "org.apache.commons.math3.analysis$FunctionUtils#add(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[])": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#collector(org.apache.commons.math3.analysis.BivariateFunction,double)": -0.01759458034756059,
        "org.apache.commons.math3.analysis$FunctionUtils#collector(org.apache.commons.math3.analysis.BivariateFunction,org.apache.commons.math3.analysis.UnivariateFunction,double)": -0.017594580347560562,
        "org.apache.commons.math3.analysis$FunctionUtils#combine(org.apache.commons.math3.analysis.BivariateFunction,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.UnivariateFunction)": -0.025057721922536302,
        "org.apache.commons.math3.analysis$FunctionUtils#compose(org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[])": -0.025057721922536302,
        "org.apache.commons.math3.analysis$FunctionUtils#compose(org.apache.commons.math3.analysis.UnivariateFunction[])": -0.030853991931545144,
        "org.apache.commons.math3.analysis$FunctionUtils#compose(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[])": -0.025057721922536302,
        "org.apache.commons.math3.analysis$FunctionUtils#fix1stArgument(org.apache.commons.math3.analysis.BivariateFunction,double)": -0.017594580347560562,
        "org.apache.commons.math3.analysis$FunctionUtils#fix2ndArgument(org.apache.commons.math3.analysis.BivariateFunction,double)": -0.0919092244988533,
        "org.apache.commons.math3.analysis$FunctionUtils#multiply(org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[])": -0.025057721922536302,
        "org.apache.commons.math3.analysis$FunctionUtils#multiply(org.apache.commons.math3.analysis.UnivariateFunction[])": -0.017594580347560562,
        "org.apache.commons.math3.analysis$FunctionUtils#multiply(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable[])": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils#sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)": -0.10922615658827498,
        "org.apache.commons.math3.analysis$FunctionUtils#toDifferentiableUnivariateFunction(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable)": -0.04415981715520001,
        "org.apache.commons.math3.analysis$FunctionUtils#toUnivariateDifferential(org.apache.commons.math3.analysis.DifferentiableUnivariateFunction)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$1#value(double)": -0.030853991931545144,
        "org.apache.commons.math3.analysis$FunctionUtils$10#value(double)": -0.025057721922536302,
        "org.apache.commons.math3.analysis$FunctionUtils$11#value(double[])": -0.017594580347560562,
        "org.apache.commons.math3.analysis$FunctionUtils$12#value(double)": -0.017594580347560562,
        "org.apache.commons.math3.analysis$FunctionUtils$13#value(double)": -0.0919092244988533,
        "org.apache.commons.math3.analysis$FunctionUtils$14#derivative()": -0.04415981715520001,
        "org.apache.commons.math3.analysis$FunctionUtils$14#value(double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$14$1#value(double)": -0.04016945963185403,
        "org.apache.commons.math3.analysis$FunctionUtils$2#value(double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$2#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": -0.025057721922536302,
        "org.apache.commons.math3.analysis$FunctionUtils$3#derivative()": -0.025057721922536302,
        "org.apache.commons.math3.analysis$FunctionUtils$3#value(double)": -0.017594580347560562,
        "org.apache.commons.math3.analysis$FunctionUtils$3$1#value(double)": -0.025057721922536302,
        "org.apache.commons.math3.analysis$FunctionUtils$4#value(double)": 0.4566189820255345,
        "org.apache.commons.math3.analysis$FunctionUtils$6#derivative()": -0.025057721922536302,
        "org.apache.commons.math3.analysis$FunctionUtils$6#value(double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$6$1#value(double)": -0.025057721922536302,
        "org.apache.commons.math3.analysis$FunctionUtils$7#value(double)": -0.017594580347560562,
        "org.apache.commons.math3.analysis$FunctionUtils$9#derivative()": -0.025057721922536302,
        "org.apache.commons.math3.analysis$FunctionUtils$9#value(double)": 0.0,
        "org.apache.commons.math3.analysis$FunctionUtils$9$1#value(double)": -0.025057721922536302,
        "org.apache.commons.math3.analysis.function$Sin#Sin()": 0.2772208002626978,
        "org.apache.commons.math3.analysis.function$Sin#derivative()": -0.025057721922536302,
        "org.apache.commons.math3.analysis.function$Sin#value(double)": 0.2994134198753161,
        "org.apache.commons.math3.analysis.function$Sin#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": -0.030853991931545144,
        "org.apache.commons.math3.analysis.function$StepFunction#StepFunction(double[],double[])": 1.7654214638630914,
        "org.apache.commons.math3.analysis.function$StepFunction#value(double)": 0.44335957044154994,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)": -0.25870074399170423,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)": -0.2782784645165045,
        "org.apache.commons.math3.exception$DimensionMismatchException#getDimension()": -0.030853991931545144,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": -0.06065296871218173,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.12627653408296058,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": -0.017594580347560562,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.6998484955796995,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": -0.04785338138651385,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.5939701157969233,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": -0.0662483466940278,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": -0.13572562809251135,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.16564337451850675,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": -0.13263084473257036,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": -0.017594580347560562,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)": -0.0855394816974342,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.0855394816974342,
        "org.apache.commons.math3.exception$MaxCountExceededException#getMax()": -0.0662483466940278,
        "org.apache.commons.math3.exception$NoDataException#NoDataException()": -0.060652968712181635,
        "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)": -0.09596727139927634,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int)": -0.01759458034756059,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int,org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": -0.07396791157869585,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getDirection()": -0.017594580347560562,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getIndex()": -0.017594580347560562,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getPrevious()": -0.017594580347560562,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getStrict()": -0.017594580347560562,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)": -0.116272005097407,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": -0.17862578946968324,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": -0.12948235436669558,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.16829428247748462,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)": -0.09794636107731575,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.20286772988900703,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getBoundIsAllowed()": -0.017594580347560562,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getMax()": -0.017594580347560562,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": -0.16025162844787116,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.30533092853706345,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": -0.030853991931545144,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": -0.030853991931545144,
        "org.apache.commons.math3.exception$TooManyEvaluationsException#TooManyEvaluationsException(java.lang.Number)": -0.06890149535749025,
        "org.apache.commons.math3.optimization$GoalType#<clinit>()": 1.5881683826083548,
        "org.apache.commons.math3.optimization$GoalType#GoalType(java.lang.String,int)": 0.24238194498145005,
        "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#BaseAbstractUnivariateOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)": 1.748528030846455,
        "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#computeObjectiveValue(double)": 1.748528030846455,
        "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getConvergenceChecker()": 0.4027415932195503,
        "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getEvaluations()": 1.7758401828448,
        "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getGoalType()": 0.4027415932195503,
        "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getMax()": 0.4027415932195503,
        "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getMaxEvaluations()": -0.01759458034756059,
        "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getMin()": 0.4027415932195503,
        "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#getStartValue()": 0.4027415932195503,
        "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double)": 1.772146618613486,
        "org.apache.commons.math3.optimization.univariate$BaseAbstractUnivariateOptimizer#optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)": 1.748528030846455,
        "org.apache.commons.math3.optimization.univariate$BrentOptimizer#<clinit>()": 1.748528030846455,
        "org.apache.commons.math3.optimization.univariate$BrentOptimizer#BrentOptimizer(double,double)": 1.762315666541669,
        "org.apache.commons.math3.optimization.univariate$BrentOptimizer#BrentOptimizer(double,double,org.apache.commons.math3.optimization.ConvergenceChecker)": 1.748528030846455,
        "org.apache.commons.math3.optimization.univariate$BrentOptimizer#best(org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair,org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair,boolean)": 0.0,
        "org.apache.commons.math3.optimization.univariate$BrentOptimizer#doOptimize()": 1.748528030846455,
        "org.apache.commons.math3.optimization.univariate$UnivariatePointValuePair#UnivariatePointValuePair(double,double)": 0.40531206701560485,
        "org.apache.commons.math3.optimization.univariate$UnivariatePointValuePair#getPoint()": 0.40531206701560485,
        "org.apache.commons.math3.optimization.univariate$UnivariatePointValuePair#getValue()": -0.04785338138651385,
        "org.apache.commons.math3.util$FastMath#<clinit>()": -1.3085519565798167,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0.0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": -0.017594580347560562,
        "org.apache.commons.math3.util$FastMath#abs(double)": -0.6858962665715843,
        "org.apache.commons.math3.util$FastMath#abs(float)": -0.025057721922536302,
        "org.apache.commons.math3.util$FastMath#abs(int)": -0.40823699606165453,
        "org.apache.commons.math3.util$FastMath#abs(long)": -0.25004275563708067,
        "org.apache.commons.math3.util$FastMath#acos(double)": -0.0855394816974342,
        "org.apache.commons.math3.util$FastMath#acosh(double)": -0.025057721922536202,
        "org.apache.commons.math3.util$FastMath#asin(double)": -0.08770375642924004,
        "org.apache.commons.math3.util$FastMath#asinh(double)": -0.025057721922536202,
        "org.apache.commons.math3.util$FastMath#atan(double)": -0.08982610178302879,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": -0.1885693435494762,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": -0.1735122897582198,
        "org.apache.commons.math3.util$FastMath#atanh(double)": -0.025057721922536202,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": -0.12300933435329618,
        "org.apache.commons.math3.util$FastMath#ceil(double)": -0.4267405111064416,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": -0.0662483466940278,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": -0.025057721922536302,
        "org.apache.commons.math3.util$FastMath#cos(double)": -0.3371544411914506,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": 1.4243333075859554,
        "org.apache.commons.math3.util$FastMath#cosh(double)": -0.09794636107731575,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": -0.1616112204034576,
        "org.apache.commons.math3.util$FastMath#exp(double)": -0.6556812393080216,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": -0.7898441495833184,
        "org.apache.commons.math3.util$FastMath#expm1(double)": -0.07147196915354484,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": -0.10181367994317167,
        "org.apache.commons.math3.util$FastMath#floor(double)": -0.760888855323254,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": -0.16161122040345743,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": -0.025057721922536302,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": -0.15473070838627204,
        "org.apache.commons.math3.util$FastMath#log(double)": -0.704756019455767,
        "org.apache.commons.math3.util$FastMath#log(double,double)": -0.01759458034756059,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": -0.8368833946091748,
        "org.apache.commons.math3.util$FastMath#log10(double)": -0.1461787011547053,
        "org.apache.commons.math3.util$FastMath#log1p(double)": -0.5057341269705389,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0.0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": -0.5933135965651337,
        "org.apache.commons.math3.util$FastMath#max(float,float)": -0.025057721922536302,
        "org.apache.commons.math3.util$FastMath#max(int,int)": -0.45230504063329313,
        "org.apache.commons.math3.util$FastMath#max(long,long)": -0.017594580347560562,
        "org.apache.commons.math3.util$FastMath#min(double,double)": -0.3624783278964925,
        "org.apache.commons.math3.util$FastMath#min(float,float)": -0.025057721922536302,
        "org.apache.commons.math3.util$FastMath#min(int,int)": -0.1444852757918681,
        "org.apache.commons.math3.util$FastMath#min(long,long)": -0.1127908873073542,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": -0.06890149535749024,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": -0.030853991931545144,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": -0.025057721922536202,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": -0.01759458034756059,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": 0.04823608394412926,
        "org.apache.commons.math3.util$FastMath#polySine(double)": 0.04823608394412926,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": -0.6037817574203038,
        "org.apache.commons.math3.util$FastMath#pow(double,int)": -0.2782784645165046,
        "org.apache.commons.math3.util$FastMath#random()": -0.08107262708072516,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": -0.040169459631853956,
        "org.apache.commons.math3.util$FastMath#rint(double)": -0.0855394816974342,
        "org.apache.commons.math3.util$FastMath#round(double)": -0.08333024442075247,
        "org.apache.commons.math3.util$FastMath#round(float)": -0.030853991931545175,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": -0.13572562809251143,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": -0.025057721922536302,
        "org.apache.commons.math3.util$FastMath#signum(double)": -0.06350277895731704,
        "org.apache.commons.math3.util$FastMath#signum(float)": -0.025057721922536302,
        "org.apache.commons.math3.util$FastMath#sin(double)": 1.4125429368351374,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": 1.4078743925379662,
        "org.apache.commons.math3.util$FastMath#sinh(double)": -0.09794636107731575,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": -0.6889951673983367,
        "org.apache.commons.math3.util$FastMath#tan(double)": -0.09596727139927634,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": -0.09596727139927634,
        "org.apache.commons.math3.util$FastMath#tanh(double)": -0.0635027789573171,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": -0.0357874257265301,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": -0.0357874257265301,
        "org.apache.commons.math3.util$FastMath#ulp(double)": 1.4794115101234395,
        "org.apache.commons.math3.util$FastMath#ulp(float)": -0.01759458034756059,
        "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double,double)": 0.11422481340436452,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getK()": 0.11422481340436452,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()": 0.11422481340436452,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()": 0.11422481340436452,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": -0.7845554669888388,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": -0.782200747346717,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": -0.8288222017451459,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0.0,
        "org.apache.commons.math3.util$Incrementor#Incrementor()": 1.2312906387736597,
        "org.apache.commons.math3.util$Incrementor#Incrementor(int)": 1.1948617361127907,
        "org.apache.commons.math3.util$Incrementor#Incrementor(int,org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback)": 1.1938412826786398,
        "org.apache.commons.math3.util$Incrementor#canIncrement()": -0.025057721922536302,
        "org.apache.commons.math3.util$Incrementor#getCount()": 0.2046414662134456,
        "org.apache.commons.math3.util$Incrementor#getMaximalCount()": -0.10741006806705178,
        "org.apache.commons.math3.util$Incrementor#incrementCount()": -0.11647089350067386,
        "org.apache.commons.math3.util$Incrementor#incrementCount(int)": -0.01759458034756059,
        "org.apache.commons.math3.util$Incrementor#resetCount()": -0.12826384606961516,
        "org.apache.commons.math3.util$Incrementor#setMaximalCount(int)": -0.10457787576048883,
        "org.apache.commons.math3.util$Incrementor$1#trigger(int)": -0.07876275595606219,
        "org.apache.commons.math3.util$MathArrays#MathArrays()": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[])": 1.6905176456333044,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": 1.688936469876018,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)": 1.5734789492859798,
        "org.apache.commons.math3.util$MathArrays#copyOf(double[])": 1.7072091126926456,
        "org.apache.commons.math3.util$MathArrays#copyOf(double[],int)": 1.665269291613728,
        "org.apache.commons.math3.util$MathArrays#copyOf(int[])": -0.0441598171551999,
        "org.apache.commons.math3.util$MathArrays#copyOf(int[],int)": -0.08333024442075247,
        "org.apache.commons.math3.util$MathArrays#distance(double[],double[])": -0.01759458034756059,
        "org.apache.commons.math3.util$MathArrays#distance(int[],int[])": -0.0441598171551999,
        "org.apache.commons.math3.util$MathArrays#distance1(double[],double[])": -0.01759458034756059,
        "org.apache.commons.math3.util$MathArrays#distance1(int[],int[])": -0.01759458034756059,
        "org.apache.commons.math3.util$MathArrays#distanceInf(double[],double[])": -0.01759458034756059,
        "org.apache.commons.math3.util$MathArrays#distanceInf(int[],int[])": -0.01759458034756059,
        "org.apache.commons.math3.util$MathArrays#equals(double[],double[])": -0.01759458034756059,
        "org.apache.commons.math3.util$MathArrays#equals(float[],float[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(double[],double[])": -0.040169459631853956,
        "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(float[],float[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": -0.01759458034756059,
        "org.apache.commons.math3.util$MathArrays#isMonotonic(java.lang.Comparable[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": -0.017594580347560562,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)": -0.13418473829154132,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)": -0.13572562809251143,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double,double,double)": -0.030853991931545144,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double[],double[])": -0.030853991931545175,
        "org.apache.commons.math3.util$MathArrays#normalizeArray(double[],double)": -0.025057721922536202,
        "org.apache.commons.math3.util$MathArrays#safeNorm(double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])": -0.05457853613690852,
        "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])": -0.05457853613690852,
        "org.apache.commons.math3.util$MathArrays$1#compare(org.apache.commons.math3.util.Pair,org.apache.commons.math3.util.Pair)": -0.05131197390789022,
        "org.apache.commons.math3.util$MathArrays$2#<clinit>()": 0.22769251165907478,
        "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()": 1.5683610143729898,
        "org.apache.commons.math3.util$MathArrays$OrderDirection#MathArrays$OrderDirection(java.lang.String,int)": 0.22257457674608505,
        "org.apache.commons.math3.util$Precision#<clinit>()": -0.40991604626489153,
        "org.apache.commons.math3.util$Precision#Precision()": 0.0,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,double)": -0.1310635301239818,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,int)": -0.09596727139927634,
        "org.apache.commons.math3.util$Precision#equals(double,double)": 1.5693795437562845,
        "org.apache.commons.math3.util$Precision#equals(double,double,double)": -0.46336496544842654,
        "org.apache.commons.math3.util$Precision#equals(double,double,int)": 1.1324793828393154,
        "org.apache.commons.math3.util$Precision#equals(float,float)": -0.01759458034756059,
        "org.apache.commons.math3.util$Precision#equals(float,float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(float,float,int)": -0.17862578946968324,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)": -0.2307605497297155,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)": -0.12465087832068725,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)": -0.01759458034756059,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)": -0.17735677160472882,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)": 0.0,
        "org.apache.commons.math3.util$Precision#representableDelta(double,double)": -0.017594580347560562,
        "org.apache.commons.math3.util$Precision#round(double,int)": -0.01759458034756059,
        "org.apache.commons.math3.util$Precision#round(double,int,int)": -0.017594580347560562,
        "org.apache.commons.math3.util$Precision#round(float,int)": -0.01759458034756059,
        "org.apache.commons.math3.util$Precision#round(float,int,int)": -0.01759458034756059,
        "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)": -0.01759458034756059
    },
    "Math-25": {
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -1.6702495033479727,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": -0.09289188843605656,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -1.42836086272753,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": -0.13021018836294385,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": -0.27765140969912583,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.34381694819255265,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": -0.2708908956316023,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": -0.033388336472260055,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": -0.033388336472260055,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": -0.3226087197014757,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.6622096315552293,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": -0.059156601836802825,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": -0.059156601836802825,
        "org.apache.commons.math3.exception$ZeroException#ZeroException()": -0.033388336472260055,
        "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.09289188843605674,
        "org.apache.commons.math3.exception.util$ArgUtils#ArgUtils()": 0.0,
        "org.apache.commons.math3.exception.util$ArgUtils#flatten(java.lang.Object[])": -1.867190900618267,
        "org.apache.commons.math3.exception.util$ExceptionContext#ExceptionContext(java.lang.Throwable)": -1.867190900618267,
        "org.apache.commons.math3.exception.util$ExceptionContext#addMessage(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -1.86559709398916,
        "org.apache.commons.math3.exception.util$ExceptionContext#buildMessage(java.util.Locale,java.lang.String)": -0.085498310580592,
        "org.apache.commons.math3.exception.util$ExceptionContext#deSerializeContext(java.io.ObjectInputStream)": -0.04783098558383991,
        "org.apache.commons.math3.exception.util$ExceptionContext#deSerializeMessages(java.io.ObjectInputStream)": -0.04783098558383991,
        "org.apache.commons.math3.exception.util$ExceptionContext#getKeys()": -0.04783098558383991,
        "org.apache.commons.math3.exception.util$ExceptionContext#getLocalizedMessage()": -0.033388336472260055,
        "org.apache.commons.math3.exception.util$ExceptionContext#getMessage()": -0.06886872315372512,
        "org.apache.commons.math3.exception.util$ExceptionContext#getMessage(java.util.Locale)": -0.07754973229055902,
        "org.apache.commons.math3.exception.util$ExceptionContext#getMessage(java.util.Locale,java.lang.String)": -0.033388336472260055,
        "org.apache.commons.math3.exception.util$ExceptionContext#getThrowable()": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#getValue(java.lang.String)": -0.059156601836802825,
        "org.apache.commons.math3.exception.util$ExceptionContext#nonSerializableReplacement(java.lang.Object)": -0.03338833647226003,
        "org.apache.commons.math3.exception.util$ExceptionContext#readObject(java.io.ObjectInputStream)": -0.047830985583839844,
        "org.apache.commons.math3.exception.util$ExceptionContext#serializeContext(java.io.ObjectOutputStream)": -0.047830985583839844,
        "org.apache.commons.math3.exception.util$ExceptionContext#serializeMessages(java.io.ObjectOutputStream)": -0.047830985583839844,
        "org.apache.commons.math3.exception.util$ExceptionContext#setValue(java.lang.String,java.lang.Object)": -0.0998460715860896,
        "org.apache.commons.math3.exception.util$ExceptionContext#writeObject(java.io.ObjectOutputStream)": -0.047830985583839844,
        "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()": -1.968563958578227,
        "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)": -1.968563958578227,
        "org.apache.commons.math3.exception.util$LocalizedFormats#getLocalizedString(java.util.Locale)": -0.10644116004439508,
        "org.apache.commons.math3.exception.util$LocalizedFormats#getSourceString()": -0.04783098558383991,
        "org.apache.commons.math3.optimization.fitting$HarmonicFitter#HarmonicFitter(org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer)": -0.08549831058059199,
        "org.apache.commons.math3.optimization.fitting$HarmonicFitter#fit()": -0.07754973229055902,
        "org.apache.commons.math3.optimization.fitting$HarmonicFitter#fit(double[])": -0.07754973229055902,
        "org.apache.commons.math3.optimization.fitting$HarmonicFitter$ParameterGuesser#HarmonicFitter$ParameterGuesser(org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[])": 1.742450267709441,
        "org.apache.commons.math3.optimization.fitting$HarmonicFitter$ParameterGuesser#guess()": 1.7511312768462748,
        "org.apache.commons.math3.optimization.fitting$HarmonicFitter$ParameterGuesser#guessAOmega()": 1.7511312768462748,
        "org.apache.commons.math3.optimization.fitting$HarmonicFitter$ParameterGuesser#guessPhi()": 1.7511312768462748,
        "org.apache.commons.math3.optimization.fitting$HarmonicFitter$ParameterGuesser#sortObservations()": 1.7511312768462748,
        "org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#WeightedObservedPoint(double,double,double)": 0.2821028328750502,
        "org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#getWeight()": -0.18786218445335034,
        "org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#getX()": 0.28635137791974474,
        "org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#getY()": 0.28635137791974474
    },
    "Math-26": {
        "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException()": -0.017565214353691423,
        "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 1.756607322013236,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": -0.06054803491708178,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.12278735881646868,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": -0.017565214353691423,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.6891154922701703,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": -0.04777141451332123,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.5998926442353198,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": -0.06613324962871703,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": 1.6876098621796278,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 1.6573378523539564,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": 0.34338767679175286,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": -0.017565214353691423,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": -0.017565214353691423,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)": -0.047771414513321224,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": -0.06054803491708178,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": -0.1292477949422517,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.16798279233948674,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)": -0.08538880341537199,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.22165556283963966,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getBoundIsAllowed()": -0.017565214353691516,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getMax()": -0.017565214353691516,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": -0.1544463797569787,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.3010906145392303,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": -0.03080188461055533,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": -0.03080188461055533,
        "org.apache.commons.math3.exception.util$ArgUtils#ArgUtils()": 0.0,
        "org.apache.commons.math3.exception.util$ArgUtils#flatten(java.lang.Object[])": 1.0589984889486352,
        "org.apache.commons.math3.exception.util$ExceptionContext#ExceptionContext(java.lang.Throwable)": -0.2867879486782695,
        "org.apache.commons.math3.exception.util$ExceptionContext#addMessage(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 1.0595916423074927,
        "org.apache.commons.math3.exception.util$ExceptionContext#buildMessage(java.util.Locale,java.lang.String)": -0.044084402209434305,
        "org.apache.commons.math3.exception.util$ExceptionContext#deSerializeContext(java.io.ObjectInputStream)": -0.02501561744715941,
        "org.apache.commons.math3.exception.util$ExceptionContext#deSerializeMessages(java.io.ObjectInputStream)": -0.02501561744715941,
        "org.apache.commons.math3.exception.util$ExceptionContext#getKeys()": -0.02501561744715941,
        "org.apache.commons.math3.exception.util$ExceptionContext#getLocalizedMessage()": -0.017565214353691423,
        "org.apache.commons.math3.exception.util$ExceptionContext#getMessage()": -0.035726731629267164,
        "org.apache.commons.math3.exception.util$ExceptionContext#getMessage(java.util.Locale)": -0.04010108370466231,
        "org.apache.commons.math3.exception.util$ExceptionContext#getMessage(java.util.Locale,java.lang.String)": -0.017565214353691423,
        "org.apache.commons.math3.exception.util$ExceptionContext#getThrowable()": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#getValue(java.lang.String)": -0.03080188461055533,
        "org.apache.commons.math3.exception.util$ExceptionContext#nonSerializableReplacement(java.lang.Object)": -0.017565214353691516,
        "org.apache.commons.math3.exception.util$ExceptionContext#readObject(java.io.ObjectInputStream)": -0.025015617447159536,
        "org.apache.commons.math3.exception.util$ExceptionContext#serializeContext(java.io.ObjectOutputStream)": -0.025015617447159536,
        "org.apache.commons.math3.exception.util$ExceptionContext#serializeMessages(java.io.ObjectOutputStream)": -0.025015617447159536,
        "org.apache.commons.math3.exception.util$ExceptionContext#setValue(java.lang.String,java.lang.Object)": -0.051223840738087834,
        "org.apache.commons.math3.exception.util$ExceptionContext#writeObject(java.io.ObjectOutputStream)": -0.025015617447159536,
        "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()": 1.021381993873948,
        "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)": -0.32440444375295685,
        "org.apache.commons.math3.exception.util$LocalizedFormats#getLocalizedString(java.util.Locale)": -0.0544845518267274,
        "org.apache.commons.math3.exception.util$LocalizedFormats#getSourceString()": -0.02501561744715941,
        "org.apache.commons.math3.fraction$Fraction#<clinit>()": 1.5116522337201346,
        "org.apache.commons.math3.fraction$Fraction#Fraction(double)": -0.13851721832776703,
        "org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int)": 1.6784918572457328,
        "org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int,int)": 1.6755457039463884,
        "org.apache.commons.math3.fraction$Fraction#Fraction(double,int)": -0.025015617447159536,
        "org.apache.commons.math3.fraction$Fraction#Fraction(int)": -0.2651354608536599,
        "org.apache.commons.math3.fraction$Fraction#Fraction(int,int)": 1.5116522337201346,
        "org.apache.commons.math3.fraction$Fraction#abs()": -0.017565214353691423,
        "org.apache.commons.math3.fraction$Fraction#add(int)": -0.017565214353691423,
        "org.apache.commons.math3.fraction$Fraction#add(org.apache.commons.math3.fraction.Fraction)": -0.13239013782037212,
        "org.apache.commons.math3.fraction$Fraction#addSub(org.apache.commons.math3.fraction.Fraction,boolean)": -0.1544463797569787,
        "org.apache.commons.math3.fraction$Fraction#compareTo(org.apache.commons.math3.fraction.Fraction)": -0.017565214353691516,
        "org.apache.commons.math3.fraction$Fraction#divide(int)": -0.017565214353691423,
        "org.apache.commons.math3.fraction$Fraction#divide(org.apache.commons.math3.fraction.Fraction)": -0.09174662195017452,
        "org.apache.commons.math3.fraction$Fraction#doubleValue()": -0.09777238012862521,
        "org.apache.commons.math3.fraction$Fraction#equals(java.lang.Object)": -0.2531802763526001,
        "org.apache.commons.math3.fraction$Fraction#floatValue()": -0.017565214353691423,
        "org.apache.commons.math3.fraction$Fraction#getDenominator()": -0.09971694947983267,
        "org.apache.commons.math3.fraction$Fraction#getField()": -0.19184906481299047,
        "org.apache.commons.math3.fraction$Fraction#getNumerator()": -0.10163237177993412,
        "org.apache.commons.math3.fraction$Fraction#getReducedFraction(int,int)": -0.141508142754267,
        "org.apache.commons.math3.fraction$Fraction#hashCode()": -0.044084402209434215,
        "org.apache.commons.math3.fraction$Fraction#intValue()": -0.017565214353691423,
        "org.apache.commons.math3.fraction$Fraction#longValue()": -0.017565214353691423,
        "org.apache.commons.math3.fraction$Fraction#multiply(int)": -0.017565214353691423,
        "org.apache.commons.math3.fraction$Fraction#multiply(org.apache.commons.math3.fraction.Fraction)": -0.1400184372419303,
        "org.apache.commons.math3.fraction$Fraction#negate()": -0.0937891009873003,
        "org.apache.commons.math3.fraction$Fraction#percentageValue()": -0.025015617447159536,
        "org.apache.commons.math3.fraction$Fraction#reciprocal()": -0.0937891009873003,
        "org.apache.commons.math3.fraction$Fraction#subtract(int)": -0.017565214353691423,
        "org.apache.commons.math3.fraction$Fraction#subtract(org.apache.commons.math3.fraction.Fraction)": -0.09971694947983266,
        "org.apache.commons.math3.fraction$Fraction#toString()": -0.03080188461055533,
        "org.apache.commons.math3.fraction$FractionConversionException#FractionConversionException(double,int)": -0.025015617447159536,
        "org.apache.commons.math3.fraction$FractionConversionException#FractionConversionException(double,long,long)": 1.7949843825528404,
        "org.apache.commons.math3.util$ArithmeticUtils#<clinit>()": -0.49645862490228365,
        "org.apache.commons.math3.util$ArithmeticUtils#ArithmeticUtils()": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(int,int)": -0.12278735881646868,
        "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(long,long)": -0.030801884610555434,
        "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(long,long,org.apache.commons.math3.exception.util.Localizable)": -0.035726731629267164,
        "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficient(int,int)": -0.07626249898700514,
        "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficientDouble(int,int)": -0.0512238407380877,
        "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficientLog(int,int)": -0.035726731629267164,
        "org.apache.commons.math3.util$ArithmeticUtils#checkBinomial(int,int)": -0.0786246698727845,
        "org.apache.commons.math3.util$ArithmeticUtils#factorial(int)": -0.8154505093260984,
        "org.apache.commons.math3.util$ArithmeticUtils#factorialDouble(int)": -0.025015617447159536,
        "org.apache.commons.math3.util$ArithmeticUtils#factorialLog(int)": -0.0661332496287171,
        "org.apache.commons.math3.util$ArithmeticUtils#gcd(int,int)": 1.506271465358203,
        "org.apache.commons.math3.util$ArithmeticUtils#gcd(long,long)": -0.030801884610555434,
        "org.apache.commons.math3.util$ArithmeticUtils#isPowerOfTwo(long)": -0.1292477949422517,
        "org.apache.commons.math3.util$ArithmeticUtils#lcm(int,int)": -0.017565214353691423,
        "org.apache.commons.math3.util$ArithmeticUtils#lcm(long,long)": -0.017565214353691423,
        "org.apache.commons.math3.util$ArithmeticUtils#mulAndCheck(int,int)": -0.15859135655866644,
        "org.apache.commons.math3.util$ArithmeticUtils#mulAndCheck(long,long)": -0.0661332496287171,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(int,int)": -0.017565214353691423,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(int,long)": -0.017565214353691423,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,int)": -0.017565214353691423,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,java.math.BigInteger)": -0.025015617447159536,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,long)": -0.025015617447159536,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(long,int)": -0.017565214353691423,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(long,long)": -0.017565214353691423,
        "org.apache.commons.math3.util$ArithmeticUtils#subAndCheck(int,int)": -0.10163237177993406,
        "org.apache.commons.math3.util$ArithmeticUtils#subAndCheck(long,long)": -0.017565214353691423,
        "org.apache.commons.math3.util$FastMath#<clinit>()": -1.3609816609167007,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0.0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": -0.017565214353691516,
        "org.apache.commons.math3.util$FastMath#abs(double)": -0.6666911196521242,
        "org.apache.commons.math3.util$FastMath#abs(float)": -0.02501561744715941,
        "org.apache.commons.math3.util$FastMath#abs(int)": 0.06758351972051957,
        "org.apache.commons.math3.util$FastMath#abs(long)": -0.684180915433882,
        "org.apache.commons.math3.util$FastMath#acos(double)": -0.08318368201874621,
        "org.apache.commons.math3.util$FastMath#acosh(double)": -0.017565214353691423,
        "org.apache.commons.math3.util$FastMath#asin(double)": -0.08538880341537199,
        "org.apache.commons.math3.util$FastMath#asinh(double)": -0.017565214353691423,
        "org.apache.commons.math3.util$FastMath#atan(double)": -0.08093025995915616,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": -0.18080832449554277,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": -0.1718985107093067,
        "org.apache.commons.math3.util$FastMath#atanh(double)": -0.017565214353691423,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": -0.1194606801801826,
        "org.apache.commons.math3.util$FastMath#ceil(double)": -0.9592127734063034,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": -0.06613324962871703,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": -0.02501561744715941,
        "org.apache.commons.math3.util$FastMath#cos(double)": -0.3287054651421405,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": -0.3877227158538102,
        "org.apache.commons.math3.util$FastMath#cosh(double)": -0.08966740813773988,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": -0.15444637975697884,
        "org.apache.commons.math3.util$FastMath#exp(double)": -0.641012925855124,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": -1.0219748607208068,
        "org.apache.commons.math3.util$FastMath#expm1(double)": -0.0661332496287171,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": -0.08538880341537199,
        "org.apache.commons.math3.util$FastMath#floor(double)": -0.5765554631036637,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": -0.15859135655866652,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": -0.02501561744715941,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": -0.1544463797569787,
        "org.apache.commons.math3.util$FastMath#log(double)": -0.9051142206987728,
        "org.apache.commons.math3.util$FastMath#log(double,double)": -0.017565214353691423,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": -1.024116550446315,
        "org.apache.commons.math3.util$FastMath#log10(double)": -0.14298665922222065,
        "org.apache.commons.math3.util$FastMath#log1p(double)": -0.06878155387373573,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0.0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": -0.5821918090457832,
        "org.apache.commons.math3.util$FastMath#max(float,float)": -0.02501561744715941,
        "org.apache.commons.math3.util$FastMath#max(int,int)": -0.37160106987784447,
        "org.apache.commons.math3.util$FastMath#max(long,long)": -0.017565214353691516,
        "org.apache.commons.math3.util$FastMath#min(double,double)": -0.3525997802851808,
        "org.apache.commons.math3.util$FastMath#min(float,float)": -0.02501561744715941,
        "org.apache.commons.math3.util$FastMath#min(int,int)": -0.554864569371635,
        "org.apache.commons.math3.util$FastMath#min(long,long)": -0.06613324962871703,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": -0.06613324962871703,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": -0.03080188461055533,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": -0.025015617447159536,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": -0.017565214353691423,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": -0.417458181110002,
        "org.apache.commons.math3.util$FastMath#polySine(double)": -0.417458181110002,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": -0.9438626330830542,
        "org.apache.commons.math3.util$FastMath#random()": -0.08093025995915615,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": -0.04010108370466231,
        "org.apache.commons.math3.util$FastMath#rint(double)": -0.08318368201874621,
        "org.apache.commons.math3.util$FastMath#round(double)": -0.08093025995915616,
        "org.apache.commons.math3.util$FastMath#round(float)": -0.030801884610555434,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": -0.132390137820372,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": -0.02501561744715941,
        "org.apache.commons.math3.util$FastMath#signum(double)": -0.06054803491708172,
        "org.apache.commons.math3.util$FastMath#signum(float)": -0.02501561744715941,
        "org.apache.commons.math3.util$FastMath#sin(double)": -0.39880693438689424,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": -0.4042910787011029,
        "org.apache.commons.math3.util$FastMath#sinh(double)": -0.08966740813773988,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": -1.1450430997776122,
        "org.apache.commons.math3.util$FastMath#tan(double)": -0.08966740813773988,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": -0.08966740813773988,
        "org.apache.commons.math3.util$FastMath#tanh(double)": -0.057584761851884984,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": -0.025015617447159536,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": -0.025015617447159536,
        "org.apache.commons.math3.util$FastMath#ulp(double)": -0.33303956641622967,
        "org.apache.commons.math3.util$FastMath#ulp(float)": -0.017565214353691423,
        "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double,double)": -0.3559424030398133,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getK()": -0.3559424030398133,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()": -0.3559424030398133,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()": -0.3559424030398133,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": -1.019295727129427,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": -1.0171507951227863,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": -1.0171507951227863,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0.0
    },
    "Math-27": {
        "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException()": -0.017678133538572657,
        "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.06657590506928955,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": -0.06095159560599095,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.1236412019283871,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": -0.017678133538572727,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.6948706684914883,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": -0.048086633600662454,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.6048164844803537,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": -0.06657590506928956,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": -0.13642809419029844,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.16651499503192427,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": -0.13331605475439812,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": -0.017678133538572727,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": -0.017678133538572727,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)": -0.048086633600662516,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": -0.06095159560599106,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": -0.13015005755177836,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.16918108658967973,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)": -0.0859683368689707,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.2232784398455498,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getBoundIsAllowed()": -0.017678133538572727,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getMax()": -0.017678133538572727,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": -0.15554015160748216,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.3033672818001896,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": -0.031002260372891444,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": -0.031002260372891444,
        "org.apache.commons.math3.fraction$Fraction#<clinit>()": 1.5093145256023734,
        "org.apache.commons.math3.fraction$Fraction#Fraction(double)": -0.13948944775031674,
        "org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int)": -0.14399282743989925,
        "org.apache.commons.math3.fraction$Fraction#Fraction(double,double,int,int)": -0.14693979549463546,
        "org.apache.commons.math3.fraction$Fraction#Fraction(double,int)": -0.025177524093449036,
        "org.apache.commons.math3.fraction$Fraction#Fraction(int)": -0.2671128062716066,
        "org.apache.commons.math3.fraction$Fraction#Fraction(int,int)": 1.5093145256023734,
        "org.apache.commons.math3.fraction$Fraction#abs()": -0.017678133538572657,
        "org.apache.commons.math3.fraction$Fraction#add(int)": -0.017678133538572657,
        "org.apache.commons.math3.fraction$Fraction#add(org.apache.commons.math3.fraction.Fraction)": -0.13331605475439803,
        "org.apache.commons.math3.fraction$Fraction#addSub(org.apache.commons.math3.fraction.Fraction,boolean)": -0.15554015160748216,
        "org.apache.commons.math3.fraction$Fraction#compareTo(org.apache.commons.math3.fraction.Fraction)": -0.017678133538572727,
        "org.apache.commons.math3.fraction$Fraction#divide(int)": -0.017678133538572657,
        "org.apache.commons.math3.fraction$Fraction#divide(org.apache.commons.math3.fraction.Fraction)": -0.09237202988746906,
        "org.apache.commons.math3.fraction$Fraction#doubleValue()": 0.37776173198200225,
        "org.apache.commons.math3.fraction$Fraction#equals(java.lang.Object)": -0.2550593008711106,
        "org.apache.commons.math3.fraction$Fraction#floatValue()": -0.017678133538572657,
        "org.apache.commons.math3.fraction$Fraction#getDenominator()": -0.10040032034142166,
        "org.apache.commons.math3.fraction$Fraction#getField()": -0.1932342401019016,
        "org.apache.commons.math3.fraction$Fraction#getNumerator()": -0.10232974567737907,
        "org.apache.commons.math3.fraction$Fraction#getReducedFraction(int,int)": -0.14250306944514074,
        "org.apache.commons.math3.fraction$Fraction#hashCode()": -0.04437442074083586,
        "org.apache.commons.math3.fraction$Fraction#intValue()": -0.017678133538572657,
        "org.apache.commons.math3.fraction$Fraction#longValue()": -0.017678133538572657,
        "org.apache.commons.math3.fraction$Fraction#multiply(int)": 1.794822475906551,
        "org.apache.commons.math3.fraction$Fraction#multiply(org.apache.commons.math3.fraction.Fraction)": -0.14100205168447283,
        "org.apache.commons.math3.fraction$Fraction#negate()": -0.09442931503585845,
        "org.apache.commons.math3.fraction$Fraction#percentageValue()": 1.8023218664614273,
        "org.apache.commons.math3.fraction$Fraction#reciprocal()": -0.09442931503585845,
        "org.apache.commons.math3.fraction$Fraction#subtract(int)": -0.017678133538572657,
        "org.apache.commons.math3.fraction$Fraction#subtract(org.apache.commons.math3.fraction.Fraction)": -0.10040032034142164,
        "org.apache.commons.math3.fraction$Fraction#toString()": -0.031002260372891444,
        "org.apache.commons.math3.fraction$FractionConversionException#FractionConversionException(double,int)": -0.025177524093449036,
        "org.apache.commons.math3.fraction$FractionConversionException#FractionConversionException(double,long,long)": -0.031002260372891575,
        "org.apache.commons.math3.util$ArithmeticUtils#<clinit>()": -0.5049207535374077,
        "org.apache.commons.math3.util$ArithmeticUtils#ArithmeticUtils()": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(int,int)": -0.1236412019283871,
        "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(long,long)": -0.031002260372891575,
        "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(long,long,org.apache.commons.math3.exception.util.Localizable)": -0.03596013181144483,
        "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficient(int,int)": -0.07677676304330382,
        "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficientDouble(int,int)": -0.051562777655497105,
        "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficientLog(int,int)": -0.03596013181144483,
        "org.apache.commons.math3.util$ArithmeticUtils#checkBinomial(int,int)": -0.07915576068614422,
        "org.apache.commons.math3.util$ArithmeticUtils#factorial(int)": -0.8224062378898966,
        "org.apache.commons.math3.util$ArithmeticUtils#factorialDouble(int)": -0.025177524093449036,
        "org.apache.commons.math3.util$ArithmeticUtils#factorialLog(int)": -0.06657590506928955,
        "org.apache.commons.math3.util$ArithmeticUtils#gcd(int,int)": 1.5038883690785925,
        "org.apache.commons.math3.util$ArithmeticUtils#gcd(long,long)": -0.031002260372891575,
        "org.apache.commons.math3.util$ArithmeticUtils#isPowerOfTwo(long)": -0.13015005755177822,
        "org.apache.commons.math3.util$ArithmeticUtils#lcm(int,int)": -0.017678133538572657,
        "org.apache.commons.math3.util$ArithmeticUtils#lcm(long,long)": -0.017678133538572657,
        "org.apache.commons.math3.util$ArithmeticUtils#mulAndCheck(int,int)": -0.15971701639503288,
        "org.apache.commons.math3.util$ArithmeticUtils#mulAndCheck(long,long)": -0.06657590506928955,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(int,int)": -0.017678133538572657,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(int,long)": -0.017678133538572657,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,int)": -0.017678133538572657,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,java.math.BigInteger)": -0.025177524093449036,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,long)": -0.025177524093449036,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(long,int)": -0.017678133538572657,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(long,long)": -0.017678133538572657,
        "org.apache.commons.math3.util$ArithmeticUtils#subAndCheck(int,int)": -0.10232974567737893,
        "org.apache.commons.math3.util$ArithmeticUtils#subAndCheck(long,long)": -0.017678133538572657,
        "org.apache.commons.math3.util$FastMath#<clinit>()": -1.3782495700106945,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0.0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": -0.017678133538572727,
        "org.apache.commons.math3.util$FastMath#abs(double)": -1.1515742473556982,
        "org.apache.commons.math3.util$FastMath#abs(float)": -0.025177524093448866,
        "org.apache.commons.math3.util$FastMath#abs(int)": 0.06440083196102042,
        "org.apache.commons.math3.util$FastMath#abs(long)": -0.689266127280592,
        "org.apache.commons.math3.util$FastMath#acos(double)": -0.08374738136302132,
        "org.apache.commons.math3.util$FastMath#acosh(double)": -0.017678133538572657,
        "org.apache.commons.math3.util$FastMath#asin(double)": -0.0859683368689707,
        "org.apache.commons.math3.util$FastMath#asinh(double)": -0.017678133538572657,
        "org.apache.commons.math3.util$FastMath#atan(double)": -0.0814778199047109,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": -0.18210664795126905,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": -0.17312724389344336,
        "org.apache.commons.math3.util$FastMath#atanh(double)": -0.017678133538572657,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": -0.12028970385414448,
        "org.apache.commons.math3.util$FastMath#ceil(double)": -0.9675626470340004,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": -0.06657590506928956,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": -0.025177524093448866,
        "org.apache.commons.math3.util$FastMath#cos(double)": -0.33121546362654597,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": -0.39074038406644357,
        "org.apache.commons.math3.util$FastMath#cosh(double)": -0.09027777777777778,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": -0.15554015160748214,
        "org.apache.commons.math3.util$FastMath#exp(double)": -0.6463180413008367,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": -1.0309414120993787,
        "org.apache.commons.math3.util$FastMath#expm1(double)": -0.06657590506928955,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": -0.0859683368689707,
        "org.apache.commons.math3.util$FastMath#floor(double)": -1.0605560847810387,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": -0.15971701639503277,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": -0.025177524093448866,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": -0.15554015160748216,
        "org.apache.commons.math3.util$FastMath#log(double)": -0.9129363107093926,
        "org.apache.commons.math3.util$FastMath#log(double,double)": -0.017678133538572657,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": -1.03310422423375,
        "org.apache.commons.math3.util$FastMath#log10(double)": -0.14399282743989925,
        "org.apache.commons.math3.util$FastMath#log1p(double)": -0.06924284460722112,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0.0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": -0.5869525662744157,
        "org.apache.commons.math3.util$FastMath#max(float,float)": -0.025177524093448866,
        "org.apache.commons.math3.util$FastMath#max(int,int)": -0.3744789113656237,
        "org.apache.commons.math3.util$FastMath#max(long,long)": -0.017678133538572727,
        "org.apache.commons.math3.util$FastMath#min(double,double)": -0.3553139047331044,
        "org.apache.commons.math3.util$FastMath#min(float,float)": -0.025177524093448866,
        "org.apache.commons.math3.util$FastMath#min(int,int)": -0.5593748491649491,
        "org.apache.commons.math3.util$FastMath#min(long,long)": -0.06657590506928956,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": -0.06657590506928956,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": -0.031002260372891444,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": -0.025177524093449036,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": -0.017678133538572657,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": -0.4207358589738015,
        "org.apache.commons.math3.util$FastMath#polySine(double)": -0.4207358589738015,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": -0.952062385098657,
        "org.apache.commons.math3.util$FastMath#random()": -0.08147781990471081,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": -0.040364028845761867,
        "org.apache.commons.math3.util$FastMath#rint(double)": -0.08374738136302132,
        "org.apache.commons.math3.util$FastMath#round(double)": -0.0814778199047109,
        "org.apache.commons.math3.util$FastMath#round(float)": -0.031002260372891575,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": -0.13331605475439812,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": -0.025177524093448866,
        "org.apache.commons.math3.util$FastMath#signum(double)": -0.06095159560599095,
        "org.apache.commons.math3.util$FastMath#signum(float)": -0.025177524093448866,
        "org.apache.commons.math3.util$FastMath#sin(double)": -0.40192121128475466,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": -0.4074532935680273,
        "org.apache.commons.math3.util$FastMath#sinh(double)": -0.09027777777777778,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": -1.155231276477414,
        "org.apache.commons.math3.util$FastMath#tan(double)": -0.09027777777777778,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": -0.09027777777777778,
        "org.apache.commons.math3.util$FastMath#tanh(double)": -0.057967696454479835,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": -0.025177524093449036,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": -0.025177524093449036,
        "org.apache.commons.math3.util$FastMath#ulp(double)": -0.3355864410848965,
        "org.apache.commons.math3.util$FastMath#ulp(float)": -0.017678133538572657,
        "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double,double)": -0.35952546891619463,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getK()": -0.35952546891619463,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()": -0.35952546891619463,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()": -0.35952546891619463,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": -1.0282358627202322,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": -1.0260697878115508,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": -1.0260697878115508,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0.0
    },
    "Math-28": {
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)": -0.23864863104560397,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)": -0.25702419356311856,
        "org.apache.commons.math3.exception$DimensionMismatchException#getDimension()": -0.02914021470635131,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": -0.05720596461847349,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.11573261671493008,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": -0.01662816572798298,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.6419893527810163,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": -0.04515947539985765,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.5595422103445492,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": -0.06246827821889234,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": 1.6938031668705262,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 1.6656305314094886,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": 0.34947132703925654,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": 0.45054098979817614,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": -0.01662816572798298,
        "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int)": 0.0,
        "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int,java.lang.Class)": -0.06246827821889233,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)": 1.7394057863626253,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": 1.7394057863626253,
        "org.apache.commons.math3.exception$MaxCountExceededException#getMax()": -0.06246827821889234,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(java.lang.Integer[],java.lang.Integer[])": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])": -0.1126102605109892,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getExpectedDimension(int)": -0.01662816572798298,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getExpectedDimensions()": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getWrongDimension(int)": -0.01662816572798298,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getWrongDimensions()": 0.0,
        "org.apache.commons.math3.exception$NoDataException#NoDataException()": -0.057205964618473486,
        "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)": -0.09038182238048614,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])": -0.04515947539985771,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.04515947539985771,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)": -0.04515947539985771,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": -0.057205964618473486,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)": -0.10942067526584268,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": -0.1677460348031682,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": -0.12179453680901428,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.1580953926229613,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)": -0.08059421363737469,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.2082827789821588,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getBoundIsAllowed()": -0.01662816572798298,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getMax()": -0.01662816572798298,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": -0.14541799313107368,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.2823607497442124,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": -0.02914021470635131,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": -0.02914021470635131,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(java.lang.Number,java.lang.Number,java.lang.Number)": -0.09586630024979152,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)": -0.268555550669558,
        "org.apache.commons.math3.exception$OutOfRangeException#getHi()": -0.01662816572798298,
        "org.apache.commons.math3.exception$OutOfRangeException#getLo()": -0.01662816572798298,
        "org.apache.commons.math3.exception$ZeroException#ZeroException()": -0.016628165727983004,
        "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.04515947539985771,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix()": -0.02367257257491895,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field)": -0.15809539262296113,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)": -0.19361053131587808,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)": -0.0337916633617476,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)": -0.15185008102695274,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)": -0.21032423049204763,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkAdditionCompatible(org.apache.commons.math3.linear.FieldMatrix)": -0.05441310247687182,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)": -0.21737206456860136,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkMultiplicationCompatible(org.apache.commons.math3.linear.FieldMatrix)": -0.07422970915944638,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)": -0.21737206456860136,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)": -0.05441310247687182,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int[],int[])": -0.03792151940743017,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubtractionCompatible(org.apache.commons.math3.linear.FieldMatrix)": -0.0337916633617476,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])": -0.023672572574918962,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int[],int[],org.apache.commons.math3.FieldElement[][])": -0.023672572574918962,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#equals(java.lang.Object)": -0.10111427316905486,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[][])": -0.1804268226153979,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumn(int)": -0.05441310247687182,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)": -0.029140214706351277,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnVector(int)": -0.04168087210323961,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getData()": -0.023672572574918962,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()": -0.22231871862344454,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRow(int)": -0.04515947539985771,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)": -0.0337916633617476,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowVector(int)": -0.029140214706351277,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)": -0.023672572574918962,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])": -0.029140214706351277,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getTrace()": -0.029140214706351277,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#hashCode()": -0.029140214706351277,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#isSquare()": -0.11102420011899933,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)": -0.05441310247687182,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": -0.023672572574918962,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.linear.FieldVector)": -0.029140214706351277,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)": -0.016628165727983004,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": -0.016628165727983004,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)": -0.029140214706351277,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)": -0.023672572574918962,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)": -0.023672572574918962,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])": -0.016628165727983004,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": -0.016628165727983004,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)": -0.016628165727983004,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])": -0.016628165727983004,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": -0.016628165727983004,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)": -0.016628165727983004,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": -0.023672572574918962,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)": -0.016628165727983004,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#toString()": -0.023672572574918962,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()": -0.04168087210323961,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.016628165727983004,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.016628165727983004,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.016628165727983004,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.016628165727983004,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.029140214706351277,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.016628165727983004,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.0846185174750261,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.023672572574918962,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.016628165727983004,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.023672572574918962,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$1#visit(int,int,org.apache.commons.math3.FieldElement)": -0.02914021470635131,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$2#start(int,int,int,int,int,int)": -0.02367257257491895,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$2#visit(int,int,org.apache.commons.math3.FieldElement)": -0.02367257257491895,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$3#visit(int,int,org.apache.commons.math3.FieldElement)": -0.041680872103239563,
        "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()": 1.3152787582241623,
        "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()": 1.4453151589569138,
        "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)": 1.3783106738548145,
        "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)": -0.06972465434662153,
        "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])": -0.08849414769773085,
        "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])": -0.023672572574918962,
        "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)": -0.13189587121294527,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)": -0.10615833031200657,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)": -0.06972465434662153,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)": -0.06972465434662153,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getData()": -0.023672572574918962,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()": -0.06246827821889233,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()": -0.16417308125896196,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)": 1.6967250580035014,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)": -0.0337916633617476,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)": 1.727761368728912,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)": -0.05441310247687182,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])": -0.029140214706351277,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()": -0.029140214706351277,
        "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()": -0.04515947539985771,
        "org.apache.commons.math3.linear$AbstractRealMatrix#isSquare()": -0.23201107040195354,
        "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": -0.1859954370210955,
        "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])": -0.023672572574918962,
        "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)": -0.11417952401155948,
        "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)": -0.023672572574918962,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])": -0.016628165727983004,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)": -0.029140214706351277,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)": -0.06496270817525827,
        "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)": -0.06972465434662153,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])": -0.016628165727983004,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)": -0.023672572574918962,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)": -0.0846185174750261,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])": -0.016628165727983004,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)": -0.016628165727983004,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)": 1.7259337258598135,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)": -0.023672572574918962,
        "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": -0.1677460348031682,
        "org.apache.commons.math3.linear$AbstractRealMatrix#toString()": -0.03792151940743017,
        "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()": -0.24332109677408872,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.016628165727983004,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.016628165727983004,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.048415808961401095,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.016628165727983004,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.03792151940743017,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.016628165727983004,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.2451748022708881,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.08657373564116874,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.016628165727983004,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.023672572574918962,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#end()": -0.1641730812589619,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#start(int,int,int,int,int,int)": -0.1641730812589619,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#visit(int,int,double)": -0.1641730812589619,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#end()": -0.06246827821889234,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#start(int,int,int,int,int,int)": -0.06246827821889234,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#visit(int,int,double)": -0.06246827821889234,
        "org.apache.commons.math3.linear$AbstractRealMatrix$3#visit(int,int,double)": -0.02914021470635131,
        "org.apache.commons.math3.linear$AbstractRealMatrix$4#start(int,int,int,int,int,int)": -0.08849414769773101,
        "org.apache.commons.math3.linear$AbstractRealMatrix$4#visit(int,int,double)": -0.08849414769773101,
        "org.apache.commons.math3.linear$AbstractRealMatrix$5#visit(int,int,double)": -0.24332109677408864,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field)": -0.023672572574918962,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,int,int)": -0.10615833031200657,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])": -0.1276391301172943,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)": -0.09938905214546156,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])": -0.1126102605109892,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)": -0.07422970915944638,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": -0.023672572574918962,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()": -0.023672572574918962,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])": -0.1276391301172943,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyOut()": -0.10281689233208469,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#createMatrix(int,int)": -0.07422970915944638,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()": -0.16656091304384013,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getData()": -0.09938905214546156,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getDataRef()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)": -0.1505792813826794,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()": -0.16656091304384013,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": -0.016628165727983004,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": -0.023672572574918962,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": -0.016628165727983004,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)": -0.11102420011899933,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": -0.1276391301172943,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": -0.016628165727983004,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.016628165727983004,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.016628165727983004,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.016628165727983004,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.016628165727983004,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.023672572574918962,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.016628165727983004,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.08262619694727762,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.023672572574918962,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix()": -0.0337916633617476,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[])": -0.0337916633617476,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])": 1.4842811346496316,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)": -0.19681424561247438,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)": 1.4773705861713078,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)": -0.023672572574918962,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()": -0.05988642513004731,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])": 1.4827388817826843,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()": -0.27808959773646336,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)": -0.27117515165895,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()": 0.07374894786368202,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getData()": -0.27204505648388616,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getDataRef()": 0.35694343561294917,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)": 1.4835095314530564,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()": 0.07445355468738202,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)": -0.057205964618473486,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#operate(double[])": -0.11727012676014602,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#preMultiply(double[])": -0.016628165727983004,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)": 1.4842811346496316,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)": 1.4827388817826843,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)": -0.016628165727983004,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.016628165727983004,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.016628165727983004,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.1580953926229613,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.016628165727983004,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.0337916633617476,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.016628165727983004,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.24424901963938317,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.08657373564116874,
        "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()": 1.379653993853613,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector()": -0.029140214706351277,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[])": 1.5359412245521233,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)": 1.4645160434379934,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],double[])": -0.016628165727983004,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],int,int)": -0.016628165727983004,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],org.apache.commons.math3.linear.ArrayRealVector)": -0.016628165727983004,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int)": 1.593773266866056,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int,double)": -0.029140214706351277,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[])": -0.016628165727983004,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[],int,int)": -0.016628165727983004,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector)": -0.016628165727983004,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,boolean)": -0.18928384674621276,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,double[])": -0.016628165727983004,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.ArrayRealVector)": -0.029140214706351277,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.RealVector)": -0.023672572574918962,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector)": -0.016628165727983004,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.ArrayRealVector)": -0.016628165727983004,
        "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)": -0.05149049290129376,
        "org.apache.commons.math3.linear$ArrayRealVector#addToEntry(int,double)": -0.029140214706351277,
        "org.apache.commons.math3.linear$ArrayRealVector#append(double)": -0.023672572574918962,
        "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.RealVector)": -0.023672572574918962,
        "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)": 1.5857404374273423,
        "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)": -0.07200638985974264,
        "org.apache.commons.math3.linear$ArrayRealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)": -0.07200638985974264,
        "org.apache.commons.math3.linear$ArrayRealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": -0.11573261671493008,
        "org.apache.commons.math3.linear$ArrayRealVector#copy()": -0.18819194806725928,
        "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)": -0.1770296958217501,
        "org.apache.commons.math3.linear$ArrayRealVector#ebeDivide(org.apache.commons.math3.linear.RealVector)": -0.04515947539985771,
        "org.apache.commons.math3.linear$ArrayRealVector#ebeMultiply(org.apache.commons.math3.linear.RealVector)": -0.06246827821889233,
        "org.apache.commons.math3.linear$ArrayRealVector#equals(java.lang.Object)": -0.1247422353338384,
        "org.apache.commons.math3.linear$ArrayRealVector#getDataRef()": -0.12619683312947383,
        "org.apache.commons.math3.linear$ArrayRealVector#getDimension()": 0.1120230933891978,
        "org.apache.commons.math3.linear$ArrayRealVector#getDistance(org.apache.commons.math3.linear.RealVector)": -0.03792151940743017,
        "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)": 1.4983395140409224,
        "org.apache.commons.math3.linear$ArrayRealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)": -0.0337916633617476,
        "org.apache.commons.math3.linear$ArrayRealVector#getL1Norm()": -0.023672572574918962,
        "org.apache.commons.math3.linear$ArrayRealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)": -0.0337916633617476,
        "org.apache.commons.math3.linear$ArrayRealVector#getLInfNorm()": -0.023672572574918962,
        "org.apache.commons.math3.linear$ArrayRealVector#getNorm()": -0.13742006303145873,
        "org.apache.commons.math3.linear$ArrayRealVector#getSubVector(int,int)": -0.04515947539985771,
        "org.apache.commons.math3.linear$ArrayRealVector#hashCode()": -0.029140214706351277,
        "org.apache.commons.math3.linear$ArrayRealVector#isInfinite()": -0.023672572574918962,
        "org.apache.commons.math3.linear$ArrayRealVector#isNaN()": -0.13048830179644288,
        "org.apache.commons.math3.linear$ArrayRealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)": -0.029140214706351277,
        "org.apache.commons.math3.linear$ArrayRealVector#mapAddToSelf(double)": -0.02914021470635131,
        "org.apache.commons.math3.linear$ArrayRealVector#mapDivideToSelf(double)": -0.03792151940743027,
        "org.apache.commons.math3.linear$ArrayRealVector#mapMultiplyToSelf(double)": -0.13877602389500554,
        "org.apache.commons.math3.linear$ArrayRealVector#mapSubtractToSelf(double)": -0.02914021470635131,
        "org.apache.commons.math3.linear$ArrayRealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": -0.03379166336174766,
        "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)": -0.029140214706351277,
        "org.apache.commons.math3.linear$ArrayRealVector#set(double)": -0.12179453680901409,
        "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)": -0.15932378591468233,
        "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,double[])": -0.08849414769773085,
        "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,org.apache.commons.math3.linear.RealVector)": -0.09038182238048614,
        "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)": 1.6582389692947959,
        "org.apache.commons.math3.linear$ArrayRealVector#toArray()": 0.2871177290914878,
        "org.apache.commons.math3.linear$ArrayRealVector#toString()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": -0.02367257257491895,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": -0.0337916633617476,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": -0.02367257257491895,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": -0.0337916633617476,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": -0.016628165727983004,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": -0.023672572574918962,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": -0.016628165727983004,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": -0.023672572574918962,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(int,int,org.apache.commons.math3.FieldElement[][],boolean)": -0.10615833031200657,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)": -0.09223863127108808,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.FieldElement[][])": -0.10615833031200657,
        "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.BlockFieldMatrix)": -0.0337916633617476,
        "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)": -0.023672572574918962,
        "org.apache.commons.math3.linear$BlockFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#blockHeight(int)": -0.11573261671492996,
        "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)": -0.12327494199649847,
        "org.apache.commons.math3.linear$BlockFieldMatrix#copy()": -0.016628165727983004,
        "org.apache.commons.math3.linear$BlockFieldMatrix#copyBlockPart(org.apache.commons.math3.FieldElement[],int,int,int,int,int,org.apache.commons.math3.FieldElement[],int,int,int)": -0.029140214706351277,
        "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)": -0.09223863127108808,
        "org.apache.commons.math3.linear$BlockFieldMatrix#createMatrix(int,int)": -0.016628165727983004,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumn(int)": -0.03792151940743017,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()": -0.11573261671492996,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnMatrix(int)": -0.029140214706351277,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnVector(int)": -0.029140214706351277,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getData()": -0.03792151940743017,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)": -0.0940662741401865,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRow(int)": -0.03792151940743017,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()": -0.11727012676014592,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowMatrix(int)": -0.0337916633617476,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowVector(int)": -0.029140214706351277,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getSubMatrix(int,int,int,int)": -0.029140214706351277,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.BlockFieldMatrix)": -0.04515947539985771,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)": -0.04168087210323961,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": -0.029140214706351277,
        "org.apache.commons.math3.linear$BlockFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": -0.023672572574918962,
        "org.apache.commons.math3.linear$BlockFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)": -0.0337916633617476,
        "org.apache.commons.math3.linear$BlockFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)": -0.016628165727983004,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])": -0.0337916633617476,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)": -0.023672572574918962,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": -0.023672572574918962,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)": -0.023672572574918962,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)": -0.03792151940743017,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])": -0.0337916633617476,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)": -0.023672572574918962,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": -0.023672572574918962,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)": -0.023672572574918962,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": -0.023672572574918962,
        "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.BlockFieldMatrix)": -0.023672572574918962,
        "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)": -0.016628165727983004,
        "org.apache.commons.math3.linear$BlockFieldMatrix#toBlocksLayout(org.apache.commons.math3.FieldElement[][])": -0.10615833031200657,
        "org.apache.commons.math3.linear$BlockFieldMatrix#transpose()": -0.029140214706351277,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.023672572574918962,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.016628165727983004,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.016628165727983004,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.023672572574918962,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.016628165727983004,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.016628165727983004,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.016628165727983004,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.016628165727983004,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])": -0.2062283986955538,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)": -0.15686030412419136,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)": -0.22719714392152782,
        "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)": -0.0337916633617476,
        "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)": -0.023672572574918962,
        "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)": -0.016628165727983004,
        "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)": -0.2339193534613877,
        "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)": -0.2414587459266524,
        "org.apache.commons.math3.linear$BlockRealMatrix#copy()": -0.03792151940743017,
        "org.apache.commons.math3.linear$BlockRealMatrix#copyBlockPart(double[],int,int,int,int,int,double[],int,int,int)": -0.0337916633617476,
        "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)": -0.1804268226153979,
        "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)": -0.016628165727983004,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumn(int)": -0.07851969834376825,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()": -0.2339193534613877,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)": -0.029140214706351277,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)": -0.029140214706351277,
        "org.apache.commons.math3.linear$BlockRealMatrix#getData()": -0.15932378591468233,
        "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)": -0.11879260747632796,
        "org.apache.commons.math3.linear$BlockRealMatrix#getFrobeniusNorm()": -0.016628165727983004,
        "org.apache.commons.math3.linear$BlockRealMatrix#getNorm()": -0.0846185174750261,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRow(int)": -0.03792151940743017,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()": -0.2348698945173806,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)": -0.0337916633617476,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)": -0.029140214706351277,
        "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)": -0.0337916633617476,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)": -0.06246827821889233,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": -0.06246827821889233,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#operate(double[])": -0.11573261671493008,
        "org.apache.commons.math3.linear$BlockRealMatrix#preMultiply(double[])": -0.023672572574918962,
        "org.apache.commons.math3.linear$BlockRealMatrix#scalarAdd(double)": -0.0337916633617476,
        "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)": -0.016628165727983004,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])": -0.048415808961401095,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)": -0.023672572574918962,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)": -0.023672572574918962,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)": -0.023672572574918962,
        "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)": -0.0846185174750261,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRow(int,double[])": -0.0337916633617476,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)": -0.023672572574918962,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)": -0.023672572574918962,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)": -0.023672572574918962,
        "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)": -0.023672572574918962,
        "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)": -0.07639941829037192,
        "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": -0.08262619694727762,
        "org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])": -0.2062283986955538,
        "org.apache.commons.math3.linear$BlockRealMatrix#transpose()": -0.09223863127108808,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.05149049290129376,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.016628165727983004,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.029140214706351277,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.0337916633617476,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.016628165727983004,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.016628165727983004,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.016628165727983004,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.016628165727983004,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)": -0.1126102605109892,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getExpectedColumnDimension()": -0.016628165727983004,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getExpectedRowDimension()": -0.016628165727983004,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getWrongColumnDimension()": -0.016628165727983004,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getWrongRowDimension()": -0.016628165727983004,
        "org.apache.commons.math3.linear$MatrixUtils#<clinit>()": 1.3716232444161771,
        "org.apache.commons.math3.linear$MatrixUtils#MatrixUtils()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)": -0.06737893245792421,
        "org.apache.commons.math3.linear$MatrixUtils#checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": -0.09764012637548579,
        "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)": 1.3986750563263555,
        "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)": 1.4223575714416326,
        "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": -0.21336287269018112,
        "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)": 1.3993620845292647,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)": -0.11727012676014602,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])": -0.03792151940743017,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": -0.18928384674621276,
        "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])": -0.016628165727983004,
        "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])": -0.06246827821889233,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)": -0.023672572574918962,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.Field,int,int)": -0.023672572574918962,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])": -0.016628165727983004,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldVector(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])": -0.08059421363737469,
        "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)": -0.13742006303145873,
        "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])": -0.2650391663576497,
        "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)": -0.201033624064012,
        "org.apache.commons.math3.linear$MatrixUtils#createRealVector(double[])": -0.016628165727983004,
        "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])": -0.016628165727983004,
        "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])": -0.016628165727983004,
        "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)": -0.016628165727983004,
        "org.apache.commons.math3.linear$MatrixUtils#deserializeRealVector(java.lang.Object,java.lang.String,java.io.ObjectInputStream)": -0.016628165727983004,
        "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)": -0.016628165727983004,
        "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)": -0.016628165727983004,
        "org.apache.commons.math3.linear$MatrixUtils#serializeRealVector(org.apache.commons.math3.linear.RealVector,java.io.ObjectOutputStream)": -0.016628165727983004,
        "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)": -0.016628165727983004,
        "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)": -0.016628165727983004,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#MatrixUtils$BigFractionMatrixConverter()": -0.06737893245792415,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()": -0.06737893245792421,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#start(int,int,int,int,int,int)": -0.06737893245792415,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#visit(int,int,org.apache.commons.math3.fraction.BigFraction)": -0.06737893245792415,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#MatrixUtils$FractionMatrixConverter()": -0.01662816572798298,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()": -0.016628165727983004,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#start(int,int,int,int,int,int)": -0.01662816572798298,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#visit(int,int,org.apache.commons.math3.fraction.Fraction)": -0.01662816572798298,
        "org.apache.commons.math3.linear$NonSquareMatrixException#NonSquareMatrixException(int,int)": -0.06496270817525827,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)": -0.09938905214546156,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix)": -0.05149049290129376,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)": -0.023672572574918962,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)": -0.0976401263754858,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()": -0.023672572574918962,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)": -0.04515947539985771,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()": -0.0976401263754858,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)": -0.0940662741401865,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()": -0.0976401263754858,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)": -0.0337916633617476,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": -0.0337916633617476,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)": -0.09764012637548579,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)": -0.04168087210323961,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": -0.04168087210323961,
        "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()": -0.0529858646562561,
        "org.apache.commons.math3.linear$RealLinearOperator#isTransposable()": 0.0,
        "org.apache.commons.math3.linear$RealLinearOperator#operateTranspose(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat()": -0.0337916633617476,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": 1.3716232444161771,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)": -0.036168791244090115,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)": 1.3096176463828146,
        "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)": -0.06972465434662153,
        "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)": -0.06972465434662153,
        "org.apache.commons.math3.linear$RealMatrixFormat#getAvailableLocales()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getColumnSeparator()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()": -0.031138106818379696,
        "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()": 1.3127591814137163,
        "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)": 1.3096176463828146,
        "org.apache.commons.math3.linear$RealMatrixFormat#getPrefix()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowPrefix()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowSeparator()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowSuffix()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getSuffix()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)": -0.05988642513004731,
        "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)": -0.06972465434662153,
        "org.apache.commons.math3.linear$RealVector#RealVector()": -0.08412316364727668,
        "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)": -0.0337916633617476,
        "org.apache.commons.math3.linear$RealVector#addToEntry(int,double)": -0.04168087210323961,
        "org.apache.commons.math3.linear$RealVector#checkIndex(int)": -0.26238368976658444,
        "org.apache.commons.math3.linear$RealVector#checkIndices(int,int)": -0.08657373564116874,
        "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)": -0.15686030412419136,
        "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)": -0.1427878435025722,
        "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)": -0.05149049290129376,
        "org.apache.commons.math3.linear$RealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": -0.07200638985974264,
        "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)": -0.07200638985974264,
        "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)": -0.0940662741401865,
        "org.apache.commons.math3.linear$RealVector#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.linear$RealVector#getDistance(org.apache.commons.math3.linear.RealVector)": -0.0337916633617476,
        "org.apache.commons.math3.linear$RealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)": -0.0337916633617476,
        "org.apache.commons.math3.linear$RealVector#getL1Norm()": -0.023672572574918962,
        "org.apache.commons.math3.linear$RealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)": -0.0337916633617476,
        "org.apache.commons.math3.linear$RealVector#getLInfNorm()": -0.023672572574918962,
        "org.apache.commons.math3.linear$RealVector#getMaxIndex()": -0.03792151940743017,
        "org.apache.commons.math3.linear$RealVector#getMaxValue()": -0.03792151940743017,
        "org.apache.commons.math3.linear$RealVector#getMinIndex()": -0.03792151940743017,
        "org.apache.commons.math3.linear$RealVector#getMinValue()": -0.03792151940743017,
        "org.apache.commons.math3.linear$RealVector#getNorm()": -0.08262619694727762,
        "org.apache.commons.math3.linear$RealVector#hashCode()": 0.0,
        "org.apache.commons.math3.linear$RealVector#iterator()": -0.10615833031200657,
        "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)": -0.023672572574918962,
        "org.apache.commons.math3.linear$RealVector#mapAdd(double)": -0.029140214706351277,
        "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)": -0.0337916633617476,
        "org.apache.commons.math3.linear$RealVector#mapDivide(double)": -0.04515947539985771,
        "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)": -0.04515947539985771,
        "org.apache.commons.math3.linear$RealVector#mapMultiply(double)": -0.1505792813826794,
        "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)": -0.06246827821889233,
        "org.apache.commons.math3.linear$RealVector#mapSubtract(double)": -0.03792151940743017,
        "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)": -0.03792151940743017,
        "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": -0.08849414769773085,
        "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)": -0.03792151940743017,
        "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)": -0.06496270817525827,
        "org.apache.commons.math3.linear$RealVector#set(double)": -0.023672572574918962,
        "org.apache.commons.math3.linear$RealVector#sparseIterator()": -0.09938905214546156,
        "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)": -0.0337916633617476,
        "org.apache.commons.math3.linear$RealVector#toArray()": -0.029140214706351277,
        "org.apache.commons.math3.linear$RealVector#unitVector()": -0.03792151940743017,
        "org.apache.commons.math3.linear$RealVector#unitize()": -0.03792151940743017,
        "org.apache.commons.math3.linear$RealVector#unmodifiableRealVector(org.apache.commons.math3.linear.RealVector)": -0.09406627414018653,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": -0.0337916633617476,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": -0.048415808961401095,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": -0.0337916633617476,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": -0.048415808961401095,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": -0.023672572574918962,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": -0.0337916633617476,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": -0.023672572574918962,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": -0.0337916633617476,
        "org.apache.commons.math3.linear$RealVector$1#hasNext()": -0.10615833031200661,
        "org.apache.commons.math3.linear$RealVector$1#next()": -0.10615833031200661,
        "org.apache.commons.math3.linear$RealVector$1#remove()": -0.02914021470635131,
        "org.apache.commons.math3.linear$RealVector$2#add(org.apache.commons.math3.linear.RealVector)": -0.02367257257491895,
        "org.apache.commons.math3.linear$RealVector$2#addToEntry(int,double)": -0.02367257257491895,
        "org.apache.commons.math3.linear$RealVector$2#append(double)": -0.02367257257491895,
        "org.apache.commons.math3.linear$RealVector$2#append(org.apache.commons.math3.linear.RealVector)": -0.02367257257491895,
        "org.apache.commons.math3.linear$RealVector$2#combine(double,double,org.apache.commons.math3.linear.RealVector)": -0.02367257257491895,
        "org.apache.commons.math3.linear$RealVector$2#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": -0.02367257257491895,
        "org.apache.commons.math3.linear$RealVector$2#copy()": -0.02367257257491895,
        "org.apache.commons.math3.linear$RealVector$2#cosine(org.apache.commons.math3.linear.RealVector)": -0.02367257257491895,
        "org.apache.commons.math3.linear$RealVector$2#dotProduct(org.apache.commons.math3.linear.RealVector)": -0.02367257257491895,
        "org.apache.commons.math3.linear$RealVector$2#ebeDivide(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#ebeMultiply(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getDimension()": -0.041680872103239563,
        "org.apache.commons.math3.linear$RealVector$2#getDistance(org.apache.commons.math3.linear.RealVector)": -0.02367257257491895,
        "org.apache.commons.math3.linear$RealVector$2#getEntry(int)": -0.048415808961401074,
        "org.apache.commons.math3.linear$RealVector$2#getL1Distance(org.apache.commons.math3.linear.RealVector)": -0.02367257257491895,
        "org.apache.commons.math3.linear$RealVector$2#getL1Norm()": -0.02367257257491895,
        "org.apache.commons.math3.linear$RealVector$2#getLInfDistance(org.apache.commons.math3.linear.RealVector)": -0.02367257257491895,
        "org.apache.commons.math3.linear$RealVector$2#getLInfNorm()": -0.02367257257491895,
        "org.apache.commons.math3.linear$RealVector$2#getNorm()": -0.02367257257491895,
        "org.apache.commons.math3.linear$RealVector$2#getSubVector(int,int)": -0.02367257257491895,
        "org.apache.commons.math3.linear$RealVector$2#isInfinite()": -0.02367257257491895,
        "org.apache.commons.math3.linear$RealVector$2#isNaN()": -0.02367257257491895,
        "org.apache.commons.math3.linear$RealVector$2#iterator()": -0.03379166336174766,
        "org.apache.commons.math3.linear$RealVector$2#map(org.apache.commons.math3.analysis.UnivariateFunction)": -0.02367257257491895,
        "org.apache.commons.math3.linear$RealVector$2#mapAdd(double)": -0.02367257257491895,
        "org.apache.commons.math3.linear$RealVector$2#mapAddToSelf(double)": -0.02367257257491895,
        "org.apache.commons.math3.linear$RealVector$2#mapDivide(double)": -0.02367257257491895,
        "org.apache.commons.math3.linear$RealVector$2#mapDivideToSelf(double)": -0.02367257257491895,
        "org.apache.commons.math3.linear$RealVector$2#mapMultiply(double)": -0.02367257257491895,
        "org.apache.commons.math3.linear$RealVector$2#mapMultiplyToSelf(double)": -0.02367257257491895,
        "org.apache.commons.math3.linear$RealVector$2#mapSubtract(double)": -0.02367257257491895,
        "org.apache.commons.math3.linear$RealVector$2#mapSubtractToSelf(double)": -0.02367257257491895,
        "org.apache.commons.math3.linear$RealVector$2#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": -0.02367257257491895,
        "org.apache.commons.math3.linear$RealVector$2#outerProduct(org.apache.commons.math3.linear.RealVector)": -0.02367257257491895,
        "org.apache.commons.math3.linear$RealVector$2#set(double)": -0.02914021470635131,
        "org.apache.commons.math3.linear$RealVector$2#setEntry(int,double)": -0.02367257257491895,
        "org.apache.commons.math3.linear$RealVector$2#setSubVector(int,org.apache.commons.math3.linear.RealVector)": -0.02367257257491895,
        "org.apache.commons.math3.linear$RealVector$2#sparseIterator()": -0.02367257257491895,
        "org.apache.commons.math3.linear$RealVector$2#subtract(org.apache.commons.math3.linear.RealVector)": -0.03379166336174766,
        "org.apache.commons.math3.linear$RealVector$2#toArray()": -0.02367257257491895,
        "org.apache.commons.math3.linear$RealVector$2#unitVector()": -0.02367257257491895,
        "org.apache.commons.math3.linear$RealVector$2#unitize()": -0.02367257257491895,
        "org.apache.commons.math3.linear$RealVector$2$1#hasNext()": -0.03379166336174766,
        "org.apache.commons.math3.linear$RealVector$2$1#next()": -0.03379166336174766,
        "org.apache.commons.math3.linear$RealVector$2$1#remove()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$2#hasNext()": -0.02367257257491895,
        "org.apache.commons.math3.linear$RealVector$2$2#next()": -0.02367257257491895,
        "org.apache.commons.math3.linear$RealVector$2$2#remove()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#RealVector$2$UnmodifiableEntry(org.apache.commons.math3.linear.RealVector$2)": -0.041680872103239563,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#getValue()": -0.041680872103239563,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#setValue(double)": -0.03379166336174766,
        "org.apache.commons.math3.linear$RealVector$Entry#RealVector$Entry(org.apache.commons.math3.linear.RealVector)": -0.16054562111063958,
        "org.apache.commons.math3.linear$RealVector$Entry#getIndex()": -0.1441072111924231,
        "org.apache.commons.math3.linear$RealVector$Entry#getValue()": -0.14012247945330572,
        "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)": -0.16054562111063952,
        "org.apache.commons.math3.linear$RealVector$Entry#setValue(double)": -0.08849414769773085,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#RealVector$SparseEntryIterator(org.apache.commons.math3.linear.RealVector)": -0.09938905214546156,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)": -0.09938905214546156,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()": -0.09938905214546156,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()": -0.09586630024979152,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#remove()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat()": -0.048415808961401095,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)": 0.027170449906950833,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)": 1.3729568875338556,
        "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector)": -0.08262619694727762,
        "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector,java.lang.StringBuffer,java.text.FieldPosition)": -0.08262619694727762,
        "org.apache.commons.math3.linear$RealVectorFormat#getAvailableLocales()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#getFormat()": -0.02367257257491895,
        "org.apache.commons.math3.linear$RealVectorFormat#getInstance()": 1.379653993853613,
        "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)": 1.3729568875338556,
        "org.apache.commons.math3.linear$RealVectorFormat#getPrefix()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#getSeparator()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#getSuffix()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String)": -0.0940662741401865,
        "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String,java.text.ParsePosition)": -0.10779897295462179,
        "org.apache.commons.math3.optimization$GoalType#<clinit>()": 1.6036258076737697,
        "org.apache.commons.math3.optimization$GoalType#GoalType(java.lang.String,int)": 0.25783937004686497,
        "org.apache.commons.math3.optimization$PointValuePair#PointValuePair(double[],double)": -0.18928384674621276,
        "org.apache.commons.math3.optimization$PointValuePair#PointValuePair(double[],double,boolean)": -0.18928384674621276,
        "org.apache.commons.math3.optimization$PointValuePair#getPoint()": -0.15932378591468233,
        "org.apache.commons.math3.optimization$PointValuePair#getPointRef()": -0.09586630024979152,
        "org.apache.commons.math3.optimization$PointValuePair#writeReplace()": -0.016628165727983004,
        "org.apache.commons.math3.optimization$PointValuePair$DataTransferObject#PointValuePair$DataTransferObject(double[],double)": -0.016628165727983004,
        "org.apache.commons.math3.optimization$PointValuePair$DataTransferObject#readResolve()": -0.016628165727983004,
        "org.apache.commons.math3.optimization.linear$AbstractLinearOptimizer#AbstractLinearOptimizer()": 1.731505852302269,
        "org.apache.commons.math3.optimization.linear$AbstractLinearOptimizer#getConstraints()": 0.3857194146753641,
        "org.apache.commons.math3.optimization.linear$AbstractLinearOptimizer#getFunction()": 0.3857194146753641,
        "org.apache.commons.math3.optimization.linear$AbstractLinearOptimizer#getGoalType()": 0.3857194146753641,
        "org.apache.commons.math3.optimization.linear$AbstractLinearOptimizer#getIterations()": 0.0,
        "org.apache.commons.math3.optimization.linear$AbstractLinearOptimizer#getMaxIterations()": 0.0,
        "org.apache.commons.math3.optimization.linear$AbstractLinearOptimizer#incrementIterationsCounter()": 1.7353814825249738,
        "org.apache.commons.math3.optimization.linear$AbstractLinearOptimizer#optimize(org.apache.commons.math3.optimization.linear.LinearObjectiveFunction,java.util.Collection,org.apache.commons.math3.optimization.GoalType,boolean)": 1.731505852302269,
        "org.apache.commons.math3.optimization.linear$AbstractLinearOptimizer#restrictToNonNegative()": 0.3857194146753641,
        "org.apache.commons.math3.optimization.linear$AbstractLinearOptimizer#setMaxIterations(int)": 0.3857194146753641,
        "org.apache.commons.math3.optimization.linear$LinearConstraint#LinearConstraint(double[],double,org.apache.commons.math3.optimization.linear.Relationship,double[],double)": 0.0,
        "org.apache.commons.math3.optimization.linear$LinearConstraint#LinearConstraint(double[],org.apache.commons.math3.optimization.linear.Relationship,double)": 1.7241336997502086,
        "org.apache.commons.math3.optimization.linear$LinearConstraint#LinearConstraint(org.apache.commons.math3.linear.RealVector,double,org.apache.commons.math3.optimization.linear.Relationship,org.apache.commons.math3.linear.RealVector,double)": 0.0,
        "org.apache.commons.math3.optimization.linear$LinearConstraint#LinearConstraint(org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.optimization.linear.Relationship,double)": 0.3783472621233036,
        "org.apache.commons.math3.optimization.linear$LinearConstraint#equals(java.lang.Object)": -0.016628165727983004,
        "org.apache.commons.math3.optimization.linear$LinearConstraint#getCoefficients()": 0.3783472621233036,
        "org.apache.commons.math3.optimization.linear$LinearConstraint#getRelationship()": 0.3783472621233036,
        "org.apache.commons.math3.optimization.linear$LinearConstraint#getValue()": 0.3783472621233036,
        "org.apache.commons.math3.optimization.linear$LinearConstraint#hashCode()": 0.0,
        "org.apache.commons.math3.optimization.linear$LinearConstraint#readObject(java.io.ObjectInputStream)": -0.016628165727983004,
        "org.apache.commons.math3.optimization.linear$LinearConstraint#writeObject(java.io.ObjectOutputStream)": -0.016628165727983004,
        "org.apache.commons.math3.optimization.linear$LinearObjectiveFunction#LinearObjectiveFunction(double[],double)": 1.7241336997502086,
        "org.apache.commons.math3.optimization.linear$LinearObjectiveFunction#LinearObjectiveFunction(org.apache.commons.math3.linear.RealVector,double)": 0.3783472621233036,
        "org.apache.commons.math3.optimization.linear$LinearObjectiveFunction#equals(java.lang.Object)": -0.016628165727983004,
        "org.apache.commons.math3.optimization.linear$LinearObjectiveFunction#getCoefficients()": 0.3783472621233036,
        "org.apache.commons.math3.optimization.linear$LinearObjectiveFunction#getConstantTerm()": 0.3783472621233036,
        "org.apache.commons.math3.optimization.linear$LinearObjectiveFunction#getValue(double[])": -0.08059421363737469,
        "org.apache.commons.math3.optimization.linear$LinearObjectiveFunction#getValue(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.optimization.linear$LinearObjectiveFunction#hashCode()": 0.0,
        "org.apache.commons.math3.optimization.linear$LinearObjectiveFunction#readObject(java.io.ObjectInputStream)": -0.016628165727983004,
        "org.apache.commons.math3.optimization.linear$LinearObjectiveFunction#writeObject(java.io.ObjectOutputStream)": -0.016628165727983004,
        "org.apache.commons.math3.optimization.linear$NoFeasibleSolutionException#NoFeasibleSolutionException()": -0.029140214706351277,
        "org.apache.commons.math3.optimization.linear$Relationship#<clinit>()": 1.7241336997502086,
        "org.apache.commons.math3.optimization.linear$Relationship#Relationship(java.lang.String,int,java.lang.String)": 0.3783472621233036,
        "org.apache.commons.math3.optimization.linear$Relationship#oppositeRelationship()": -0.03792151940743017,
        "org.apache.commons.math3.optimization.linear$Relationship#toString()": 0.0,
        "org.apache.commons.math3.optimization.linear$Relationship$1#<clinit>()": -0.03792151940743027,
        "org.apache.commons.math3.optimization.linear$SimplexSolver#SimplexSolver()": 1.731505852302269,
        "org.apache.commons.math3.optimization.linear$SimplexSolver#SimplexSolver(double,int)": 1.731505852302269,
        "org.apache.commons.math3.optimization.linear$SimplexSolver#doIteration(org.apache.commons.math3.optimization.linear.SimplexTableau)": 1.7353814825249738,
        "org.apache.commons.math3.optimization.linear$SimplexSolver#doOptimize()": 1.731505852302269,
        "org.apache.commons.math3.optimization.linear$SimplexSolver#getPivotColumn(org.apache.commons.math3.optimization.linear.SimplexTableau)": 1.7353814825249738,
        "org.apache.commons.math3.optimization.linear$SimplexSolver#getPivotRow(org.apache.commons.math3.optimization.linear.SimplexTableau,int)": 1.7353814825249738,
        "org.apache.commons.math3.optimization.linear$SimplexSolver#solvePhase1(org.apache.commons.math3.optimization.linear.SimplexTableau)": 1.731505852302269,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#SimplexTableau(org.apache.commons.math3.optimization.linear.LinearObjectiveFunction,java.util.Collection,org.apache.commons.math3.optimization.GoalType,boolean,double)": -0.0337916633617476,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#SimplexTableau(org.apache.commons.math3.optimization.linear.LinearObjectiveFunction,java.util.Collection,org.apache.commons.math3.optimization.GoalType,boolean,double,int)": 1.7241336997502086,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#copyArray(double[],double[])": 1.7241336997502086,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#createTableau(boolean)": 1.7241336997502086,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#divideRow(int,double)": 1.7353814825249738,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#dropPhase1Objective()": 1.7353814825249738,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#equals(java.lang.Object)": -0.016628165727983004,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getArtificialVariableOffset()": 1.7334262643588312,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getBasicRow(int)": 1.7353814825249738,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getConstraintTypeCounts(org.apache.commons.math3.optimization.linear.Relationship)": 1.7241336997502086,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getData()": -0.029140214706351277,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getEntry(int,int)": 1.7296181776195136,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getHeight()": 1.731505852302269,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getInvertedCoefficientSum(org.apache.commons.math3.linear.RealVector)": -0.06972465434662153,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getNumArtificialVariables()": 0.3783472621233036,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getNumDecisionVariables()": 0.0,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getNumObjectiveFunctions()": 0.3783472621233036,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getNumSlackVariables()": 0.3783472621233036,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getOriginalNumDecisionVariables()": 1.7241336997502086,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getRhsOffset()": 1.7334262643588312,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getSlackVariableOffset()": 1.7296181776195136,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getSolution()": -0.08059421363737469,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getWidth()": 1.7296181776195136,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#hashCode()": 0.0,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#initializeColumnLabels()": 1.7241336997502086,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#isOptimal()": 1.731505852302269,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#normalize(org.apache.commons.math3.optimization.linear.LinearConstraint)": 1.7241336997502086,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#normalizeConstraints(java.util.Collection)": 1.7241336997502086,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#readObject(java.io.ObjectInputStream)": -0.016628165727983004,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#setEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#subtractRow(int,int,double)": 1.7353814825249738,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#writeObject(java.io.ObjectOutputStream)": -0.016628165727983004,
        "org.apache.commons.math3.optimization.linear$UnboundedSolutionException#UnboundedSolutionException()": -0.016628165727983004,
        "org.apache.commons.math3.util$CompositeFormat#CompositeFormat()": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#formatDouble(double,java.text.NumberFormat,java.lang.StringBuffer,java.text.FieldPosition)": -0.17929926460406298,
        "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()": 1.356419195208495,
        "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)": -0.22534799748573542,
        "org.apache.commons.math3.util$CompositeFormat#parseAndIgnoreWhitespace(java.lang.String,java.text.ParsePosition)": -0.201033624064012,
        "org.apache.commons.math3.util$CompositeFormat#parseFixedstring(java.lang.String,java.lang.String,java.text.ParsePosition)": -0.198931223998279,
        "org.apache.commons.math3.util$CompositeFormat#parseNextCharacter(java.lang.String,java.text.ParsePosition)": -0.20103362406401204,
        "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,double,java.text.ParsePosition)": -0.08657373564116888,
        "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,java.text.NumberFormat,java.text.ParsePosition)": -0.19575016075539614,
        "org.apache.commons.math3.util$FastMath#<clinit>()": -1.2198797840000895,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0.0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": -0.01662816572798298,
        "org.apache.commons.math3.util$FastMath#abs(double)": -0.5838311617139945,
        "org.apache.commons.math3.util$FastMath#abs(float)": -0.02367257257491895,
        "org.apache.commons.math3.util$FastMath#abs(int)": -0.38049028920381867,
        "org.apache.commons.math3.util$FastMath#abs(long)": -0.1626484112117822,
        "org.apache.commons.math3.util$FastMath#acos(double)": -0.07851969834376825,
        "org.apache.commons.math3.util$FastMath#acosh(double)": -0.016628165727983004,
        "org.apache.commons.math3.util$FastMath#asin(double)": -0.08059421363737469,
        "org.apache.commons.math3.util$FastMath#asinh(double)": -0.016628165727983004,
        "org.apache.commons.math3.util$FastMath#atan(double)": -0.07639941829037192,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": -0.17009923465291552,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": -0.16176103070520392,
        "org.apache.commons.math3.util$FastMath#atanh(double)": -0.016628165727983004,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": -0.1126102605109892,
        "org.apache.commons.math3.util$FastMath#ceil(double)": -0.8909645703201063,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": -0.06246827821889234,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": -0.02367257257491895,
        "org.apache.commons.math3.util$FastMath#cos(double)": -0.3080659664195617,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": -0.3629316072138945,
        "org.apache.commons.math3.util$FastMath#cosh(double)": -0.0846185174750261,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": -0.14541799313107368,
        "org.apache.commons.math3.util$FastMath#exp(double)": -0.597554339563594,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": -0.9487110024625698,
        "org.apache.commons.math3.util$FastMath#expm1(double)": -0.06246827821889233,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": -0.08059421363737469,
        "org.apache.commons.math3.util$FastMath#floor(double)": -0.9756806350760134,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": -0.14930085301567542,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": -0.02367257257491895,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": -0.14541799313107368,
        "org.apache.commons.math3.util$FastMath#log(double)": -0.8411598431240425,
        "org.apache.commons.math3.util$FastMath#log(double,double)": -0.016628165727983004,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": -0.9506809209261946,
        "org.apache.commons.math3.util$FastMath#log10(double)": -0.13467859061378737,
        "org.apache.commons.math3.util$FastMath#log1p(double)": -0.06496270817525827,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0.0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": -0.5431711716747099,
        "org.apache.commons.math3.util$FastMath#max(float,float)": -0.02367257257491895,
        "org.apache.commons.math3.util$FastMath#max(int,int)": -0.347953023674072,
        "org.apache.commons.math3.util$FastMath#max(long,long)": -0.01662816572798298,
        "org.apache.commons.math3.util$FastMath#min(double,double)": -0.3302904803415183,
        "org.apache.commons.math3.util$FastMath#min(float,float)": -0.02367257257491895,
        "org.apache.commons.math3.util$FastMath#min(int,int)": -0.5178867839063499,
        "org.apache.commons.math3.util$FastMath#min(long,long)": -0.06246827821889234,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": -0.06246827821889234,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": -0.02914021470635131,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": -0.023672572574918962,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": -0.016628165727983004,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": -0.3905422782965342,
        "org.apache.commons.math3.util$FastMath#polySine(double)": -0.3905422782965342,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": -0.8768356411009912,
        "org.apache.commons.math3.util$FastMath#random()": -0.076399418290372,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": -0.03792151940743017,
        "org.apache.commons.math3.util$FastMath#rint(double)": -0.07851969834376825,
        "org.apache.commons.math3.util$FastMath#round(double)": -0.07639941829037192,
        "org.apache.commons.math3.util$FastMath#round(float)": -0.029140214706351277,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": -0.12474223533383855,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": -0.02367257257491895,
        "org.apache.commons.math3.util$FastMath#signum(double)": -0.05720596461847349,
        "org.apache.commons.math3.util$FastMath#signum(float)": -0.02367257257491895,
        "org.apache.commons.math3.util$FastMath#sin(double)": -0.3732262315507291,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": -0.37831862206886313,
        "org.apache.commons.math3.util$FastMath#sinh(double)": -0.0846185174750261,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": -1.0618472101601464,
        "org.apache.commons.math3.util$FastMath#tan(double)": -0.0846185174750261,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": -0.0846185174750261,
        "org.apache.commons.math3.util$FastMath#tanh(double)": -0.05441310247687182,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": -0.023672572574918962,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": -0.023672572574918962,
        "org.apache.commons.math3.util$FastMath#ulp(double)": -0.31209835762691795,
        "org.apache.commons.math3.util$FastMath#ulp(float)": -0.016628165727983004,
        "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double,double)": -0.3341727765523723,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getK()": -0.3341727765523723,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()": -0.3341727765523723,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()": -0.3341727765523723,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": -0.9462466890788093,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": -0.944273698561757,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": -0.944273698561757,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0.0,
        "org.apache.commons.math3.util$MathUtils#MathUtils()": 0.0,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double)": -0.07200638985974264,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double[])": -0.016628165727983004,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)": 1.1595715627640923,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.16417308125896196,
        "org.apache.commons.math3.util$MathUtils#copySign(byte,byte)": -0.0337916633617476,
        "org.apache.commons.math3.util$MathUtils#copySign(int,int)": -0.0337916633617476,
        "org.apache.commons.math3.util$MathUtils#copySign(long,long)": -0.023672572574918962,
        "org.apache.commons.math3.util$MathUtils#copySign(short,short)": -0.023672572574918962,
        "org.apache.commons.math3.util$MathUtils#hash(double)": -0.12474223533383855,
        "org.apache.commons.math3.util$MathUtils#hash(double[])": -0.05149049290129376,
        "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)": -0.10779897295462179,
        "org.apache.commons.math3.util$MathUtils#reduce(double,double,double)": -0.03792151940743017,
        "org.apache.commons.math3.util$Pair#Pair(java.lang.Object,java.lang.Object)": -0.3380308197537403,
        "org.apache.commons.math3.util$Pair#Pair(org.apache.commons.math3.util.Pair)": 0.0,
        "org.apache.commons.math3.util$Pair#equals(java.lang.Object)": -0.016628165727983004,
        "org.apache.commons.math3.util$Pair#getFirst()": -0.1556183784617493,
        "org.apache.commons.math3.util$Pair#getKey()": -0.25612446565742153,
        "org.apache.commons.math3.util$Pair#getSecond()": -0.1556183784617493,
        "org.apache.commons.math3.util$Pair#getValue()": -0.21637419232623012,
        "org.apache.commons.math3.util$Pair#hashCode()": -0.016628165727983004,
        "org.apache.commons.math3.util$Precision#<clinit>()": -0.3364562977754705,
        "org.apache.commons.math3.util$Precision#Precision()": 0.0,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,double)": 1.6867074682905674,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,int)": 1.731505852302269,
        "org.apache.commons.math3.util$Precision#equals(double,double)": -0.2367639000554785,
        "org.apache.commons.math3.util$Precision#equals(double,double,double)": 1.3931984505944448,
        "org.apache.commons.math3.util$Precision#equals(double,double,int)": 1.1854222460743828,
        "org.apache.commons.math3.util$Precision#equals(float,float)": -0.016628165727983004,
        "org.apache.commons.math3.util$Precision#equals(float,float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(float,float,int)": -0.1677460348031682,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)": -0.21637419232623006,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)": -0.11727012676014602,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)": -0.016628165727983004,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)": -0.16656091304384013,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)": 0.0,
        "org.apache.commons.math3.util$Precision#representableDelta(double,double)": -0.01662816572798298,
        "org.apache.commons.math3.util$Precision#round(double,int)": -0.016628165727983004,
        "org.apache.commons.math3.util$Precision#round(double,int,int)": -0.01662816572798298,
        "org.apache.commons.math3.util$Precision#round(float,int)": -0.016628165727983004,
        "org.apache.commons.math3.util$Precision#round(float,int,int)": -0.016628165727983004,
        "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)": -0.016628165727983004
    },
    "Math-29": {
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)": -0.24666947200611009,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)": -0.26722559242421506,
        "org.apache.commons.math3.exception$DimensionMismatchException#getDimension()": -0.03121638627781298,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": -0.06138297982209351,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.11240350877111384,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": -0.01779878326555262,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.6915937857103207,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": -0.048423543599888985,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.6021026094062291,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": -0.06704910401710173,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)": -0.04842354359988893,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": -0.06138297982209371,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": -0.15671018067197426,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.3058044652453537,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": -0.03121638627781298,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": -0.03121638627781298,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(java.lang.Number,java.lang.Number,java.lang.Number)": -0.10113105292805202,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)": -0.28976990719130663,
        "org.apache.commons.math3.exception$OutOfRangeException#getHi()": -0.01779878326555262,
        "org.apache.commons.math3.exception$OutOfRangeException#getLo()": -0.01779878326555262,
        "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()": -0.38252151393489053,
        "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)": -0.47299777928969755,
        "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)": -0.07486710368644531,
        "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])": -0.09511386736815454,
        "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])": -0.025350529903803837,
        "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)": -0.12621810548704335,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)": -0.11419863023061175,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)": -0.07486710368644531,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)": -0.07486710368644531,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getData()": -0.025350529903803837,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()": -0.06704910401710171,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()": -0.16912265856569908,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)": -0.13588145698395657,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)": -0.03620956163514431,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)": -0.10307546301183101,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)": -0.058377020996213794,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])": -0.031216386277812886,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()": -0.031216386277812886,
        "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()": -0.04842354359988893,
        "org.apache.commons.math3.linear$AbstractRealMatrix#isSquare()": -0.24349730636594105,
        "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": -0.19349091610981642,
        "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])": -0.025350529903803837,
        "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)": -0.12287399303281926,
        "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)": -0.025350529903803837,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])": -0.017798783265552575,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)": -0.031216386277812886,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)": -0.06973597660856855,
        "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)": -0.07486710368644531,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])": -0.017798783265552575,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)": -0.025350529903803837,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)": -0.08658796324031828,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])": -0.017798783265552575,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)": -0.017798783265552575,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)": -0.10499185984964872,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)": -0.025350529903803837,
        "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": -0.17312245138393634,
        "org.apache.commons.math3.linear$AbstractRealMatrix#toString()": -0.040645045731394845,
        "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()": -0.2570703954991577,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.017798783265552575,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.017798783265552575,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.05192505001568601,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.017798783265552575,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.040645045731394845,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.017798783265552575,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.2591202969372704,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.09304073960447637,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.017798783265552575,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.025350529903803837,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#end()": -0.16912265856569908,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#start(int,int,int,int,int,int)": -0.16912265856569908,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#visit(int,int,double)": -0.16912265856569908,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#end()": -0.06704910401710173,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#start(int,int,int,int,int,int)": -0.06704910401710173,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#visit(int,int,double)": -0.06704910401710173,
        "org.apache.commons.math3.linear$AbstractRealMatrix$3#visit(int,int,double)": -0.03121638627781298,
        "org.apache.commons.math3.linear$AbstractRealMatrix$4#start(int,int,int,int,int,int)": -0.09511386736815464,
        "org.apache.commons.math3.linear$AbstractRealMatrix$4#visit(int,int,double)": -0.09511386736815464,
        "org.apache.commons.math3.linear$AbstractRealMatrix$5#visit(int,int,double)": -0.2570703954991578,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix()": -0.03620956163514431,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[])": -0.03620956163514431,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])": -0.33831321496023736,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)": -0.21021585681084032,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)": -0.3650074796147887,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)": -0.025350529903803837,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()": -0.06426875786774328,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])": -0.3400687518504775,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()": -0.2954853346232439,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)": -0.2878504347951915,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()": -0.4108396804166423,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getData()": -0.28881108404139394,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getDataRef()": -0.124554379815345,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)": -0.3391915942737882,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()": -0.4108396804166423,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)": -0.06138297982209371,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#operate(double[])": -0.12621810548704335,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#preMultiply(double[])": -0.017798783265552575,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)": -0.3573667627453154,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)": -0.3400687518504775,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)": -0.017798783265552575,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.017798783265552575,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.017798783265552575,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.1623079013741018,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.017798783265552575,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.03620956163514431,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.017798783265552575,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.25809656067652736,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.09304073960447637,
        "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()": -0.4542527793737394,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector()": -0.031216386277812886,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[])": -0.3095085481710441,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)": -0.3582199447335413,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],double[])": -0.017798783265552575,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],int,int)": -0.017798783265552575,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],org.apache.commons.math3.linear.ArrayRealVector)": -0.017798783265552575,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int)": -0.24981708910259437,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int,double)": -0.031216386277812886,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[])": -0.017798783265552575,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[],int,int)": -0.017798783265552575,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector)": -0.017798783265552575,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,boolean)": -0.20552761233728825,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,double[])": -0.017798783265552575,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.ArrayRealVector)": -0.031216386277812886,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.RealVector)": -0.025350529903803837,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector)": -0.017798783265552575,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.ArrayRealVector)": -0.017798783265552575,
        "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)": -0.05523233510877522,
        "org.apache.commons.math3.linear$ArrayRealVector#addToEntry(int,double)": -0.031216386277812886,
        "org.apache.commons.math3.linear$ArrayRealVector#append(double)": -0.025350529903803837,
        "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.RealVector)": -0.025350529903803837,
        "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)": -0.24136848365429645,
        "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)": -0.05523233510877522,
        "org.apache.commons.math3.linear$ArrayRealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)": -0.07732656156752503,
        "org.apache.commons.math3.linear$ArrayRealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": -0.12455437981534509,
        "org.apache.commons.math3.linear$ArrayRealVector#copy()": -0.20434477789957364,
        "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)": -0.17965308693186893,
        "org.apache.commons.math3.linear$ArrayRealVector#ebeDivide(org.apache.commons.math3.linear.RealVector)": -0.06138297982209371,
        "org.apache.commons.math3.linear$ArrayRealVector#ebeMultiply(org.apache.commons.math3.linear.RealVector)": -0.07732656156752503,
        "org.apache.commons.math3.linear$ArrayRealVector#equals(java.lang.Object)": -0.13588145698395657,
        "org.apache.commons.math3.linear$ArrayRealVector#getDataRef()": -0.1374433800436905,
        "org.apache.commons.math3.linear$ArrayRealVector#getDimension()": -0.3734004553155059,
        "org.apache.commons.math3.linear$ArrayRealVector#getDistance(org.apache.commons.math3.linear.RealVector)": -0.031216386277812886,
        "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)": -0.33212967887133477,
        "org.apache.commons.math3.linear$ArrayRealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)": -0.025350529903803837,
        "org.apache.commons.math3.linear$ArrayRealVector#getL1Norm()": -0.025350529903803837,
        "org.apache.commons.math3.linear$ArrayRealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)": -0.025350529903803837,
        "org.apache.commons.math3.linear$ArrayRealVector#getLInfNorm()": -0.025350529903803837,
        "org.apache.commons.math3.linear$ArrayRealVector#getNorm()": -0.1420541443867126,
        "org.apache.commons.math3.linear$ArrayRealVector#getSubVector(int,int)": -0.04842354359988893,
        "org.apache.commons.math3.linear$ArrayRealVector#hashCode()": -0.031216386277812886,
        "org.apache.commons.math3.linear$ArrayRealVector#isInfinite()": -0.025350529903803837,
        "org.apache.commons.math3.linear$ArrayRealVector#isNaN()": -0.14052935234203145,
        "org.apache.commons.math3.linear$ArrayRealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)": -0.040645045731394845,
        "org.apache.commons.math3.linear$ArrayRealVector#mapAddToSelf(double)": -0.02535052990380371,
        "org.apache.commons.math3.linear$ArrayRealVector#mapDivideToSelf(double)": -0.03121638627781298,
        "org.apache.commons.math3.linear$ArrayRealVector#mapMultiplyToSelf(double)": -0.15671018067197418,
        "org.apache.commons.math3.linear$ArrayRealVector#mapSubtractToSelf(double)": -0.02535052990380371,
        "org.apache.commons.math3.linear$ArrayRealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": -0.04064504573139471,
        "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)": -0.031216386277812886,
        "org.apache.commons.math3.linear$ArrayRealVector#projection(org.apache.commons.math3.linear.RealVector)": -0.025350529903803837,
        "org.apache.commons.math3.linear$ArrayRealVector#set(double)": -0.1294979057886183,
        "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)": -0.17444178451023945,
        "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,double[])": -0.09715199205291099,
        "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,org.apache.commons.math3.linear.RealVector)": -0.09915711476979117,
        "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)": -0.17835990936536703,
        "org.apache.commons.math3.linear$ArrayRealVector#toArray()": -0.2090501332360577,
        "org.apache.commons.math3.linear$ArrayRealVector#toString()": -0.017798783265552575,
        "org.apache.commons.math3.linear$ArrayRealVector#unitVector()": -0.025350529903803837,
        "org.apache.commons.math3.linear$ArrayRealVector#unitize()": -0.025350529903803837,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": -0.02535052990380371,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": -0.03620956163514431,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": -0.02535052990380371,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": -0.03620956163514431,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": -0.017798783265552575,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": -0.025350529903803837,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": -0.017798783265552575,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": -0.025350529903803837,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)": -0.10499185984964872,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix)": -0.05523233510877522,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)": -0.025350529903803837,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)": -0.10307546301183113,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()": -0.025350529903803837,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)": -0.04842354359988893,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()": -0.10307546301183113,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)": -0.09915711476979117,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()": -0.10307546301183113,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)": -0.03620956163514431,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": -0.03620956163514431,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)": -0.10307546301183101,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)": -0.04468438449012068,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": -0.04468438449012068,
        "org.apache.commons.math3.linear$OpenMapRealVector#OpenMapRealVector()": -0.017798783265552575,
        "org.apache.commons.math3.linear$OpenMapRealVector#OpenMapRealVector(double[])": 1.6590788119604696,
        "org.apache.commons.math3.linear$OpenMapRealVector#OpenMapRealVector(double[],double)": 1.6590788119604696,
        "org.apache.commons.math3.linear$OpenMapRealVector#OpenMapRealVector(int)": -0.03620956163514431,
        "org.apache.commons.math3.linear$OpenMapRealVector#OpenMapRealVector(int,double)": -0.06138297982209371,
        "org.apache.commons.math3.linear$OpenMapRealVector#OpenMapRealVector(int,int)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector#OpenMapRealVector(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector#OpenMapRealVector(java.lang.Double[])": -0.017798783265552575,
        "org.apache.commons.math3.linear$OpenMapRealVector#OpenMapRealVector(java.lang.Double[],double)": -0.017798783265552575,
        "org.apache.commons.math3.linear$OpenMapRealVector#OpenMapRealVector(org.apache.commons.math3.linear.OpenMapRealVector)": 1.7502640233914315,
        "org.apache.commons.math3.linear$OpenMapRealVector#OpenMapRealVector(org.apache.commons.math3.linear.OpenMapRealVector,int)": -0.025350529903803837,
        "org.apache.commons.math3.linear$OpenMapRealVector#OpenMapRealVector(org.apache.commons.math3.linear.RealVector)": -0.017798783265552575,
        "org.apache.commons.math3.linear$OpenMapRealVector#add(org.apache.commons.math3.linear.OpenMapRealVector)": -0.017798783265552575,
        "org.apache.commons.math3.linear$OpenMapRealVector#add(org.apache.commons.math3.linear.RealVector)": -0.031216386277812886,
        "org.apache.commons.math3.linear$OpenMapRealVector#append(double)": -0.017798783265552575,
        "org.apache.commons.math3.linear$OpenMapRealVector#append(org.apache.commons.math3.linear.OpenMapRealVector)": -0.017798783265552575,
        "org.apache.commons.math3.linear$OpenMapRealVector#append(org.apache.commons.math3.linear.RealVector)": -0.017798783265552575,
        "org.apache.commons.math3.linear$OpenMapRealVector#copy()": -0.06426875786774328,
        "org.apache.commons.math3.linear$OpenMapRealVector#dotProduct(org.apache.commons.math3.linear.OpenMapRealVector)": -0.031216386277812886,
        "org.apache.commons.math3.linear$OpenMapRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)": -0.031216386277812886,
        "org.apache.commons.math3.linear$OpenMapRealVector#ebeDivide(org.apache.commons.math3.linear.RealVector)": 0.8253330726191552,
        "org.apache.commons.math3.linear$OpenMapRealVector#ebeMultiply(org.apache.commons.math3.linear.RealVector)": 1.3378127176905887,
        "org.apache.commons.math3.linear$OpenMapRealVector#equals(java.lang.Object)": -0.031216386277812886,
        "org.apache.commons.math3.linear$OpenMapRealVector#getDimension()": 0.305090903807396,
        "org.apache.commons.math3.linear$OpenMapRealVector#getDistance(org.apache.commons.math3.linear.OpenMapRealVector)": -0.017798783265552575,
        "org.apache.commons.math3.linear$OpenMapRealVector#getDistance(org.apache.commons.math3.linear.RealVector)": -0.017798783265552575,
        "org.apache.commons.math3.linear$OpenMapRealVector#getEntries()": 0.4018743313455132,
        "org.apache.commons.math3.linear$OpenMapRealVector#getEntry(int)": 1.6988236837038104,
        "org.apache.commons.math3.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math3.linear.OpenMapRealVector)": -0.017798783265552575,
        "org.apache.commons.math3.linear$OpenMapRealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)": -0.017798783265552575,
        "org.apache.commons.math3.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math3.linear.OpenMapRealVector)": -0.017798783265552575,
        "org.apache.commons.math3.linear$OpenMapRealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)": -0.017798783265552575,
        "org.apache.commons.math3.linear$OpenMapRealVector#getSparsity()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealVector#getSubVector(int,int)": -0.04842354359988893,
        "org.apache.commons.math3.linear$OpenMapRealVector#hashCode()": -0.017798783265552575,
        "org.apache.commons.math3.linear$OpenMapRealVector#isDefaultValue(double)": 1.6482037520501076,
        "org.apache.commons.math3.linear$OpenMapRealVector#isInfinite()": -0.017798783265552575,
        "org.apache.commons.math3.linear$OpenMapRealVector#isNaN()": -0.017798783265552575,
        "org.apache.commons.math3.linear$OpenMapRealVector#mapAdd(double)": -0.017798783265552575,
        "org.apache.commons.math3.linear$OpenMapRealVector#mapAddToSelf(double)": -0.017798783265552575,
        "org.apache.commons.math3.linear$OpenMapRealVector#projection(org.apache.commons.math3.linear.RealVector)": -0.017798783265552575,
        "org.apache.commons.math3.linear$OpenMapRealVector#set(double)": -0.017798783265552575,
        "org.apache.commons.math3.linear$OpenMapRealVector#setEntry(int,double)": 1.7075964912288861,
        "org.apache.commons.math3.linear$OpenMapRealVector#setSubVector(int,org.apache.commons.math3.linear.RealVector)": -0.04468438449012068,
        "org.apache.commons.math3.linear$OpenMapRealVector#sparseIterator()": -0.058377020996213794,
        "org.apache.commons.math3.linear$OpenMapRealVector#subtract(org.apache.commons.math3.linear.OpenMapRealVector)": -0.025350529903803837,
        "org.apache.commons.math3.linear$OpenMapRealVector#subtract(org.apache.commons.math3.linear.RealVector)": -0.03620956163514431,
        "org.apache.commons.math3.linear$OpenMapRealVector#toArray()": -0.04468438449012068,
        "org.apache.commons.math3.linear$OpenMapRealVector#unitVector()": -0.017798783265552575,
        "org.apache.commons.math3.linear$OpenMapRealVector#unitize()": -0.017798783265552575,
        "org.apache.commons.math3.linear$OpenMapRealVector$OpenMapEntry#OpenMapRealVector$OpenMapEntry(org.apache.commons.math3.linear.OpenMapRealVector,org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator)": -0.058377020996213794,
        "org.apache.commons.math3.linear$OpenMapRealVector$OpenMapEntry#getIndex()": -0.040645045731394845,
        "org.apache.commons.math3.linear$OpenMapRealVector$OpenMapEntry#getValue()": -0.058377020996213794,
        "org.apache.commons.math3.linear$OpenMapRealVector$OpenMapEntry#setValue(double)": -0.025350529903803837,
        "org.apache.commons.math3.linear$OpenMapRealVector$OpenMapSparseIterator#OpenMapRealVector$OpenMapSparseIterator(org.apache.commons.math3.linear.OpenMapRealVector)": -0.058377020996213794,
        "org.apache.commons.math3.linear$OpenMapRealVector$OpenMapSparseIterator#hasNext()": -0.058377020996213794,
        "org.apache.commons.math3.linear$OpenMapRealVector$OpenMapSparseIterator#next()": -0.058377020996213794,
        "org.apache.commons.math3.linear$OpenMapRealVector$OpenMapSparseIterator#remove()": 0.0,
        "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()": -0.5517945773474118,
        "org.apache.commons.math3.linear$RealLinearOperator#isTransposable()": 0.0,
        "org.apache.commons.math3.linear$RealLinearOperator#operateTranspose(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#RealVector()": -0.06644513870797464,
        "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)": -0.03620956163514431,
        "org.apache.commons.math3.linear$RealVector#addToEntry(int,double)": -0.04468438449012068,
        "org.apache.commons.math3.linear$RealVector#checkIndex(int)": 1.6632898193280257,
        "org.apache.commons.math3.linear$RealVector#checkIndices(int,int)": -0.09304073960447637,
        "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)": 1.6971260069671805,
        "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)": -0.10688163301503821,
        "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)": -0.05192505001568601,
        "org.apache.commons.math3.linear$RealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": -0.07972356033564652,
        "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)": -0.06704910401710171,
        "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)": -0.031216386277812886,
        "org.apache.commons.math3.linear$RealVector#getDistance(org.apache.commons.math3.linear.RealVector)": -0.017798783265552575,
        "org.apache.commons.math3.linear$RealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)": -0.017798783265552575,
        "org.apache.commons.math3.linear$RealVector#getL1Norm()": -0.017798783265552575,
        "org.apache.commons.math3.linear$RealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)": -0.017798783265552575,
        "org.apache.commons.math3.linear$RealVector#getLInfNorm()": -0.017798783265552575,
        "org.apache.commons.math3.linear$RealVector#getMaxIndex()": -0.03620956163514431,
        "org.apache.commons.math3.linear$RealVector#getMaxValue()": -0.03620956163514431,
        "org.apache.commons.math3.linear$RealVector#getMinIndex()": -0.03620956163514431,
        "org.apache.commons.math3.linear$RealVector#getMinValue()": -0.03620956163514431,
        "org.apache.commons.math3.linear$RealVector#getNorm()": -0.05523233510877522,
        "org.apache.commons.math3.linear$RealVector#iterator()": -0.058377020996213794,
        "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)": -0.031216386277812886,
        "org.apache.commons.math3.linear$RealVector#mapAdd(double)": -0.031216386277812886,
        "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapDivide(double)": -0.04468438449012068,
        "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)": -0.025350529903803837,
        "org.apache.commons.math3.linear$RealVector#mapMultiply(double)": -0.1623079013741018,
        "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)": -0.025350529903803837,
        "org.apache.commons.math3.linear$RealVector#mapSubtract(double)": -0.03620956163514431,
        "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)": -0.017798783265552575,
        "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": -0.03620956163514431,
        "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)": -0.031216386277812886,
        "org.apache.commons.math3.linear$RealVector#set(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#sparseIterator()": -0.06973597660856855,
        "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)": -0.03620956163514431,
        "org.apache.commons.math3.linear$RealVector#toArray()": 0.0,
        "org.apache.commons.math3.linear$RealVector#unitVector()": 0.0,
        "org.apache.commons.math3.linear$RealVector#unitize()": 0.0,
        "org.apache.commons.math3.linear$RealVector#unmodifiableRealVector(org.apache.commons.math3.linear.RealVector)": -0.09915711476979117,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": -0.03620956163514431,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": -0.05192505001568601,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": -0.03620956163514431,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": -0.05192505001568601,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": -0.025350529903803837,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": -0.03620956163514431,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": -0.025350529903803837,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": -0.03620956163514431,
        "org.apache.commons.math3.linear$RealVector$1#hasNext()": -0.05837702099621378,
        "org.apache.commons.math3.linear$RealVector$1#next()": -0.05837702099621378,
        "org.apache.commons.math3.linear$RealVector$1#remove()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#add(org.apache.commons.math3.linear.RealVector)": -0.01779878326555262,
        "org.apache.commons.math3.linear$RealVector$2#addToEntry(int,double)": -0.02535052990380371,
        "org.apache.commons.math3.linear$RealVector$2#append(double)": -0.01779878326555262,
        "org.apache.commons.math3.linear$RealVector$2#append(org.apache.commons.math3.linear.RealVector)": -0.01779878326555262,
        "org.apache.commons.math3.linear$RealVector$2#combine(double,double,org.apache.commons.math3.linear.RealVector)": -0.01779878326555262,
        "org.apache.commons.math3.linear$RealVector$2#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": -0.01779878326555262,
        "org.apache.commons.math3.linear$RealVector$2#copy()": -0.01779878326555262,
        "org.apache.commons.math3.linear$RealVector$2#cosine(org.apache.commons.math3.linear.RealVector)": -0.01779878326555262,
        "org.apache.commons.math3.linear$RealVector$2#dotProduct(org.apache.commons.math3.linear.RealVector)": -0.01779878326555262,
        "org.apache.commons.math3.linear$RealVector$2#ebeDivide(org.apache.commons.math3.linear.RealVector)": -0.01779878326555262,
        "org.apache.commons.math3.linear$RealVector$2#ebeMultiply(org.apache.commons.math3.linear.RealVector)": -0.01779878326555262,
        "org.apache.commons.math3.linear$RealVector$2#getDimension()": -0.04064504573139471,
        "org.apache.commons.math3.linear$RealVector$2#getDistance(org.apache.commons.math3.linear.RealVector)": -0.01779878326555262,
        "org.apache.commons.math3.linear$RealVector$2#getEntry(int)": -0.048423543599888985,
        "org.apache.commons.math3.linear$RealVector$2#getL1Distance(org.apache.commons.math3.linear.RealVector)": -0.01779878326555262,
        "org.apache.commons.math3.linear$RealVector$2#getL1Norm()": -0.01779878326555262,
        "org.apache.commons.math3.linear$RealVector$2#getLInfDistance(org.apache.commons.math3.linear.RealVector)": -0.01779878326555262,
        "org.apache.commons.math3.linear$RealVector$2#getLInfNorm()": -0.01779878326555262,
        "org.apache.commons.math3.linear$RealVector$2#getNorm()": -0.01779878326555262,
        "org.apache.commons.math3.linear$RealVector$2#getSubVector(int,int)": -0.02535052990380371,
        "org.apache.commons.math3.linear$RealVector$2#isInfinite()": -0.01779878326555262,
        "org.apache.commons.math3.linear$RealVector$2#isNaN()": -0.01779878326555262,
        "org.apache.commons.math3.linear$RealVector$2#iterator()": -0.03121638627781298,
        "org.apache.commons.math3.linear$RealVector$2#map(org.apache.commons.math3.analysis.UnivariateFunction)": -0.01779878326555262,
        "org.apache.commons.math3.linear$RealVector$2#mapAdd(double)": -0.01779878326555262,
        "org.apache.commons.math3.linear$RealVector$2#mapAddToSelf(double)": -0.01779878326555262,
        "org.apache.commons.math3.linear$RealVector$2#mapDivide(double)": -0.01779878326555262,
        "org.apache.commons.math3.linear$RealVector$2#mapDivideToSelf(double)": -0.01779878326555262,
        "org.apache.commons.math3.linear$RealVector$2#mapMultiply(double)": -0.01779878326555262,
        "org.apache.commons.math3.linear$RealVector$2#mapMultiplyToSelf(double)": -0.01779878326555262,
        "org.apache.commons.math3.linear$RealVector$2#mapSubtract(double)": -0.01779878326555262,
        "org.apache.commons.math3.linear$RealVector$2#mapSubtractToSelf(double)": -0.01779878326555262,
        "org.apache.commons.math3.linear$RealVector$2#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": -0.01779878326555262,
        "org.apache.commons.math3.linear$RealVector$2#outerProduct(org.apache.commons.math3.linear.RealVector)": -0.01779878326555262,
        "org.apache.commons.math3.linear$RealVector$2#projection(org.apache.commons.math3.linear.RealVector)": -0.01779878326555262,
        "org.apache.commons.math3.linear$RealVector$2#set(double)": -0.02535052990380371,
        "org.apache.commons.math3.linear$RealVector$2#setEntry(int,double)": -0.02535052990380371,
        "org.apache.commons.math3.linear$RealVector$2#setSubVector(int,org.apache.commons.math3.linear.RealVector)": -0.02535052990380371,
        "org.apache.commons.math3.linear$RealVector$2#sparseIterator()": -0.02535052990380371,
        "org.apache.commons.math3.linear$RealVector$2#subtract(org.apache.commons.math3.linear.RealVector)": -0.03121638627781298,
        "org.apache.commons.math3.linear$RealVector$2#toArray()": -0.01779878326555262,
        "org.apache.commons.math3.linear$RealVector$2#unitVector()": -0.01779878326555262,
        "org.apache.commons.math3.linear$RealVector$2#unitize()": -0.01779878326555262,
        "org.apache.commons.math3.linear$RealVector$2$1#hasNext()": -0.03121638627781298,
        "org.apache.commons.math3.linear$RealVector$2$1#next()": -0.03121638627781298,
        "org.apache.commons.math3.linear$RealVector$2$1#remove()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$2#hasNext()": -0.02535052990380371,
        "org.apache.commons.math3.linear$RealVector$2$2#next()": -0.02535052990380371,
        "org.apache.commons.math3.linear$RealVector$2$2#remove()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#RealVector$2$UnmodifiableEntry(org.apache.commons.math3.linear.RealVector$2)": -0.04064504573139471,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#getValue()": -0.04064504573139471,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#setValue(double)": -0.03620956163514433,
        "org.apache.commons.math3.linear$RealVector$Entry#RealVector$Entry(org.apache.commons.math3.linear.RealVector)": -0.11240350877111384,
        "org.apache.commons.math3.linear$RealVector$Entry#getIndex()": -0.09915711476979117,
        "org.apache.commons.math3.linear$RealVector$Entry#getValue()": -0.08878038393840011,
        "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)": -0.11240350877111371,
        "org.apache.commons.math3.linear$RealVector$Entry#setValue(double)": -0.031216386277812886,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#RealVector$SparseEntryIterator(org.apache.commons.math3.linear.RealVector)": -0.06973597660856855,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)": -0.06973597660856855,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()": -0.06973597660856855,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()": -0.06973597660856855,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#remove()": 0.0,
        "org.apache.commons.math3.linear$SparseRealVector#SparseRealVector()": 1.6482037520501076,
        "org.apache.commons.math3.util$FastMath#<clinit>()": -1.3472275823737432,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0.0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": -0.01779878326555262,
        "org.apache.commons.math3.util$FastMath#abs(double)": -0.6521570284499555,
        "org.apache.commons.math3.util$FastMath#abs(float)": -0.03620956163514433,
        "org.apache.commons.math3.util$FastMath#abs(int)": -0.41322106592083196,
        "org.apache.commons.math3.util$FastMath#abs(long)": -0.6859031033478131,
        "org.apache.commons.math3.util$FastMath#acos(double)": -0.08206323865467442,
        "org.apache.commons.math3.util$FastMath#acosh(double)": -0.017798783265552575,
        "org.apache.commons.math3.util$FastMath#asin(double)": -0.08435006698298553,
        "org.apache.commons.math3.util$FastMath#asinh(double)": -0.017798783265552575,
        "org.apache.commons.math3.util$FastMath#atan(double)": -0.07972356033564652,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": -0.18222087313538318,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": -0.17444178451023945,
        "org.apache.commons.math3.util$FastMath#atanh(double)": -0.017798783265552575,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": -0.1194606801801826,
        "org.apache.commons.math3.util$FastMath#ceil(double)": 0.8647611526312745,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": -0.06426875786774322,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": -0.02535052990380371,
        "org.apache.commons.math3.util$FastMath#cos(double)": -0.3276744139958205,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": -0.38744985804120147,
        "org.apache.commons.math3.util$FastMath#cosh(double)": -0.08878038393840011,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": -0.16092118803953048,
        "org.apache.commons.math3.util$FastMath#exp(double)": -0.6507096067216454,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": -1.0037259900596287,
        "org.apache.commons.math3.util$FastMath#expm1(double)": -0.06426875786774328,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": -0.08435006698298553,
        "org.apache.commons.math3.util$FastMath#floor(double)": -0.5756192783170867,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": -0.16092118803953048,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": -0.02535052990380371,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": -0.15671018067197426,
        "org.apache.commons.math3.util$FastMath#log(double)": -0.9179065576364545,
        "org.apache.commons.math3.util$FastMath#log(double,double)": -0.017798783265552575,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": -1.0053842167788332,
        "org.apache.commons.math3.util$FastMath#log10(double)": -0.14356727252119442,
        "org.apache.commons.math3.util$FastMath#log1p(double)": -0.06704910401710171,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0.0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": -0.5785408425806176,
        "org.apache.commons.math3.util$FastMath#max(float,float)": -0.02535052990380371,
        "org.apache.commons.math3.util$FastMath#max(int,int)": -0.36500747961478863,
        "org.apache.commons.math3.util$FastMath#max(long,long)": -0.01779878326555262,
        "org.apache.commons.math3.util$FastMath#min(double,double)": -0.3530846153849856,
        "org.apache.commons.math3.util$FastMath#min(float,float)": -0.02535052990380371,
        "org.apache.commons.math3.util$FastMath#min(int,int)": -0.5826084428461058,
        "org.apache.commons.math3.util$FastMath#min(long,long)": -0.06704910401710173,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": -0.06704910401710173,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": -0.03121638627781298,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": -0.025350529903803837,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": -0.017798783265552575,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": -0.4171750206123219,
        "org.apache.commons.math3.util$FastMath#polySine(double)": -0.4171750206123219,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": -0.9224585205078721,
        "org.apache.commons.math3.util$FastMath#random()": -0.08206323865467446,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": -0.040645045731394845,
        "org.apache.commons.math3.util$FastMath#rint(double)": -0.08206323865467442,
        "org.apache.commons.math3.util$FastMath#round(double)": -0.08206323865467442,
        "org.apache.commons.math3.util$FastMath#round(float)": -0.031216386277812886,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": -0.13430638179573262,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": -0.02535052990380371,
        "org.apache.commons.math3.util$FastMath#signum(double)": -0.05837702099621378,
        "org.apache.commons.math3.util$FastMath#signum(float)": -0.02535052990380371,
        "org.apache.commons.math3.util$FastMath#sin(double)": -0.39963402692533656,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": -0.40365387490005994,
        "org.apache.commons.math3.util$FastMath#sinh(double)": -0.08878038393840011,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": -1.1476409194495734,
        "org.apache.commons.math3.util$FastMath#tan(double)": -0.08878038393840011,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": -0.08878038393840011,
        "org.apache.commons.math3.util$FastMath#tanh(double)": -0.05523233510877522,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": -0.025350529903803837,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": -0.025350529903803837,
        "org.apache.commons.math3.util$FastMath#ulp(double)": -0.336552759542605,
        "org.apache.commons.math3.util$FastMath#ulp(float)": -0.031216386277812886,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": -1.0009603100185966,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": -0.9987459855162624,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": -0.9981921561117151,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0.0,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#OpenIntToDoubleHashMap()": -0.07233923102758205,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#OpenIntToDoubleHashMap(double)": 1.6144723876627118,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#OpenIntToDoubleHashMap(int)": -0.025350529903803837,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#OpenIntToDoubleHashMap(int,double)": 1.5949848788911671,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#OpenIntToDoubleHashMap(org.apache.commons.math3.util.OpenIntToDoubleHashMap)": 0.37706157032018395,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#changeIndexSign(int)": 0.36546750150940965,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#computeCapacity(int)": 1.5949848788911671,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#containsKey(int)": 1.7334120367596817,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#containsKey(int,int)": 0.2932735263263405,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#doRemove(int)": 0.38762559913277694,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#findInsertionIndex(int)": 1.6144723876627118,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#findInsertionIndex(int[],byte[],int,int)": 1.6144723876627118,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#get(int)": 1.644245615713907,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#growTable()": 1.7269592603955237,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#hashOf(int)": 0.2663333363675614,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#iterator()": 0.35824093621919195,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#nextPowerOfTwo(int)": -0.01779878326555262,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#perturb(int)": 0.3673319293580569,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#probe(int,int)": 0.3673319293580569,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#put(int,double)": 1.6144723876627118,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#readObject(java.io.ObjectInputStream)": -0.02535052990380371,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#remove(int)": 1.7040273738460971,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#shouldGrowTable()": 0.26868595003580686,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap#size()": -0.07233923102758189,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap$Iterator#OpenIntToDoubleHashMap$Iterator(org.apache.commons.math3.util.OpenIntToDoubleHashMap)": 1.7040273738460971,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap$Iterator#advance()": 0.35824093621919195,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap$Iterator#hasNext()": 0.36001493214248337,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap$Iterator#key()": 0.37113809936126396,
        "org.apache.commons.math3.util$OpenIntToDoubleHashMap$Iterator#value()": 0.36001493214248337
    },
    "Math-3": {
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)": -0.4022512491897613,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)": -0.4310559005078114,
        "org.apache.commons.math3.exception$DimensionMismatchException#getDimension()": -0.041531049523282126,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": -0.08231986450656148,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.1981428823887634,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": -0.02358878090611527,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -1.1646840001232923,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": -0.07395613538182277,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": -0.033670996757460214,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -1.0101028260919074,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": -0.0937148006568751,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": -0.22044876371814737,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.2700665562359973,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": -0.21451336202423876,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": -0.02358878090611527,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$NoDataException#NoDataException()": -0.08625189171004093,
        "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)": -0.14223816838806477,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int)": -0.023588780906115304,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int,org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": -0.10073470895141497,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getDirection()": -0.02358878090611527,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getIndex()": -0.02358878090611527,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getPrevious()": -0.02358878090611527,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getStrict()": -0.02358878090611527,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)": -0.11984352051992356,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": -0.08625189171004093,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)": -0.19391233424674725,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": -0.2523851955984354,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": -0.19391233424674725,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.2469353579394752,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": -0.2986716007001149,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.4949491057603328,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": -0.041531049523282126,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": -0.041531049523282126,
        "org.apache.commons.math3.util$MathArrays#MathArrays()": 0.0,
        "org.apache.commons.math3.util$MathArrays#buildArray(org.apache.commons.math3.Field,int)": -0.33661508244622595,
        "org.apache.commons.math3.util$MathArrays#buildArray(org.apache.commons.math3.Field,int,int)": -0.33354493661973994,
        "org.apache.commons.math3.util$MathArrays#checkNonNegative(long[])": -0.6804313118490048,
        "org.apache.commons.math3.util$MathArrays#checkNonNegative(long[][])": -0.05421551262704289,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[])": -0.18526295407398935,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": -0.18745001498714522,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)": -0.40920000375725646,
        "org.apache.commons.math3.util$MathArrays#checkPositive(double[])": -0.6704683830232153,
        "org.apache.commons.math3.util$MathArrays#checkRectangular(long[][])": -0.05421551262704289,
        "org.apache.commons.math3.util$MathArrays#convolve(double[],double[])": -0.023588780906115304,
        "org.apache.commons.math3.util$MathArrays#copyOf(double[])": -0.21650326793210792,
        "org.apache.commons.math3.util$MathArrays#copyOf(double[],int)": -0.2683297031523839,
        "org.apache.commons.math3.util$MathArrays#copyOf(int[])": -0.05966804213596738,
        "org.apache.commons.math3.util$MathArrays#copyOf(int[],int)": -0.1694347048325497,
        "org.apache.commons.math3.util$MathArrays#distance(double[],double[])": -0.08625189171004077,
        "org.apache.commons.math3.util$MathArrays#distance(int[],int[])": -0.06472490642925677,
        "org.apache.commons.math3.util$MathArrays#distance1(double[],double[])": -0.041531049523282126,
        "org.apache.commons.math3.util$MathArrays#distance1(int[],int[])": -0.02358878090611527,
        "org.apache.commons.math3.util$MathArrays#distanceInf(double[],double[])": -0.041531049523282126,
        "org.apache.commons.math3.util$MathArrays#distanceInf(int[],int[])": -0.02358878090611527,
        "org.apache.commons.math3.util$MathArrays#ebeAdd(double[],double[])": -0.03367099675746019,
        "org.apache.commons.math3.util$MathArrays#ebeDivide(double[],double[])": -0.07395613538182277,
        "org.apache.commons.math3.util$MathArrays#ebeMultiply(double[],double[])": -0.03367099675746019,
        "org.apache.commons.math3.util$MathArrays#ebeSubtract(double[],double[])": -0.04824082603338956,
        "org.apache.commons.math3.util$MathArrays#equals(double[],double[])": -0.041531049523282126,
        "org.apache.commons.math3.util$MathArrays#equals(float[],float[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(double[],double[])": -0.05421551262704294,
        "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(float[],float[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": -0.023588780906115304,
        "org.apache.commons.math3.util$MathArrays#isMonotonic(java.lang.Comparable[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": -0.02358878090611527,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)": -0.2376858698526807,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)": -0.24141160345588286,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double,double,double)": -0.08625189171004077,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double[],double[])": 1.7376801354934384,
        "org.apache.commons.math3.util$MathArrays#normalizeArray(double[],double)": -0.1285765467421661,
        "org.apache.commons.math3.util$MathArrays#safeNorm(double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#scale(double,double[])": -0.02358878090611527,
        "org.apache.commons.math3.util$MathArrays#scaleInPlace(double,double[])": -0.06472490642925677,
        "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])": -0.07395613538182277,
        "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])": -0.07822942764909598,
        "org.apache.commons.math3.util$MathArrays$1#compare(org.apache.commons.math3.util.Pair,org.apache.commons.math3.util.Pair)": -0.06946852195723818,
        "org.apache.commons.math3.util$MathArrays$2#compare(org.apache.commons.math3.util.Pair,org.apache.commons.math3.util.Pair)": -0.02358878090611527,
        "org.apache.commons.math3.util$MathArrays$3#<clinit>()": -0.4036457742534252,
        "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()": -0.41746185789572987,
        "org.apache.commons.math3.util$MathArrays$OrderDirection#MathArrays$OrderDirection(java.lang.String,int)": -0.41746185789572987
    },
    "Math-30": {
        "org.apache.commons.math3.distribution$AbstractRealDistribution#AbstractRealDistribution()": 1.2399123524659013,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)": -0.11656090480476472,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()": -0.025840958608484454,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)": -0.2171719624759466,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#reseedRandomGenerator(long)": -0.05953813244273666,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()": -0.04144191763039948,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)": -0.05953813244273666,
        "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)": -0.20266135347179715,
        "org.apache.commons.math3.distribution$NormalDistribution#<clinit>()": 1.673409967975517,
        "org.apache.commons.math3.distribution$NormalDistribution#NormalDistribution()": 0.0,
        "org.apache.commons.math3.distribution$NormalDistribution#NormalDistribution(double,double)": 1.673409967975517,
        "org.apache.commons.math3.distribution$NormalDistribution#NormalDistribution(double,double,double)": 1.673409967975517,
        "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double)": 1.7604618675572632,
        "org.apache.commons.math3.distribution$NormalDistribution#cumulativeProbability(double,double)": -0.036916798320471504,
        "org.apache.commons.math3.distribution$NormalDistribution#density(double)": -0.03182345772110887,
        "org.apache.commons.math3.distribution$NormalDistribution#getMean()": -0.04556341179824508,
        "org.apache.commons.math3.distribution$NormalDistribution#getNumericalMean()": -0.036916798320471504,
        "org.apache.commons.math3.distribution$NormalDistribution#getNumericalVariance()": -0.036916798320471504,
        "org.apache.commons.math3.distribution$NormalDistribution#getSolverAbsoluteAccuracy()": -0.03182345772110895,
        "org.apache.commons.math3.distribution$NormalDistribution#getStandardDeviation()": -0.04556341179824508,
        "org.apache.commons.math3.distribution$NormalDistribution#getSupportLowerBound()": -0.036916798320471456,
        "org.apache.commons.math3.distribution$NormalDistribution#getSupportUpperBound()": -0.036916798320471456,
        "org.apache.commons.math3.distribution$NormalDistribution#isSupportConnected()": -0.03182345772110895,
        "org.apache.commons.math3.distribution$NormalDistribution#isSupportLowerBoundInclusive()": 0.0,
        "org.apache.commons.math3.distribution$NormalDistribution#isSupportUpperBoundInclusive()": 0.0,
        "org.apache.commons.math3.distribution$NormalDistribution#probability(double)": 0.0,
        "org.apache.commons.math3.distribution$NormalDistribution#sample()": -0.018140737152611865,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": -0.06260673495009716,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.11472600204785002,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": -0.018140737152611885,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.6984931897934035,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": -0.0493790584854219,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.6058963421366934,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": -0.06839161742081235,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": -0.13385561311991506,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.16434225618173934,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": -0.13220203406791953,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": -0.018140737152611885,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": -0.018140737152611885,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)": -0.083724561564988,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.083724561564988,
        "org.apache.commons.math3.exception$MaxCountExceededException#getMax()": -0.06260673495009716,
        "org.apache.commons.math3.exception$NoDataException#NoDataException()": -0.06260673495009705,
        "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)": -0.09913942015474533,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)": -0.04937905848542187,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": -0.06260673495009705,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)": -0.12016702794870623,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": -0.1848273909790312,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": -0.13385561311991506,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.17410547210834082,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)": -0.08834649312889509,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.22995248885710068,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getBoundIsAllowed()": -0.018140737152611885,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getMax()": -0.018140737152611885,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": -0.16003407850342058,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.31273819608317194,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": -0.03182345772110895,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": -0.03182345772110895,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(java.lang.Number,java.lang.Number,java.lang.Number)": -0.10320538507757818,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)": -0.2903756974513244,
        "org.apache.commons.math3.exception$OutOfRangeException#getHi()": -0.018140737152611885,
        "org.apache.commons.math3.exception$OutOfRangeException#getLo()": -0.018140737152611885,
        "org.apache.commons.math3.random$RandomDataImpl#<clinit>()": 0.9737362366265555,
        "org.apache.commons.math3.random$RandomDataImpl#RandomDataImpl()": -0.3696169030854263,
        "org.apache.commons.math3.random$RandomDataImpl#RandomDataImpl(org.apache.commons.math3.random.RandomGenerator)": -0.6292146632211595,
        "org.apache.commons.math3.random$RandomDataImpl#getNatural(int)": -0.09493876768797693,
        "org.apache.commons.math3.random$RandomDataImpl#getRan()": -0.5009375705579957,
        "org.apache.commons.math3.random$RandomDataImpl#getSecRan()": -0.08133481991694058,
        "org.apache.commons.math3.random$RandomDataImpl#initRan()": -0.6801195729912684,
        "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)": -0.06260673495009705,
        "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)": -0.06260673495009705,
        "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)": -0.06260673495009705,
        "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)": -0.06260673495009705,
        "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)": -0.09705692591553709,
        "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)": -0.06260673495009705,
        "org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)": -0.06555288748796108,
        "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)": -0.12016702794870623,
        "org.apache.commons.math3.random$RandomDataImpl#nextHexString(int)": -0.06260673495009705,
        "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)": -0.06260673495009705,
        "org.apache.commons.math3.random$RandomDataImpl#nextInt(int,int)": -0.18085682425812258,
        "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)": -0.13872966315889548,
        "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)": -0.18744309440898932,
        "org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)": -0.1671715120521188,
        "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)": -0.06260673495009705,
        "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)": -0.09493876768797702,
        "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)": -0.11472600204785002,
        "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)": -0.06555288748796108,
        "org.apache.commons.math3.random$RandomDataImpl#nextSecureHexString(int)": -0.06555288748796108,
        "org.apache.commons.math3.random$RandomDataImpl#nextSecureInt(int,int)": -0.036916798320471504,
        "org.apache.commons.math3.random$RandomDataImpl#nextSecureLong(long,long)": -0.0737934033291001,
        "org.apache.commons.math3.random$RandomDataImpl#nextT(double)": -0.06260673495009705,
        "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)": -0.3769097331258386,
        "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)": -0.377771247078053,
        "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)": -0.06260673495009705,
        "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)": -0.06260673495009705,
        "org.apache.commons.math3.random$RandomDataImpl#reSeed()": -0.06260673495009705,
        "org.apache.commons.math3.random$RandomDataImpl#reSeed(long)": -0.6721854135947654,
        "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure()": -0.06260673495009716,
        "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure(long)": -0.06260673495009716,
        "org.apache.commons.math3.random$RandomDataImpl#setSecureAlgorithm(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#shuffle(int[],int)": -0.09493876768797702,
        "org.apache.commons.math3.special$Erf#Erf()": 0.0,
        "org.apache.commons.math3.special$Erf#erf(double)": 1.725061232312023,
        "org.apache.commons.math3.special$Erf#erf(double,double)": -0.04937905848542187,
        "org.apache.commons.math3.special$Erf#erfc(double)": -0.0737934033291001,
        "org.apache.commons.math3.special$Gamma#<clinit>()": 1.2799392928626432,
        "org.apache.commons.math3.special$Gamma#Gamma()": 0.0,
        "org.apache.commons.math3.special$Gamma#digamma(double)": -0.02584095860848459,
        "org.apache.commons.math3.special$Gamma#lanczos(double)": -0.5305843667434702,
        "org.apache.commons.math3.special$Gamma#logGamma(double)": -0.5232435965848135,
        "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)": -0.43984452924495804,
        "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)": 1.3518527410423744,
        "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)": -0.04937905848542187,
        "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)": -0.3388200788901945,
        "org.apache.commons.math3.special$Gamma#trigamma(double)": -0.018140737152611865,
        "org.apache.commons.math3.special$Gamma$1#getA(int,double)": -0.3249899183026821,
        "org.apache.commons.math3.special$Gamma$1#getB(int,double)": -0.3249899183026821,
        "org.apache.commons.math3.stat.inference$MannWhitneyUTest#MannWhitneyUTest()": 1.7941590413915154,
        "org.apache.commons.math3.stat.inference$MannWhitneyUTest#MannWhitneyUTest(org.apache.commons.math3.stat.ranking.NaNStrategy,org.apache.commons.math3.stat.ranking.TiesStrategy)": 0.0,
        "org.apache.commons.math3.stat.inference$MannWhitneyUTest#calculateAsymptoticPValue(double,int,int)": 1.8018592628473882,
        "org.apache.commons.math3.stat.inference$MannWhitneyUTest#concatenateSamples(double[],double[])": 1.8018592628473882,
        "org.apache.commons.math3.stat.inference$MannWhitneyUTest#ensureDataConformance(double[],double[])": 1.7941590413915154,
        "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyU(double[],double[])": 1.8018592628473882,
        "org.apache.commons.math3.stat.inference$MannWhitneyUTest#mannWhitneyUTest(double[],double[])": 1.7941590413915154,
        "org.apache.commons.math3.stat.ranking$NaNStrategy#<clinit>()": 1.7436251072980657,
        "org.apache.commons.math3.stat.ranking$NaNStrategy#NaNStrategy(java.lang.String,int)": 0.397838669671161,
        "org.apache.commons.math3.stat.ranking$NaturalRanking#<clinit>()": 1.7436251072980657,
        "org.apache.commons.math3.stat.ranking$NaturalRanking#NaturalRanking()": -0.04556341179824518,
        "org.apache.commons.math3.stat.ranking$NaturalRanking#NaturalRanking(org.apache.commons.math3.random.RandomGenerator)": 0.0,
        "org.apache.commons.math3.stat.ranking$NaturalRanking#NaturalRanking(org.apache.commons.math3.stat.ranking.NaNStrategy)": -0.02584095860848459,
        "org.apache.commons.math3.stat.ranking$NaturalRanking#NaturalRanking(org.apache.commons.math3.stat.ranking.NaNStrategy,org.apache.commons.math3.random.RandomGenerator)": -0.018140737152611865,
        "org.apache.commons.math3.stat.ranking$NaturalRanking#NaturalRanking(org.apache.commons.math3.stat.ranking.NaNStrategy,org.apache.commons.math3.stat.ranking.TiesStrategy)": 1.7744365882017548,
        "org.apache.commons.math3.stat.ranking$NaturalRanking#NaturalRanking(org.apache.commons.math3.stat.ranking.TiesStrategy)": -0.018140737152611865,
        "org.apache.commons.math3.stat.ranking$NaturalRanking#containsNaNs(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[])": -0.018140737152611865,
        "org.apache.commons.math3.stat.ranking$NaturalRanking#fill(double[],java.util.List,double)": -0.052952565247464736,
        "org.apache.commons.math3.stat.ranking$NaturalRanking#getNanPositions(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[])": 1.7830832016795286,
        "org.apache.commons.math3.stat.ranking$NaturalRanking#getNanStrategy()": 0.0,
        "org.apache.commons.math3.stat.ranking$NaturalRanking#getTiesStrategy()": 0.0,
        "org.apache.commons.math3.stat.ranking$NaturalRanking#rank(double[])": 1.7462065966708997,
        "org.apache.commons.math3.stat.ranking$NaturalRanking#recodeNaNs(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[],double)": -0.05953813244273666,
        "org.apache.commons.math3.stat.ranking$NaturalRanking#removeNaNs(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[])": -0.018140737152611865,
        "org.apache.commons.math3.stat.ranking$NaturalRanking#resolveTie(double[],java.util.List)": -0.05953813244273666,
        "org.apache.commons.math3.stat.ranking$NaturalRanking#restoreNaNs(double[],java.util.List)": 1.7830832016795286,
        "org.apache.commons.math3.stat.ranking$NaturalRanking$1#<clinit>()": 0.40042015904399497,
        "org.apache.commons.math3.stat.ranking$NaturalRanking$IntDoublePair#NaturalRanking$IntDoublePair(double,int)": 0.40042015904399497,
        "org.apache.commons.math3.stat.ranking$NaturalRanking$IntDoublePair#compareTo(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair)": 0.40042015904399497,
        "org.apache.commons.math3.stat.ranking$NaturalRanking$IntDoublePair#getPosition()": 0.40042015904399497,
        "org.apache.commons.math3.stat.ranking$NaturalRanking$IntDoublePair#getValue()": 0.40042015904399497,
        "org.apache.commons.math3.stat.ranking$TiesStrategy#<clinit>()": 1.7436251072980657,
        "org.apache.commons.math3.stat.ranking$TiesStrategy#TiesStrategy(java.lang.String,int)": 0.397838669671161,
        "org.apache.commons.math3.util$ArithmeticUtils#<clinit>()": -0.536440084816144,
        "org.apache.commons.math3.util$ArithmeticUtils#ArithmeticUtils()": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(int,int)": -0.1271475067590389,
        "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(long,long)": -0.03182345772110887,
        "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(long,long,org.apache.commons.math3.exception.util.Localizable)": -0.036916798320471504,
        "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficient(int,int)": -0.07888667552571232,
        "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficientDouble(int,int)": -0.052952565247464736,
        "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficientLog(int,int)": -0.036916798320471504,
        "org.apache.commons.math3.util$ArithmeticUtils#checkBinomial(int,int)": -0.08133481991694042,
        "org.apache.commons.math3.util$ArithmeticUtils#factorial(int)": 0.9725205133475812,
        "org.apache.commons.math3.util$ArithmeticUtils#factorialDouble(int)": -0.02584095860848459,
        "org.apache.commons.math3.util$ArithmeticUtils#factorialLog(int)": -0.06839161742081247,
        "org.apache.commons.math3.util$ArithmeticUtils#gcd(int,int)": -0.3259218044754509,
        "org.apache.commons.math3.util$ArithmeticUtils#gcd(long,long)": -0.03182345772110887,
        "org.apache.commons.math3.util$ArithmeticUtils#isPowerOfTwo(long)": -0.13385561311991512,
        "org.apache.commons.math3.util$ArithmeticUtils#lcm(int,int)": -0.018140737152611865,
        "org.apache.commons.math3.util$ArithmeticUtils#lcm(long,long)": -0.018140737152611865,
        "org.apache.commons.math3.util$ArithmeticUtils#mulAndCheck(int,int)": -0.16434225618173934,
        "org.apache.commons.math3.util$ArithmeticUtils#mulAndCheck(long,long)": -0.06839161742081247,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(int,int)": -0.018140737152611865,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(int,long)": -0.018140737152611865,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,int)": -0.018140737152611865,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,java.math.BigInteger)": -0.02584095860848459,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,long)": -0.02584095860848459,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(long,int)": -0.018140737152611865,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(long,long)": -0.018140737152611865,
        "org.apache.commons.math3.util$ArithmeticUtils#subAndCheck(int,int)": -0.1051923952467957,
        "org.apache.commons.math3.util$ArithmeticUtils#subAndCheck(long,long)": -0.018140737152611865,
        "org.apache.commons.math3.util$ContinuedFraction#ContinuedFraction()": -0.42698275806829633,
        "org.apache.commons.math3.util$ContinuedFraction#evaluate(double)": 0.0,
        "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double)": -0.018140737152611865,
        "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)": -0.42698275806829633,
        "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#<clinit>()": -1.3884279800950448,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0.0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": -0.018140737152611885,
        "org.apache.commons.math3.util$FastMath#abs(double)": -0.673895604709544,
        "org.apache.commons.math3.util$FastMath#abs(float)": -0.036916798320471456,
        "org.apache.commons.math3.util$FastMath#abs(int)": -0.422924713050588,
        "org.apache.commons.math3.util$FastMath#abs(long)": -0.7030571153655518,
        "org.apache.commons.math3.util$FastMath#acos(double)": -0.083724561564988,
        "org.apache.commons.math3.util$FastMath#acosh(double)": -0.018140737152611865,
        "org.apache.commons.math3.util$FastMath#asin(double)": -0.08606045533703784,
        "org.apache.commons.math3.util$FastMath#asinh(double)": -0.018140737152611865,
        "org.apache.commons.math3.util$FastMath#atan(double)": -0.08133481991694042,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": -0.18613829892242673,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": -0.17817700906297768,
        "org.apache.commons.math3.util$FastMath#atanh(double)": -0.018140737152611865,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": -0.12193997028943995,
        "org.apache.commons.math3.util$FastMath#ceil(double)": 0.8485379732324599,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": -0.06555288748796095,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": -0.025840958608484454,
        "org.apache.commons.math3.util$FastMath#cos(double)": -0.3351623640788943,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": -0.3964785302488608,
        "org.apache.commons.math3.util$FastMath#cosh(double)": -0.0905861967162944,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": -0.16434225618173937,
        "org.apache.commons.math3.util$FastMath#exp(double)": -0.6662104033908969,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": 0.7905035575173481,
        "org.apache.commons.math3.util$FastMath#expm1(double)": -0.06555288748796108,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": -0.08606045533703784,
        "org.apache.commons.math3.util$FastMath#floor(double)": -0.5948957988480362,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": -0.16434225618173937,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": -0.025840958608484454,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": -0.16003407850342058,
        "org.apache.commons.math3.util$FastMath#log(double)": 0.8788609690150243,
        "org.apache.commons.math3.util$FastMath#log(double,double)": -0.018140737152611865,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": 0.7887960604242027,
        "org.apache.commons.math3.util$FastMath#log10(double)": -0.14659003202448284,
        "org.apache.commons.math3.util$FastMath#log1p(double)": -0.06839161742081247,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0.0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": -0.11848870456288785,
        "org.apache.commons.math3.util$FastMath#max(float,float)": -0.025840958608484454,
        "org.apache.commons.math3.util$FastMath#max(int,int)": -0.3734534639458964,
        "org.apache.commons.math3.util$FastMath#max(long,long)": -0.018140737152611885,
        "org.apache.commons.math3.util$FastMath#min(double,double)": -0.361223063738461,
        "org.apache.commons.math3.util$FastMath#min(float,float)": -0.025840958608484454,
        "org.apache.commons.math3.util$FastMath#min(int,int)": -0.5927022669359829,
        "org.apache.commons.math3.util$FastMath#min(long,long)": -0.06839161742081235,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": -0.06839161742081235,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": -0.03182345772110895,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": -0.02584095860848459,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": -0.018140737152611865,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": -0.42779210294973846,
        "org.apache.commons.math3.util$FastMath#polySine(double)": -0.42779210294973846,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": 0.8741749944355092,
        "org.apache.commons.math3.util$FastMath#random()": -0.08372456156498798,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": -0.04144191763039948,
        "org.apache.commons.math3.util$FastMath#rint(double)": -0.083724561564988,
        "org.apache.commons.math3.util$FastMath#round(double)": -0.083724561564988,
        "org.apache.commons.math3.util$FastMath#round(float)": -0.03182345772110887,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": -0.1371189614693531,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": -0.025840958608484454,
        "org.apache.commons.math3.util$FastMath#signum(double)": -0.059538132442736647,
        "org.apache.commons.math3.util$FastMath#signum(float)": -0.025840958608484454,
        "org.apache.commons.math3.util$FastMath#sin(double)": -0.4098077408720979,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": -0.4139288215449038,
        "org.apache.commons.math3.util$FastMath#sinh(double)": -0.0905861967162944,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": -0.7040502818773698,
        "org.apache.commons.math3.util$FastMath#tan(double)": -0.0905861967162944,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": -0.0905861967162944,
        "org.apache.commons.math3.util$FastMath#tanh(double)": -0.05632818350357892,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": -0.02584095860848459,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": -0.02584095860848459,
        "org.apache.commons.math3.util$FastMath#ulp(double)": -0.3442672135351461,
        "org.apache.commons.math3.util$FastMath#ulp(float)": -0.03182345772110887,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": 0.7933513944242195,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": 0.7956314802156129,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": 0.796201754934892,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0.0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()": -0.5971453528894707,
        "org.apache.commons.math3.util$FastMathLiteralArrays#FastMathLiteralArrays()": 0.0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()": 0.7933513944242195,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()": 0.7933513944242195,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()": 0.7956314802156129,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()": 0.7956314802156129,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()": 0.796201754934892,
        "org.apache.commons.math3.util$ResizableDoubleArray#ResizableDoubleArray()": -0.1434829779132909,
        "org.apache.commons.math3.util$ResizableDoubleArray#ResizableDoubleArray(double[])": -0.018140737152611885,
        "org.apache.commons.math3.util$ResizableDoubleArray#ResizableDoubleArray(int)": 0.9731282980518369,
        "org.apache.commons.math3.util$ResizableDoubleArray#ResizableDoubleArray(int,float)": -0.018140737152611865,
        "org.apache.commons.math3.util$ResizableDoubleArray#ResizableDoubleArray(int,float,float)": -0.03182345772110887,
        "org.apache.commons.math3.util$ResizableDoubleArray#ResizableDoubleArray(int,float,float,int)": -0.036916798320471504,
        "org.apache.commons.math3.util$ResizableDoubleArray#ResizableDoubleArray(org.apache.commons.math3.util.ResizableDoubleArray)": -0.02584095860848459,
        "org.apache.commons.math3.util$ResizableDoubleArray#addElement(double)": 0.9501384681859062,
        "org.apache.commons.math3.util$ResizableDoubleArray#addElementRolling(double)": -0.052952565247464736,
        "org.apache.commons.math3.util$ResizableDoubleArray#addElements(double[])": -0.018140737152611885,
        "org.apache.commons.math3.util$ResizableDoubleArray#checkContractExpand(float,float)": -0.04937905848542187,
        "org.apache.commons.math3.util$ResizableDoubleArray#clear()": -0.05632818350357893,
        "org.apache.commons.math3.util$ResizableDoubleArray#contract()": -0.3950457113902356,
        "org.apache.commons.math3.util$ResizableDoubleArray#copy()": -0.03182345772110887,
        "org.apache.commons.math3.util$ResizableDoubleArray#copy(org.apache.commons.math3.util.ResizableDoubleArray,org.apache.commons.math3.util.ResizableDoubleArray)": -0.036916798320471456,
        "org.apache.commons.math3.util$ResizableDoubleArray#discardExtremeElements(int,boolean)": -0.04937905848542187,
        "org.apache.commons.math3.util$ResizableDoubleArray#discardFrontElements(int)": -0.036916798320471504,
        "org.apache.commons.math3.util$ResizableDoubleArray#discardMostRecentElements(int)": -0.04144191763039948,
        "org.apache.commons.math3.util$ResizableDoubleArray#equals(java.lang.Object)": -0.025840958608484454,
        "org.apache.commons.math3.util$ResizableDoubleArray#expand()": 0.9537541995379383,
        "org.apache.commons.math3.util$ResizableDoubleArray#expandTo(int)": -0.025840958608484454,
        "org.apache.commons.math3.util$ResizableDoubleArray#getContractionCriteria()": -0.025840958608484454,
        "org.apache.commons.math3.util$ResizableDoubleArray#getElement(int)": -0.0493790584854219,
        "org.apache.commons.math3.util$ResizableDoubleArray#getElements()": -0.37630254827623355,
        "org.apache.commons.math3.util$ResizableDoubleArray#getExpansionFactor()": -0.0493790584854219,
        "org.apache.commons.math3.util$ResizableDoubleArray#getExpansionMode()": -0.025840958608484454,
        "org.apache.commons.math3.util$ResizableDoubleArray#getInternalLength()": -0.041441917630399505,
        "org.apache.commons.math3.util$ResizableDoubleArray#getInternalValues()": -0.0991394201547453,
        "org.apache.commons.math3.util$ResizableDoubleArray#getNumElements()": -0.12714750675903885,
        "org.apache.commons.math3.util$ResizableDoubleArray#hashCode()": -0.018140737152611885,
        "org.apache.commons.math3.util$ResizableDoubleArray#setContractionCriteria(float)": -0.04937905848542187,
        "org.apache.commons.math3.util$ResizableDoubleArray#setElement(int,double)": -0.018140737152611865,
        "org.apache.commons.math3.util$ResizableDoubleArray#setExpansionFactor(float)": -0.018140737152611865,
        "org.apache.commons.math3.util$ResizableDoubleArray#setExpansionMode(int)": -0.04144191763039948,
        "org.apache.commons.math3.util$ResizableDoubleArray#setInitialCapacity(int)": 0.9702948672185403,
        "org.apache.commons.math3.util$ResizableDoubleArray#setNumElements(int)": -0.018140737152611865,
        "org.apache.commons.math3.util$ResizableDoubleArray#shouldContract()": -0.3956479694409988,
        "org.apache.commons.math3.util$ResizableDoubleArray#start()": -0.0991394201547453,
        "org.apache.commons.math3.util$ResizableDoubleArray#substituteMostRecentElement(double)": -0.03182345772110887
    },
    "Math-31": {
        "org.apache.commons.math3.analysis.solvers$AbstractUnivariateSolver#AbstractUnivariateSolver(double)": 0.8118516635964491,
        "org.apache.commons.math3.analysis.solvers$AbstractUnivariateSolver#AbstractUnivariateSolver(double,double)": -0.05604822475565288,
        "org.apache.commons.math3.analysis.solvers$AbstractUnivariateSolver#AbstractUnivariateSolver(double,double,double)": -0.05604822475565288,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#BaseAbstractUnivariateSolver(double)": 0.805197084796671,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#BaseAbstractUnivariateSolver(double,double)": -0.05604822475565288,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#BaseAbstractUnivariateSolver(double,double,double)": 0.7958248980416069,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#computeObjectiveValue(double)": 0.8033102874421203,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getAbsoluteAccuracy()": -0.2994858198874306,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getEvaluations()": -0.11413236012044067,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getFunctionValueAccuracy()": -0.044740948495841704,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMax()": -0.058109013547854416,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMaxEvaluations()": 0.0,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMin()": -0.058109013547854416,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getRelativeAccuracy()": -0.2936530547739382,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getStartValue()": -0.014873618789883525,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#incrementEvaluationCount()": 0.8033102874421203,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#isBracketing(double,double)": -0.03166840905911679,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#isSequence(double,double,double)": -0.045338870088885756,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#setup(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)": 0.8023692465483339,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)": -0.03166840905911679,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)": 0.8333249102451753,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)": 0.8023692465483339,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifyBracketing(double,double)": -0.12477624856256442,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifyInterval(double,double)": -0.04913496861819938,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifySequence(double,double,double)": 0.8495470545034576,
        "org.apache.commons.math3.analysis.solvers$BrentSolver#BrentSolver()": -0.08330002874118685,
        "org.apache.commons.math3.analysis.solvers$BrentSolver#BrentSolver(double)": 0.8895536349326,
        "org.apache.commons.math3.analysis.solvers$BrentSolver#BrentSolver(double,double)": -0.0257157097897983,
        "org.apache.commons.math3.analysis.solvers$BrentSolver#BrentSolver(double,double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$BrentSolver#brent(double,double,double,double)": -0.22297159253447152,
        "org.apache.commons.math3.analysis.solvers$BrentSolver#doSolve()": 0.8872843451659658,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#UnivariateSolverUtils()": 0.0,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)": -0.04123837108661277,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,int)": -0.045338870088885756,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)": -0.04123837108661277,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#isBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)": -0.12477624856256442,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#isSequence(double,double,double)": -0.04533887008888571,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#midpoint(double,double)": -0.04533887008888571,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)": -0.036736156549919206,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)": 0.9118779974655293,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)": -0.12477624856256442,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyInterval(double,double)": 0.7873080829116033,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifySequence(double,double,double)": 0.8454387203128739,
        "org.apache.commons.math3.distribution$AbstractIntegerDistribution#AbstractIntegerDistribution()": 0.8739476637696723,
        "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)": 0.9652463344224063,
        "org.apache.commons.math3.distribution$AbstractIntegerDistribution#cumulativeProbability(int,int)": -0.0809230890924912,
        "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)": 0.9398849372754821,
        "org.apache.commons.math3.distribution$AbstractIntegerDistribution#reseedRandomGenerator(long)": -0.0784880230122572,
        "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()": -0.036736156549919206,
        "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)": -0.045338870088885756,
        "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)": 0.9579225857483216,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#AbstractRealDistribution()": 0.5574466621385183,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)": -0.11595708589930921,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()": -0.025715709789798202,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)": 0.9022990187567876,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#reseedRandomGenerator(long)": -0.05924149117870197,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()": -0.045338870088885756,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)": -0.05924149117870197,
        "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)": 0.054414857646153114,
        "org.apache.commons.math3.distribution$BinomialDistribution#BinomialDistribution(int,double)": 1.0314834059107418,
        "org.apache.commons.math3.distribution$BinomialDistribution#cumulativeProbability(int)": 1.0386187581742903,
        "org.apache.commons.math3.distribution$BinomialDistribution#getNumberOfTrials()": -0.06229407989992364,
        "org.apache.commons.math3.distribution$BinomialDistribution#getNumericalMean()": 0.17875525180968638,
        "org.apache.commons.math3.distribution$BinomialDistribution#getNumericalVariance()": 0.17875525180968638,
        "org.apache.commons.math3.distribution$BinomialDistribution#getProbabilityOfSuccess()": -0.06229407989992364,
        "org.apache.commons.math3.distribution$BinomialDistribution#getSupportLowerBound()": 0.17875525180968638,
        "org.apache.commons.math3.distribution$BinomialDistribution#getSupportUpperBound()": 0.17875525180968638,
        "org.apache.commons.math3.distribution$BinomialDistribution#isSupportConnected()": 0.0,
        "org.apache.commons.math3.distribution$BinomialDistribution#probability(int)": -0.036736156549919206,
        "org.apache.commons.math3.distribution$FDistribution#FDistribution(double,double)": 1.0164376144245528,
        "org.apache.commons.math3.distribution$FDistribution#FDistribution(double,double,double)": 1.0164376144245528,
        "org.apache.commons.math3.distribution$FDistribution#calculateNumericalVariance()": 1.0411171616046448,
        "org.apache.commons.math3.distribution$FDistribution#cumulativeProbability(double)": 1.0292096794806183,
        "org.apache.commons.math3.distribution$FDistribution#density(double)": -0.01805341496470158,
        "org.apache.commons.math3.distribution$FDistribution#getDenominatorDegreesOfFreedom()": 0.1762568483793318,
        "org.apache.commons.math3.distribution$FDistribution#getNumeratorDegreesOfFreedom()": 0.17875525180968638,
        "org.apache.commons.math3.distribution$FDistribution#getNumericalMean()": 1.0411171616046448,
        "org.apache.commons.math3.distribution$FDistribution#getNumericalVariance()": 1.0411171616046448,
        "org.apache.commons.math3.distribution$FDistribution#getSolverAbsoluteAccuracy()": 0.18132303199754934,
        "org.apache.commons.math3.distribution$FDistribution#getSupportLowerBound()": 0.17875525180968638,
        "org.apache.commons.math3.distribution$FDistribution#getSupportUpperBound()": 0.17875525180968638,
        "org.apache.commons.math3.distribution$FDistribution#isSupportConnected()": -0.07342183939403957,
        "org.apache.commons.math3.distribution$FDistribution#isSupportLowerBoundInclusive()": 0.0,
        "org.apache.commons.math3.distribution$FDistribution#isSupportUpperBoundInclusive()": 0.0,
        "org.apache.commons.math3.distribution$FDistribution#probability(double)": 0.0,
        "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException()": -0.01805341496470158,
        "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 1.7519513983138277,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": -0.06229407989992364,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.10465133712949108,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": -0.018053414964701586,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.6607528541707419,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": -0.049134968618199215,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.5674268971566212,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": -0.06804860168617233,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": 1.6852154205189853,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 1.6551219218319713,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": 0.3427028097475714,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": 0.2290291616017907,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": -0.018053414964701586,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)": -0.08330002874118685,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.08330002874118685,
        "org.apache.commons.math3.exception$MaxCountExceededException#getMax()": -0.06229407989992364,
        "org.apache.commons.math3.exception$NoBracketingException#NoBracketingException(double,double,double,double)": -0.06229407989992362,
        "org.apache.commons.math3.exception$NoBracketingException#NoBracketingException(org.apache.commons.math3.exception.util.Localizable,double,double,double,double,java.lang.Object[])": -0.06229407989992362,
        "org.apache.commons.math3.exception$NoBracketingException#getFHi()": 0.0,
        "org.apache.commons.math3.exception$NoBracketingException#getFLo()": 0.0,
        "org.apache.commons.math3.exception$NoBracketingException#getHi()": 0.0,
        "org.apache.commons.math3.exception$NoBracketingException#getLo()": 0.0,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])": -0.04913496861819938,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.04913496861819938,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)": -0.04913496861819938,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": -0.05604822475565288,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)": -0.11954315637746168,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": -0.1838332829619325,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": -0.13315501256757903,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.17317405735427124,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)": -0.08562337527580577,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.22755314625394757,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getBoundIsAllowed()": -0.018053414964701586,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getMax()": -0.018053414964701586,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": -0.15918419543822607,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.2975487703167773,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": -0.03166840905911683,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": -0.03166840905911683,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(java.lang.Number,java.lang.Number,java.lang.Number)": -0.10267522358001109,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)": -0.2518066858838736,
        "org.apache.commons.math3.exception$OutOfRangeException#getHi()": -0.018053414964701586,
        "org.apache.commons.math3.exception$OutOfRangeException#getLo()": -0.018053414964701586,
        "org.apache.commons.math3.exception$TooManyEvaluationsException#TooManyEvaluationsException(java.lang.Number)": -0.06522479797978172,
        "org.apache.commons.math3.random$RandomDataImpl#<clinit>()": 0.9815648701418543,
        "org.apache.commons.math3.random$RandomDataImpl#RandomDataImpl()": -0.361803295109992,
        "org.apache.commons.math3.random$RandomDataImpl#RandomDataImpl(org.apache.commons.math3.random.RandomGenerator)": -0.6253357961583581,
        "org.apache.commons.math3.random$RandomDataImpl#getNatural(int)": -0.09445369990086783,
        "org.apache.commons.math3.random$RandomDataImpl#getRan()": -0.49718868110054104,
        "org.apache.commons.math3.random$RandomDataImpl#getSecRan()": -0.08092308909249124,
        "org.apache.commons.math3.random$RandomDataImpl#initRan()": -0.6752310231646661,
        "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)": -0.06229407989992362,
        "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)": -0.06229407989992362,
        "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)": -0.06229407989992362,
        "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)": -0.06229407989992362,
        "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)": -0.09656034102866835,
        "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)": -0.06229407989992362,
        "org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)": -0.06229407989992362,
        "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)": -0.11954315637746168,
        "org.apache.commons.math3.random$RandomDataImpl#nextHexString(int)": -0.06229407989992362,
        "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)": -0.06229407989992362,
        "org.apache.commons.math3.random$RandomDataImpl#nextInt(int,int)": -0.1798859889344031,
        "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)": -0.138001515405756,
        "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)": -0.18772477347616004,
        "org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)": -0.16628038181154417,
        "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)": -0.06229407989992362,
        "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)": -0.0944536999008678,
        "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)": -0.11413236012044067,
        "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)": -0.06522479797978172,
        "org.apache.commons.math3.random$RandomDataImpl#nextSecureHexString(int)": -0.06522479797978172,
        "org.apache.commons.math3.random$RandomDataImpl#nextSecureInt(int,int)": -0.036736156549919206,
        "org.apache.commons.math3.random$RandomDataImpl#nextSecureLong(long,long)": -0.07342183939403951,
        "org.apache.commons.math3.random$RandomDataImpl#nextT(double)": -0.06229407989992362,
        "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)": -0.37386869418907653,
        "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)": -0.37472564719766355,
        "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)": -0.06229407989992362,
        "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)": -0.06229407989992362,
        "org.apache.commons.math3.random$RandomDataImpl#reSeed()": -0.06229407989992362,
        "org.apache.commons.math3.random$RandomDataImpl#reSeed(long)": -0.6673492993202859,
        "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure()": -0.06229407989992364,
        "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure(long)": -0.06229407989992364,
        "org.apache.commons.math3.random$RandomDataImpl#setSecureAlgorithm(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#shuffle(int[],int)": -0.0944536999008678,
        "org.apache.commons.math3.special$Beta#Beta()": 0.0,
        "org.apache.commons.math3.special$Beta#logBeta(double,double)": -0.052690072820628694,
        "org.apache.commons.math3.special$Beta#logBeta(double,double,double,int)": 1.5757498137804693,
        "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double)": 1.5757498137804693,
        "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double)": 0.0,
        "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,double,int)": 1.5757498137804693,
        "org.apache.commons.math3.special$Beta#regularizedBeta(double,double,double,int)": 0.0,
        "org.apache.commons.math3.special$Beta$1#getA(int,double)": 0.23877770240962148,
        "org.apache.commons.math3.special$Beta$1#getB(int,double)": 0.23877770240962148,
        "org.apache.commons.math3.special$Gamma#<clinit>()": 1.3013732251718357,
        "org.apache.commons.math3.special$Gamma#Gamma()": 0.0,
        "org.apache.commons.math3.special$Gamma#digamma(double)": -0.0257157097897983,
        "org.apache.commons.math3.special$Gamma#lanczos(double)": 1.3109329012672322,
        "org.apache.commons.math3.special$Gamma#logGamma(double)": 1.3183419554279139,
        "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double)": -0.41882278530711137,
        "org.apache.commons.math3.special$Gamma#regularizedGammaP(double,double,double,int)": -0.447498644922612,
        "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double)": -0.04913496861819938,
        "org.apache.commons.math3.special$Gamma#regularizedGammaQ(double,double,double,int)": -0.33233413462206524,
        "org.apache.commons.math3.special$Gamma#trigamma(double)": -0.01805341496470158,
        "org.apache.commons.math3.special$Gamma$1#getA(int,double)": -0.3184862506771151,
        "org.apache.commons.math3.special$Gamma$1#getB(int,double)": -0.3184862506771151,
        "org.apache.commons.math3.util$ArithmeticUtils#<clinit>()": -0.5275573875065395,
        "org.apache.commons.math3.util$ArithmeticUtils#ArithmeticUtils()": 0.0,
        "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(int,int)": -0.12648462638094854,
        "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(long,long)": -0.03166840905911679,
        "org.apache.commons.math3.util$ArithmeticUtils#addAndCheck(long,long,org.apache.commons.math3.exception.util.Localizable)": -0.036736156549919206,
        "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficient(int,int)": -0.11228525938884588,
        "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficientDouble(int,int)": -0.05604822475565288,
        "org.apache.commons.math3.util$ArithmeticUtils#binomialCoefficientLog(int,int)": -0.08789710170592922,
        "org.apache.commons.math3.util$ArithmeticUtils#checkBinomial(int,int)": -0.11595708589930921,
        "org.apache.commons.math3.util$ArithmeticUtils#factorial(int)": 0.9803566611569715,
        "org.apache.commons.math3.util$ArithmeticUtils#factorialDouble(int)": -0.0257157097897983,
        "org.apache.commons.math3.util$ArithmeticUtils#factorialLog(int)": -0.0680486016861722,
        "org.apache.commons.math3.util$ArithmeticUtils#gcd(int,int)": -0.32406420987978013,
        "org.apache.commons.math3.util$ArithmeticUtils#gcd(long,long)": -0.03166840905911679,
        "org.apache.commons.math3.util$ArithmeticUtils#isPowerOfTwo(long)": -0.1331550125675789,
        "org.apache.commons.math3.util$ArithmeticUtils#lcm(int,int)": -0.01805341496470158,
        "org.apache.commons.math3.util$ArithmeticUtils#lcm(long,long)": -0.01805341496470158,
        "org.apache.commons.math3.util$ArithmeticUtils#mulAndCheck(int,int)": -0.16346750313795283,
        "org.apache.commons.math3.util$ArithmeticUtils#mulAndCheck(long,long)": -0.0680486016861722,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(int,int)": -0.01805341496470158,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(int,long)": -0.01805341496470158,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,int)": -0.01805341496470158,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,java.math.BigInteger)": -0.0257157097897983,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(java.math.BigInteger,long)": -0.0257157097897983,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(long,int)": -0.01805341496470158,
        "org.apache.commons.math3.util$ArithmeticUtils#pow(long,long)": -0.01805341496470158,
        "org.apache.commons.math3.util$ArithmeticUtils#subAndCheck(int,int)": -0.10465133712949108,
        "org.apache.commons.math3.util$ArithmeticUtils#subAndCheck(long,long)": -0.01805341496470158,
        "org.apache.commons.math3.util$ContinuedFraction#ContinuedFraction()": 0.05539077706598372,
        "org.apache.commons.math3.util$ContinuedFraction#evaluate(double)": 0.0,
        "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double)": -0.01805341496470158,
        "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,double,int)": 1.4011772146928885,
        "org.apache.commons.math3.util$ContinuedFraction#evaluate(double,int)": 0.0,
        "org.apache.commons.math3.util$FastMath#<clinit>()": -1.3324577259130521,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0.0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": -0.018053414964701586,
        "org.apache.commons.math3.util$FastMath#abs(double)": -0.6410557187449725,
        "org.apache.commons.math3.util$FastMath#abs(float)": -0.03673615654991935,
        "org.apache.commons.math3.util$FastMath#abs(int)": -0.42044065510093565,
        "org.apache.commons.math3.util$FastMath#abs(long)": -0.21862049781224757,
        "org.apache.commons.math3.util$FastMath#acos(double)": -0.0809230890924912,
        "org.apache.commons.math3.util$FastMath#acosh(double)": -0.01805341496470158,
        "org.apache.commons.math3.util$FastMath#asin(double)": -0.0809230890924912,
        "org.apache.commons.math3.util$FastMath#asinh(double)": -0.01805341496470158,
        "org.apache.commons.math3.util$FastMath#atan(double)": -0.0784880230122572,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": -0.1812081508793488,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": -0.17722184391106538,
        "org.apache.commons.math3.util$FastMath#atanh(double)": -0.01805341496470158,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": -0.11954315637746168,
        "org.apache.commons.math3.util$FastMath#ceil(double)": 0.8797277236081597,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": -0.06522479797978153,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": -0.025715709789798202,
        "org.apache.commons.math3.util$FastMath#cos(double)": -0.331420817051773,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": -0.39249647479010935,
        "org.apache.commons.math3.util$FastMath#cosh(double)": -0.08789710170592922,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": -0.16204846509206197,
        "org.apache.commons.math3.util$FastMath#exp(double)": 1.1758550940521415,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": 0.8000768602802101,
        "org.apache.commons.math3.util$FastMath#expm1(double)": -0.06229407989992362,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": -0.08330002874118685,
        "org.apache.commons.math3.util$FastMath#floor(double)": -0.5637588688230902,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": -0.16346750313795289,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": -0.025715709789798202,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": -0.15918419543822607,
        "org.apache.commons.math3.util$FastMath#log(double)": 0.8878718382736531,
        "org.apache.commons.math3.util$FastMath#log(double,double)": -0.01805341496470158,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": 0.7983804291921849,
        "org.apache.commons.math3.util$FastMath#log10(double)": -0.14427844943905305,
        "org.apache.commons.math3.util$FastMath#log1p(double)": -0.06522479797978172,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0.0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": -0.5890754222398931,
        "org.apache.commons.math3.util$FastMath#max(float,float)": -0.025715709789798202,
        "org.apache.commons.math3.util$FastMath#max(int,int)": -0.3704306597266249,
        "org.apache.commons.math3.util$FastMath#max(long,long)": -0.018053414964701586,
        "org.apache.commons.math3.util$FastMath#min(double,double)": -0.357386641348447,
        "org.apache.commons.math3.util$FastMath#min(float,float)": -0.025715709789798202,
        "org.apache.commons.math3.util$FastMath#min(int,int)": -0.5539822004822386,
        "org.apache.commons.math3.util$FastMath#min(long,long)": -0.06804860168617233,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": -0.06804860168617233,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": -0.03166840905911683,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": -0.0257157097897983,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": -0.01805341496470158,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": -0.4236672554625063,
        "org.apache.commons.math3.util$FastMath#polySine(double)": -0.4236672554625063,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": 0.8832151543104283,
        "org.apache.commons.math3.util$FastMath#random()": -0.08330002874118692,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": -0.04123837108661277,
        "org.apache.commons.math3.util$FastMath#rint(double)": -0.0809230890924912,
        "org.apache.commons.math3.util$FastMath#round(double)": -0.08330002874118685,
        "org.apache.commons.math3.util$FastMath#round(float)": -0.03166840905911679,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": -0.1363999299672849,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": -0.025715709789798202,
        "org.apache.commons.math3.util$FastMath#signum(double)": -0.05604822475565285,
        "org.apache.commons.math3.util$FastMath#signum(float)": -0.025715709789798202,
        "org.apache.commons.math3.util$FastMath#sin(double)": -0.40576628895802075,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": -0.4098685779142258,
        "org.apache.commons.math3.util$FastMath#sinh(double)": -0.08789710170592922,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": -0.6760917632682503,
        "org.apache.commons.math3.util$FastMath#tan(double)": -0.08789710170592922,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": -0.08789710170592922,
        "org.apache.commons.math3.util$FastMath#tanh(double)": -0.052690072820628694,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": -0.0257157097897983,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": -0.0257157097897983,
        "org.apache.commons.math3.util$FastMath#ulp(double)": -0.3413940500165632,
        "org.apache.commons.math3.util$FastMath#ulp(float)": -0.03166840905911679,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": 0.8029062563646828,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": 0.8051715918115735,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": 0.8057381792714079,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0.0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()": -0.5872987987934678,
        "org.apache.commons.math3.util$FastMathLiteralArrays#FastMathLiteralArrays()": 0.0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()": 0.8029062563646828,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()": 0.8029062563646828,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()": 0.8051715918115735,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()": 0.8051715918115735,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()": 0.8057381792714079,
        "org.apache.commons.math3.util$Incrementor#Incrementor()": 0.4897447727584649,
        "org.apache.commons.math3.util$Incrementor#Incrementor(int)": 0.48772123595797584,
        "org.apache.commons.math3.util$Incrementor#Incrementor(int,org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback)": -0.37531459497486513,
        "org.apache.commons.math3.util$Incrementor#canIncrement()": -0.025715709789798202,
        "org.apache.commons.math3.util$Incrementor#getCount()": -0.2613264405063285,
        "org.apache.commons.math3.util$Incrementor#getMaximalCount()": -0.11041475860538585,
        "org.apache.commons.math3.util$Incrementor#incrementCount()": -0.33848152438590035,
        "org.apache.commons.math3.util$Incrementor#incrementCount(int)": -0.01805341496470158,
        "org.apache.commons.math3.util$Incrementor#resetCount()": -0.3508621510420145,
        "org.apache.commons.math3.util$Incrementor#setMaximalCount(int)": -0.3624589173917477,
        "org.apache.commons.math3.util$Incrementor$1#trigger(int)": -0.07598961958190253,
        "org.apache.commons.math3.util$MathUtils#MathUtils()": 0.0,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double)": -0.0784880230122572,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double[])": -0.01805341496470158,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)": 0.4124253270167063,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.1798859889344031,
        "org.apache.commons.math3.util$MathUtils#copySign(byte,byte)": -0.036736156549919206,
        "org.apache.commons.math3.util$MathUtils#copySign(int,int)": -0.036736156549919206,
        "org.apache.commons.math3.util$MathUtils#copySign(long,long)": -0.0257157097897983,
        "org.apache.commons.math3.util$MathUtils#copySign(short,short)": -0.0257157097897983,
        "org.apache.commons.math3.util$MathUtils#hash(double)": -0.1363999299672849,
        "org.apache.commons.math3.util$MathUtils#hash(double[])": -0.05604822475565285,
        "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)": -0.11776038909595019,
        "org.apache.commons.math3.util$MathUtils#reduce(double,double,double)": -0.04123837108661277,
        "org.apache.commons.math3.util$Precision#<clinit>()": -0.43157247537884647,
        "org.apache.commons.math3.util$Precision#Precision()": 0.0,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,double)": -0.138001515405756,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,int)": -0.09230932050453061,
        "org.apache.commons.math3.util$Precision#equals(double,double)": -0.25073563841139235,
        "org.apache.commons.math3.util$Precision#equals(double,double,double)": 1.3615874252850542,
        "org.apache.commons.math3.util$Precision#equals(double,double,int)": 1.1297626537890255,
        "org.apache.commons.math3.util$Precision#equals(float,float)": -0.01805341496470158,
        "org.apache.commons.math3.util$Precision#equals(float,float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(float,float,int)": -0.1838332829619325,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)": -0.2365486290774008,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)": -0.12648462638094854,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)": -0.01805341496470158,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)": -0.18252387493555677,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)": 0.0,
        "org.apache.commons.math3.util$Precision#representableDelta(double,double)": -0.018053414964701586,
        "org.apache.commons.math3.util$Precision#round(double,int)": -0.01805341496470158,
        "org.apache.commons.math3.util$Precision#round(double,int,int)": -0.018053414964701586,
        "org.apache.commons.math3.util$Precision#round(float,int)": -0.01805341496470158,
        "org.apache.commons.math3.util$Precision#round(float,int,int)": -0.01805341496470158,
        "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)": -0.01805341496470158,
        "org.apache.commons.math3.util$ResizableDoubleArray#ResizableDoubleArray()": -0.14272785417506384,
        "org.apache.commons.math3.util$ResizableDoubleArray#ResizableDoubleArray(double[])": -0.018053414964701586,
        "org.apache.commons.math3.util$ResizableDoubleArray#ResizableDoubleArray(int)": 0.9809606885883789,
        "org.apache.commons.math3.util$ResizableDoubleArray#ResizableDoubleArray(int,float)": -0.01805341496470158,
        "org.apache.commons.math3.util$ResizableDoubleArray#ResizableDoubleArray(int,float,float)": -0.03166840905911679,
        "org.apache.commons.math3.util$ResizableDoubleArray#ResizableDoubleArray(int,float,float,int)": -0.036736156549919206,
        "org.apache.commons.math3.util$ResizableDoubleArray#ResizableDoubleArray(org.apache.commons.math3.util.ResizableDoubleArray)": -0.0257157097897983,
        "org.apache.commons.math3.util$ResizableDoubleArray#addElement(double)": 0.9581137993190354,
        "org.apache.commons.math3.util$ResizableDoubleArray#addElementRolling(double)": -0.052690072820628694,
        "org.apache.commons.math3.util$ResizableDoubleArray#addElements(double[])": -0.018053414964701586,
        "org.apache.commons.math3.util$ResizableDoubleArray#checkContractExpand(float,float)": -0.04913496861819938,
        "org.apache.commons.math3.util$ResizableDoubleArray#clear()": -0.05604822475565285,
        "org.apache.commons.math3.util$ResizableDoubleArray#contract()": -0.38707414587916167,
        "org.apache.commons.math3.util$ResizableDoubleArray#copy()": -0.03166840905911679,
        "org.apache.commons.math3.util$ResizableDoubleArray#copy(org.apache.commons.math3.util.ResizableDoubleArray,org.apache.commons.math3.util.ResizableDoubleArray)": -0.036736156549919206,
        "org.apache.commons.math3.util$ResizableDoubleArray#discardExtremeElements(int,boolean)": -0.04913496861819938,
        "org.apache.commons.math3.util$ResizableDoubleArray#discardFrontElements(int)": -0.036736156549919206,
        "org.apache.commons.math3.util$ResizableDoubleArray#discardMostRecentElements(int)": -0.04123837108661277,
        "org.apache.commons.math3.util$ResizableDoubleArray#equals(java.lang.Object)": -0.025715709789798202,
        "org.apache.commons.math3.util$ResizableDoubleArray#expand()": 0.9617069399993559,
        "org.apache.commons.math3.util$ResizableDoubleArray#expandTo(int)": -0.025715709789798202,
        "org.apache.commons.math3.util$ResizableDoubleArray#getContractionCriteria()": -0.025715709789798202,
        "org.apache.commons.math3.util$ResizableDoubleArray#getElement(int)": -0.049134968618199215,
        "org.apache.commons.math3.util$ResizableDoubleArray#getElements()": -0.36844761037873985,
        "org.apache.commons.math3.util$ResizableDoubleArray#getExpansionFactor()": -0.049134968618199215,
        "org.apache.commons.math3.util$ResizableDoubleArray#getExpansionMode()": -0.025715709789798202,
        "org.apache.commons.math3.util$ResizableDoubleArray#getInternalLength()": -0.04123837108661266,
        "org.apache.commons.math3.util$ResizableDoubleArray#getInternalValues()": -0.09863148689949242,
        "org.apache.commons.math3.util$ResizableDoubleArray#getNumElements()": -0.12648462638094848,
        "org.apache.commons.math3.util$ResizableDoubleArray#hashCode()": -0.018053414964701586,
        "org.apache.commons.math3.util$ResizableDoubleArray#setContractionCriteria(float)": -0.04913496861819938,
        "org.apache.commons.math3.util$ResizableDoubleArray#setElement(int,double)": -0.01805341496470158,
        "org.apache.commons.math3.util$ResizableDoubleArray#setExpansionFactor(float)": -0.01805341496470158,
        "org.apache.commons.math3.util$ResizableDoubleArray#setExpansionMode(int)": -0.04123837108661277,
        "org.apache.commons.math3.util$ResizableDoubleArray#setInitialCapacity(int)": 0.9777516515428003,
        "org.apache.commons.math3.util$ResizableDoubleArray#setNumElements(int)": -0.01805341496470158,
        "org.apache.commons.math3.util$ResizableDoubleArray#shouldContract()": -0.3876726383078696,
        "org.apache.commons.math3.util$ResizableDoubleArray#start()": -0.09863148689949242,
        "org.apache.commons.math3.util$ResizableDoubleArray#substituteMostRecentElement(double)": -0.03166840905911679
    },
    "Math-32": {
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)": -0.22639824203391878,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)": -0.24838274370189417,
        "org.apache.commons.math3.exception$DimensionMismatchException#getDimension()": -0.03152570260747467,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": -0.06200637511304463,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.10415358140373418,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": -0.017973035142722527,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.6569617260643025,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": -0.048910337465136955,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.564232035234602,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": -0.06773297075115381,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": -0.1325105766850885,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.1626629867717658,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": -0.1308748837257776,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": -0.017973035142722527,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": -0.017973035142722527,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int)": -0.017973035142722478,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int,org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": -0.07563512247981069,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getDirection()": -0.017973035142722527,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getIndex()": -0.017973035142722527,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getPrevious()": -0.017973035142722527,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getStrict()": -0.017973035142722527,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])": -0.04891033746513689,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.04891033746513689,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": -0.1325105766850885,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.1723174638989465,
        "org.apache.commons.math3.geometry.euclidean.oned$Interval#Interval(double,double)": 0.3570178967444583,
        "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLength()": 0.3913041371121787,
        "org.apache.commons.math3.geometry.euclidean.oned$Interval#getLower()": 0.3681221695423128,
        "org.apache.commons.math3.geometry.euclidean.oned$Interval#getMidPoint()": 0.3913041371121787,
        "org.apache.commons.math3.geometry.euclidean.oned$Interval#getUpper()": 0.3681221695423128,
        "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet()": 1.7218358104354918,
        "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(double,double)": 1.6958246632812581,
        "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)": 1.7178125128426518,
        "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()": 1.6992767686197832,
        "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)": 1.7218358104354918,
        "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildTree(double,double)": 1.6958246632812581,
        "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()": 1.7370905747390837,
        "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()": -0.03152570260747464,
        "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()": -0.03152570260747464,
        "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)": 1.6992767686197832,
        "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)": 0.3400819214549121,
        "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#copySelf()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()": 0.36062730593075687,
        "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)": 1.6975416498486657,
        "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()": 0.36062730593075687,
        "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#revertSelf()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)": 0.3845134333659824,
        "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()": 1.6858683590818169,
        "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeSpace()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)": 1.6858683590818169,
        "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)": 1.7218358104354918,
        "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)": 1.723896521104853,
        "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)": 1.7281261953866587,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()": 1.6779667025559726,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)": 0.3321802649290678,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double,org.apache.commons.math3.geometry.euclidean.oned.Vector1D,double,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double,org.apache.commons.math3.geometry.euclidean.oned.Vector1D,double,org.apache.commons.math3.geometry.euclidean.oned.Vector1D,double,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double,org.apache.commons.math3.geometry.euclidean.oned.Vector1D,double,org.apache.commons.math3.geometry.euclidean.oned.Vector1D,double,org.apache.commons.math3.geometry.euclidean.oned.Vector1D,double,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#add(double,org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#add(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distance(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distance(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distance1(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distanceInf(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distanceInf(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distanceSq(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distanceSq(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getNorm()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getNorm1()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getNormInf()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getNormSq()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getSpace()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()": 0.3321802649290678,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getZero()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#hashCode()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isInfinite()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#negate()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#normalize()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#scalarMultiply(double)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#subtract(double,org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#subtract(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#toString()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#toString(java.text.NumberFormat)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#Line(org.apache.commons.math3.geometry.euclidean.threed.Line)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 1.723896521104853,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#closestPoint(org.apache.commons.math3.geometry.euclidean.threed.Line)": -0.052448512087754466,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": -0.06200637511304468,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)": -0.017973035142722478,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": -0.06773297075115396,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#getAbscissa(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": -0.04891033746513689,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()": 0.4217650502853406,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#getOrigin()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)": -0.04891033746513689,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)": -0.017973035142722478,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)": 1.7579936248869554,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 1.723896521104853,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#revert()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)": 1.7579936248869554,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)": -0.04891033746513689,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#wholeLine()": -0.017973035142722478,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#Plane(org.apache.commons.math3.geometry.euclidean.threed.Plane)": 0.43316252173549963,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#Plane(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 1.7748677767995362,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#Plane(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 1.746920049041818,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#Plane(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 1.771089662534863,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": -0.04513222320046365,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#copySelf()": 1.7789489593624044,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#getNormal()": 0.4152450456044915,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.Vector)": -0.055790596382627816,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)": 1.7884742973925252,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#getOrigin()": -0.02560042572572363,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#getPointAt(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#getU()": -0.017973035142722527,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#getV()": -0.017973035142722527,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)": -0.017973035142722478,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)": 1.7748677767995362,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)": 1.771089662534863,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Plane)": -0.017973035142722478,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#reset(org.apache.commons.math3.geometry.euclidean.threed.Plane)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#revertSelf()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)": -0.02560042572572377,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)": 1.7884742973925252,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#setFrame()": 1.746920049041818,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#setNormal(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 1.746920049041818,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSpace(org.apache.commons.math3.geometry.Vector)": 1.7789489593624044,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#toSubSpace(org.apache.commons.math3.geometry.Vector)": 1.7789489593624044,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": -0.02560042572572377,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeHyperplane()": 1.7789489593624044,
        "org.apache.commons.math3.geometry.euclidean.threed$Plane#wholeSpace()": -0.04105104063759552,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#PolyhedronsSet()": -0.04105104063759552,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#PolyhedronsSet(double,double,double,double,double,double)": -0.03152570260747464,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#PolyhedronsSet(java.util.Collection)": 1.8199999999999998,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#PolyhedronsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)": -0.03656990060359842,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#boundaryFacet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.partitioning.BSPTree)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)": -0.02560042572572377,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#computeGeometricalProperties()": 1.7789489593624044,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)": -0.017973035142722478,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet#translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": -0.017973035142722478,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#PolyhedronsSet$FacetsContributionVisitor(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet)": 1.7789489593624044,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)": 1.7789489593624044,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)": 1.7789489593624044,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)": 0.43316252173549963,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$FacetsContributionVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)": 1.7789489593624044,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#PolyhedronsSet$RotationTransform(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)": -0.017973035142722527,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.Vector)": -0.017973035142722478,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)": -0.017973035142722478,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$RotationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)": -0.017973035142722478,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#PolyhedronsSet$TranslationTransform(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": -0.017973035142722527,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.Vector)": -0.017973035142722478,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)": -0.017973035142722478,
        "org.apache.commons.math3.geometry.euclidean.threed$PolyhedronsSet$TranslationTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)": -0.017973035142722478,
        "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#SubPlane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)": 1.7789489593624044,
        "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)": 1.7789489593624044,
        "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)": 1.7789489593624044,
        "org.apache.commons.math3.geometry.euclidean.threed$SubPlane#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)": 1.7789489593624044,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()": 1.5891023047938313,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double)": -0.017973035142722478,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)": 0.24331586716692633,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.35524430260763473,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 1.7101123332792634,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 1.7748677767995362,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": -0.017973035142722478,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double[])": -0.02560042572572377,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(double,org.apache.commons.math3.geometry.Vector)": -0.017973035142722478,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)": 1.7495513277274166,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": -0.03656990060359842,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)": 1.7218358104354918,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 1.7281261953866587,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance(org.apache.commons.math3.geometry.Vector)": -0.06492289616940967,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": -0.02560042572572377,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance1(org.apache.commons.math3.geometry.Vector)": -0.017973035142722478,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance1(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": -0.017973035142722478,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceInf(org.apache.commons.math3.geometry.Vector)": -0.017973035142722478,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceInf(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": -0.017973035142722478,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceSq(org.apache.commons.math3.geometry.Vector)": -0.017973035142722527,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceSq(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": -0.017973035142722478,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)": 1.690775939596622,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": -0.03656990060359842,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)": -0.09816418956450815,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getAlpha()": -0.017973035142722478,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getDelta()": -0.017973035142722478,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()": 1.682668243843339,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm1()": -0.02560042572572377,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNormInf()": -0.02560042572572377,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNormSq()": 0.37402198168728995,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getSpace()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()": 0.3260798573207463,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()": 0.3260798573207463,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()": 0.3260798573207463,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZero()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#hashCode()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isInfinite()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()": -0.09816418956450823,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#negate()": -0.02560042572572377,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#normalize()": -0.02560042572572377,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#orthogonal()": 1.7347787671340416,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#scalarMultiply(double)": -0.03656990060359842,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(double,org.apache.commons.math3.geometry.Vector)": -0.017973035142722478,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)": 1.690775939596622,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#toArray()": -0.017973035142722527,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#toString()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#toString(java.text.NumberFormat)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(double,double,double,double)": -0.055790596382627955,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)": 1.7302998709928872,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)": -0.02560042572572377,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 1.6941251330503624,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#contains(org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": -0.017973035142722478,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()": 1.7302998709928872,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()": 1.7281261953866587,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)": -0.07563512247981069,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)": 0.3867299248497297,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#getOriginOffset()": -0.017973035142722527,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#getPointAt(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,double)": -0.017973035142722478,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()": -0.04891033746513689,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#getTransform(java.awt.geom.AffineTransform)": -0.02560042572572377,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)": 1.7158464185962656,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#isParallelTo(org.apache.commons.math3.geometry.euclidean.twod.Line)": -0.017973035142722478,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)": -0.02560042572572377,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 1.6941251330503624,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#revertSelf()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)": 0.42908133917263147,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#setAngle(double)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#setOriginOffset(double)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)": 1.723896521104853,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)": 1.7119976756160133,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#translateToPoint(org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()": 1.7281261953866587,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeSpace()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#Line$LineTransform(java.awt.geom.AffineTransform)": -0.02560042572572377,
        "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.Vector)": -0.017973035142722478,
        "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)": -0.02560042572572377,
        "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)": -0.017973035142722478,
        "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#PolygonsSet()": 1.7789489593624044,
        "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#PolygonsSet(double,double,double,double)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#PolygonsSet(java.util.Collection)": 1.7495513277274166,
        "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#PolygonsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)": 1.746920049041818,
        "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#boxBoundary(double,double,double,double)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)": 1.752267029248846,
        "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#computeGeometricalProperties()": 1.7748677767995362,
        "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree)": 1.739455740913908,
        "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet#getVertices()": 1.739455740913908,
        "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#PolygonsSet$ComparableSegment(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,double)": 1.739455740913908,
        "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#PolygonsSet$ComparableSegment(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Line)": 1.739455740913908,
        "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)": 1.739455740913908,
        "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$ComparableSegment#hashCode()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#PolygonsSet$SegmentsBuilder()": 1.739455740913908,
        "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)": 1.739455740913908,
        "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#getSorted()": 0.393669303287003,
        "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)": 1.739455740913908,
        "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)": 0.393669303287003,
        "org.apache.commons.math3.geometry.euclidean.twod$PolygonsSet$SegmentsBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)": 1.739455740913908,
        "org.apache.commons.math3.geometry.euclidean.twod$Segment#Segment(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Line)": 0.3823397577597537,
        "org.apache.commons.math3.geometry.euclidean.twod$Segment#getEnd()": 0.3845134333659824,
        "org.apache.commons.math3.geometry.euclidean.twod$Segment#getLine()": -0.017973035142722527,
        "org.apache.commons.math3.geometry.euclidean.twod$Segment#getStart()": 0.3845134333659824,
        "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Segment)": -0.017973035142722478,
        "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 1.7748677767995362,
        "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)": 1.719808419314195,
        "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 1.771089662534863,
        "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)": 1.7302998709928872,
        "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()": -0.04513222320046365,
        "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)": -0.04513222320046365,
        "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)": 1.7302998709928872,
        "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)": 1.7302998709928872,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()": 1.6924424242612999,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)": 0.3466559866343951,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double[])": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#add(double,org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#add(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)": 1.7259925716901519,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance1(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distanceInf(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distanceInf(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distanceSq(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distanceSq(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getNorm()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getNorm1()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getNormInf()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getNormSq()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getSpace()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()": 0.3466559866343951,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()": 0.3466559866343951,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getZero()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#hashCode()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isInfinite()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#negate()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#normalize()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#scalarMultiply(double)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#subtract(double,org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#subtract(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#toArray()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#toString()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#toString(java.text.NumberFormat)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion()": 1.7218358104354918,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)": 1.7495513277274166,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)": 0.3368818062164344,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)": -0.017973035142722478,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Characterization)": 1.7370905747390837,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)": -0.09816418956450815,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)": 1.6858683590818169,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)": -0.017973035142722478,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#copySelf()": -0.04513222320046365,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()": 1.7675514879122454,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()": -0.04105104063759552,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()": 1.7259925716901519,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)": 1.6992767686197832,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)": 1.7495513277274166,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)": -0.017973035142722478,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()": 1.7302998709928872,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)": 1.7302998709928872,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseBuildBoundary(org.apache.commons.math3.geometry.partitioning.BSPTree)": 1.7370905747390837,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)": -0.017973035142722478,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)": 1.7302998709928872,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)": -0.017973035142722478,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)": 0.3802061340632471,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)": 0.3802061340632471,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)": 1.7302998709928872,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)": 0.40376489010051186,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)": 0.40376489010051186,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)": 0.40376489010051186,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)": 0.40376489010051186,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()": 0.3845134333659824,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#AbstractRegion$Sides()": 0.3845134333659824,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()": 0.3845134333659824,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()": 0.3845134333659824,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()": 0.3845134333659824,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()": 0.3845134333659824,
        "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)": 0.3368818062164344,
        "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)": -0.017973035142722478,
        "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()": 1.7218358104354918,
        "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()": 0.3368818062164344,
        "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()": 0.36062730593075687,
        "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()": 1.7370905747390837,
        "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()": 1.7302998709928872,
        "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)": -0.017973035142722478,
        "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)": 1.7347787671340416,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree()": 0.3913041371121787,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)": 0.33373482738140703,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)": 0.3400819214549121,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)": 1.7281261953866587,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)": 1.7347787671340416,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()": 1.7235059090942146,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()": 1.723896521104853,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)": 1.723896521104853,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()": 0.33373482738140703,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)": 1.6858683590818169,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()": 0.33373482738140703,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()": 0.3500382256543534,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()": 0.40376489010051186,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()": 0.3500382256543534,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)": 1.7370905747390837,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)": 1.723896521104853,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)": 1.723896521104853,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)": 1.723896521104853,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)": 0.37811008347794817,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)": 1.723896521104853,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)": 1.723896521104853,
        "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()": 0.37811008347794817,
        "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()": 1.723896521104853,
        "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#BSPTreeVisitor$Order(java.lang.String,int)": 0.37811008347794817,
        "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#BoundaryAttribute(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)": 0.3913041371121787,
        "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusInside()": 0.3913041371121787,
        "org.apache.commons.math3.geometry.partitioning$BoundaryAttribute#getPlusOutside()": 0.3913041371121787,
        "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#BoundarySizeVisitor()": -0.04105104063759546,
        "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#getSize()": -0.04105104063759546,
        "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)": -0.04105104063759552,
        "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)": -0.04105104063759546,
        "org.apache.commons.math3.geometry.partitioning$BoundarySizeVisitor#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)": -0.04105104063759552,
        "org.apache.commons.math3.geometry.partitioning$Characterization#Characterization()": 0.3913041371121787,
        "org.apache.commons.math3.geometry.partitioning$Characterization#add(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)": 1.7370905747390837,
        "org.apache.commons.math3.geometry.partitioning$Characterization#getIn()": 0.3913041371121787,
        "org.apache.commons.math3.geometry.partitioning$Characterization#getOut()": 0.3913041371121787,
        "org.apache.commons.math3.geometry.partitioning$Characterization#hasIn()": 1.7370905747390837,
        "org.apache.commons.math3.geometry.partitioning$Characterization#hasOut()": 1.7370905747390837,
        "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()": 1.6858683590818169,
        "org.apache.commons.math3.geometry.partitioning$Region$Location#Region$Location(java.lang.String,int)": 0.3400819214549121,
        "org.apache.commons.math3.geometry.partitioning$RegionFactory#RegionFactory()": 0.37202607521574704,
        "org.apache.commons.math3.geometry.partitioning$RegionFactory#buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])": -0.04105104063759552,
        "org.apache.commons.math3.geometry.partitioning$RegionFactory#difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)": -0.03656990060359842,
        "org.apache.commons.math3.geometry.partitioning$RegionFactory#getComplement(org.apache.commons.math3.geometry.partitioning.Region)": -0.03152570260747464,
        "org.apache.commons.math3.geometry.partitioning$RegionFactory#intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)": -0.02560042572572377,
        "org.apache.commons.math3.geometry.partitioning$RegionFactory#recurseComplement(org.apache.commons.math3.geometry.partitioning.BSPTree)": -0.052448512087754466,
        "org.apache.commons.math3.geometry.partitioning$RegionFactory#union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)": 1.7281261953866587,
        "org.apache.commons.math3.geometry.partitioning$RegionFactory#xor(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)": -0.017973035142722478,
        "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#RegionFactory$DifferenceMerger(org.apache.commons.math3.geometry.partitioning.RegionFactory)": -0.03656990060359844,
        "org.apache.commons.math3.geometry.partitioning$RegionFactory$DifferenceMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)": -0.03656990060359842,
        "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#RegionFactory$IntersectionMerger(org.apache.commons.math3.geometry.partitioning.RegionFactory)": -0.02560042572572363,
        "org.apache.commons.math3.geometry.partitioning$RegionFactory$IntersectionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)": -0.02560042572572377,
        "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#RegionFactory$NodesCleaner(org.apache.commons.math3.geometry.partitioning.RegionFactory)": 0.37202607521574704,
        "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)": 1.7281261953866587,
        "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)": 0.37811008347794817,
        "org.apache.commons.math3.geometry.partitioning$RegionFactory$NodesCleaner#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)": 1.7281261953866587,
        "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#RegionFactory$UnionMerger(org.apache.commons.math3.geometry.partitioning.RegionFactory)": 0.3823397577597537,
        "org.apache.commons.math3.geometry.partitioning$RegionFactory$UnionMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)": 1.7281261953866587,
        "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#RegionFactory$XorMerger(org.apache.commons.math3.geometry.partitioning.RegionFactory)": -0.017973035142722527,
        "org.apache.commons.math3.geometry.partitioning$RegionFactory$XorMerger#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)": -0.017973035142722478,
        "org.apache.commons.math3.geometry.partitioning$Side#<clinit>()": 1.723896521104853,
        "org.apache.commons.math3.geometry.partitioning$Side#Side(java.lang.String,int)": 0.37811008347794817,
        "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#SubHyperplane$SplitSubHyperplane(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)": 0.37811008347794817,
        "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()": 0.37811008347794817,
        "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()": 0.37811008347794817,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#AVLTree()": 0.3823397577597537,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#delete(java.lang.Comparable)": -0.017973035142722478,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getLargest()": -0.017973035142722478,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotLarger(java.lang.Comparable)": -0.02560042572572363,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getNotSmaller(java.lang.Comparable)": 0.3845134333659824,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#getSmallest()": 1.7302998709928872,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#insert(java.lang.Comparable)": 1.7281261953866587,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#isEmpty()": 0.393669303287003,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree#size()": -0.03152570260747464,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$1#<clinit>()": 0.3823397577597537,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#AVLTree$Node(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree,java.lang.Comparable,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node)": 1.7281261953866587,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#delete()": 1.7370905747390837,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getElement()": 0.3823397577597537,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getLargest()": 0.39857843989328445,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getNext()": 1.7302998709928872,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getPrevious()": -0.02560042572572377,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#getSmallest()": 0.3823397577597537,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#insert(java.lang.Comparable)": 1.7281261953866587,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftGrown()": 1.7370905747390837,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceLeftShrunk()": 1.739455740913908,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightGrown()": 1.7281261953866587,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rebalanceRightShrunk()": 1.7370905747390837,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCCW()": 0.3845134333659824,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#rotateCW()": 0.393669303287003,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Node#size()": -0.03152570260747467,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#<clinit>()": 1.7281261953866587,
        "org.apache.commons.math3.geometry.partitioning.utilities$AVLTree$Skew#AVLTree$Skew(java.lang.String,int)": 0.3823397577597537,
        "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#OrderedTuple(double[])": 1.739455740913908,
        "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)": 1.739455740913908,
        "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#computeLSB(long)": 0.393669303287003,
        "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#computeMSB(long)": 0.393669303287003,
        "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#encode(int)": 1.739455740913908,
        "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#exponent(long)": 0.393669303287003,
        "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getBit(int,int)": 1.739455740913908,
        "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#getComponents()": 0.0,
        "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#hashCode()": 0.0,
        "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#mantissa(long)": 0.393669303287003,
        "org.apache.commons.math3.geometry.partitioning.utilities$OrderedTuple#sign(long)": 0.393669303287003,
        "org.apache.commons.math3.util$FastMath#<clinit>()": -1.316911245401013,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0.0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": -0.017973035142722527,
        "org.apache.commons.math3.util$FastMath#abs(double)": -0.6298552795427187,
        "org.apache.commons.math3.util$FastMath#abs(float)": -0.03656990060359844,
        "org.apache.commons.math3.util$FastMath#abs(int)": -0.41815779029680655,
        "org.apache.commons.math3.util$FastMath#abs(long)": -0.5309216943064037,
        "org.apache.commons.math3.util$FastMath#acos(double)": -0.08054425908609208,
        "org.apache.commons.math3.util$FastMath#acosh(double)": -0.017973035142722478,
        "org.apache.commons.math3.util$FastMath#asin(double)": -0.08054425908609208,
        "org.apache.commons.math3.util$FastMath#asinh(double)": -0.017973035142722478,
        "org.apache.commons.math3.util$FastMath#atan(double)": -0.0781212208635827,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": 1.6410068338531407,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": 1.6449915795487344,
        "org.apache.commons.math3.util$FastMath#atanh(double)": -0.017973035142722478,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": -0.11896925976546051,
        "org.apache.commons.math3.util$FastMath#ceil(double)": -0.9305937144348337,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": -0.06492289616940972,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": -0.02560042572572363,
        "org.apache.commons.math3.util$FastMath#cos(double)": 1.4930619321634064,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": 1.4321156241453803,
        "org.apache.commons.math3.util$FastMath#cosh(double)": -0.08748363752336523,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": 1.6601685509233666,
        "org.apache.commons.math3.util$FastMath#exp(double)": -0.6311447727115497,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": -1.0098121778542206,
        "org.apache.commons.math3.util$FastMath#expm1(double)": -0.06200637511304468,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": -0.08290942526091641,
        "org.apache.commons.math3.util$FastMath#floor(double)": -0.5529877523785601,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": 0.31296203232301834,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": -0.02560042572572363,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": 1.6630354186679015,
        "org.apache.commons.math3.util$FastMath#log(double)": -0.9224925676948699,
        "org.apache.commons.math3.util$FastMath#log(double,double)": -0.017973035142722478,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": -1.0114991771357178,
        "org.apache.commons.math3.util$FastMath#log10(double)": -0.14357573563830295,
        "org.apache.commons.math3.util$FastMath#log1p(double)": -0.052448512087754466,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0.0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": -0.5857433150293248,
        "org.apache.commons.math3.util$FastMath#max(float,float)": -0.02560042572572363,
        "org.apache.commons.math3.util$FastMath#max(int,int)": 0.1066215899427908,
        "org.apache.commons.math3.util$FastMath#max(long,long)": -0.017973035142722527,
        "org.apache.commons.math3.util$FastMath#min(double,double)": -0.3554825550812173,
        "org.apache.commons.math3.util$FastMath#min(float,float)": -0.02560042572572363,
        "org.apache.commons.math3.util$FastMath#min(int,int)": -0.07453639369754994,
        "org.apache.commons.math3.util$FastMath#min(long,long)": -0.06773297075115381,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": -0.06773297075115381,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": -0.03152570260747467,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": -0.02560042572572377,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": -0.017973035142722478,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": 0.05525289112661069,
        "org.apache.commons.math3.util$FastMath#polySine(double)": 0.05525289112661069,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": -0.9271247135851763,
        "org.apache.commons.math3.util$FastMath#random()": -0.08290942526091638,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": -0.04105104063759552,
        "org.apache.commons.math3.util$FastMath#rint(double)": -0.08054425908609208,
        "org.apache.commons.math3.util$FastMath#round(double)": -0.08290942526091641,
        "org.apache.commons.math3.util$FastMath#round(float)": -0.03152570260747464,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": 0.3400819214549121,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": -0.02560042572572363,
        "org.apache.commons.math3.util$FastMath#signum(double)": -0.055790596382627955,
        "org.apache.commons.math3.util$FastMath#signum(float)": -0.02560042572572363,
        "org.apache.commons.math3.util$FastMath#sin(double)": 1.4188840792194575,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": 1.414794225300933,
        "org.apache.commons.math3.util$FastMath#sinh(double)": -0.08748363752336523,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": -0.5557836121116159,
        "org.apache.commons.math3.util$FastMath#tan(double)": -0.08748363752336523,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": -0.08748363752336523,
        "org.apache.commons.math3.util$FastMath#tanh(double)": -0.052448512087754466,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": -0.02560042572572377,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": -0.02560042572572377,
        "org.apache.commons.math3.util$FastMath#ulp(double)": -0.3350977105469507,
        "org.apache.commons.math3.util$FastMath#ulp(float)": -0.03152570260747464,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": -1.0069984932886418,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": -1.0047457196289704,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": -1.0041822715743356,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0.0,
        "org.apache.commons.math3.util$MathArrays#MathArrays()": 0.0,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[])": -0.1325105766850885,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": -0.13413164091818303,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)": -0.14963096899931488,
        "org.apache.commons.math3.util$MathArrays#copyOf(double[])": -0.096103478895147,
        "org.apache.commons.math3.util$MathArrays#copyOf(double[],int)": -0.14357573563830295,
        "org.apache.commons.math3.util$MathArrays#copyOf(int[])": -0.04513222320046365,
        "org.apache.commons.math3.util$MathArrays#copyOf(int[],int)": -0.08522123286595835,
        "org.apache.commons.math3.util$MathArrays#distance(double[],double[])": -0.017973035142722478,
        "org.apache.commons.math3.util$MathArrays#distance(int[],int[])": -0.04513222320046365,
        "org.apache.commons.math3.util$MathArrays#distance1(double[],double[])": -0.017973035142722478,
        "org.apache.commons.math3.util$MathArrays#distance1(int[],int[])": -0.017973035142722478,
        "org.apache.commons.math3.util$MathArrays#distanceInf(double[],double[])": -0.017973035142722478,
        "org.apache.commons.math3.util$MathArrays#distanceInf(int[],int[])": -0.017973035142722478,
        "org.apache.commons.math3.util$MathArrays#equals(double[],double[])": -0.017973035142722478,
        "org.apache.commons.math3.util$MathArrays#equals(float[],float[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(double[],double[])": -0.04105104063759552,
        "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(float[],float[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": -0.017973035142722478,
        "org.apache.commons.math3.util$MathArrays#isMonotonic(java.lang.Comparable[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": -0.017973035142722527,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)": 0.3417029856880066,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)": 0.338475011432373,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double,double,double)": -0.02560042572572363,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double[],double[])": -0.03152570260747464,
        "org.apache.commons.math3.util$MathArrays#normalizeArray(double[],double)": -0.02560042572572377,
        "org.apache.commons.math3.util$MathArrays#safeNorm(double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])": -0.055790596382627816,
        "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])": -0.055790596382627816,
        "org.apache.commons.math3.util$MathArrays$1#compare(org.apache.commons.math3.util.Pair,org.apache.commons.math3.util.Pair)": -0.05244851208775447,
        "org.apache.commons.math3.util$MathArrays$2#<clinit>()": -0.1525941618173352,
        "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()": -0.15696458133209834,
        "org.apache.commons.math3.util$MathArrays$OrderDirection#MathArrays$OrderDirection(java.lang.String,int)": -0.15696458133209834,
        "org.apache.commons.math3.util$MathUtils#MathUtils()": 0.0,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double)": -0.0781212208635827,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double[])": -0.017973035142722478,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)": -0.6991173891512172,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.17899316614685906,
        "org.apache.commons.math3.util$MathUtils#copySign(byte,byte)": -0.03656990060359842,
        "org.apache.commons.math3.util$MathUtils#copySign(int,int)": -0.03656990060359842,
        "org.apache.commons.math3.util$MathUtils#copySign(long,long)": -0.02560042572572377,
        "org.apache.commons.math3.util$MathUtils#copySign(short,short)": -0.02560042572572377,
        "org.apache.commons.math3.util$MathUtils#hash(double)": -0.13573855094072207,
        "org.apache.commons.math3.util$MathUtils#hash(double[])": -0.055790596382627955,
        "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)": 1.7045983745501712,
        "org.apache.commons.math3.util$MathUtils#reduce(double,double,double)": -0.04105104063759552,
        "org.apache.commons.math3.util$Precision#<clinit>()": -0.2841905633992504,
        "org.apache.commons.math3.util$Precision#Precision()": 0.0,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,double)": -0.1373317561566609,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,int)": -0.0918738046133413,
        "org.apache.commons.math3.util$Precision#equals(double,double)": -0.2494504862892991,
        "org.apache.commons.math3.util$Precision#equals(double,double,double)": -0.14047873499168811,
        "org.apache.commons.math3.util$Precision#equals(double,double,int)": -0.528044736546849,
        "org.apache.commons.math3.util$Precision#equals(float,float)": -0.017973035142722478,
        "org.apache.commons.math3.util$Precision#equals(float,float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(float,float,int)": -0.18291907209498595,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)": -0.2353433886307305,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)": -0.12587486694963768,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)": -0.017973035142722478,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)": -0.18161676560924267,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)": 0.0,
        "org.apache.commons.math3.util$Precision#representableDelta(double,double)": -0.017973035142722527,
        "org.apache.commons.math3.util$Precision#round(double,int)": -0.017973035142722478,
        "org.apache.commons.math3.util$Precision#round(double,int,int)": -0.017973035142722527,
        "org.apache.commons.math3.util$Precision#round(float,int)": -0.017973035142722478,
        "org.apache.commons.math3.util$Precision#round(float,int,int)": -0.017973035142722478,
        "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)": -0.017973035142722478
    },
    "Math-33": {
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)": -0.2213219704931392,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)": -0.2406712912346464,
        "org.apache.commons.math3.exception$DimensionMismatchException#getDimension()": -0.03089682048591791,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": -0.060739222896248224,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.1019627248986392,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": -0.017618716296643244,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.6390611718273153,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": -0.0479207551451184,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.548856982722155,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": -0.06634295607854801,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": -0.13125889621827985,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.16049444444960043,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": -0.1280771260564435,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": -0.017618716296643244,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": -0.017618716296643244,
        "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int)": 0.0,
        "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int,java.lang.Class)": -0.06359328104382123,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)": -0.08118965587851308,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.08118965587851308,
        "org.apache.commons.math3.exception$MaxCountExceededException#getMax()": -0.060739222896248224,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(java.lang.Integer[],java.lang.Integer[])": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])": -0.11985338370022741,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getExpectedDimension(int)": -0.017618716296643244,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getExpectedDimensions()": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getWrongDimension(int)": -0.017618716296643244,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getWrongDimensions()": 0.0,
        "org.apache.commons.math3.exception$NoDataException#NoDataException()": -0.06073922289624816,
        "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)": -0.09610721853889313,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])": -0.04792075514511846,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.04792075514511846,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)": -0.11644378389877047,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": -0.17889904519812266,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": -0.129675183718628,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.16855037069653464,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)": -0.08345072235910933,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.2213219704931392,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getBoundIsAllowed()": -0.017618716296643244,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getMax()": -0.017618716296643244,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": -0.15496446157739915,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.2891730852377595,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": -0.03089682048591791,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": -0.03089682048591791,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(java.lang.Number,java.lang.Number,java.lang.Number)": -0.10004067045820332,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)": -0.24484127721101745,
        "org.apache.commons.math3.exception$OutOfRangeException#getHi()": -0.017618716296643244,
        "org.apache.commons.math3.exception$OutOfRangeException#getLo()": -0.017618716296643244,
        "org.apache.commons.math3.exception$ZeroException#ZeroException()": -0.01761871629664313,
        "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.04792075514511846,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix()": -0.02509232832944641,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field)": -0.16855037069653456,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)": -0.20666020378871106,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)": -0.035837312617281465,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)": -0.1618562742708014,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)": -0.22461840609469297,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkAdditionCompatible(org.apache.commons.math3.linear.FieldMatrix)": -0.057766179466364496,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)": -0.2321952231576856,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkMultiplicationCompatible(org.apache.commons.math3.linear.FieldMatrix)": -0.07887626513231051,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)": -0.2321952231576856,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)": -0.057766179466364496,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int[],int[])": -0.04022566111956666,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubtractionCompatible(org.apache.commons.math3.linear.FieldMatrix)": -0.035837312617281465,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])": -0.025092328329446432,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int[],int[],org.apache.commons.math3.FieldElement[][])": -0.025092328329446432,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#equals(java.lang.Object)": -0.10756787360572814,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[][])": -0.1925051372767166,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumn(int)": -0.057766179466364496,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)": -0.030896820485917815,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnVector(int)": -0.04422180493878139,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getData()": -0.025092328329446432,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()": -0.2375145963332126,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRow(int)": -0.04792075514511846,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)": -0.035837312617281465,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowVector(int)": -0.030896820485917815,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)": -0.025092328329446432,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])": -0.030896820485917815,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getTrace()": -0.030896820485917815,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#hashCode()": -0.030896820485917815,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#isSquare()": -0.11815782749926476,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)": -0.057766179466364496,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": -0.025092328329446432,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.linear.FieldVector)": -0.030896820485917815,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)": -0.01761871629664313,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": -0.01761871629664313,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)": -0.030896820485917815,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)": -0.025092328329446432,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)": -0.025092328329446432,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])": -0.01761871629664313,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": -0.01761871629664313,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)": -0.01761871629664313,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])": -0.01761871629664313,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": -0.01761871629664313,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)": -0.01761871629664313,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": -0.025092328329446432,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)": -0.01761871629664313,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#toString()": -0.025092328329446432,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()": -0.04422180493878139,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.01761871629664313,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.01761871629664313,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.01761871629664313,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.01761871629664313,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.030896820485917815,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.01761871629664313,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.0899565535270486,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.025092328329446432,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.01761871629664313,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.025092328329446432,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$1#visit(int,int,org.apache.commons.math3.FieldElement)": -0.03089682048591791,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$2#start(int,int,int,int,int,int)": -0.02509232832944641,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$2#visit(int,int,org.apache.commons.math3.FieldElement)": -0.02509232832944641,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$3#visit(int,int,org.apache.commons.math3.FieldElement)": -0.04422180493878125,
        "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()": 1.4560954898507186,
        "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)": 1.3632227829488213,
        "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)": -0.07407414533054373,
        "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])": -0.0899565535270486,
        "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])": -0.025092328329446432,
        "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)": -0.12483597881842239,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)": -0.11295716266553252,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)": -0.07407414533054373,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)": -0.07407414533054373,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getData()": -0.025092328329446432,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()": -0.066342956078548,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()": -0.15356030759610625,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)": 1.687171271126966,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)": -0.035837312617281465,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)": 1.7199593295417968,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)": -0.057766179466364496,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])": -0.030896820485917815,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()": -0.030896820485917815,
        "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()": -0.04792075514511846,
        "org.apache.commons.math3.linear$AbstractRealMatrix#isSquare()": -0.22461840609469289,
        "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": -0.1814232703625091,
        "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])": -0.025092328329446432,
        "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)": -0.121531159172681,
        "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)": -0.025092328329446432,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])": -0.01761871629664313,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)": -0.030896820485917815,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)": -0.06900008738329572,
        "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)": -0.07407414533054373,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])": -0.01761871629664313,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)": -0.025092328329446432,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)": -0.08118965587851308,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])": -0.01761871629664313,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)": -0.01761871629664313,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)": 1.7199593295417968,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)": -0.025092328329446432,
        "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": -0.15774637104501066,
        "org.apache.commons.math3.linear$AbstractRealMatrix#toString()": -0.04022566111956666,
        "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()": -0.24380286087633496,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.01761871629664313,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.01761871629664313,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.05138441670688326,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.01761871629664313,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.04022566111956666,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.01761871629664313,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.24587702271900744,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.08783094149030488,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.01761871629664313,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.025092328329446432,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#end()": -0.15356030759610628,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#start(int,int,int,int,int,int)": -0.15356030759610628,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#visit(int,int,double)": -0.15356030759610628,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#end()": -0.06634295607854801,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#start(int,int,int,int,int,int)": -0.06634295607854801,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#visit(int,int,double)": -0.06634295607854801,
        "org.apache.commons.math3.linear$AbstractRealMatrix$3#visit(int,int,double)": -0.03089682048591791,
        "org.apache.commons.math3.linear$AbstractRealMatrix$4#start(int,int,int,int,int,int)": -0.08995655352704857,
        "org.apache.commons.math3.linear$AbstractRealMatrix$4#visit(int,int,double)": -0.08995655352704857,
        "org.apache.commons.math3.linear$AbstractRealMatrix$5#visit(int,int,double)": -0.24380286087633496,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field)": -0.025092328329446432,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,int,int)": -0.11295716266553252,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])": -0.13592849458040115,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)": -0.10572500577740074,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])": -0.11985338370022741,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)": -0.07887626513231051,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": -0.025092328329446432,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()": -0.025092328329446432,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])": -0.13592849458040115,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyOut()": -0.1093868157244442,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#createMatrix(int,int)": -0.07887626513231051,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()": -0.17762791163573444,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getData()": -0.10572500577740074,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getDataRef()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)": -0.16049444444960043,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()": -0.17762791163573444,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": -0.01761871629664313,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": -0.025092328329446432,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": -0.01761871629664313,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)": -0.11815782749926476,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": -0.13592849458040115,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": -0.01761871629664313,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.01761871629664313,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.01761871629664313,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.01761871629664313,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.01761871629664313,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.025092328329446432,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.01761871629664313,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.08783094149030488,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.025092328329446432,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix()": -0.035837312617281465,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[])": -0.035837312617281465,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])": 1.5006799682077436,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)": -0.20666020378871106,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)": 1.4711811002686574,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)": -0.025092328329446432,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()": -0.06359328104382123,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])": 1.4989044099219653,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()": -0.27872330366899223,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)": -0.2729268654690405,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()": 0.08266343520363562,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getData()": -0.2719538113337459,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getDataRef()": 0.352682403200414,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)": 1.497134232399455,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()": 0.08266343520363562,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)": -0.06073922289624816,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#operate(double[])": -0.12483597881842239,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#preMultiply(double[])": -0.01761871629664313,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)": 1.4788547485402959,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)": 1.4989044099219653,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)": -0.01761871629664313,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.01761871629664313,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.01761871629664313,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.14639849510252423,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.01761871629664313,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.035837312617281465,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.01761871629664313,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.24484127721101745,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.08783094149030488,
        "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()": 1.4118628518956031,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector()": -0.030896820485917815,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[])": 1.5096411555128428,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)": 1.5224355140970607,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],double[])": -0.01761871629664313,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],int,int)": -0.01761871629664313,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],org.apache.commons.math3.linear.ArrayRealVector)": -0.01761871629664313,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int)": 1.577238255581615,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int,double)": -0.030896820485917815,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[])": -0.01761871629664313,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[],int,int)": -0.01761871629664313,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector)": -0.01761871629664313,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,boolean)": 1.6203356539076403,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,double[])": -0.01761871629664313,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.ArrayRealVector)": -0.030896820485917815,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.RealVector)": -0.025092328329446432,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector)": -0.01761871629664313,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.ArrayRealVector)": -0.01761871629664313,
        "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)": -0.04792075514511846,
        "org.apache.commons.math3.linear$ArrayRealVector#addToEntry(int,double)": -0.017618716296643244,
        "org.apache.commons.math3.linear$ArrayRealVector#append(double)": -0.025092328329446432,
        "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.ArrayRealVector)": -0.01761871629664313,
        "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.RealVector)": -0.025092328329446432,
        "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)": 1.5950035826569942,
        "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)": -0.04792075514511846,
        "org.apache.commons.math3.linear$ArrayRealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)": -0.07650612413199494,
        "org.apache.commons.math3.linear$ArrayRealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": -0.12319181668279264,
        "org.apache.commons.math3.linear$ArrayRealVector#copy()": 1.6215170993810473,
        "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)": 1.643649388420768,
        "org.apache.commons.math3.linear$ArrayRealVector#ebeDivide(org.apache.commons.math3.linear.RealVector)": -0.054655788961914996,
        "org.apache.commons.math3.linear$ArrayRealVector#ebeMultiply(org.apache.commons.math3.linear.RealVector)": -0.07157443230708811,
        "org.apache.commons.math3.linear$ArrayRealVector#equals(java.lang.Object)": -0.13438512237558486,
        "org.apache.commons.math3.linear$ArrayRealVector#getDataRef()": -0.13592849458040113,
        "org.apache.commons.math3.linear$ArrayRealVector#getDimension()": 0.12964653201663234,
        "org.apache.commons.math3.linear$ArrayRealVector#getDistance(org.apache.commons.math3.linear.RealVector)": -0.030896820485917815,
        "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)": 0.1683895891809245,
        "org.apache.commons.math3.linear$ArrayRealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)": -0.025092328329446432,
        "org.apache.commons.math3.linear$ArrayRealVector#getL1Norm()": -0.025092328329446432,
        "org.apache.commons.math3.linear$ArrayRealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)": -0.025092328329446432,
        "org.apache.commons.math3.linear$ArrayRealVector#getLInfNorm()": -0.025092328329446432,
        "org.apache.commons.math3.linear$ArrayRealVector#getNorm()": -0.1404843524690336,
        "org.apache.commons.math3.linear$ArrayRealVector#getSubVector(int,int)": -0.030896820485917815,
        "org.apache.commons.math3.linear$ArrayRealVector#hashCode()": -0.030896820485917815,
        "org.apache.commons.math3.linear$ArrayRealVector#isInfinite()": -0.025092328329446432,
        "org.apache.commons.math3.linear$ArrayRealVector#isNaN()": -0.13592849458040113,
        "org.apache.commons.math3.linear$ArrayRealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)": -0.030896820485917815,
        "org.apache.commons.math3.linear$ArrayRealVector#mapAddToSelf(double)": -0.02509232832944641,
        "org.apache.commons.math3.linear$ArrayRealVector#mapDivideToSelf(double)": -0.03089682048591791,
        "org.apache.commons.math3.linear$ArrayRealVector#mapMultiplyToSelf(double)": 0.3206532547769888,
        "org.apache.commons.math3.linear$ArrayRealVector#mapSubtractToSelf(double)": -0.02509232832944641,
        "org.apache.commons.math3.linear$ArrayRealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": -0.03089682048591791,
        "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)": -0.030896820485917815,
        "org.apache.commons.math3.linear$ArrayRealVector#projection(org.apache.commons.math3.linear.RealVector)": -0.025092328329446432,
        "org.apache.commons.math3.linear$ArrayRealVector#set(double)": -0.1280771260564435,
        "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)": -0.16986731031615268,
        "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,double[])": -0.08566334352034383,
        "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,org.apache.commons.math3.linear.RealVector)": -0.08783094149030488,
        "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)": 1.6488226922845126,
        "org.apache.commons.math3.linear$ArrayRealVector#toArray()": 0.2721998528925088,
        "org.apache.commons.math3.linear$ArrayRealVector#toString()": -0.01761871629664313,
        "org.apache.commons.math3.linear$ArrayRealVector#unitVector()": -0.025092328329446432,
        "org.apache.commons.math3.linear$ArrayRealVector#unitize()": -0.025092328329446432,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(int,int,org.apache.commons.math3.FieldElement[][],boolean)": -0.11295716266553252,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)": -0.09808938167371026,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.FieldElement[][])": -0.11295716266553252,
        "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.BlockFieldMatrix)": -0.035837312617281465,
        "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)": -0.025092328329446432,
        "org.apache.commons.math3.linear$BlockFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#blockHeight(int)": -0.12319181668279278,
        "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)": -0.1312588962182799,
        "org.apache.commons.math3.linear$BlockFieldMatrix#copy()": -0.01761871629664313,
        "org.apache.commons.math3.linear$BlockFieldMatrix#copyBlockPart(org.apache.commons.math3.FieldElement[],int,int,int,int,int,org.apache.commons.math3.FieldElement[],int,int,int)": -0.030896820485917815,
        "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)": -0.09808938167371026,
        "org.apache.commons.math3.linear$BlockFieldMatrix#createMatrix(int,int)": -0.01761871629664313,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumn(int)": -0.04022566111956666,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()": -0.12319181668279278,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnMatrix(int)": -0.030896820485917815,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnVector(int)": -0.030896820485917815,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getData()": -0.04022566111956666,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)": -0.10004067045820332,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRow(int)": -0.04022566111956666,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()": -0.12483597881842257,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowMatrix(int)": -0.035837312617281465,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowVector(int)": -0.030896820485917815,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getSubMatrix(int,int,int,int)": -0.030896820485917815,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.BlockFieldMatrix)": -0.04792075514511846,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)": -0.04422180493878139,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": -0.030896820485917815,
        "org.apache.commons.math3.linear$BlockFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": -0.025092328329446432,
        "org.apache.commons.math3.linear$BlockFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)": -0.035837312617281465,
        "org.apache.commons.math3.linear$BlockFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)": -0.01761871629664313,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])": -0.035837312617281465,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)": -0.025092328329446432,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": -0.025092328329446432,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)": -0.025092328329446432,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)": -0.04022566111956666,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])": -0.035837312617281465,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)": -0.025092328329446432,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": -0.025092328329446432,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)": -0.025092328329446432,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": -0.025092328329446432,
        "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.BlockFieldMatrix)": -0.025092328329446432,
        "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)": -0.01761871629664313,
        "org.apache.commons.math3.linear$BlockFieldMatrix#toBlocksLayout(org.apache.commons.math3.FieldElement[][])": -0.11295716266553252,
        "org.apache.commons.math3.linear$BlockFieldMatrix#transpose()": -0.030896820485917815,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.025092328329446432,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.01761871629664313,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.01761871629664313,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.025092328329446432,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.01761871629664313,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.01761871629664313,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.01761871629664313,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.01761871629664313,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])": -0.21799433855964173,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)": -0.1672263437143877,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)": -0.23856967224073003,
        "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)": -0.035837312617281465,
        "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)": -0.025092328329446432,
        "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)": -0.01761871629664313,
        "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)": -0.24587702271900747,
        "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)": -0.2540701849131224,
        "org.apache.commons.math3.linear$BlockRealMatrix#copy()": -0.04022566111956666,
        "org.apache.commons.math3.linear$BlockRealMatrix#copyBlockPart(double[],int,int,int,int,int,double[],int,int,int)": -0.035837312617281465,
        "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)": -0.19007966976744176,
        "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)": -0.01761871629664313,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumn(int)": -0.08345072235910933,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()": -0.24587702271900747,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)": -0.030896820485917815,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)": -0.030896820485917815,
        "org.apache.commons.math3.linear$BlockRealMatrix#getData()": -0.16455642119041064,
        "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)": -0.1264642313185993,
        "org.apache.commons.math3.linear$BlockRealMatrix#getFrobeniusNorm()": -0.01761871629664313,
        "org.apache.commons.math3.linear$BlockRealMatrix#getNorm()": -0.0899565535270486,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRow(int)": -0.04022566111956666,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()": -0.24691012617089703,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)": -0.035837312617281465,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)": -0.030896820485917815,
        "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)": -0.035837312617281465,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)": -0.066342956078548,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": -0.066342956078548,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#operate(double[])": -0.12319181668279264,
        "org.apache.commons.math3.linear$BlockRealMatrix#preMultiply(double[])": -0.025092328329446432,
        "org.apache.commons.math3.linear$BlockRealMatrix#scalarAdd(double)": -0.035837312617281465,
        "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)": -0.01761871629664313,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])": -0.05138441670688326,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)": -0.025092328329446432,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)": -0.025092328329446432,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)": -0.025092328329446432,
        "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)": -0.0899565535270486,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRow(int,double[])": -0.035837312617281465,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)": -0.025092328329446432,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)": -0.025092328329446432,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)": -0.025092328329446432,
        "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)": -0.025092328329446432,
        "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)": -0.08118965587851308,
        "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": -0.08783094149030488,
        "org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])": -0.21799433855964173,
        "org.apache.commons.math3.linear$BlockRealMatrix#transpose()": -0.09808938167371026,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.054655788961914996,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.01761871629664313,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.030896820485917815,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.035837312617281465,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.01761871629664313,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.01761871629664313,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.01761871629664313,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.01761871629664313,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)": -0.11985338370022741,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getExpectedColumnDimension()": -0.01761871629664313,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getExpectedRowDimension()": -0.01761871629664313,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getWrongColumnDimension()": -0.01761871629664313,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getWrongRowDimension()": -0.01761871629664313,
        "org.apache.commons.math3.linear$MatrixUtils#MatrixUtils()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)": -0.07157443230708811,
        "org.apache.commons.math3.linear$MatrixUtils#checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": -0.1038570447547867,
        "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)": 1.402534443278357,
        "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)": 1.429248517814048,
        "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": -0.21237552399529094,
        "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)": 1.4033078498021294,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)": -0.121531159172681,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])": -0.04022566111956666,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": -0.18267658200912346,
        "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])": -0.01761871629664313,
        "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])": -0.066342956078548,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)": -0.025092328329446432,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.Field,int,int)": -0.025092328329446432,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])": -0.01761871629664313,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldVector(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])": -0.07650612413199494,
        "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)": -0.13282872887303387,
        "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])": -0.23856967224073003,
        "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)": -0.20318176404621535,
        "org.apache.commons.math3.linear$MatrixUtils#createRealVector(double[])": -0.01761871629664313,
        "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])": -0.01761871629664313,
        "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])": -0.01761871629664313,
        "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)": -0.01761871629664313,
        "org.apache.commons.math3.linear$MatrixUtils#deserializeRealVector(java.lang.Object,java.lang.String,java.io.ObjectInputStream)": -0.01761871629664313,
        "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)": -0.01761871629664313,
        "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)": -0.01761871629664313,
        "org.apache.commons.math3.linear$MatrixUtils#serializeRealVector(org.apache.commons.math3.linear.RealVector,java.io.ObjectOutputStream)": -0.01761871629664313,
        "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)": -0.01761871629664313,
        "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)": -0.01761871629664313,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#MatrixUtils$BigFractionMatrixConverter()": -0.07157443230708793,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()": -0.07157443230708811,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#start(int,int,int,int,int,int)": -0.07157443230708793,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#visit(int,int,org.apache.commons.math3.fraction.BigFraction)": -0.07157443230708793,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#MatrixUtils$FractionMatrixConverter()": -0.017618716296643244,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()": -0.01761871629664313,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#start(int,int,int,int,int,int)": -0.017618716296643244,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#visit(int,int,org.apache.commons.math3.fraction.Fraction)": -0.017618716296643244,
        "org.apache.commons.math3.linear$NonSquareMatrixException#NonSquareMatrixException(int,int)": -0.06359328104382123,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)": -0.10572500577740074,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix)": -0.054655788961914996,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)": -0.025092328329446432,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)": -0.10385704475478663,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()": -0.025092328329446432,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)": -0.04792075514511846,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()": -0.10385704475478663,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)": -0.10004067045820332,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()": -0.10385704475478663,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)": -0.035837312617281465,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": -0.035837312617281465,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)": -0.1038570447547867,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)": -0.04422180493878139,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": -0.04422180493878139,
        "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()": -0.05819610200096814,
        "org.apache.commons.math3.linear$RealLinearOperator#isTransposable()": 0.0,
        "org.apache.commons.math3.linear$RealLinearOperator#operateTranspose(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector#RealVector()": 0.047521321804630756,
        "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)": -0.01761871629664313,
        "org.apache.commons.math3.linear$RealVector#addToEntry(int,double)": -0.01761871629664313,
        "org.apache.commons.math3.linear$RealVector#checkIndex(int)": -0.07887626513231051,
        "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)": -0.05138441670688326,
        "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)": -0.04422180493878139,
        "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)": -0.030896820485917815,
        "org.apache.commons.math3.linear$RealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": -0.04022566111956666,
        "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)": -0.04422180493878139,
        "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)": -0.01761871629664313,
        "org.apache.commons.math3.linear$RealVector#getDistance(org.apache.commons.math3.linear.RealVector)": -0.01761871629664313,
        "org.apache.commons.math3.linear$RealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)": -0.01761871629664313,
        "org.apache.commons.math3.linear$RealVector#getL1Norm()": -0.025092328329446432,
        "org.apache.commons.math3.linear$RealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)": -0.01761871629664313,
        "org.apache.commons.math3.linear$RealVector#getLInfNorm()": -0.025092328329446432,
        "org.apache.commons.math3.linear$RealVector#getMaxIndex()": -0.030896820485917815,
        "org.apache.commons.math3.linear$RealVector#getMaxValue()": -0.030896820485917815,
        "org.apache.commons.math3.linear$RealVector#getMinIndex()": -0.030896820485917815,
        "org.apache.commons.math3.linear$RealVector#getMinValue()": -0.030896820485917815,
        "org.apache.commons.math3.linear$RealVector#getNorm()": -0.025092328329446432,
        "org.apache.commons.math3.linear$RealVector#iterator()": -0.05138441670688326,
        "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)": -0.030896820485917815,
        "org.apache.commons.math3.linear$RealVector#mapAdd(double)": -0.025092328329446432,
        "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#mapDivide(double)": -0.04422180493878139,
        "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)": -0.030896820485917815,
        "org.apache.commons.math3.linear$RealVector#mapMultiply(double)": 1.6636402540607453,
        "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)": -0.030896820485917815,
        "org.apache.commons.math3.linear$RealVector#mapSubtract(double)": -0.035837312617281465,
        "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)": -0.025092328329446432,
        "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": -0.035837312617281465,
        "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)": -0.030896820485917815,
        "org.apache.commons.math3.linear$RealVector#set(double)": 0.0,
        "org.apache.commons.math3.linear$RealVector#sparseIterator()": -0.035837312617281465,
        "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)": -0.01761871629664313,
        "org.apache.commons.math3.linear$RealVector#toArray()": 0.0,
        "org.apache.commons.math3.linear$RealVector#unitVector()": 0.0,
        "org.apache.commons.math3.linear$RealVector#unitize()": 0.0,
        "org.apache.commons.math3.linear$RealVector#unmodifiableRealVector(org.apache.commons.math3.linear.RealVector)": -0.1000406704582033,
        "org.apache.commons.math3.linear$RealVector$1#hasNext()": -0.05138441670688332,
        "org.apache.commons.math3.linear$RealVector$1#next()": -0.05138441670688332,
        "org.apache.commons.math3.linear$RealVector$1#remove()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#add(org.apache.commons.math3.linear.RealVector)": -0.02509232832944641,
        "org.apache.commons.math3.linear$RealVector$2#addToEntry(int,double)": -0.02509232832944641,
        "org.apache.commons.math3.linear$RealVector$2#append(double)": -0.02509232832944641,
        "org.apache.commons.math3.linear$RealVector$2#append(org.apache.commons.math3.linear.RealVector)": -0.02509232832944641,
        "org.apache.commons.math3.linear$RealVector$2#combine(double,double,org.apache.commons.math3.linear.RealVector)": -0.02509232832944641,
        "org.apache.commons.math3.linear$RealVector$2#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": -0.02509232832944641,
        "org.apache.commons.math3.linear$RealVector$2#copy()": -0.02509232832944641,
        "org.apache.commons.math3.linear$RealVector$2#cosine(org.apache.commons.math3.linear.RealVector)": -0.02509232832944641,
        "org.apache.commons.math3.linear$RealVector$2#dotProduct(org.apache.commons.math3.linear.RealVector)": -0.02509232832944641,
        "org.apache.commons.math3.linear$RealVector$2#ebeDivide(org.apache.commons.math3.linear.RealVector)": -0.02509232832944641,
        "org.apache.commons.math3.linear$RealVector$2#ebeMultiply(org.apache.commons.math3.linear.RealVector)": -0.02509232832944641,
        "org.apache.commons.math3.linear$RealVector$2#getDimension()": -0.04422180493878125,
        "org.apache.commons.math3.linear$RealVector$2#getDistance(org.apache.commons.math3.linear.RealVector)": -0.02509232832944641,
        "org.apache.commons.math3.linear$RealVector$2#getEntry(int)": -0.05138441670688332,
        "org.apache.commons.math3.linear$RealVector$2#getL1Distance(org.apache.commons.math3.linear.RealVector)": -0.02509232832944641,
        "org.apache.commons.math3.linear$RealVector$2#getL1Norm()": -0.02509232832944641,
        "org.apache.commons.math3.linear$RealVector$2#getLInfDistance(org.apache.commons.math3.linear.RealVector)": -0.02509232832944641,
        "org.apache.commons.math3.linear$RealVector$2#getLInfNorm()": -0.02509232832944641,
        "org.apache.commons.math3.linear$RealVector$2#getNorm()": -0.02509232832944641,
        "org.apache.commons.math3.linear$RealVector$2#getSubVector(int,int)": -0.02509232832944641,
        "org.apache.commons.math3.linear$RealVector$2#isInfinite()": -0.02509232832944641,
        "org.apache.commons.math3.linear$RealVector$2#isNaN()": -0.02509232832944641,
        "org.apache.commons.math3.linear$RealVector$2#iterator()": -0.035837312617281514,
        "org.apache.commons.math3.linear$RealVector$2#map(org.apache.commons.math3.analysis.UnivariateFunction)": -0.02509232832944641,
        "org.apache.commons.math3.linear$RealVector$2#mapAdd(double)": -0.02509232832944641,
        "org.apache.commons.math3.linear$RealVector$2#mapAddToSelf(double)": -0.02509232832944641,
        "org.apache.commons.math3.linear$RealVector$2#mapDivide(double)": -0.02509232832944641,
        "org.apache.commons.math3.linear$RealVector$2#mapDivideToSelf(double)": -0.02509232832944641,
        "org.apache.commons.math3.linear$RealVector$2#mapMultiply(double)": -0.02509232832944641,
        "org.apache.commons.math3.linear$RealVector$2#mapMultiplyToSelf(double)": -0.02509232832944641,
        "org.apache.commons.math3.linear$RealVector$2#mapSubtract(double)": -0.02509232832944641,
        "org.apache.commons.math3.linear$RealVector$2#mapSubtractToSelf(double)": -0.02509232832944641,
        "org.apache.commons.math3.linear$RealVector$2#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": -0.02509232832944641,
        "org.apache.commons.math3.linear$RealVector$2#outerProduct(org.apache.commons.math3.linear.RealVector)": -0.02509232832944641,
        "org.apache.commons.math3.linear$RealVector$2#projection(org.apache.commons.math3.linear.RealVector)": -0.02509232832944641,
        "org.apache.commons.math3.linear$RealVector$2#set(double)": -0.03089682048591791,
        "org.apache.commons.math3.linear$RealVector$2#setEntry(int,double)": -0.02509232832944641,
        "org.apache.commons.math3.linear$RealVector$2#setSubVector(int,org.apache.commons.math3.linear.RealVector)": -0.02509232832944641,
        "org.apache.commons.math3.linear$RealVector$2#sparseIterator()": -0.02509232832944641,
        "org.apache.commons.math3.linear$RealVector$2#subtract(org.apache.commons.math3.linear.RealVector)": -0.035837312617281514,
        "org.apache.commons.math3.linear$RealVector$2#toArray()": -0.02509232832944641,
        "org.apache.commons.math3.linear$RealVector$2#unitVector()": -0.02509232832944641,
        "org.apache.commons.math3.linear$RealVector$2#unitize()": -0.02509232832944641,
        "org.apache.commons.math3.linear$RealVector$2$1#hasNext()": -0.035837312617281514,
        "org.apache.commons.math3.linear$RealVector$2$1#next()": -0.035837312617281514,
        "org.apache.commons.math3.linear$RealVector$2$1#remove()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$2#hasNext()": -0.02509232832944641,
        "org.apache.commons.math3.linear$RealVector$2$2#next()": -0.02509232832944641,
        "org.apache.commons.math3.linear$RealVector$2$2#remove()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#RealVector$2$UnmodifiableEntry(org.apache.commons.math3.linear.RealVector$2)": -0.04422180493878125,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#getValue()": -0.04422180493878125,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#setValue(double)": -0.035837312617281514,
        "org.apache.commons.math3.linear$RealVector$Entry#RealVector$Entry(org.apache.commons.math3.linear.RealVector)": -0.07157443230708811,
        "org.apache.commons.math3.linear$RealVector$Entry#getIndex()": -0.06900008738329588,
        "org.apache.commons.math3.linear$RealVector$Entry#getValue()": -0.06073922289624816,
        "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)": -0.07157443230708793,
        "org.apache.commons.math3.linear$RealVector$Entry#setValue(double)": -0.025092328329446432,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#RealVector$SparseEntryIterator(org.apache.commons.math3.linear.RealVector)": -0.035837312617281465,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)": -0.035837312617281465,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()": -0.035837312617281465,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()": -0.035837312617281465,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#remove()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat()": -0.05138441670688326,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)": 0.0582955280133165,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)": 1.4040819656402213,
        "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector)": -0.0899565535270486,
        "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector,java.lang.StringBuffer,java.text.FieldPosition)": -0.0899565535270486,
        "org.apache.commons.math3.linear$RealVectorFormat#getAvailableLocales()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#getFormat()": -0.02509232832944641,
        "org.apache.commons.math3.linear$RealVectorFormat#getInstance()": 1.4118628518956031,
        "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)": 1.4040819656402213,
        "org.apache.commons.math3.linear$RealVectorFormat#getPrefix()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#getSeparator()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#getSuffix()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String)": -0.10004067045820332,
        "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String,java.text.ParsePosition)": -0.1147104981397868,
        "org.apache.commons.math3.optimization$GoalType#<clinit>()": 1.5921151820964816,
        "org.apache.commons.math3.optimization$GoalType#GoalType(java.lang.String,int)": 0.24632874446957687,
        "org.apache.commons.math3.optimization$PointValuePair#PointValuePair(double[],double)": 1.6215170993810473,
        "org.apache.commons.math3.optimization$PointValuePair#PointValuePair(double[],double,boolean)": 1.6215170993810473,
        "org.apache.commons.math3.optimization$PointValuePair#getPoint()": 1.6527736562856123,
        "org.apache.commons.math3.optimization$PointValuePair#getPointRef()": -0.1019627248986392,
        "org.apache.commons.math3.optimization.linear$AbstractLinearOptimizer#AbstractLinearOptimizer()": 1.7300434464729513,
        "org.apache.commons.math3.optimization.linear$AbstractLinearOptimizer#getConstraints()": 0.3842570088460465,
        "org.apache.commons.math3.optimization.linear$AbstractLinearOptimizer#getFunction()": 0.3842570088460465,
        "org.apache.commons.math3.optimization.linear$AbstractLinearOptimizer#getGoalType()": 0.3842570088460465,
        "org.apache.commons.math3.optimization.linear$AbstractLinearOptimizer#getIterations()": 0.0,
        "org.apache.commons.math3.optimization.linear$AbstractLinearOptimizer#getMaxIterations()": 0.0,
        "org.apache.commons.math3.optimization.linear$AbstractLinearOptimizer#incrementIterationsCounter()": 1.7339586452313434,
        "org.apache.commons.math3.optimization.linear$AbstractLinearOptimizer#optimize(org.apache.commons.math3.optimization.linear.LinearObjectiveFunction,java.util.Collection,org.apache.commons.math3.optimization.GoalType,boolean)": 1.7300434464729513,
        "org.apache.commons.math3.optimization.linear$AbstractLinearOptimizer#restrictToNonNegative()": 0.3842570088460465,
        "org.apache.commons.math3.optimization.linear$AbstractLinearOptimizer#setMaxIterations(int)": 0.3842570088460465,
        "org.apache.commons.math3.optimization.linear$LinearConstraint#LinearConstraint(double[],double,org.apache.commons.math3.optimization.linear.Relationship,double[],double)": 0.0,
        "org.apache.commons.math3.optimization.linear$LinearConstraint#LinearConstraint(double[],org.apache.commons.math3.optimization.linear.Relationship,double)": 1.7219106183262896,
        "org.apache.commons.math3.optimization.linear$LinearConstraint#LinearConstraint(org.apache.commons.math3.linear.RealVector,double,org.apache.commons.math3.optimization.linear.Relationship,org.apache.commons.math3.linear.RealVector,double)": 0.0,
        "org.apache.commons.math3.optimization.linear$LinearConstraint#LinearConstraint(org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.optimization.linear.Relationship,double)": 0.3761241806993848,
        "org.apache.commons.math3.optimization.linear$LinearConstraint#equals(java.lang.Object)": -0.01761871629664313,
        "org.apache.commons.math3.optimization.linear$LinearConstraint#getCoefficients()": 0.3761241806993848,
        "org.apache.commons.math3.optimization.linear$LinearConstraint#getRelationship()": 0.3761241806993848,
        "org.apache.commons.math3.optimization.linear$LinearConstraint#getValue()": 0.3761241806993848,
        "org.apache.commons.math3.optimization.linear$LinearConstraint#hashCode()": 0.0,
        "org.apache.commons.math3.optimization.linear$LinearConstraint#readObject(java.io.ObjectInputStream)": -0.01761871629664313,
        "org.apache.commons.math3.optimization.linear$LinearConstraint#writeObject(java.io.ObjectOutputStream)": -0.01761871629664313,
        "org.apache.commons.math3.optimization.linear$LinearObjectiveFunction#LinearObjectiveFunction(double[],double)": 1.7219106183262896,
        "org.apache.commons.math3.optimization.linear$LinearObjectiveFunction#LinearObjectiveFunction(org.apache.commons.math3.linear.RealVector,double)": 0.3761241806993848,
        "org.apache.commons.math3.optimization.linear$LinearObjectiveFunction#equals(java.lang.Object)": -0.01761871629664313,
        "org.apache.commons.math3.optimization.linear$LinearObjectiveFunction#getCoefficients()": 0.3761241806993848,
        "org.apache.commons.math3.optimization.linear$LinearObjectiveFunction#getConstantTerm()": 0.3761241806993848,
        "org.apache.commons.math3.optimization.linear$LinearObjectiveFunction#getValue(double[])": 1.7388103441214868,
        "org.apache.commons.math3.optimization.linear$LinearObjectiveFunction#getValue(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.optimization.linear$LinearObjectiveFunction#hashCode()": 0.0,
        "org.apache.commons.math3.optimization.linear$LinearObjectiveFunction#readObject(java.io.ObjectInputStream)": -0.01761871629664313,
        "org.apache.commons.math3.optimization.linear$LinearObjectiveFunction#writeObject(java.io.ObjectOutputStream)": -0.01761871629664313,
        "org.apache.commons.math3.optimization.linear$NoFeasibleSolutionException#NoFeasibleSolutionException()": -0.030896820485917815,
        "org.apache.commons.math3.optimization.linear$Relationship#<clinit>()": 1.7219106183262896,
        "org.apache.commons.math3.optimization.linear$Relationship#Relationship(java.lang.String,int,java.lang.String)": 0.3761241806993848,
        "org.apache.commons.math3.optimization.linear$Relationship#oppositeRelationship()": 1.7841626873827185,
        "org.apache.commons.math3.optimization.linear$Relationship#toString()": 0.0,
        "org.apache.commons.math3.optimization.linear$Relationship$1#<clinit>()": 0.4383762497558136,
        "org.apache.commons.math3.optimization.linear$SimplexSolver#SimplexSolver()": 1.7300434464729513,
        "org.apache.commons.math3.optimization.linear$SimplexSolver#SimplexSolver(double,int)": 1.7300434464729513,
        "org.apache.commons.math3.optimization.linear$SimplexSolver#doIteration(org.apache.commons.math3.optimization.linear.SimplexTableau)": 1.7343366564796563,
        "org.apache.commons.math3.optimization.linear$SimplexSolver#doOptimize()": 1.7300434464729513,
        "org.apache.commons.math3.optimization.linear$SimplexSolver#getPivotColumn(org.apache.commons.math3.optimization.linear.SimplexTableau)": 1.7343366564796563,
        "org.apache.commons.math3.optimization.linear$SimplexSolver#getPivotRow(org.apache.commons.math3.optimization.linear.SimplexTableau,int)": 1.7343366564796563,
        "org.apache.commons.math3.optimization.linear$SimplexSolver#solvePhase1(org.apache.commons.math3.optimization.linear.SimplexTableau)": 1.7300434464729513,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#SimplexTableau(org.apache.commons.math3.optimization.linear.LinearObjectiveFunction,java.util.Collection,org.apache.commons.math3.optimization.GoalType,boolean,double)": -0.035837312617281465,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#SimplexTableau(org.apache.commons.math3.optimization.linear.LinearObjectiveFunction,java.util.Collection,org.apache.commons.math3.optimization.GoalType,boolean,double,int)": 1.7219106183262896,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#copyArray(double[],double[])": 1.7219106183262896,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#createTableau(boolean)": 1.7219106183262896,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#divideRow(int,double)": 1.7343366564796563,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#dropPhase1Objective()": 1.7343366564796563,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#equals(java.lang.Object)": -0.01761871629664313,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getArtificialVariableOffset()": 1.7321690585096952,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getBasicRow(int)": 1.7343366564796563,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getConstraintTypeCounts(org.apache.commons.math3.optimization.linear.Relationship)": 1.7219106183262896,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getData()": -0.030896820485917815,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getEntry(int,int)": 1.7279571099784659,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getHeight()": 1.7300434464729513,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getInvertedCoefficientSum(org.apache.commons.math3.linear.RealVector)": 1.748425567692912,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getNumArtificialVariables()": 0.3761241806993848,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getNumDecisionVariables()": 0.0,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getNumObjectiveFunctions()": 0.3761241806993848,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getNumSlackVariables()": 0.3761241806993848,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getOriginalNumDecisionVariables()": 1.7219106183262896,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getRhsOffset()": 1.7321690585096952,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getSlackVariableOffset()": 1.7279571099784659,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getSolution()": 1.7388103441214868,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#getWidth()": 1.7279571099784659,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#hashCode()": 0.0,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#initializeColumnLabels()": 1.7219106183262896,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#isOptimal()": 1.7300434464729513,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#normalize(org.apache.commons.math3.optimization.linear.LinearConstraint)": 1.7219106183262896,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#normalizeConstraints(java.util.Collection)": 1.7219106183262896,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#readObject(java.io.ObjectInputStream)": -0.01761871629664313,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#setEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#subtractRow(int,int,double)": 1.7343366564796563,
        "org.apache.commons.math3.optimization.linear$SimplexTableau#writeObject(java.io.ObjectOutputStream)": -0.01761871629664313,
        "org.apache.commons.math3.optimization.linear$UnboundedSolutionException#UnboundedSolutionException()": -0.01761871629664313,
        "org.apache.commons.math3.util$CompositeFormat#CompositeFormat()": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#formatDouble(double,java.text.NumberFormat,java.lang.StringBuffer,java.text.FieldPosition)": -0.17248050314944496,
        "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()": -0.08345072235910933,
        "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)": -0.02885408856105054,
        "org.apache.commons.math3.util$CompositeFormat#parseAndIgnoreWhitespace(java.lang.String,java.text.ParsePosition)": -0.19610612702812596,
        "org.apache.commons.math3.util$CompositeFormat#parseFixedstring(java.lang.String,java.lang.String,java.text.ParsePosition)": -0.1937103476059867,
        "org.apache.commons.math3.util$CompositeFormat#parseNextCharacter(java.lang.String,java.text.ParsePosition)": -0.1961061270281259,
        "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,double,java.text.ParsePosition)": -0.08345072235910944,
        "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,java.text.NumberFormat,java.text.ParsePosition)": -0.19129493911894951,
        "org.apache.commons.math3.util$FastMath#<clinit>()": -1.2597558370659212,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0.0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": -0.017618716296643244,
        "org.apache.commons.math3.util$FastMath#abs(double)": -0.5926488173603487,
        "org.apache.commons.math3.util$FastMath#abs(float)": -0.035837312617281514,
        "org.apache.commons.math3.util$FastMath#abs(int)": -0.4081371481043967,
        "org.apache.commons.math3.util$FastMath#abs(long)": -0.024599728922661046,
        "org.apache.commons.math3.util$FastMath#acos(double)": -0.07887626513231051,
        "org.apache.commons.math3.util$FastMath#acosh(double)": -0.01761871629664313,
        "org.apache.commons.math3.util$FastMath#asin(double)": -0.07887626513231051,
        "org.apache.commons.math3.util$FastMath#asinh(double)": -0.01761871629664313,
        "org.apache.commons.math3.util$FastMath#atan(double)": -0.07650612413199494,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": -0.17506702605479105,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": -0.1711773077154873,
        "org.apache.commons.math3.util$FastMath#atanh(double)": -0.01761871629664313,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": -0.11644378389877047,
        "org.apache.commons.math3.util$FastMath#ceil(double)": -0.9060153986832149,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": -0.06359328104382134,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": -0.02509232832944641,
        "org.apache.commons.math3.util$FastMath#cos(double)": -0.31932003179225643,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": -0.37866992650483156,
        "org.apache.commons.math3.util$FastMath#cosh(double)": -0.08566334352034383,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": -0.15635974593925459,
        "org.apache.commons.math3.util$FastMath#exp(double)": -0.615252465891382,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": -0.9828741615670655,
        "org.apache.commons.math3.util$FastMath#expm1(double)": -0.06073922289624816,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": -0.08118965587851308,
        "org.apache.commons.math3.util$FastMath#floor(double)": -0.9997424287021026,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": -0.15774637104501066,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": -0.02509232832944641,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": -0.15356030759610625,
        "org.apache.commons.math3.util$FastMath#log(double)": -0.8981542904586894,
        "org.apache.commons.math3.util$FastMath#log(double,double)": -0.01761871629664313,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": -0.9845106730802204,
        "org.apache.commons.math3.util$FastMath#log10(double)": -0.1404843524690336,
        "org.apache.commons.math3.util$FastMath#log1p(double)": -0.05138441670688326,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0.0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": -0.5644195992414489,
        "org.apache.commons.math3.util$FastMath#max(float,float)": -0.02509232832944641,
        "org.apache.commons.math3.util$FastMath#max(int,int)": -0.35472568789926484,
        "org.apache.commons.math3.util$FastMath#max(long,long)": -0.017618716296643244,
        "org.apache.commons.math3.util$FastMath#min(double,double)": -0.3471214846425008,
        "org.apache.commons.math3.util$FastMath#min(float,float)": -0.02509232832944641,
        "org.apache.commons.math3.util$FastMath#min(int,int)": -0.5310289932125998,
        "org.apache.commons.math3.util$FastMath#min(long,long)": -0.06634295607854801,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": -0.06634295607854801,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": -0.03089682048591791,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": -0.025092328329446432,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": -0.01761871629664313,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": -0.40891853701084213,
        "org.apache.commons.math3.util$FastMath#polySine(double)": -0.40891853701084213,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": -0.9026492148975211,
        "org.apache.commons.math3.util$FastMath#random()": -0.08118965587851301,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": -0.04022566111956666,
        "org.apache.commons.math3.util$FastMath#rint(double)": -0.07887626513231051,
        "org.apache.commons.math3.util$FastMath#round(double)": -0.08118965587851308,
        "org.apache.commons.math3.util$FastMath#round(float)": -0.030896820485917815,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": -0.1312588962182799,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": -0.02509232832944641,
        "org.apache.commons.math3.util$FastMath#signum(double)": -0.05465578896191503,
        "org.apache.commons.math3.util$FastMath#signum(float)": -0.02509232832944641,
        "org.apache.commons.math3.util$FastMath#sin(double)": -0.3915501271694597,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": -0.3955310583627614,
        "org.apache.commons.math3.util$FastMath#sinh(double)": -0.08566334352034383,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": -0.9959415940410807,
        "org.apache.commons.math3.util$FastMath#tan(double)": -0.08566334352034383,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": -0.08566334352034383,
        "org.apache.commons.math3.util$FastMath#tanh(double)": -0.05138441670688326,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": -0.025092328329446432,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": -0.025092328329446432,
        "org.apache.commons.math3.util$FastMath#ulp(double)": -0.3272681469691431,
        "org.apache.commons.math3.util$FastMath#ulp(float)": -0.030896820485917815,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": -0.980144662420285,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": -0.9779592724910324,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": -0.9774126753049472,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0.0,
        "org.apache.commons.math3.util$MathUtils#MathUtils()": 0.0,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double)": -0.07650612413199494,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double[])": -0.01761871629664313,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)": 1.1476930151531133,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.17506702605479105,
        "org.apache.commons.math3.util$MathUtils#copySign(byte,byte)": -0.035837312617281465,
        "org.apache.commons.math3.util$MathUtils#copySign(int,int)": -0.035837312617281465,
        "org.apache.commons.math3.util$MathUtils#copySign(long,long)": -0.025092328329446432,
        "org.apache.commons.math3.util$MathUtils#copySign(short,short)": -0.025092328329446432,
        "org.apache.commons.math3.util$MathUtils#hash(double)": -0.13282872887303387,
        "org.apache.commons.math3.util$MathUtils#hash(double[])": -0.054655788961914996,
        "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)": -0.11295716266553252,
        "org.apache.commons.math3.util$MathUtils#reduce(double,double,double)": -0.04022566111956666,
        "org.apache.commons.math3.util$Pair#Pair(java.lang.Object,java.lang.Object)": 0.18129407636934458,
        "org.apache.commons.math3.util$Pair#Pair(org.apache.commons.math3.util.Pair)": 0.0,
        "org.apache.commons.math3.util$Pair#equals(java.lang.Object)": -0.01761871629664313,
        "org.apache.commons.math3.util$Pair#getKey()": 0.20814164084122544,
        "org.apache.commons.math3.util$Pair#getValue()": -0.2796825589186418,
        "org.apache.commons.math3.util$Pair#hashCode()": 0.0,
        "org.apache.commons.math3.util$Precision#<clinit>()": -0.2561934133359488,
        "org.apache.commons.math3.util$Precision#Precision()": 0.0,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,double)": 1.7238927814611067,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,int)": 1.7300434464729513,
        "org.apache.commons.math3.util$Precision#equals(double,double)": -0.2321952231576856,
        "org.apache.commons.math3.util$Precision#equals(double,double,double)": 1.7199593295417968,
        "org.apache.commons.math3.util$Precision#equals(double,double,int)": 1.324032152731502,
        "org.apache.commons.math3.util$Precision#equals(float,float)": -0.01761871629664313,
        "org.apache.commons.math3.util$Precision#equals(float,float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(float,float,int)": -0.17889904519812266,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)": -0.2300462922986527,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)": -0.12319181668279264,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)": -0.01761871629664313,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)": -0.17762791163573446,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)": 0.0,
        "org.apache.commons.math3.util$Precision#representableDelta(double,double)": -0.017618716296643244,
        "org.apache.commons.math3.util$Precision#round(double,int)": -0.01761871629664313,
        "org.apache.commons.math3.util$Precision#round(double,int,int)": -0.017618716296643244,
        "org.apache.commons.math3.util$Precision#round(float,int)": -0.01761871629664313,
        "org.apache.commons.math3.util$Precision#round(float,int,int)": -0.01761871629664313,
        "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)": -0.01761871629664313
    },
    "Math-34": {
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -1.9148063521289322,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": -0.11086695857329887,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -1.6103078340689159,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": -0.15610157092813415,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)": -0.11086695857329887,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": -0.1272515264049017,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": -0.32059435053197244,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.4273769673218558,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)": -0.19923681339812652,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.5781353830668288,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getBoundIsAllowed()": -0.039518624743662745,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getMax()": -0.039518624743662745,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": -0.3896134292509778,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.7773517176487317,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": -0.07028587342653525,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": -0.07028587342653525,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(java.lang.Number,java.lang.Number,java.lang.Number)": -0.2420237722190615,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)": -0.6472135954999579,
        "org.apache.commons.math3.exception$OutOfRangeException#getHi()": -0.039518624743662745,
        "org.apache.commons.math3.exception$OutOfRangeException#getLo()": -0.039518624743662745,
        "org.apache.commons.math3.genetics$AbstractListChromosome#AbstractListChromosome(java.lang.Object[])": -0.07028587342653522,
        "org.apache.commons.math3.genetics$AbstractListChromosome#AbstractListChromosome(java.util.List)": 1.5934213690353087,
        "org.apache.commons.math3.genetics$AbstractListChromosome#getLength()": -0.16273231739484761,
        "org.apache.commons.math3.genetics$AbstractListChromosome#getRepresentation()": -0.1691810865896799,
        "org.apache.commons.math3.genetics$AbstractListChromosome#toString()": -0.039518624743662745,
        "org.apache.commons.math3.genetics$BinaryChromosome#BinaryChromosome(java.lang.Integer[])": -0.07028587342653522,
        "org.apache.commons.math3.genetics$BinaryChromosome#BinaryChromosome(java.util.List)": 1.677796223103626,
        "org.apache.commons.math3.genetics$BinaryChromosome#checkValidity(java.util.List)": 1.6620711664497323,
        "org.apache.commons.math3.genetics$BinaryChromosome#isSame(org.apache.commons.math3.genetics.Chromosome)": -0.039518624743662745,
        "org.apache.commons.math3.genetics$BinaryChromosome#randomBinaryRepresentation(int)": 1.6851213932910425,
        "org.apache.commons.math3.genetics$Chromosome#Chromosome()": 0.22222088744645518,
        "org.apache.commons.math3.genetics$Chromosome#compareTo(org.apache.commons.math3.genetics.Chromosome)": -0.11086695857329887,
        "org.apache.commons.math3.genetics$Chromosome#findSameChromosome(org.apache.commons.math3.genetics.Population)": -0.03951862474366289,
        "org.apache.commons.math3.genetics$Chromosome#getFitness()": -0.12725152640490167,
        "org.apache.commons.math3.genetics$Chromosome#isSame(org.apache.commons.math3.genetics.Chromosome)": 0.0,
        "org.apache.commons.math3.genetics$Chromosome#searchForFitnessUpdate(org.apache.commons.math3.genetics.Population)": -0.039518624743662745,
        "org.apache.commons.math3.genetics$GeneticAlgorithm#<clinit>()": 1.6508189134103204,
        "org.apache.commons.math3.genetics$GeneticAlgorithm#GeneticAlgorithm(org.apache.commons.math3.genetics.CrossoverPolicy,double,org.apache.commons.math3.genetics.MutationPolicy,double,org.apache.commons.math3.genetics.SelectionPolicy)": -0.07028587342653522,
        "org.apache.commons.math3.genetics$GeneticAlgorithm#evolve(org.apache.commons.math3.genetics.Population,org.apache.commons.math3.genetics.StoppingCondition)": -0.07028587342653522,
        "org.apache.commons.math3.genetics$GeneticAlgorithm#getCrossoverPolicy()": -0.07028587342653525,
        "org.apache.commons.math3.genetics$GeneticAlgorithm#getCrossoverRate()": -0.07028587342653525,
        "org.apache.commons.math3.genetics$GeneticAlgorithm#getGenerationsEvolved()": -0.039518624743662745,
        "org.apache.commons.math3.genetics$GeneticAlgorithm#getMutationPolicy()": -0.07028587342653525,
        "org.apache.commons.math3.genetics$GeneticAlgorithm#getMutationRate()": -0.07028587342653525,
        "org.apache.commons.math3.genetics$GeneticAlgorithm#getRandomGenerator()": 1.6508189134103204,
        "org.apache.commons.math3.genetics$GeneticAlgorithm#getSelectionPolicy()": -0.07028587342653525,
        "org.apache.commons.math3.genetics$GeneticAlgorithm#nextGeneration(org.apache.commons.math3.genetics.Population)": -0.07028587342653522,
        "org.apache.commons.math3.genetics$GeneticAlgorithm#setRandomGenerator(org.apache.commons.math3.random.RandomGenerator)": 0.0,
        "org.apache.commons.math3.genetics$InvalidRepresentationException#InvalidRepresentationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.08193580021196346,
        "org.apache.commons.math3.genetics$ListPopulation#ListPopulation(int)": 1.6508189134103204,
        "org.apache.commons.math3.genetics$ListPopulation#ListPopulation(java.util.List,int)": 1.6077276031023715,
        "org.apache.commons.math3.genetics$ListPopulation#addChromosome(org.apache.commons.math3.genetics.Chromosome)": -0.10194613299794443,
        "org.apache.commons.math3.genetics$ListPopulation#addChromosomes(java.util.Collection)": 1.7614359964474122,
        "org.apache.commons.math3.genetics$ListPopulation#getChromosomeList()": -0.08193580021196345,
        "org.apache.commons.math3.genetics$ListPopulation#getChromosomes()": -0.09237202988746906,
        "org.apache.commons.math3.genetics$ListPopulation#getFittestChromosome()": -0.09237202988746906,
        "org.apache.commons.math3.genetics$ListPopulation#getPopulationLimit()": -0.11086695857329887,
        "org.apache.commons.math3.genetics$ListPopulation#getPopulationSize()": -0.09237202988746906,
        "org.apache.commons.math3.genetics$ListPopulation#iterator()": 0.43469493762943234,
        "org.apache.commons.math3.genetics$ListPopulation#setChromosomes(java.util.List)": 0.0,
        "org.apache.commons.math3.genetics$ListPopulation#setPopulationLimit(int)": -0.07028587342653522,
        "org.apache.commons.math3.genetics$ListPopulation#toString()": -0.039518624743662745,
        "org.apache.commons.math3.random$JDKRandomGenerator#JDKRandomGenerator()": 0.20769571298249867,
        "org.apache.commons.math3.random$JDKRandomGenerator#setSeed(int)": -0.05673674093045422,
        "org.apache.commons.math3.random$JDKRandomGenerator#setSeed(int[])": 0.0
    },
    "Math-35": {
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -1.6535868474497437,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": -0.10046611638030134,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -1.390092734480214,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": -0.14109677035394919,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)": -0.10046611638030115,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": -0.09243224312143324,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)": -0.17969520111993012,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.5062848403391997,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getBoundIsAllowed()": -0.03598259696384121,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getMax()": -0.03598259696384121,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": -0.3453495721083665,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.6791709081933084,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": -0.06385687741432777,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": -0.06385687741432777,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(java.lang.Number,java.lang.Number,java.lang.Number)": -0.21786089055987679,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)": -0.5645627283233504,
        "org.apache.commons.math3.exception$OutOfRangeException#getHi()": -0.03598259696384121,
        "org.apache.commons.math3.exception$OutOfRangeException#getLo()": -0.03598259696384121,
        "org.apache.commons.math3.exception.util$ArgUtils#ArgUtils()": 0.0,
        "org.apache.commons.math3.exception.util$ArgUtils#flatten(java.lang.Object[])": -1.8425875485605916,
        "org.apache.commons.math3.exception.util$ExceptionContext#ExceptionContext(java.lang.Throwable)": -1.8425875485605916,
        "org.apache.commons.math3.exception.util$ExceptionContext#addMessage(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -1.8407394265659827,
        "org.apache.commons.math3.exception.util$ExceptionContext#buildMessage(java.util.Locale,java.lang.String)": -0.09243224312143324,
        "org.apache.commons.math3.exception.util$ExceptionContext#deSerializeContext(java.io.ObjectInputStream)": -0.051595403646100824,
        "org.apache.commons.math3.exception.util$ExceptionContext#deSerializeMessages(java.io.ObjectInputStream)": -0.051595403646100824,
        "org.apache.commons.math3.exception.util$ExceptionContext#getKeys()": -0.051595403646100824,
        "org.apache.commons.math3.exception.util$ExceptionContext#getLocalizedMessage()": -0.035982596963841366,
        "org.apache.commons.math3.exception.util$ExceptionContext#getMessage()": -0.07438357361329338,
        "org.apache.commons.math3.exception.util$ExceptionContext#getMessage(java.util.Locale)": -0.08380165134593845,
        "org.apache.commons.math3.exception.util$ExceptionContext#getMessage(java.util.Locale,java.lang.String)": -0.035982596963841366,
        "org.apache.commons.math3.exception.util$ExceptionContext#getThrowable()": 0.0,
        "org.apache.commons.math3.exception.util$ExceptionContext#getValue(java.lang.String)": -0.06385687741432777,
        "org.apache.commons.math3.exception.util$ExceptionContext#nonSerializableReplacement(java.lang.Object)": -0.03598259696384121,
        "org.apache.commons.math3.exception.util$ExceptionContext#readObject(java.io.ObjectInputStream)": -0.05159540364610098,
        "org.apache.commons.math3.exception.util$ExceptionContext#serializeContext(java.io.ObjectOutputStream)": -0.05159540364610098,
        "org.apache.commons.math3.exception.util$ExceptionContext#serializeMessages(java.io.ObjectOutputStream)": -0.05159540364610098,
        "org.apache.commons.math3.exception.util$ExceptionContext#setValue(java.lang.String,java.lang.Object)": -0.10802756666342317,
        "org.apache.commons.math3.exception.util$ExceptionContext#writeObject(java.io.ObjectOutputStream)": -0.05159540364610098,
        "org.apache.commons.math3.exception.util$LocalizedFormats#<clinit>()": -1.9600070791711426,
        "org.apache.commons.math3.exception.util$LocalizedFormats#LocalizedFormats(java.lang.String,int,java.lang.String)": -1.9600070791711426,
        "org.apache.commons.math3.exception.util$LocalizedFormats#getLocalizedString(java.util.Locale)": -0.11520292994835613,
        "org.apache.commons.math3.exception.util$LocalizedFormats#getSourceString()": -0.051595403646100824,
        "org.apache.commons.math3.genetics$Chromosome#Chromosome()": -0.19937476435653045,
        "org.apache.commons.math3.genetics$Chromosome#compareTo(org.apache.commons.math3.genetics.Chromosome)": -0.10046611638030134,
        "org.apache.commons.math3.genetics$Chromosome#findSameChromosome(org.apache.commons.math3.genetics.Population)": -0.035982596963841366,
        "org.apache.commons.math3.genetics$Chromosome#getFitness()": -0.10802756666342317,
        "org.apache.commons.math3.genetics$Chromosome#isSame(org.apache.commons.math3.genetics.Chromosome)": 0.0,
        "org.apache.commons.math3.genetics$Chromosome#searchForFitnessUpdate(org.apache.commons.math3.genetics.Population)": -0.03598259696384121,
        "org.apache.commons.math3.genetics$ElitisticListPopulation#ElitisticListPopulation(int,double)": 1.0090792145231242,
        "org.apache.commons.math3.genetics$ElitisticListPopulation#ElitisticListPopulation(java.util.List,int,double)": 1.0532499037722198,
        "org.apache.commons.math3.genetics$ElitisticListPopulation#getElitismRate()": -0.08380165134593831,
        "org.apache.commons.math3.genetics$ElitisticListPopulation#nextGeneration()": -0.07438357361329338,
        "org.apache.commons.math3.genetics$ElitisticListPopulation#setElitismRate(double)": -0.0638568774143278,
        "org.apache.commons.math3.genetics$ListPopulation#ListPopulation(int)": 1.0074554933263484,
        "org.apache.commons.math3.genetics$ListPopulation#ListPopulation(java.util.List,int)": 1.0316814086438333,
        "org.apache.commons.math3.genetics$ListPopulation#addChromosome(org.apache.commons.math3.genetics.Chromosome)": -0.08380165134593831,
        "org.apache.commons.math3.genetics$ListPopulation#getChromosomes()": -0.08380165134593831,
        "org.apache.commons.math3.genetics$ListPopulation#getFittestChromosome()": -0.08380165134593831,
        "org.apache.commons.math3.genetics$ListPopulation#getPopulationLimit()": -0.08380165134593831,
        "org.apache.commons.math3.genetics$ListPopulation#getPopulationSize()": -0.08380165134593831,
        "org.apache.commons.math3.genetics$ListPopulation#iterator()": -0.03598259696384121,
        "org.apache.commons.math3.genetics$ListPopulation#setChromosomes(java.util.List)": 0.0,
        "org.apache.commons.math3.genetics$ListPopulation#setPopulationLimit(int)": 0.0,
        "org.apache.commons.math3.genetics$ListPopulation#toString()": 0.0
    },
    "Math-36": {},
    "Math-37": {},
    "Math-38": {},
    "Math-39": {},
    "Math-4": {
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)": -0.25059627502603055,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)": -0.2675779491143066,
        "org.apache.commons.math3.exception$DimensionMismatchException#getDimension()": -0.027667746681228955,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": -0.05425128069207119,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.1273702932585459,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": -0.01579685764378924,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.6798898833542165,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": -0.04884230290959235,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": -0.02248186427811416,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.5947766466983847,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": -0.06158848634045344,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": -0.14113470915727538,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.1714572445832048,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": -0.13748063570024427,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": -0.01579685764378924,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$NoDataException#NoDataException()": -0.056787223340681946,
        "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)": -0.09245636048900106,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int)": -0.015796857643789432,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int,org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": -0.06609089053160583,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getDirection()": -0.01579685764378924,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getIndex()": -0.01579685764378924,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getPrevious()": -0.01579685764378924,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getStrict()": -0.01579685764378924,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)": -0.07828197044012697,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": -0.056787223340681946,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)": -0.12474965797151287,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": -0.16069594396100553,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": -0.12474965797151287,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.1573694435859582,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": -0.18778242976073445,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.3042273684434231,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": -0.027667746681228955,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": -0.027667746681228955,
        "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet()": -0.09245636048900106,
        "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(double,double)": 1.7104798709962068,
        "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(java.util.Collection)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#IntervalsSet(org.apache.commons.math3.geometry.partitioning.BSPTree)": -0.09573437702535267,
        "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#asList()": -0.10805604215087963,
        "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)": -0.0890835480441594,
        "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#buildTree(double,double)": 1.7104798709962068,
        "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#computeGeometricalProperties()": -0.07440273933345308,
        "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getInf()": -0.027667746681228948,
        "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#getSup()": -0.027667746681228948,
        "org.apache.commons.math3.geometry.euclidean.oned$IntervalsSet#recurseList(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List,double,double)": -0.10805604215087963,
        "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#OrientedPoint(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean)": 0.3521260411276975,
        "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#copySelf()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getLocation()": -0.10508114955665304,
        "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#getOffset(org.apache.commons.math3.geometry.Vector)": -0.11240438270588995,
        "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#isDirect()": -0.1020397957538568,
        "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#revertSelf()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)": -0.08201006888258267,
        "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeHyperplane()": 1.6979124787546023,
        "org.apache.commons.math3.geometry.euclidean.oned$OrientedPoint#wholeSpace()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#SubOrientedPoint(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)": 1.6979124787546023,
        "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)": -0.09245636048900106,
        "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#getSize()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)": -0.09078240921003239,
        "org.apache.commons.math3.geometry.euclidean.oned$SubOrientedPoint#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)": -0.08382338814636066,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#<clinit>()": 1.6913342297189056,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double)": 0.3455477920920006,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double,org.apache.commons.math3.geometry.euclidean.oned.Vector1D,double,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double,org.apache.commons.math3.geometry.euclidean.oned.Vector1D,double,org.apache.commons.math3.geometry.euclidean.oned.Vector1D,double,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#Vector1D(double,org.apache.commons.math3.geometry.euclidean.oned.Vector1D,double,org.apache.commons.math3.geometry.euclidean.oned.Vector1D,double,org.apache.commons.math3.geometry.euclidean.oned.Vector1D,double,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#add(double,org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#add(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distance(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distance(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distance1(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distanceInf(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distanceInf(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distanceSq(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#distanceSq(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,org.apache.commons.math3.geometry.euclidean.oned.Vector1D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#dotProduct(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getNorm()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getNorm1()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getNormInf()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getNormSq()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getSpace()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getX()": 0.3455477920920006,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#getZero()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#hashCode()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isInfinite()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#isNaN()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#negate()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#normalize()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#scalarMultiply(double)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#subtract(double,org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#subtract(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#toString()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.oned$Vector1D#toString(java.text.NumberFormat)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#Line(org.apache.commons.math3.geometry.euclidean.threed.Line)": -0.01579685764378924,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 1.0297483512081886,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#closestPoint(org.apache.commons.math3.geometry.euclidean.threed.Line)": 1.0711752326448367,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 1.0628555004944762,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)": -0.015796857643789432,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 1.05787736715361,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#getAbscissa(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 1.0742586921390627,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()": -0.051608471111733056,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#getOrigin()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)": 1.0742586921390627,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)": -0.015796857643789432,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)": -0.056787223340681946,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 1.0297483512081886,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#revert()": -0.015796857643789432,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)": -0.056787223340681946,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)": 1.0742586921390627,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#wholeLine()": -0.015796857643789432,
        "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Line,org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet)": 0.19795764805090682,
        "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Segment)": -0.015796857643789432,
        "org.apache.commons.math3.geometry.euclidean.threed$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 1.0775534767234805,
        "org.apache.commons.math3.geometry.euclidean.threed$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 1.0742586921390627,
        "org.apache.commons.math3.geometry.euclidean.threed$SubLine#getSegments()": -0.03955330446306719,
        "org.apache.commons.math3.geometry.euclidean.threed$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean)": 1.0775534767234805,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()": 0.8799284832061434,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double)": -0.015796857643789432,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)": 0.01756657341118467,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.1511757575397185,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 1.021372404161195,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": -0.045931548541710936,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": -0.015796857643789432,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double[])": -0.03599159468487316,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(double,org.apache.commons.math3.geometry.Vector)": -0.015796857643789432,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)": -0.0682477415498088,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": -0.03599159468487316,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)": -0.09410663751507943,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": -0.087358429978359,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance(org.apache.commons.math3.geometry.Vector)": -0.06387320385089063,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": -0.022481864278114116,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance1(org.apache.commons.math3.geometry.Vector)": -0.015796857643789432,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance1(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": -0.015796857643789432,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceInf(org.apache.commons.math3.geometry.Vector)": -0.015796857643789432,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceInf(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": -0.015796857643789432,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceSq(org.apache.commons.math3.geometry.Vector)": -0.01579685764378924,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceSq(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": -0.015796857643789432,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)": 0.9977254145922874,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": -0.04284808904748497,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)": -0.087358429978359,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getAlpha()": -0.027667746681228948,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getDelta()": -0.015796857643789432,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()": 0.9833519620719469,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm1()": -0.022481864278114116,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNormInf()": -0.022481864278114116,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNormSq()": 0.1656613233474295,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getSpace()": -0.01579685764378924,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()": -0.1628872573140676,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()": -0.1628872573140676,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()": -0.1639752911782475,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZero()": -0.015796857643789432,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#hashCode()": -0.015796857643789432,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isInfinite()": -0.015796857643789432,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()": -0.09245636048900097,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#negate()": -0.03207762528032021,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#normalize()": -0.03599159468487316,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#orthogonal()": -0.07636257373324963,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#scalarMultiply(double)": -0.04884230290959235,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(double,org.apache.commons.math3.geometry.Vector)": -0.015796857643789432,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)": 1.0004783687433136,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#toArray()": -0.02248186427811416,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#toString()": -0.01579685764378924,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#toString(java.text.NumberFormat)": -0.01579685764378924,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(double,double,double,double)": -0.051608471111733056,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Line)": -0.08560558203686186,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)": -0.022481864278114116,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0.999095856463559,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#contains(org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": -0.015796857643789432,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#copySelf()": -0.08560558203686186,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#distance(org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": -0.015796857643789432,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#getAngle()": -0.08735842997835896,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.Vector)": -0.07440273933345308,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)": -0.0801636573750768,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#getOriginOffset()": -0.01579685764378924,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#getPointAt(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,double)": -0.015796857643789432,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#getReverse()": -0.045931548541710936,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#getTransform(java.awt.geom.AffineTransform)": -0.022481864278114116,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)": 1.019766153587418,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#isParallelTo(org.apache.commons.math3.geometry.euclidean.twod.Line)": -0.015796857643789432,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)": -0.022481864278114116,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0.999095856463559,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#revertSelf()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)": -0.04284808904748494,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#setAngle(double)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#setOriginOffset(double)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#toSpace(org.apache.commons.math3.geometry.Vector)": -0.087358429978359,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)": 1.0166143112330972,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#translateToPoint(org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeHyperplane()": -0.087358429978359,
        "org.apache.commons.math3.geometry.euclidean.twod$Line#wholeSpace()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#Line$LineTransform(java.awt.geom.AffineTransform)": -0.022481864278114116,
        "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.Vector)": -0.015796857643789432,
        "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)": -0.022481864278114116,
        "org.apache.commons.math3.geometry.euclidean.twod$Line$LineTransform#apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)": -0.015796857643789432,
        "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Segment)": -0.015796857643789432,
        "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 1.0742586921390627,
        "org.apache.commons.math3.geometry.euclidean.twod$SubLine#SubLine(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)": -0.09410663751507943,
        "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 1.0711752326448367,
        "org.apache.commons.math3.geometry.euclidean.twod$SubLine#buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)": -0.08201006888258248,
        "org.apache.commons.math3.geometry.euclidean.twod$SubLine#getSegments()": -0.03955330446306719,
        "org.apache.commons.math3.geometry.euclidean.twod$SubLine#intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean)": 1.0775534767234805,
        "org.apache.commons.math3.geometry.euclidean.twod$SubLine#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)": -0.08201006888258248,
        "org.apache.commons.math3.geometry.euclidean.twod$SubLine#split(org.apache.commons.math3.geometry.partitioning.Hyperplane)": -0.08560558203686186,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#<clinit>()": 0.970028278823357,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,double)": 0.10766636902839827,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#Vector2D(double[])": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#add(double,org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#add(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.Vector)": -0.1180109247229885,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distance1(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distanceInf(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distanceInf(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distanceSq(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#distanceSq(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#dotProduct(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getNorm()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getNorm1()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getNormInf()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getNormSq()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getSpace()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getX()": 0.10766636902839827,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getY()": 0.10766636902839827,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#getZero()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#hashCode()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isInfinite()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#isNaN()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#negate()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#normalize()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#scalarMultiply(double)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#subtract(double,org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#subtract(org.apache.commons.math3.geometry.Vector)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#toArray()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#toString()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.twod$Vector2D#toString(java.text.NumberFormat)": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion()": -0.09245636048900106,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(java.util.Collection)": -0.06387320385089063,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.BSPTree)": 0.34946390440158226,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#AbstractRegion(org.apache.commons.math3.geometry.partitioning.Hyperplane[])": 0.0,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)": -0.015796857643789432,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.Vector)": -0.09078240921003239,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Vector)": -0.1220875212453976,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#contains(org.apache.commons.math3.geometry.partitioning.Region)": -0.015796857643789432,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#copySelf()": -0.04284808904748497,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBarycenter()": -0.04884230290959235,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getBoundarySize()": -0.03955330446306719,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getSize()": -0.08382338814636066,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#getTree(boolean)": -0.11096940049446727,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)": -0.06387320385089063,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)": -0.015796857643789432,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty()": -0.08560558203686186,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)": -0.08560558203686186,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)": -0.015796857643789432,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides)": -0.08201006888258248,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform)": -0.015796857643789432,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setBarycenter(org.apache.commons.math3.geometry.Vector)": -0.08382338814636059,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#setSize(double)": -0.08382338814636059,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion#side(org.apache.commons.math3.geometry.partitioning.Hyperplane)": -0.08201006888258248,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$1#compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)": -0.06387320385089068,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)": -0.06387320385089068,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)": -0.06387320385089068,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$2#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)": -0.06387320385089068,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$3#<clinit>()": -0.08201006888258267,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#AbstractRegion$BoundaryBuilder()": -0.07636257373324962,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane[])": -0.07636257373324963,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)": -0.07636257373324963,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)": -0.07636257373324962,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$BoundaryBuilder#visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)": -0.07636257373324963,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#AbstractRegion$Sides()": -0.08201006888258267,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#minusFound()": -0.08201006888258267,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#plusFound()": -0.08201006888258267,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberMinusFound()": -0.08201006888258267,
        "org.apache.commons.math3.geometry.partitioning$AbstractRegion$Sides#rememberPlusFound()": -0.08201006888258267,
        "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#AbstractSubHyperplane(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)": 0.34946390440158226,
        "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)": -0.015796857643789432,
        "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#copySelf()": -0.09245636048900106,
        "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getHyperplane()": 0.12999521342007608,
        "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getRemainingRegion()": 0.14966372183493587,
        "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#getSize()": -0.07440273933345308,
        "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#isEmpty()": -0.08560558203686186,
        "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform)": -0.015796857643789432,
        "org.apache.commons.math3.geometry.partitioning$AbstractSubHyperplane#reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)": -0.07828197044012697,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree()": -0.0801636573750768,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(java.lang.Object)": 0.3468432691145492,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#BSPTree(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)": 0.3521260411276975,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane)": -0.08382338814636066,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane)": -0.07828197044012697,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#condense()": -0.09078240921003239,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#copySelf()": -0.09078240921003239,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)": -0.09078240921003239,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#getAttribute()": -0.12737029325854587,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#getCell(org.apache.commons.math3.geometry.Vector)": -0.1220875212453976,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#getCut()": -0.12737029325854587,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#getMinus()": -0.11382557130429749,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#getParent()": -0.06609089053160577,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#getPlus()": -0.11382557130429749,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)": -0.08016365737507687,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)": -0.087358429978359,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)": -0.087358429978359,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)": -0.087358429978359,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#setAttribute(java.lang.Object)": -0.09078240921003244,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)": -0.09078240921003239,
        "org.apache.commons.math3.geometry.partitioning$BSPTree#visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)": -0.087358429978359,
        "org.apache.commons.math3.geometry.partitioning$BSPTree$1#<clinit>()": -0.09078240921003244,
        "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#<clinit>()": -0.09078240921003239,
        "org.apache.commons.math3.geometry.partitioning$BSPTreeVisitor$Order#BSPTreeVisitor$Order(java.lang.String,int)": -0.09078240921003244,
        "org.apache.commons.math3.geometry.partitioning$Region$Location#<clinit>()": -0.1260650153979148,
        "org.apache.commons.math3.geometry.partitioning$Region$Location#Region$Location(java.lang.String,int)": -0.12606501539791481,
        "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#SubHyperplane$SplitSubHyperplane(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)": -0.09078240921003244,
        "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getMinus()": -0.09078240921003244,
        "org.apache.commons.math3.geometry.partitioning$SubHyperplane$SplitSubHyperplane#getPlus()": -0.09078240921003244,
        "org.apache.commons.math3.util$FastMath#<clinit>()": -1.3063003132511075,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0.0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": -0.04884230290959235,
        "org.apache.commons.math3.util$FastMath#abs(double)": -0.9661758090814832,
        "org.apache.commons.math3.util$FastMath#abs(float)": -0.02248186427811416,
        "org.apache.commons.math3.util$FastMath#abs(int)": -0.36308375359987655,
        "org.apache.commons.math3.util$FastMath#abs(long)": -0.7107738148469851,
        "org.apache.commons.math3.util$FastMath#acos(double)": -0.10203979575385685,
        "org.apache.commons.math3.util$FastMath#acosh(double)": -0.03599159468487316,
        "org.apache.commons.math3.util$FastMath#asin(double)": -0.10356911385187037,
        "org.apache.commons.math3.util$FastMath#asinh(double)": -0.03599159468487316,
        "org.apache.commons.math3.util$FastMath#atan(double)": -0.10508114955665304,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": -0.2097301027511849,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": 0.9435526350317764,
        "org.apache.commons.math3.util$FastMath#atanh(double)": -0.03599159468487316,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": -0.1166284124432339,
        "org.apache.commons.math3.util$FastMath#ceil(double)": -0.34269592861983483,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": -0.08201006888258267,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": -0.02248186427811416,
        "org.apache.commons.math3.util$FastMath#cos(double)": 0.7614266247237733,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": 0.7085961448693672,
        "org.apache.commons.math3.util$FastMath#cosh(double)": -0.09892635894270353,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": -0.1714572445832048,
        "org.apache.commons.math3.util$FastMath#exp(double)": -0.629900347760993,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": -0.7585711146589637,
        "org.apache.commons.math3.util$FastMath#expm1(double)": -0.07034905279079046,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": -0.10805604215087963,
        "org.apache.commons.math3.util$FastMath#floor(double)": -0.624710181537347,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": 0.09626119286985574,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": -0.02248186427811416,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": 0.9642507479981623,
        "org.apache.commons.math3.util$FastMath#log(double)": -0.6778786733273355,
        "org.apache.commons.math3.util$FastMath#log(double,double)": -0.015796857643789432,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": -0.8014949088247675,
        "org.apache.commons.math3.util$FastMath#log10(double)": -0.12995171257928567,
        "org.apache.commons.math3.util$FastMath#log1p(double)": -0.47643373207245515,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0.0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": -0.6973898735178521,
        "org.apache.commons.math3.util$FastMath#max(float,float)": -0.02248186427811416,
        "org.apache.commons.math3.util$FastMath#max(int,int)": -0.5782303290021615,
        "org.apache.commons.math3.util$FastMath#max(long,long)": -0.05678722334068209,
        "org.apache.commons.math3.util$FastMath#min(double,double)": -0.4610988646613643,
        "org.apache.commons.math3.util$FastMath#min(float,float)": -0.02248186427811416,
        "org.apache.commons.math3.util$FastMath#min(int,int)": -0.7033504559749966,
        "org.apache.commons.math3.util$FastMath#min(long,long)": -0.11662841244323374,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": -0.06387320385089068,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": -0.027667746681228955,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": -0.027667746681228948,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": -0.015796857643789432,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": -0.18105613281024474,
        "org.apache.commons.math3.util$FastMath#polySine(double)": -0.18105613281024474,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": -0.5723107098178116,
        "org.apache.commons.math3.util$FastMath#pow(double,int)": -0.2930587776510827,
        "org.apache.commons.math3.util$FastMath#random()": -0.0723993936477545,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": -0.03599159468487316,
        "org.apache.commons.math3.util$FastMath#rint(double)": -0.15056386121265472,
        "org.apache.commons.math3.util$FastMath#round(double)": -0.08201006888258248,
        "org.apache.commons.math3.util$FastMath#round(float)": -0.015796857643789432,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": -0.14113470915727544,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": -0.02248186427811416,
        "org.apache.commons.math3.util$FastMath#signum(double)": -0.06158848634045344,
        "org.apache.commons.math3.util$FastMath#signum(float)": -0.02248186427811416,
        "org.apache.commons.math3.util$FastMath#sin(double)": 0.6991944941714494,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": 0.6948426980410516,
        "org.apache.commons.math3.util$FastMath#sinh(double)": -0.09892635894270353,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": -0.8980957180684632,
        "org.apache.commons.math3.util$FastMath#tan(double)": -0.09245636048900106,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": -0.09245636048900106,
        "org.apache.commons.math3.util$FastMath#tanh(double)": -0.06387320385089063,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": -0.03207762528032021,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": -0.03207762528032021,
        "org.apache.commons.math3.util$FastMath#ulp(double)": -0.3350573960147612,
        "org.apache.commons.math3.util$FastMath#ulp(float)": -0.015796857643789432,
        "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)": -0.3690829317395097,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getK()": -0.3690829317395097,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()": -0.3690829317395097,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()": -0.3690829317395097,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": -0.7508466633534139,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": -0.748426673196986,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": -0.7920305053578263,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0.0,
        "org.apache.commons.math3.util$MathArrays#MathArrays()": 0.0,
        "org.apache.commons.math3.util$MathArrays#buildArray(org.apache.commons.math3.Field,int)": -0.21156790295266692,
        "org.apache.commons.math3.util$MathArrays#buildArray(org.apache.commons.math3.Field,int,int)": -0.2097301027511849,
        "org.apache.commons.math3.util$MathArrays#checkNonNegative(long[])": -0.41165633225266773,
        "org.apache.commons.math3.util$MathArrays#checkNonNegative(long[][])": -0.03599159468487316,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[])": -0.1166284124432339,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": -0.1180109247229885,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)": -0.2215003512464023,
        "org.apache.commons.math3.util$MathArrays#checkPositive(double[])": -0.4059853731593577,
        "org.apache.commons.math3.util$MathArrays#checkRectangular(long[][])": -0.03599159468487316,
        "org.apache.commons.math3.util$MathArrays#convolve(double[],double[])": -0.015796857643789432,
        "org.apache.commons.math3.util$MathArrays#copyOf(double[])": -0.13870637699002328,
        "org.apache.commons.math3.util$MathArrays#copyOf(double[],int)": -0.17040221876570127,
        "org.apache.commons.math3.util$MathArrays#copyOf(int[])": -0.03955330446306719,
        "org.apache.commons.math3.util$MathArrays#copyOf(int[],int)": -0.10952012900379311,
        "org.apache.commons.math3.util$MathArrays#distance(double[],double[])": -0.056787223340681946,
        "org.apache.commons.math3.util$MathArrays#distance(int[],int[])": -0.04284808904748497,
        "org.apache.commons.math3.util$MathArrays#distance1(double[],double[])": -0.027667746681228948,
        "org.apache.commons.math3.util$MathArrays#distance1(int[],int[])": -0.015796857643789432,
        "org.apache.commons.math3.util$MathArrays#distanceInf(double[],double[])": -0.027667746681228948,
        "org.apache.commons.math3.util$MathArrays#distanceInf(int[],int[])": -0.015796857643789432,
        "org.apache.commons.math3.util$MathArrays#ebeAdd(double[],double[])": -0.022481864278114116,
        "org.apache.commons.math3.util$MathArrays#ebeDivide(double[],double[])": -0.04884230290959235,
        "org.apache.commons.math3.util$MathArrays#ebeMultiply(double[],double[])": -0.022481864278114116,
        "org.apache.commons.math3.util$MathArrays#ebeSubtract(double[],double[])": -0.03207762528032021,
        "org.apache.commons.math3.util$MathArrays#equals(double[],double[])": -0.027667746681228948,
        "org.apache.commons.math3.util$MathArrays#equals(float[],float[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(double[],double[])": -0.03599159468487316,
        "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(float[],float[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": -0.015796857643789432,
        "org.apache.commons.math3.util$MathArrays#isMonotonic(java.lang.Comparable[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": -0.01579685764378924,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)": 0.10418101017893439,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)": 0.10188883820320366,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double,double,double)": -0.05678722334068209,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double[],double[])": -0.05425128069207131,
        "org.apache.commons.math3.util$MathArrays#normalizeArray(double[],double)": -0.08382338814636066,
        "org.apache.commons.math3.util$MathArrays#safeNorm(double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#scale(double,double[])": -0.01579685764378924,
        "org.apache.commons.math3.util$MathArrays#scaleInPlace(double,double[])": -0.04284808904748494,
        "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])": -0.04884230290959235,
        "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])": -0.04884230290959235,
        "org.apache.commons.math3.util$MathArrays$1#compare(org.apache.commons.math3.util.Pair,org.apache.commons.math3.util.Pair)": -0.04593154854171089,
        "org.apache.commons.math3.util$MathArrays$2#<clinit>()": -0.22150035124640244,
        "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()": -0.22592307872227105,
        "org.apache.commons.math3.util$MathArrays$OrderDirection#MathArrays$OrderDirection(java.lang.String,int)": -0.22592307872227102,
        "org.apache.commons.math3.util$Precision#<clinit>()": -0.6384232939496033,
        "org.apache.commons.math3.util$Precision#Precision()": 0.0,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,double)": -0.1756339775909574,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,int)": -0.12342392878439719,
        "org.apache.commons.math3.util$Precision#equals(double,double)": -0.25306366665029567,
        "org.apache.commons.math3.util$Precision#equals(double,double,double)": -0.4717402350587917,
        "org.apache.commons.math3.util$Precision#equals(double,double,int)": -0.6808946100912728,
        "org.apache.commons.math3.util$Precision#equals(float,float)": -0.015796857643789432,
        "org.apache.commons.math3.util$Precision#equals(float,float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(float,float,int)": -0.15848367852173315,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)": -0.21339556122603265,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)": -0.12474965797151287,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)": -0.015796857643789432,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)": -0.1573694435859582,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsWithRelativeTolerance(double,double,double)": -0.015796857643789432,
        "org.apache.commons.math3.util$Precision#representableDelta(double,double)": -0.01579685764378924,
        "org.apache.commons.math3.util$Precision#round(double,int)": -0.015796857643789432,
        "org.apache.commons.math3.util$Precision#round(double,int,int)": -0.01579685764378924,
        "org.apache.commons.math3.util$Precision#round(float,int)": -0.015796857643789432,
        "org.apache.commons.math3.util$Precision#round(float,int,int)": -0.015796857643789432,
        "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)": -0.015796857643789432
    },
    "Math-40": {},
    "Math-41": {},
    "Math-42": {},
    "Math-43": {},
    "Math-44": {},
    "Math-45": {},
    "Math-46": {},
    "Math-47": {},
    "Math-48": {},
    "Math-49": {},
    "Math-5": {
        "org.apache.commons.math3.complex$Complex#<clinit>()": 1.1802285731628452,
        "org.apache.commons.math3.complex$Complex#Complex(double)": -0.1362514954476334,
        "org.apache.commons.math3.complex$Complex#Complex(double,double)": -0.1655578644640595,
        "org.apache.commons.math3.complex$Complex#abs()": -0.21197594958177252,
        "org.apache.commons.math3.complex$Complex#acos()": -0.05537482446266882,
        "org.apache.commons.math3.complex$Complex#add(double)": -0.05537482446266882,
        "org.apache.commons.math3.complex$Complex#add(org.apache.commons.math3.complex.Complex)": -0.1409130717686592,
        "org.apache.commons.math3.complex$Complex#asin()": -0.05537482446266882,
        "org.apache.commons.math3.complex$Complex#atan()": -0.0644357108234477,
        "org.apache.commons.math3.complex$Complex#conjugate()": -0.05537482446266882,
        "org.apache.commons.math3.complex$Complex#cos()": -0.05537482446266882,
        "org.apache.commons.math3.complex$Complex#cosh()": -0.05537482446266882,
        "org.apache.commons.math3.complex$Complex#createComplex(double,double)": -0.34283790870187847,
        "org.apache.commons.math3.complex$Complex#divide(double)": -0.0644357108234477,
        "org.apache.commons.math3.complex$Complex#divide(org.apache.commons.math3.complex.Complex)": -0.15428164073288533,
        "org.apache.commons.math3.complex$Complex#equals(java.lang.Object)": 0.17786203302613768,
        "org.apache.commons.math3.complex$Complex#exp()": -0.12655987892571582,
        "org.apache.commons.math3.complex$Complex#getArgument()": -0.08681653778738954,
        "org.apache.commons.math3.complex$Complex#getField()": 0.0,
        "org.apache.commons.math3.complex$Complex#getImaginary()": -0.4774392205747988,
        "org.apache.commons.math3.complex$Complex#getReal()": -0.4774392205747988,
        "org.apache.commons.math3.complex$Complex#hashCode()": -0.031295346186631434,
        "org.apache.commons.math3.complex$Complex#isInfinite()": -0.2547096299539964,
        "org.apache.commons.math3.complex$Complex#isNaN()": -0.16275643610698132,
        "org.apache.commons.math3.complex$Complex#log()": -0.1585585181737439,
        "org.apache.commons.math3.complex$Complex#multiply(double)": -0.09328742971824956,
        "org.apache.commons.math3.complex$Complex#multiply(int)": -0.04479869640894028,
        "org.apache.commons.math3.complex$Complex#multiply(org.apache.commons.math3.complex.Complex)": -0.19770658521036508,
        "org.apache.commons.math3.complex$Complex#negate()": -0.09328742971824956,
        "org.apache.commons.math3.complex$Complex#nthRoot(int)": -0.0725282742409814,
        "org.apache.commons.math3.complex$Complex#pow(double)": -0.0725282742409814,
        "org.apache.commons.math3.complex$Complex#pow(org.apache.commons.math3.complex.Complex)": -0.09942109391044832,
        "org.apache.commons.math3.complex$Complex#readResolve()": -0.0312953461866316,
        "org.apache.commons.math3.complex$Complex#reciprocal()": 1.7474717257590187,
        "org.apache.commons.math3.complex$Complex#sin()": -0.05537482446266882,
        "org.apache.commons.math3.complex$Complex#sinh()": -0.05537482446266882,
        "org.apache.commons.math3.complex$Complex#sqrt()": -0.1409130717686592,
        "org.apache.commons.math3.complex$Complex#sqrt1z()": -0.07993300794706992,
        "org.apache.commons.math3.complex$Complex#subtract(double)": -0.05537482446266882,
        "org.apache.commons.math3.complex$Complex#subtract(org.apache.commons.math3.complex.Complex)": -0.14991980222073975,
        "org.apache.commons.math3.complex$Complex#tan()": -0.0644357108234477,
        "org.apache.commons.math3.complex$Complex#tanh()": -0.0644357108234477,
        "org.apache.commons.math3.complex$Complex#toString()": 0.4742135623730951,
        "org.apache.commons.math3.complex$Complex#valueOf(double)": 0.0,
        "org.apache.commons.math3.complex$Complex#valueOf(double,double)": -0.04479869640894028,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -1.704200154832557,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": -0.09942109391044829,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": -0.04479869640894041,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -1.4687663877195856,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": -0.12655987892571585,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)": -0.15428164073288533,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": -0.11628470427589116,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": -0.2547096299539963,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.3322246758188792,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": -0.40568433610971677,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.6957376900186383,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": -0.05537482446266884,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": -0.05537482446266884
    },
    "Math-50": {},
    "Math-6": {
        "org.apache.commons.math3.analysis.function$Sinc#Sinc()": 0.14122917622832926,
        "org.apache.commons.math3.analysis.function$Sinc#Sinc(boolean)": -0.06381509983728381,
        "org.apache.commons.math3.analysis.function$Sinc#derivative()": 0.0,
        "org.apache.commons.math3.analysis.function$Sinc#value(double)": 0.1582187394000874,
        "org.apache.commons.math3.analysis.function$Sinc#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)": -0.03020300161507012,
        "org.apache.commons.math3.analysis.solvers$AbstractUnivariateSolver#AbstractUnivariateSolver(double)": -0.038813501259340986,
        "org.apache.commons.math3.analysis.solvers$AbstractUnivariateSolver#AbstractUnivariateSolver(double,double)": -0.05102590657302178,
        "org.apache.commons.math3.analysis.solvers$AbstractUnivariateSolver#AbstractUnivariateSolver(double,double,double)": -0.04595021916819279,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#BaseAbstractUnivariateSolver(double)": -0.045980685087361715,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#BaseAbstractUnivariateSolver(double,double)": -0.05102590657302178,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#BaseAbstractUnivariateSolver(double,double,double)": -0.05443248305929684,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#computeObjectiveValue(double)": -0.045980685087361715,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getAbsoluteAccuracy()": -0.23506466305837356,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getEvaluations()": 0.10757225561028005,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getFunctionValueAccuracy()": -0.23433771307603476,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMax()": -0.24369379554176693,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMaxEvaluations()": 0.0,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMin()": -0.24369379554176693,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getRelativeAccuracy()": -0.22921355102188387,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getStartValue()": -0.2126718167568696,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#incrementEvaluationCount()": -0.04810840752507763,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#isBracketing(double,double)": -0.026056673941010255,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#isSequence(double,double,double)": -0.03722795378982411,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#setup(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)": -0.04881542055820345,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)": -0.03388159925233315,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)": -0.2317462015414552,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)": -0.04810840752507763,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifyBracketing(double,double)": -0.10139725303270936,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifyInterval(double,double)": -0.040322550682806754,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifySequence(double,double,double)": -0.011161805145840246,
        "org.apache.commons.math3.analysis.solvers$BrentSolver#BrentSolver()": 0.12991074552085696,
        "org.apache.commons.math3.analysis.solvers$BrentSolver#BrentSolver(double)": 0.023011493218828984,
        "org.apache.commons.math3.analysis.solvers$BrentSolver#BrentSolver(double,double)": -0.03020300161507012,
        "org.apache.commons.math3.analysis.solvers$BrentSolver#BrentSolver(double,double,double)": 0.0,
        "org.apache.commons.math3.analysis.solvers$BrentSolver#brent(double,double,double,double)": 0.026466022993772965,
        "org.apache.commons.math3.analysis.solvers$BrentSolver#doSolve()": 0.020446684257518645,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#UnivariateSolverUtils()": 0.0,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)": -0.03388159925233315,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,int)": -0.03722795378982411,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)": -0.03388159925233315,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#isBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)": -0.10139725303270936,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#isSequence(double,double,double)": -0.03722795378982391,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#midpoint(double,double)": -0.04321783065789364,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)": -0.03020300161507012,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)": -0.1672834881219926,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)": -0.10139725303270936,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyInterval(double,double)": -0.06920530725846319,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifySequence(double,double,double)": -0.014247212307613742,
        "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException()": -0.014886261892339193,
        "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.06611817947801579,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)": -0.2317462015414552,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)": -0.24758114905839657,
        "org.apache.commons.math3.exception$DimensionMismatchException#getDimension()": -0.02605667394101019,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": -0.05102590657302164,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.11943246231652355,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": -0.014886261892339325,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.6190627059489862,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": -0.04595021916819286,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": -0.02117843749855508,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.5422686618462252,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": -0.05790728630670072,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": -0.1322720981606712,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.16052148914407816,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": -0.1277139262794007,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": -0.014886261892339325,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int)": 0.0,
        "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int,java.lang.Class)": -0.05569523150514689,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()": -0.06611817947801579,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.07703877456199862,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathUnsupportedOperationException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)": -0.086813669718456,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.086813669718456,
        "org.apache.commons.math3.exception$MaxCountExceededException#getMax()": -0.05569523150514688,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(java.lang.Integer[],java.lang.Integer[])": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])": -0.1000148268193558,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getExpectedDimension(int)": -0.014886261892339325,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getExpectedDimensions()": 0.0,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getWrongDimension(int)": -0.014886261892339325,
        "org.apache.commons.math3.exception$MultiDimensionMismatchException#getWrongDimensions()": 0.0,
        "org.apache.commons.math3.exception$NoBracketingException#NoBracketingException(double,double,double,double)": -0.05102590657302178,
        "org.apache.commons.math3.exception$NoBracketingException#NoBracketingException(org.apache.commons.math3.exception.util.Localizable,double,double,double,double,java.lang.Object[])": -0.05102590657302178,
        "org.apache.commons.math3.exception$NoBracketingException#getFHi()": 0.0,
        "org.apache.commons.math3.exception$NoBracketingException#getFLo()": 0.0,
        "org.apache.commons.math3.exception$NoBracketingException#getHi()": 0.0,
        "org.apache.commons.math3.exception$NoBracketingException#getLo()": 0.0,
        "org.apache.commons.math3.exception$NoDataException#NoDataException()": -0.05102590657302178,
        "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)": -0.08524780516185408,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int)": -0.014886261892339193,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int,org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": -0.06212791455170718,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getDirection()": -0.014886261892339325,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getIndex()": -0.014886261892339325,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getPrevious()": -0.014886261892339325,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getStrict()": -0.014886261892339325,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])": -0.04595021916819279,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.06991558765662498,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)": -0.06991558765662498,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": -0.05340478137319571,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)": -0.11324386768460078,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": -0.14947355892515518,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": -0.11197529671109224,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.1431977046168033,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)": -0.09720418870875874,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.20951682090175108,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getBoundIsAllowed()": -0.014886261892339325,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getMax()": -0.014886261892339325,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": -0.16918108658967973,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.27756038080268364,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": -0.02605667394101019,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": -0.02605667394101019,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(java.lang.Number,java.lang.Number,java.lang.Number)": -0.10411913013347603,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)": -0.24758114905839657,
        "org.apache.commons.math3.exception$OutOfRangeException#getHi()": -0.014886261892339325,
        "org.apache.commons.math3.exception$OutOfRangeException#getLo()": -0.014886261892339325,
        "org.apache.commons.math3.exception$TooManyEvaluationsException#TooManyEvaluationsException(java.lang.Number)": -0.07531024952253414,
        "org.apache.commons.math3.exception$ZeroException#ZeroException()": -0.02117843749855513,
        "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.05340478137319571,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix()": -0.02117843749855508,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field)": -0.13998495990308268,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)": -0.1710642296091784,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)": -0.03020300161507012,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkAdditionCompatible(org.apache.commons.math3.linear.FieldMatrix)": -0.048546237364396,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)": -0.19180192779655492,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkMultiplicationCompatible(org.apache.commons.math3.linear.FieldMatrix)": -0.06611817947801579,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)": -0.19180192779655492,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)": -0.048546237364396,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int[],int[])": -0.03388159925233315,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubtractionCompatible(org.apache.commons.math3.linear.FieldMatrix)": -0.03020300161507012,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])": -0.02117843749855513,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int[],int[],org.apache.commons.math3.FieldElement[][])": -0.02117843749855513,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#equals(java.lang.Object)": -0.08987948395892133,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[][])": -0.15953938071068158,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumn(int)": -0.048546237364396,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)": -0.026056673941010255,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnVector(int)": -0.03722795378982411,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getData()": -0.02117843749855513,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()": -0.19611383089617496,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRow(int)": -0.040322550682806754,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)": -0.03020300161507012,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowVector(int)": -0.026056673941010255,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)": -0.02117843749855513,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])": -0.026056673941010255,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#getTrace()": -0.026056673941010255,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#hashCode()": -0.026056673941010255,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#isSquare()": -0.09861733825562488,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)": -0.048546237364396,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": -0.02117843749855513,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.linear.FieldVector)": -0.026056673941010255,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)": -0.014886261892339193,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": -0.014886261892339193,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)": -0.026056673941010255,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)": -0.02117843749855513,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)": -0.02117843749855513,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])": -0.014886261892339193,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": -0.014886261892339193,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)": -0.014886261892339193,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])": -0.014886261892339193,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": -0.014886261892339193,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)": -0.014886261892339193,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": -0.02117843749855513,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)": -0.014886261892339193,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#toString()": -0.02117843749855513,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()": -0.03722795378982411,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.014886261892339193,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.014886261892339193,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.014886261892339193,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.014886261892339193,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.026056673941010255,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.014886261892339193,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.07531024952253414,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.02117843749855513,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.014886261892339193,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.02117843749855513,
        "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$1#visit(int,int,org.apache.commons.math3.FieldElement)": -0.02605667394101019,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$2#start(int,int,int,int,int,int)": -0.02117843749855508,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$2#visit(int,int,org.apache.commons.math3.FieldElement)": -0.02117843749855508,
        "org.apache.commons.math3.linear$AbstractFieldMatrix$3#visit(int,int,org.apache.commons.math3.FieldElement)": -0.03722795378982391,
        "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()": 0.8059067056792355,
        "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()": 0.8564971529577761,
        "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)": 0.8637265346087933,
        "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)": 1.1527492840555742,
        "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])": -0.08987948395892133,
        "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])": -0.02117843749855513,
        "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)": -0.1182143219671438,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)": 1.1190407699752212,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)": 1.1527492840555742,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)": -0.06803904594445247,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getData()": -0.02117843749855513,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()": 1.1564613286454306,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()": -0.15254221550684421,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)": 1.029243917018384,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)": -0.03020300161507012,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)": -0.11943246231652355,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)": -0.05340478137319571,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])": -0.026056673941010255,
        "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()": -0.026056673941010255,
        "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()": -0.040322550682806754,
        "org.apache.commons.math3.linear$AbstractRealMatrix#isSquare()": 0.9851336889220524,
        "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": 1.0207770415975264,
        "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])": -0.02117843749855513,
        "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)": 0.060873672326290054,
        "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)": -0.02117843749855513,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])": -0.014886261892339193,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)": -0.026056673941010255,
        "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)": 1.1564613286454306,
        "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)": 1.0700041858171976,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])": -0.05102590657302178,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)": -0.02117843749855513,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)": 1.0875523228187585,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])": -0.014886261892339193,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)": -0.014886261892339193,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)": -0.12184126223888567,
        "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)": -0.040322550682806754,
        "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": 1.0639788854458048,
        "org.apache.commons.math3.linear$AbstractRealMatrix#toString()": -0.040322550682806754,
        "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()": 0.9798868453088951,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.014886261892339193,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.014886261892339193,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.043217830657893724,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.014886261892339193,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.03722795378982411,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.014886261892339193,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.9784003205927426,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.08524780516185408,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.014886261892339193,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.02117843749855513,
        "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": 0.0,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#end()": -0.15254221550684433,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#start(int,int,int,int,int,int)": -0.15254221550684433,
        "org.apache.commons.math3.linear$AbstractRealMatrix$1#visit(int,int,double)": -0.15254221550684433,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#end()": 0.2198130093972792,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#start(int,int,int,int,int,int)": 0.2198130093972792,
        "org.apache.commons.math3.linear$AbstractRealMatrix$2#visit(int,int,double)": 0.2198130093972792,
        "org.apache.commons.math3.linear$AbstractRealMatrix$3#visit(int,int,double)": -0.02605667394101019,
        "org.apache.commons.math3.linear$AbstractRealMatrix$4#start(int,int,int,int,int,int)": -0.08987948395892142,
        "org.apache.commons.math3.linear$AbstractRealMatrix$4#visit(int,int,double)": -0.08987948395892142,
        "org.apache.commons.math3.linear$AbstractRealMatrix$5#visit(int,int,double)": 0.04323852606074374,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field)": -0.02117843749855513,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,int,int)": -0.09432830446432293,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])": -0.11324386768460078,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)": -0.08835720526947091,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])": -0.1000148268193558,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)": -0.06611817947801579,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": -0.02117843749855513,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()": -0.02117843749855513,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])": -0.11324386768460078,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyOut()": -0.09138149478246232,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#createMatrix(int,int)": -0.06611817947801579,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()": -0.1474027788222274,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getData()": -0.08835720526947091,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getDataRef()": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)": -0.13339372250453624,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()": -0.1474027788222274,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": -0.014886261892339193,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": -0.02117843749855513,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": -0.014886261892339193,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)": -0.09861733825562488,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": -0.11324386768460078,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)": -0.014886261892339193,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.014886261892339193,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.014886261892339193,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.014886261892339193,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.014886261892339193,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.02117843749855513,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.014886261892339193,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.07354845351903379,
        "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.02117843749855513,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix()": -0.03020300161507012,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[])": -0.03020300161507012,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])": 0.8462804047542876,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)": 1.014090699722003,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)": 0.8556168404320816,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)": -0.02117843749855513,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()": -0.057907286306700695,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])": 0.8451885057859427,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()": 0.8746970468015366,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)": 0.9339626928512218,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()": -0.17230698085707513,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getData()": 0.8795738871583505,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getDataRef()": -0.14213259137413714,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)": 0.881914781919153,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()": -0.1717941252416319,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)": -0.05102590657302178,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)": -0.048546237364396,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#operate(double[])": -0.12886456318397854,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#preMultiply(double[])": -0.03388159925233315,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)": 0.8611565021955442,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)": 0.8451885057859427,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)": -0.014886261892339193,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.014886261892339193,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.014886261892339193,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.14740277882222758,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.014886261892339193,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.03388159925233315,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.014886261892339193,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": 0.9791428989791857,
        "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.08524780516185408,
        "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()": 0.7727032177509603,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector()": -0.026056673941010255,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[])": 0.8814121262135706,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)": -0.10493779009298175,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],double[])": -0.014886261892339193,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],int,int)": -0.014886261892339193,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],org.apache.commons.math3.linear.ArrayRealVector)": -0.014886261892339193,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int)": -0.23404838694298924,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int,double)": -0.026056673941010255,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[])": -0.014886261892339193,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[],int,int)": -0.014886261892339193,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector)": -0.014886261892339193,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,boolean)": -0.1952564575714989,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,double[])": -0.014886261892339193,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.ArrayRealVector)": -0.026056673941010255,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.RealVector)": -0.02117843749855513,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector)": -0.014886261892339193,
        "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.ArrayRealVector)": -0.014886261892339193,
        "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)": -0.04595021916819279,
        "org.apache.commons.math3.linear$ArrayRealVector#addToEntry(int,double)": -0.026056673941010255,
        "org.apache.commons.math3.linear$ArrayRealVector#append(double)": -0.02117843749855513,
        "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.ArrayRealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.RealVector)": -0.02117843749855513,
        "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)": -0.026045649175846952,
        "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)": -0.06414923892895535,
        "org.apache.commons.math3.linear$ArrayRealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)": -0.06414923892895535,
        "org.apache.commons.math3.linear$ArrayRealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": -0.10276517833591121,
        "org.apache.commons.math3.linear$ArrayRealVector#copy()": -0.19439660971292053,
        "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)": 0.021381415174042087,
        "org.apache.commons.math3.linear$ArrayRealVector#ebeDivide(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#ebeMultiply(org.apache.commons.math3.linear.RealVector)": -0.08040404423991449,
        "org.apache.commons.math3.linear$ArrayRealVector#equals(java.lang.Object)": -0.11450174410061034,
        "org.apache.commons.math3.linear$ArrayRealVector#getDataRef()": -0.23817632750343803,
        "org.apache.commons.math3.linear$ArrayRealVector#getDimension()": -0.07874554168805492,
        "org.apache.commons.math3.linear$ArrayRealVector#getDistance(org.apache.commons.math3.linear.RealVector)": -0.03388159925233315,
        "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)": 0.8969441657155774,
        "org.apache.commons.math3.linear$ArrayRealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)": -0.03020300161507012,
        "org.apache.commons.math3.linear$ArrayRealVector#getL1Norm()": -0.02117843749855513,
        "org.apache.commons.math3.linear$ArrayRealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)": -0.03020300161507012,
        "org.apache.commons.math3.linear$ArrayRealVector#getLInfNorm()": -0.02117843749855513,
        "org.apache.commons.math3.linear$ArrayRealVector#getNorm()": -0.12303241263964951,
        "org.apache.commons.math3.linear$ArrayRealVector#getSubVector(int,int)": -0.040322550682806754,
        "org.apache.commons.math3.linear$ArrayRealVector#hashCode()": -0.086813669718456,
        "org.apache.commons.math3.linear$ArrayRealVector#isInfinite()": -0.02117843749855513,
        "org.apache.commons.math3.linear$ArrayRealVector#isNaN()": -0.1474027788222274,
        "org.apache.commons.math3.linear$ArrayRealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)": -0.026056673941010255,
        "org.apache.commons.math3.linear$ArrayRealVector#mapAddToSelf(double)": -0.02605667394101019,
        "org.apache.commons.math3.linear$ArrayRealVector#mapDivideToSelf(double)": -0.03388159925233314,
        "org.apache.commons.math3.linear$ArrayRealVector#mapMultiplyToSelf(double)": -0.14635960198380893,
        "org.apache.commons.math3.linear$ArrayRealVector#mapSubtractToSelf(double)": -0.02605667394101019,
        "org.apache.commons.math3.linear$ArrayRealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": -0.03020300161507012,
        "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)": -0.026056673941010255,
        "org.apache.commons.math3.linear$ArrayRealVector#set(double)": -0.1081019652128754,
        "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)": -0.15556797802643182,
        "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,double[])": -0.0787360877656133,
        "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,org.apache.commons.math3.linear.RealVector)": -0.08040404423991449,
        "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)": -0.17200051207001407,
        "org.apache.commons.math3.linear$ArrayRealVector#toArray()": -0.21876805209696534,
        "org.apache.commons.math3.linear$ArrayRealVector#toString()": 0.0,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": -0.02117843749855508,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": -0.03020300161507012,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": -0.02117843749855508,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": -0.03020300161507012,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": -0.014886261892339193,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": -0.02117843749855513,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": -0.014886261892339193,
        "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": -0.02117843749855513,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(int,int,org.apache.commons.math3.FieldElement[][],boolean)": -0.09432830446432293,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)": -0.08204432229655638,
        "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.FieldElement[][])": -0.09432830446432293,
        "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.BlockFieldMatrix)": -0.03020300161507012,
        "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)": -0.02117843749855513,
        "org.apache.commons.math3.linear$BlockFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#blockHeight(int)": -0.10276517833591114,
        "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)": -0.10940470912000877,
        "org.apache.commons.math3.linear$BlockFieldMatrix#copy()": -0.014886261892339193,
        "org.apache.commons.math3.linear$BlockFieldMatrix#copyBlockPart(org.apache.commons.math3.FieldElement[],int,int,int,int,int,org.apache.commons.math3.FieldElement[],int,int,int)": -0.026056673941010255,
        "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)": -0.08204432229655638,
        "org.apache.commons.math3.linear$BlockFieldMatrix#createMatrix(int,int)": -0.014886261892339193,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumn(int)": -0.03388159925233315,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()": -0.10276517833591114,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnMatrix(int)": -0.026056673941010255,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnVector(int)": -0.026056673941010255,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getData()": -0.03388159925233315,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)": -0.08365844617835566,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRow(int)": -0.03388159925233315,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()": -0.10411913013347607,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowMatrix(int)": -0.03020300161507012,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getRowVector(int)": -0.026056673941010255,
        "org.apache.commons.math3.linear$BlockFieldMatrix#getSubMatrix(int,int,int,int)": -0.026056673941010255,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.BlockFieldMatrix)": -0.040322550682806754,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)": -0.03722795378982411,
        "org.apache.commons.math3.linear$BlockFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)": 0.0,
        "org.apache.commons.math3.linear$BlockFieldMatrix#operate(org.apache.commons.math3.FieldElement[])": -0.026056673941010255,
        "org.apache.commons.math3.linear$BlockFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])": -0.02117843749855513,
        "org.apache.commons.math3.linear$BlockFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)": -0.03020300161507012,
        "org.apache.commons.math3.linear$BlockFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)": -0.014886261892339193,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])": -0.03020300161507012,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)": -0.02117843749855513,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": -0.02117843749855513,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)": -0.02117843749855513,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)": -0.03388159925233315,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])": -0.03020300161507012,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)": -0.02117843749855513,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)": -0.02117843749855513,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)": -0.02117843749855513,
        "org.apache.commons.math3.linear$BlockFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)": -0.02117843749855513,
        "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.BlockFieldMatrix)": -0.02117843749855513,
        "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)": -0.014886261892339193,
        "org.apache.commons.math3.linear$BlockFieldMatrix#toBlocksLayout(org.apache.commons.math3.FieldElement[][])": -0.09432830446432293,
        "org.apache.commons.math3.linear$BlockFieldMatrix#transpose()": -0.026056673941010255,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.02117843749855513,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.014886261892339193,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.014886261892339193,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.02117843749855513,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)": -0.014886261892339193,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)": -0.014886261892339193,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)": -0.014886261892339193,
        "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)": -0.014886261892339193,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])": 0.09408646894239776,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)": 0.0708651719681003,
        "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)": 0.07310926904681371,
        "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)": -0.03020300161507012,
        "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)": -0.02117843749855513,
        "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)": -0.014886261892339193,
        "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)": -0.2176973987504231,
        "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)": -0.22344045507774418,
        "org.apache.commons.math3.linear$BlockRealMatrix#copy()": -0.03388159925233315,
        "org.apache.commons.math3.linear$BlockRealMatrix#copyBlockPart(double[],int,int,int,int,int,double[],int,int,int)": -0.03388159925233315,
        "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)": 0.04626743872031381,
        "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)": -0.014886261892339193,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumn(int)": -0.07354845351903379,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()": -0.21697414349189742,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)": -0.026056673941010255,
        "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)": -0.026056673941010255,
        "org.apache.commons.math3.linear$BlockRealMatrix#getData()": 0.039807612916257736,
        "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)": -0.15355545636338708,
        "org.apache.commons.math3.linear$BlockRealMatrix#getFrobeniusNorm()": -0.014886261892339193,
        "org.apache.commons.math3.linear$BlockRealMatrix#getNorm()": -0.08204432229655638,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRow(int)": -0.03388159925233315,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()": -0.2176973987504231,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)": -0.03020300161507012,
        "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)": -0.026056673941010255,
        "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)": -0.03388159925233315,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)": -0.06414923892895535,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": -0.06414923892895535,
        "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$BlockRealMatrix#operate(double[])": 0.0708651719681003,
        "org.apache.commons.math3.linear$BlockRealMatrix#preMultiply(double[])": -0.02117843749855513,
        "org.apache.commons.math3.linear$BlockRealMatrix#scalarAdd(double)": -0.03020300161507012,
        "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)": -0.014886261892339193,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])": -0.043217830657893724,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)": -0.02117843749855513,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)": -0.02117843749855513,
        "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)": -0.02117843749855513,
        "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)": -0.086813669718456,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRow(int,double[])": -0.03020300161507012,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)": -0.02117843749855513,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)": -0.02117843749855513,
        "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)": -0.02117843749855513,
        "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)": -0.02117843749855513,
        "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)": -0.07354845351903379,
        "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": -0.08040404423991449,
        "org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])": 0.09408646894239776,
        "org.apache.commons.math3.linear$BlockRealMatrix#transpose()": 0.12688645600786555,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.06212791455170718,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.014886261892339193,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.03388159925233315,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.03722795378982411,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)": -0.014886261892339193,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)": -0.014886261892339193,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)": -0.014886261892339193,
        "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)": -0.014886261892339193,
        "org.apache.commons.math3.linear$DefaultRealMatrixPreservingVisitor#DefaultRealMatrixPreservingVisitor()": 0.03732467562092423,
        "org.apache.commons.math3.linear$DefaultRealMatrixPreservingVisitor#end()": 0.03732467562092423,
        "org.apache.commons.math3.linear$DefaultRealMatrixPreservingVisitor#start(int,int,int,int,int,int)": 0.04175200134459134,
        "org.apache.commons.math3.linear$DefaultRealMatrixPreservingVisitor#visit(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[])": 0.0782515214254564,
        "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[],boolean)": 0.07530529076304555,
        "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(int)": 0.07973261648671272,
        "org.apache.commons.math3.linear$DiagonalMatrix#add(org.apache.commons.math3.linear.DiagonalMatrix)": -0.014886261892339193,
        "org.apache.commons.math3.linear$DiagonalMatrix#addToEntry(int,int,double)": -0.026056673941010255,
        "org.apache.commons.math3.linear$DiagonalMatrix#copy()": 0.08646598481602245,
        "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)": -0.02117843749855513,
        "org.apache.commons.math3.linear$DiagonalMatrix#ensureZero(double)": -0.03722795378982411,
        "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()": -0.2133393481377936,
        "org.apache.commons.math3.linear$DiagonalMatrix#getData()": -0.03020300161507012,
        "org.apache.commons.math3.linear$DiagonalMatrix#getDataRef()": -0.1869342758441594,
        "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)": 0.0775129840272857,
        "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()": -0.21479700611786118,
        "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)": 0.09873399511288812,
        "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": 0.09178428354086372,
        "org.apache.commons.math3.linear$DiagonalMatrix#multiplyEntry(int,int,double)": -0.026056673941010255,
        "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])": 0.09951434134044805,
        "org.apache.commons.math3.linear$DiagonalMatrix#preMultiply(double[])": -0.014886261892339193,
        "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)": 0.08271118063665873,
        "org.apache.commons.math3.linear$DiagonalMatrix#subtract(org.apache.commons.math3.linear.DiagonalMatrix)": -0.014886261892339193,
        "org.apache.commons.math3.linear$EigenDecomposition#EigenDecomposition(double[],double[])": -0.03020300161507012,
        "org.apache.commons.math3.linear$EigenDecomposition#EigenDecomposition(double[],double[],double)": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#EigenDecomposition(org.apache.commons.math3.linear.RealMatrix)": 1.0529964470299704,
        "org.apache.commons.math3.linear$EigenDecomposition#EigenDecomposition(org.apache.commons.math3.linear.RealMatrix,double)": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#cdiv(double,double,double,double)": -0.02117843749855508,
        "org.apache.commons.math3.linear$EigenDecomposition#findEigenVectors(double[][])": 1.0517783066805906,
        "org.apache.commons.math3.linear$EigenDecomposition#findEigenVectorsFromSchur(org.apache.commons.math3.linear.SchurTransformer)": -0.026056673941010255,
        "org.apache.commons.math3.linear$EigenDecomposition#getD()": 1.0976623154780802,
        "org.apache.commons.math3.linear$EigenDecomposition#getDeterminant()": -0.048546237364395894,
        "org.apache.commons.math3.linear$EigenDecomposition#getEigenvector(int)": -0.057907286306700695,
        "org.apache.commons.math3.linear$EigenDecomposition#getImagEigenvalue(int)": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#getImagEigenvalues()": 0.0,
        "org.apache.commons.math3.linear$EigenDecomposition#getRealEigenvalue(int)": -0.04321783065789364,
        "org.apache.commons.math3.linear$EigenDecomposition#getRealEigenvalues()": -0.06803904594445243,
        "org.apache.commons.math3.linear$EigenDecomposition#getSolver()": -0.057907286306700695,
        "org.apache.commons.math3.linear$EigenDecomposition#getSquareRoot()": -0.026056673941010255,
        "org.apache.commons.math3.linear$EigenDecomposition#getV()": 1.0891664467005577,
        "org.apache.commons.math3.linear$EigenDecomposition#getVT()": -0.03020300161507012,
        "org.apache.commons.math3.linear$EigenDecomposition#hasComplexEigenvalues()": -0.057907286306700695,
        "org.apache.commons.math3.linear$EigenDecomposition#transformToSchur(org.apache.commons.math3.linear.RealMatrix)": -0.026056673941010255,
        "org.apache.commons.math3.linear$EigenDecomposition#transformToTridiagonal(org.apache.commons.math3.linear.RealMatrix)": 1.0567090248965039,
        "org.apache.commons.math3.linear$EigenDecomposition$Solver#EigenDecomposition$Solver(double[],double[],org.apache.commons.math3.linear.ArrayRealVector[])": -0.05790728630670072,
        "org.apache.commons.math3.linear$EigenDecomposition$Solver#getInverse()": -0.05340478137319571,
        "org.apache.commons.math3.linear$EigenDecomposition$Solver#isNonSingular()": -0.05790728630670072,
        "org.apache.commons.math3.linear$EigenDecomposition$Solver#solve(org.apache.commons.math3.linear.RealMatrix)": -0.02117843749855513,
        "org.apache.commons.math3.linear$EigenDecomposition$Solver#solve(org.apache.commons.math3.linear.RealVector)": -0.02117843749855513,
        "org.apache.commons.math3.linear$LUDecomposition#LUDecomposition(org.apache.commons.math3.linear.RealMatrix)": 0.06370393405480448,
        "org.apache.commons.math3.linear$LUDecomposition#LUDecomposition(org.apache.commons.math3.linear.RealMatrix,double)": 0.06269997276389605,
        "org.apache.commons.math3.linear$LUDecomposition#getDeterminant()": -0.014886261892339325,
        "org.apache.commons.math3.linear$LUDecomposition#getL()": -0.03388159925233315,
        "org.apache.commons.math3.linear$LUDecomposition#getP()": -0.03388159925233315,
        "org.apache.commons.math3.linear$LUDecomposition#getPivot()": -0.02117843749855508,
        "org.apache.commons.math3.linear$LUDecomposition#getSolver()": -0.1275594324811554,
        "org.apache.commons.math3.linear$LUDecomposition#getU()": -0.03388159925233315,
        "org.apache.commons.math3.linear$LUDecomposition$Solver#LUDecomposition$Solver(double[][],int[],boolean)": -0.1275594324811554,
        "org.apache.commons.math3.linear$LUDecomposition$Solver#getInverse()": -0.07354845351903379,
        "org.apache.commons.math3.linear$LUDecomposition$Solver#isNonSingular()": -0.030203001615070058,
        "org.apache.commons.math3.linear$LUDecomposition$Solver#solve(org.apache.commons.math3.linear.RealMatrix)": -0.0787360877656133,
        "org.apache.commons.math3.linear$LUDecomposition$Solver#solve(org.apache.commons.math3.linear.RealVector)": 0.09642668855144221,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)": -0.1000148268193558,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getExpectedColumnDimension()": -0.014886261892339193,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getExpectedRowDimension()": -0.014886261892339193,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getWrongColumnDimension()": -0.014886261892339193,
        "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getWrongRowDimension()": -0.014886261892339193,
        "org.apache.commons.math3.linear$MatrixUtils#<clinit>()": 0.7837147028130748,
        "org.apache.commons.math3.linear$MatrixUtils#MatrixUtils()": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)": -0.06004921139024046,
        "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)": -0.014886261892339193,
        "org.apache.commons.math3.linear$MatrixUtils#checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": 1.1287256357799718,
        "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)": 0.8059641881424524,
        "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)": 0.8235648753271553,
        "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": 0.9882977361895247,
        "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)": 0.8054652359070641,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)": -0.11574924523976593,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])": -0.03388159925233315,
        "org.apache.commons.math3.linear$MatrixUtils#checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)": 1.0433194778932453,
        "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)": -0.02117843749855513,
        "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])": -0.014886261892339193,
        "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])": 1.1583821951118671,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)": -0.02117843749855513,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.Field,int,int)": -0.02117843749855513,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])": -0.014886261892339193,
        "org.apache.commons.math3.linear$MatrixUtils#createFieldVector(org.apache.commons.math3.FieldElement[])": 0.0,
        "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])": 1.0554615237573481,
        "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)": -0.12886456318397854,
        "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])": 0.9086778945127698,
        "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)": 1.0076820855658937,
        "org.apache.commons.math3.linear$MatrixUtils#createRealVector(double[])": -0.014886261892339193,
        "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])": -0.014886261892339193,
        "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])": -0.014886261892339193,
        "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)": -0.02117843749855513,
        "org.apache.commons.math3.linear$MatrixUtils#deserializeRealVector(java.lang.Object,java.lang.String,java.io.ObjectInputStream)": -0.02117843749855513,
        "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)": -0.014886261892339193,
        "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)": 1.0505694102541054,
        "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)": 1.0481783563574647,
        "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)": -0.02117843749855513,
        "org.apache.commons.math3.linear$MatrixUtils#serializeRealVector(org.apache.commons.math3.linear.RealVector,java.io.ObjectOutputStream)": -0.02117843749855513,
        "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)": -0.014886261892339193,
        "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)": -0.014886261892339193,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#MatrixUtils$BigFractionMatrixConverter()": -0.06004921139024044,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()": -0.06004921139024046,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#start(int,int,int,int,int,int)": -0.06004921139024044,
        "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#visit(int,int,org.apache.commons.math3.fraction.BigFraction)": -0.06004921139024044,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#MatrixUtils$FractionMatrixConverter()": -0.014886261892339325,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()": -0.014886261892339193,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#start(int,int,int,int,int,int)": -0.014886261892339325,
        "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#visit(int,int,org.apache.commons.math3.fraction.Fraction)": -0.014886261892339325,
        "org.apache.commons.math3.linear$NonSquareMatrixException#NonSquareMatrixException(int,int)": -0.057907286306700695,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#NonSymmetricMatrixException(int,int,double)": -0.02117843749855513,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#getColumn()": 0.0,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#getRow()": 0.0,
        "org.apache.commons.math3.linear$NonSymmetricMatrixException#getThreshold()": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)": -0.08835720526947091,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix)": -0.04595021916819279,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)": -0.02117843749855513,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)": -0.08681366971845605,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()": -0.02117843749855513,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)": -0.040322550682806754,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()": -0.08681366971845605,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)": -0.08365844617835566,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()": -0.08681366971845605,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)": -0.03020300161507012,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)": -0.03020300161507012,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)": 0.0,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)": -0.086813669718456,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)": -0.03722795378982411,
        "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)": -0.03722795378982411,
        "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()": -0.2551038683033571,
        "org.apache.commons.math3.linear$RealLinearOperator#isTransposable()": 0.0,
        "org.apache.commons.math3.linear$RealLinearOperator#operateTranspose(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat()": -0.014886261892339193,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": 0.7837147028130748,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)": -0.24226995054730985,
        "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)": 0.8016018671279574,
        "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)": -0.06611817947801579,
        "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)": -0.06611817947801579,
        "org.apache.commons.math3.linear$RealMatrixFormat#getAvailableLocales()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getColumnSeparator()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()": -0.23844410564641952,
        "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()": 0.7837147028130748,
        "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)": 0.8016018671279574,
        "org.apache.commons.math3.linear$RealMatrixFormat#getPrefix()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowPrefix()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowSeparator()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getRowSuffix()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#getSuffix()": 0.0,
        "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)": -0.05340478137319571,
        "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)": -0.06212791455170718,
        "org.apache.commons.math3.linear$RealVector#RealVector()": -0.29056324353758833,
        "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)": -0.03020300161507012,
        "org.apache.commons.math3.linear$RealVector#addToEntry(int,double)": -0.03722795378982411,
        "org.apache.commons.math3.linear$RealVector#checkIndex(int)": -0.23785464168087136,
        "org.apache.commons.math3.linear$RealVector#checkIndices(int,int)": -0.07703877456199862,
        "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)": -0.13890219991002797,
        "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)": -0.12655559023635696,
        "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)": -0.04595021916819279,
        "org.apache.commons.math3.linear$RealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": -0.06414923892895535,
        "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)": -0.06414923892895535,
        "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)": -0.08365844617835566,
        "org.apache.commons.math3.linear$RealVector#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.linear$RealVector#getDistance(org.apache.commons.math3.linear.RealVector)": -0.03020300161507012,
        "org.apache.commons.math3.linear$RealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)": -0.03020300161507012,
        "org.apache.commons.math3.linear$RealVector#getL1Norm()": -0.02117843749855513,
        "org.apache.commons.math3.linear$RealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)": -0.03020300161507012,
        "org.apache.commons.math3.linear$RealVector#getLInfNorm()": -0.02117843749855513,
        "org.apache.commons.math3.linear$RealVector#getMaxIndex()": -0.03388159925233315,
        "org.apache.commons.math3.linear$RealVector#getMaxValue()": -0.03388159925233315,
        "org.apache.commons.math3.linear$RealVector#getMinIndex()": -0.03388159925233315,
        "org.apache.commons.math3.linear$RealVector#getMinValue()": -0.03388159925233315,
        "org.apache.commons.math3.linear$RealVector#getNorm()": -0.07354845351903379,
        "org.apache.commons.math3.linear$RealVector#hashCode()": 0.0,
        "org.apache.commons.math3.linear$RealVector#iterator()": -0.13890219991002797,
        "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)": -0.02117843749855513,
        "org.apache.commons.math3.linear$RealVector#mapAdd(double)": -0.026056673941010255,
        "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)": -0.03020300161507012,
        "org.apache.commons.math3.linear$RealVector#mapDivide(double)": -0.040322550682806754,
        "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)": -0.040322550682806754,
        "org.apache.commons.math3.linear$RealVector#mapMultiply(double)": -0.15556797802643182,
        "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)": -0.05569523150514689,
        "org.apache.commons.math3.linear$RealVector#mapSubtract(double)": -0.03388159925233315,
        "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)": -0.03388159925233315,
        "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": -0.0787360877656133,
        "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)": -0.03388159925233315,
        "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)": -0.057907286306700695,
        "org.apache.commons.math3.linear$RealVector#set(double)": -0.02117843749855513,
        "org.apache.commons.math3.linear$RealVector#sparseIterator()": -0.02117843749855513,
        "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)": -0.03020300161507012,
        "org.apache.commons.math3.linear$RealVector#toArray()": -0.03020300161507012,
        "org.apache.commons.math3.linear$RealVector#unitVector()": -0.03388159925233315,
        "org.apache.commons.math3.linear$RealVector#unitize()": -0.03388159925233315,
        "org.apache.commons.math3.linear$RealVector#unmodifiableRealVector(org.apache.commons.math3.linear.RealVector)": -0.08365844617835583,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": -0.03020300161507012,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": -0.043217830657893724,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": -0.03020300161507012,
        "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": -0.043217830657893724,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)": -0.02117843749855513,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)": -0.03020300161507012,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)": -0.02117843749855513,
        "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)": -0.03020300161507012,
        "org.apache.commons.math3.linear$RealVector$1#hasNext()": -0.13890219991002795,
        "org.apache.commons.math3.linear$RealVector$1#next()": -0.13890219991002795,
        "org.apache.commons.math3.linear$RealVector$1#remove()": -0.02605667394101019,
        "org.apache.commons.math3.linear$RealVector$2#add(org.apache.commons.math3.linear.RealVector)": -0.02117843749855508,
        "org.apache.commons.math3.linear$RealVector$2#addToEntry(int,double)": -0.02117843749855508,
        "org.apache.commons.math3.linear$RealVector$2#append(double)": -0.02117843749855508,
        "org.apache.commons.math3.linear$RealVector$2#append(org.apache.commons.math3.linear.RealVector)": -0.02117843749855508,
        "org.apache.commons.math3.linear$RealVector$2#combine(double,double,org.apache.commons.math3.linear.RealVector)": -0.02117843749855508,
        "org.apache.commons.math3.linear$RealVector$2#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)": -0.02117843749855508,
        "org.apache.commons.math3.linear$RealVector$2#copy()": -0.02117843749855508,
        "org.apache.commons.math3.linear$RealVector$2#cosine(org.apache.commons.math3.linear.RealVector)": -0.02117843749855508,
        "org.apache.commons.math3.linear$RealVector$2#dotProduct(org.apache.commons.math3.linear.RealVector)": -0.02117843749855508,
        "org.apache.commons.math3.linear$RealVector$2#ebeDivide(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#ebeMultiply(org.apache.commons.math3.linear.RealVector)": 0.0,
        "org.apache.commons.math3.linear$RealVector$2#getDimension()": -0.03722795378982391,
        "org.apache.commons.math3.linear$RealVector$2#getDistance(org.apache.commons.math3.linear.RealVector)": -0.02117843749855508,
        "org.apache.commons.math3.linear$RealVector$2#getEntry(int)": -0.04321783065789364,
        "org.apache.commons.math3.linear$RealVector$2#getL1Distance(org.apache.commons.math3.linear.RealVector)": -0.02117843749855508,
        "org.apache.commons.math3.linear$RealVector$2#getL1Norm()": -0.02117843749855508,
        "org.apache.commons.math3.linear$RealVector$2#getLInfDistance(org.apache.commons.math3.linear.RealVector)": -0.02117843749855508,
        "org.apache.commons.math3.linear$RealVector$2#getLInfNorm()": -0.02117843749855508,
        "org.apache.commons.math3.linear$RealVector$2#getNorm()": -0.02117843749855508,
        "org.apache.commons.math3.linear$RealVector$2#getSubVector(int,int)": -0.02117843749855508,
        "org.apache.commons.math3.linear$RealVector$2#isInfinite()": -0.02117843749855508,
        "org.apache.commons.math3.linear$RealVector$2#isNaN()": -0.02117843749855508,
        "org.apache.commons.math3.linear$RealVector$2#iterator()": -0.030203001615070058,
        "org.apache.commons.math3.linear$RealVector$2#map(org.apache.commons.math3.analysis.UnivariateFunction)": -0.02117843749855508,
        "org.apache.commons.math3.linear$RealVector$2#mapAdd(double)": -0.02117843749855508,
        "org.apache.commons.math3.linear$RealVector$2#mapAddToSelf(double)": -0.02117843749855508,
        "org.apache.commons.math3.linear$RealVector$2#mapDivide(double)": -0.02117843749855508,
        "org.apache.commons.math3.linear$RealVector$2#mapDivideToSelf(double)": -0.02117843749855508,
        "org.apache.commons.math3.linear$RealVector$2#mapMultiply(double)": -0.02117843749855508,
        "org.apache.commons.math3.linear$RealVector$2#mapMultiplyToSelf(double)": -0.02117843749855508,
        "org.apache.commons.math3.linear$RealVector$2#mapSubtract(double)": -0.02117843749855508,
        "org.apache.commons.math3.linear$RealVector$2#mapSubtractToSelf(double)": -0.02117843749855508,
        "org.apache.commons.math3.linear$RealVector$2#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)": -0.02117843749855508,
        "org.apache.commons.math3.linear$RealVector$2#outerProduct(org.apache.commons.math3.linear.RealVector)": -0.02117843749855508,
        "org.apache.commons.math3.linear$RealVector$2#set(double)": -0.02605667394101019,
        "org.apache.commons.math3.linear$RealVector$2#setEntry(int,double)": -0.02117843749855508,
        "org.apache.commons.math3.linear$RealVector$2#setSubVector(int,org.apache.commons.math3.linear.RealVector)": -0.02117843749855508,
        "org.apache.commons.math3.linear$RealVector$2#sparseIterator()": -0.02117843749855508,
        "org.apache.commons.math3.linear$RealVector$2#subtract(org.apache.commons.math3.linear.RealVector)": -0.030203001615070058,
        "org.apache.commons.math3.linear$RealVector$2#toArray()": -0.02117843749855508,
        "org.apache.commons.math3.linear$RealVector$2#unitVector()": -0.02117843749855508,
        "org.apache.commons.math3.linear$RealVector$2#unitize()": -0.02117843749855508,
        "org.apache.commons.math3.linear$RealVector$2$1#hasNext()": -0.030203001615070058,
        "org.apache.commons.math3.linear$RealVector$2$1#next()": -0.030203001615070058,
        "org.apache.commons.math3.linear$RealVector$2$1#remove()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$2#hasNext()": -0.02117843749855508,
        "org.apache.commons.math3.linear$RealVector$2$2#next()": -0.02117843749855508,
        "org.apache.commons.math3.linear$RealVector$2$2#remove()": 0.0,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#RealVector$2$UnmodifiableEntry(org.apache.commons.math3.linear.RealVector$2)": -0.03722795378982391,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#getValue()": -0.03722795378982391,
        "org.apache.commons.math3.linear$RealVector$2$UnmodifiableEntry#setValue(double)": -0.030203001615070058,
        "org.apache.commons.math3.linear$RealVector$Entry#RealVector$Entry(org.apache.commons.math3.linear.RealVector)": -0.14213259137413714,
        "org.apache.commons.math3.linear$RealVector$Entry#getIndex()": -0.14213259137413714,
        "org.apache.commons.math3.linear$RealVector$Entry#getValue()": -0.13890219991002797,
        "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)": -0.14213259137413714,
        "org.apache.commons.math3.linear$RealVector$Entry#setValue(double)": -0.08204432229655638,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#RealVector$SparseEntryIterator(org.apache.commons.math3.linear.RealVector)": -0.02117843749855513,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)": -0.02117843749855513,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()": -0.02117843749855513,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()": -0.02117843749855513,
        "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#remove()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat()": -0.043217830657893724,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)": -0.20524882519220297,
        "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)": 0.767642086617573,
        "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector)": -0.07354845351903379,
        "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector,java.lang.StringBuffer,java.text.FieldPosition)": -0.07354845351903379,
        "org.apache.commons.math3.linear$RealVectorFormat#getAvailableLocales()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#getFormat()": -0.02117843749855508,
        "org.apache.commons.math3.linear$RealVectorFormat#getInstance()": 0.7727032177509603,
        "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)": 0.767642086617573,
        "org.apache.commons.math3.linear$RealVectorFormat#getPrefix()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#getSeparator()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#getSuffix()": 0.0,
        "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String)": -0.08365844617835566,
        "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String,java.text.ParsePosition)": -0.09577473880991118,
        "org.apache.commons.math3.linear$SingularMatrixException#SingularMatrixException()": -0.07175109053430889,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#TriDiagonalTransformer(org.apache.commons.math3.linear.RealMatrix)": 1.045821407242791,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getHouseholderVectorsRef()": 0.0,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getMainDiagonalRef()": 0.1556330099671964,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getQ()": 1.0505694102541054,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getQT()": 1.0493695067582285,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getSecondaryDiagonalRef()": 0.1556330099671964,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#getT()": -0.03388159925233315,
        "org.apache.commons.math3.linear$TriDiagonalTransformer#transform()": 1.0469957296909143,
        "org.apache.commons.math3.optim$AbstractConvergenceChecker#AbstractConvergenceChecker(double,double)": 0.0532637628010357,
        "org.apache.commons.math3.optim$AbstractConvergenceChecker#getAbsoluteThreshold()": 0.07375743078894634,
        "org.apache.commons.math3.optim$AbstractConvergenceChecker#getRelativeThreshold()": 0.07262164288591119,
        "org.apache.commons.math3.optim$BaseMultivariateOptimizer#BaseMultivariateOptimizer(org.apache.commons.math3.optim.ConvergenceChecker)": 1.577626625082394,
        "org.apache.commons.math3.optim$BaseMultivariateOptimizer#checkParameters()": 1.5738367299319966,
        "org.apache.commons.math3.optim$BaseMultivariateOptimizer#getLowerBound()": 0.2646967414713438,
        "org.apache.commons.math3.optim$BaseMultivariateOptimizer#getStartPoint()": 0.2655180356420134,
        "org.apache.commons.math3.optim$BaseMultivariateOptimizer#getUpperBound()": 0.2696561297330845,
        "org.apache.commons.math3.optim$BaseMultivariateOptimizer#optimize(org.apache.commons.math3.optim.OptimizationData[])": 1.5813886015619625,
        "org.apache.commons.math3.optim$BaseMultivariateOptimizer#parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])": 1.5813886015619625,
        "org.apache.commons.math3.optim$BaseOptimizer#BaseOptimizer(org.apache.commons.math3.optim.ConvergenceChecker)": 1.5665471401704898,
        "org.apache.commons.math3.optim$BaseOptimizer#getConvergenceChecker()": 0.27049022938073863,
        "org.apache.commons.math3.optim$BaseOptimizer#getEvaluations()": 0.6633485934959014,
        "org.apache.commons.math3.optim$BaseOptimizer#getIterations()": 1.8199999999999998,
        "org.apache.commons.math3.optim$BaseOptimizer#getMaxEvaluations()": 0.13953186302471457,
        "org.apache.commons.math3.optim$BaseOptimizer#getMaxIterations()": 0.0,
        "org.apache.commons.math3.optim$BaseOptimizer#incrementEvaluationCount()": 1.6031817109760107,
        "org.apache.commons.math3.optim$BaseOptimizer#incrementIterationCount()": -0.0787360877656133,
        "org.apache.commons.math3.optim$BaseOptimizer#optimize(org.apache.commons.math3.optim.OptimizationData[])": 1.5702072081858498,
        "org.apache.commons.math3.optim$BaseOptimizer#parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])": 1.5702072081858498,
        "org.apache.commons.math3.optim$BaseOptimizer$MaxEvalCallback#BaseOptimizer$MaxEvalCallback()": 0.2207607025435846,
        "org.apache.commons.math3.optim$BaseOptimizer$MaxEvalCallback#trigger(int)": -0.043217830657893724,
        "org.apache.commons.math3.optim$BaseOptimizer$MaxIterCallback#BaseOptimizer$MaxIterCallback()": 0.2207607025435846,
        "org.apache.commons.math3.optim$BaseOptimizer$MaxIterCallback#trigger(int)": 0.0,
        "org.apache.commons.math3.optim$InitialGuess#InitialGuess(double[])": 0.2557939144788891,
        "org.apache.commons.math3.optim$InitialGuess#getInitialGuess()": 0.2565936616767789,
        "org.apache.commons.math3.optim$MaxEval#MaxEval(int)": 1.5830183724338658,
        "org.apache.commons.math3.optim$MaxEval#getMaxEval()": 0.24555918820740896,
        "org.apache.commons.math3.optim$MaxEval#unlimited()": 0.0,
        "org.apache.commons.math3.optim$MaxIter#MaxIter(int)": -0.08204432229655638,
        "org.apache.commons.math3.optim$MaxIter#getMaxIter()": -0.08204432229655634,
        "org.apache.commons.math3.optim$MaxIter#unlimited()": 0.0,
        "org.apache.commons.math3.optim$PointValuePair#PointValuePair(double[],double)": 1.5755791241628478,
        "org.apache.commons.math3.optim$PointValuePair#PointValuePair(double[],double,boolean)": 1.5755791241628478,
        "org.apache.commons.math3.optim$PointValuePair#getPoint()": 1.6056202207714794,
        "org.apache.commons.math3.optim$PointValuePair#getPointRef()": 0.6970571075762542,
        "org.apache.commons.math3.optim$PointValuePair#writeReplace()": -0.014886261892339193,
        "org.apache.commons.math3.optim$PointValuePair$DataTransferObject#PointValuePair$DataTransferObject(double[],double)": -0.014886261892339193,
        "org.apache.commons.math3.optim$PointValuePair$DataTransferObject#readResolve()": -0.014886261892339193,
        "org.apache.commons.math3.optim$PointVectorValuePair#PointVectorValuePair(double[],double[])": 0.16335936730746176,
        "org.apache.commons.math3.optim$PointVectorValuePair#PointVectorValuePair(double[],double[],boolean)": 0.16335936730746176,
        "org.apache.commons.math3.optim$PointVectorValuePair#getPoint()": -0.08204432229655638,
        "org.apache.commons.math3.optim$PointVectorValuePair#getPointRef()": -0.11698667480538633,
        "org.apache.commons.math3.optim$PointVectorValuePair#getValue()": -0.03722795378982411,
        "org.apache.commons.math3.optim$PointVectorValuePair#getValueRef()": 0.1378639065504134,
        "org.apache.commons.math3.optim$PointVectorValuePair#writeReplace()": -0.014886261892339193,
        "org.apache.commons.math3.optim$PointVectorValuePair$DataTransferObject#PointVectorValuePair$DataTransferObject(double[],double[])": -0.014886261892339193,
        "org.apache.commons.math3.optim$PointVectorValuePair$DataTransferObject#readResolve()": -0.014886261892339193,
        "org.apache.commons.math3.optim$SimpleBounds#SimpleBounds(double[],double[])": 1.1346208906309616,
        "org.apache.commons.math3.optim$SimpleBounds#getLower()": 0.19949485007226064,
        "org.apache.commons.math3.optim$SimpleBounds#getUpper()": 0.19949485007226064,
        "org.apache.commons.math3.optim$SimpleBounds#unbounded(int)": 1.0549788666348403,
        "org.apache.commons.math3.optim$SimpleValueChecker#SimpleValueChecker(double,double)": 0.739136643302807,
        "org.apache.commons.math3.optim$SimpleValueChecker#SimpleValueChecker(double,double,int)": -0.02117843749855513,
        "org.apache.commons.math3.optim$SimpleValueChecker#converged(int,org.apache.commons.math3.optim.PointValuePair,org.apache.commons.math3.optim.PointValuePair)": 0.7421609328157985,
        "org.apache.commons.math3.optim$SimpleVectorValueChecker#SimpleVectorValueChecker(double,double)": 0.12991074552085696,
        "org.apache.commons.math3.optim$SimpleVectorValueChecker#SimpleVectorValueChecker(double,double,int)": -0.026056673941010255,
        "org.apache.commons.math3.optim$SimpleVectorValueChecker#converged(int,org.apache.commons.math3.optim.PointVectorValuePair,org.apache.commons.math3.optim.PointVectorValuePair)": 0.1362236284937715,
        "org.apache.commons.math3.optim.nonlinear.scalar$GoalType#<clinit>()": 1.5447755722018561,
        "org.apache.commons.math3.optim.nonlinear.scalar$GoalType#GoalType(java.lang.String,int)": 0.26416732448696584,
        "org.apache.commons.math3.optim.nonlinear.scalar$GradientMultivariateOptimizer#GradientMultivariateOptimizer(org.apache.commons.math3.optim.ConvergenceChecker)": 0.162572719285181,
        "org.apache.commons.math3.optim.nonlinear.scalar$GradientMultivariateOptimizer#computeObjectiveGradient(double[])": 0.16486316941713217,
        "org.apache.commons.math3.optim.nonlinear.scalar$GradientMultivariateOptimizer#optimize(org.apache.commons.math3.optim.OptimizationData[])": 0.162572719285181,
        "org.apache.commons.math3.optim.nonlinear.scalar$GradientMultivariateOptimizer#parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])": 0.162572719285181,
        "org.apache.commons.math3.optim.nonlinear.scalar$MultivariateOptimizer#MultivariateOptimizer(org.apache.commons.math3.optim.ConvergenceChecker)": 1.566499636083063,
        "org.apache.commons.math3.optim.nonlinear.scalar$MultivariateOptimizer#computeObjectiveValue(double[])": 1.6105509389873927,
        "org.apache.commons.math3.optim.nonlinear.scalar$MultivariateOptimizer#getGoalType()": 0.2991333347519867,
        "org.apache.commons.math3.optim.nonlinear.scalar$MultivariateOptimizer#optimize(org.apache.commons.math3.optim.OptimizationData[])": 1.5674902656812317,
        "org.apache.commons.math3.optim.nonlinear.scalar$MultivariateOptimizer#parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])": 1.5674902656812317,
        "org.apache.commons.math3.optim.nonlinear.scalar$ObjectiveFunction#ObjectiveFunction(org.apache.commons.math3.analysis.MultivariateFunction)": 0.31443674888646594,
        "org.apache.commons.math3.optim.nonlinear.scalar$ObjectiveFunction#getObjectiveFunction()": 0.3214120227334632,
        "org.apache.commons.math3.optim.nonlinear.scalar$ObjectiveFunctionGradient#ObjectiveFunctionGradient(org.apache.commons.math3.analysis.MultivariateVectorFunction)": -0.035851885164074865,
        "org.apache.commons.math3.optim.nonlinear.scalar$ObjectiveFunctionGradient#getObjectiveFunctionGradient()": -0.035851885164074865,
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient$NonLinearConjugateGradientOptimizer#NonLinearConjugateGradientOptimizer(org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula,org.apache.commons.math3.optim.ConvergenceChecker)": 0.16972171342593187,
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient$NonLinearConjugateGradientOptimizer#NonLinearConjugateGradientOptimizer(org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula,org.apache.commons.math3.optim.ConvergenceChecker,org.apache.commons.math3.analysis.solvers.UnivariateSolver)": -0.02117843749855513,
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient$NonLinearConjugateGradientOptimizer#NonLinearConjugateGradientOptimizer(org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula,org.apache.commons.math3.optim.ConvergenceChecker,org.apache.commons.math3.analysis.solvers.UnivariateSolver,org.apache.commons.math3.optim.nonlinear.scalar.gradient.Preconditioner)": 0.162572719285181,
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient$NonLinearConjugateGradientOptimizer#checkParameters()": 0.162572719285181,
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient$NonLinearConjugateGradientOptimizer#doOptimize()": 0.16486316941713217,
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient$NonLinearConjugateGradientOptimizer#findUpperBound(org.apache.commons.math3.analysis.UnivariateFunction,double,double)": 0.16486316941713217,
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient$NonLinearConjugateGradientOptimizer#optimize(org.apache.commons.math3.optim.OptimizationData[])": 0.162572719285181,
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient$NonLinearConjugateGradientOptimizer#parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])": 0.162572719285181,
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient$NonLinearConjugateGradientOptimizer$1#<clinit>()": -0.03356143503212369,
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient$NonLinearConjugateGradientOptimizer$Formula#<clinit>()": 0.162572719285181,
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient$NonLinearConjugateGradientOptimizer$Formula#NonLinearConjugateGradientOptimizer$Formula(java.lang.String,int)": -0.035851885164074865,
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient$NonLinearConjugateGradientOptimizer$IdentityPreconditioner#NonLinearConjugateGradientOptimizer$IdentityPreconditioner()": -0.03356143503212369,
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient$NonLinearConjugateGradientOptimizer$IdentityPreconditioner#precondition(double[],double[])": 0.1672420442173061,
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient$NonLinearConjugateGradientOptimizer$LineSearchFunction#NonLinearConjugateGradientOptimizer$LineSearchFunction(org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer,double[],double[])": 0.16486316941713217,
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient$NonLinearConjugateGradientOptimizer$LineSearchFunction#value(double)": -0.03356143503212369,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$AbstractSimplex#AbstractSimplex(double[])": 0.7109009118038623,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$AbstractSimplex#AbstractSimplex(double[][])": -0.040322550682806754,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$AbstractSimplex#AbstractSimplex(int)": 0.0,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$AbstractSimplex#AbstractSimplex(int,double)": -0.040322550682806754,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$AbstractSimplex#build(double[])": 0.7007691521661106,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$AbstractSimplex#createHypercubeSteps(int,double)": -0.04032255068280666,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$AbstractSimplex#evaluate(org.apache.commons.math3.analysis.MultivariateFunction,java.util.Comparator)": 0.7007691521661106,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$AbstractSimplex#getDimension()": 0.0829972302260864,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$AbstractSimplex#getPoint(int)": 0.7002850102091769,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$AbstractSimplex#getPoints()": 0.0829972302260864,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$AbstractSimplex#getSize()": 0.0829972302260864,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$AbstractSimplex#replaceWorstPoint(org.apache.commons.math3.optim.PointValuePair,java.util.Comparator)": 0.015488481669418852,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$AbstractSimplex#setPoint(int,org.apache.commons.math3.optim.PointValuePair)": 0.458061970933892,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$AbstractSimplex#setPoints(org.apache.commons.math3.optim.PointValuePair[])": 0.4739288926535292,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#CMAESOptimizer(int,double,boolean,int,int,org.apache.commons.math3.random.RandomGenerator,boolean,org.apache.commons.math3.optim.ConvergenceChecker)": 1.1812825439319892,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#checkParameters()": 1.1942973729748128,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#copyColumn(org.apache.commons.math3.linear.RealMatrix,int,org.apache.commons.math3.linear.RealMatrix,int)": 1.203321937091328,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#diag(org.apache.commons.math3.linear.RealMatrix)": 1.203321937091328,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#divide(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix)": 1.150032331498559,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#doOptimize()": 1.203321937091328,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#eye(int,int)": 1.203321937091328,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#getStatisticsDHistory()": 0.0,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#getStatisticsFitnessHistory()": 0.0,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#getStatisticsMeanHistory()": 0.0,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#getStatisticsSigmaHistory()": 0.0,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#initializeCMA(double[])": 1.203321937091328,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#inverse(int[])": 1.150032331498559,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#log(org.apache.commons.math3.linear.RealMatrix)": 1.203321937091328,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#max(double[])": 1.203321937091328,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#max(org.apache.commons.math3.linear.RealMatrix)": 1.203321937091328,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#min(double[])": 1.203321937091328,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#min(org.apache.commons.math3.linear.RealMatrix)": 1.203321937091328,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#ones(int,int)": 1.203321937091328,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#optimize(org.apache.commons.math3.optim.OptimizationData[])": 1.1841778239070762,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])": 1.1841778239070762,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#push(double[],double)": 1.203321937091328,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#randn(int)": 0.0,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#randn1(int,int)": 1.203321937091328,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#repmat(org.apache.commons.math3.linear.RealMatrix,int,int)": 1.203321937091328,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#reverse(int[])": 1.150032331498559,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#selectColumns(org.apache.commons.math3.linear.RealMatrix,int[])": 1.203321937091328,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#sequence(double,double,double)": 1.203321937091328,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#sortedIndices(double[])": 1.203321937091328,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#sqrt(org.apache.commons.math3.linear.RealMatrix)": 1.203321937091328,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#square(org.apache.commons.math3.linear.RealMatrix)": 1.203321937091328,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#sumRows(org.apache.commons.math3.linear.RealMatrix)": 1.150032331498559,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#times(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix)": 1.203321937091328,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#triu(org.apache.commons.math3.linear.RealMatrix,int)": 1.150032331498559,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#updateBD(double)": 1.150032331498559,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#updateCovariance(boolean,org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix,int[],org.apache.commons.math3.linear.RealMatrix)": 1.150032331498559,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#updateCovarianceDiagonalOnly(boolean,org.apache.commons.math3.linear.RealMatrix)": 0.19708951329177274,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#updateEvolutionPaths(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix)": 1.203321937091328,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer#zeros(int,int)": 1.203321937091328,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer$DoubleIndex#CMAESOptimizer$DoubleIndex(double,int)": 0.26667361784317656,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer$DoubleIndex#compareTo(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$DoubleIndex)": 0.26667361784317656,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer$DoubleIndex#equals(java.lang.Object)": 0.0,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer$DoubleIndex#hashCode()": 0.0,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer$FitnessFunction#CMAESOptimizer$FitnessFunction(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer)": 0.26667361784317656,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer$FitnessFunction#isFeasible(double[])": 0.0,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer$FitnessFunction#penalty(double[],double[])": 1.203321937091328,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer$FitnessFunction#repair(double[])": 1.203321937091328,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer$FitnessFunction#setValueRange(double)": 0.26667361784317656,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer$FitnessFunction#value(double[])": 1.203321937091328,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer$PopulationSize#CMAESOptimizer$PopulationSize(int)": 1.1815313095330273,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer$PopulationSize#getPopulationSize()": 0.2576490537266616,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer$Sigma#CMAESOptimizer$Sigma(double[])": 1.1812825439319892,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$CMAESOptimizer$Sigma#getSigma()": 0.2576490537266616,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$MultiDirectionalSimplex#MultiDirectionalSimplex(double[])": 0.4951073301520843,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$MultiDirectionalSimplex#MultiDirectionalSimplex(double[],double,double)": 0.4951073301520843,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$MultiDirectionalSimplex#MultiDirectionalSimplex(double[][])": -0.014886261892339193,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$MultiDirectionalSimplex#MultiDirectionalSimplex(double[][],double,double)": -0.014886261892339193,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$MultiDirectionalSimplex#MultiDirectionalSimplex(int)": -0.02117843749855513,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$MultiDirectionalSimplex#MultiDirectionalSimplex(int,double)": -0.02117843749855513,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$MultiDirectionalSimplex#MultiDirectionalSimplex(int,double,double)": 0.0,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$MultiDirectionalSimplex#MultiDirectionalSimplex(int,double,double,double)": -0.02117843749855513,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$MultiDirectionalSimplex#evaluateNewSimplex(org.apache.commons.math3.analysis.MultivariateFunction,org.apache.commons.math3.optim.PointValuePair[],double,java.util.Comparator)": 0.4690506562110741,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$MultiDirectionalSimplex#iterate(org.apache.commons.math3.analysis.MultivariateFunction,java.util.Comparator)": 0.4690506562110741,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$NelderMeadSimplex#NelderMeadSimplex(double[])": 0.45478477946927753,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$NelderMeadSimplex#NelderMeadSimplex(double[],double,double,double,double)": 0.45478477946927753,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$NelderMeadSimplex#NelderMeadSimplex(double[][])": -0.03722795378982411,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$NelderMeadSimplex#NelderMeadSimplex(double[][],double,double,double,double)": -0.03722795378982411,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$NelderMeadSimplex#NelderMeadSimplex(int)": -0.03388159925233315,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$NelderMeadSimplex#NelderMeadSimplex(int,double)": -0.03388159925233315,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$NelderMeadSimplex#NelderMeadSimplex(int,double,double,double,double)": 0.0,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$NelderMeadSimplex#NelderMeadSimplex(int,double,double,double,double,double)": -0.03388159925233315,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$NelderMeadSimplex#iterate(org.apache.commons.math3.analysis.MultivariateFunction,java.util.Comparator)": 0.4329794156003771,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$PowellOptimizer#<clinit>()": 0.18806494917525776,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$PowellOptimizer#PowellOptimizer(double,double)": 0.19221127684931763,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$PowellOptimizer#PowellOptimizer(double,double,double,double)": 0.2033816888979887,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$PowellOptimizer#PowellOptimizer(double,double,double,double,org.apache.commons.math3.optim.ConvergenceChecker)": 0.18806494917525776,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$PowellOptimizer#PowellOptimizer(double,double,org.apache.commons.math3.optim.ConvergenceChecker)": 0.19221127684931763,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$PowellOptimizer#checkParameters()": 0.18806494917525776,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$PowellOptimizer#doOptimize()": 0.18806494917525776,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$PowellOptimizer#newPointAndDirection(double[],double[],double)": 0.19221127684931763,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$PowellOptimizer$LineSearch#PowellOptimizer$LineSearch(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer,double,double)": 0.18806494917525776,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$PowellOptimizer$LineSearch#search(double[],double[])": 0.19221127684931763,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$PowellOptimizer$LineSearch$1#value(double)": -0.006213327599938173,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$SimplexOptimizer#SimplexOptimizer(double,double)": 0.6388818205219842,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$SimplexOptimizer#SimplexOptimizer(org.apache.commons.math3.optim.ConvergenceChecker)": 0.6970571075762542,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$SimplexOptimizer#checkParameters()": 0.6970571075762542,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$SimplexOptimizer#doOptimize()": 0.6970571075762542,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$SimplexOptimizer#optimize(org.apache.commons.math3.optim.OptimizationData[])": 0.6970571075762542,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$SimplexOptimizer#parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])": 0.6970571075762542,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$SimplexOptimizer$1#value(double[])": 0.0829972302260864,
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv$SimplexOptimizer$2#compare(org.apache.commons.math3.optim.PointValuePair,org.apache.commons.math3.optim.PointValuePair)": 0.0829972302260864,
        "org.apache.commons.math3.optim.nonlinear.vector$JacobianMultivariateVectorOptimizer#JacobianMultivariateVectorOptimizer(org.apache.commons.math3.optim.ConvergenceChecker)": 0.15854918236186039,
        "org.apache.commons.math3.optim.nonlinear.vector$JacobianMultivariateVectorOptimizer#computeJacobian(double[])": 0.1672796234789129,
        "org.apache.commons.math3.optim.nonlinear.vector$JacobianMultivariateVectorOptimizer#optimize(org.apache.commons.math3.optim.OptimizationData[])": 0.16238952975406262,
        "org.apache.commons.math3.optim.nonlinear.vector$JacobianMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])": 0.16238952975406262,
        "org.apache.commons.math3.optim.nonlinear.vector$ModelFunction#ModelFunction(org.apache.commons.math3.analysis.MultivariateVectorFunction)": -0.1221153877120435,
        "org.apache.commons.math3.optim.nonlinear.vector$ModelFunction#getModelFunction()": -0.1221153877120435,
        "org.apache.commons.math3.optim.nonlinear.vector$ModelFunctionJacobian#ModelFunctionJacobian(org.apache.commons.math3.analysis.MultivariateMatrixFunction)": -0.12113743584483266,
        "org.apache.commons.math3.optim.nonlinear.vector$ModelFunctionJacobian#getModelFunctionJacobian()": -0.12113743584483266,
        "org.apache.commons.math3.optim.nonlinear.vector$MultivariateVectorOptimizer#MultivariateVectorOptimizer(org.apache.commons.math3.optim.ConvergenceChecker)": 0.15854918236186039,
        "org.apache.commons.math3.optim.nonlinear.vector$MultivariateVectorOptimizer#checkParameters()": 0.16238952975406262,
        "org.apache.commons.math3.optim.nonlinear.vector$MultivariateVectorOptimizer#computeObjectiveValue(double[])": 0.16433322947256396,
        "org.apache.commons.math3.optim.nonlinear.vector$MultivariateVectorOptimizer#getTarget()": -0.12308924987714559,
        "org.apache.commons.math3.optim.nonlinear.vector$MultivariateVectorOptimizer#getTargetSize()": -0.11197529671109208,
        "org.apache.commons.math3.optim.nonlinear.vector$MultivariateVectorOptimizer#getWeight()": 0.16433322947256396,
        "org.apache.commons.math3.optim.nonlinear.vector$MultivariateVectorOptimizer#optimize(org.apache.commons.math3.optim.OptimizationData[])": 0.16238952975406262,
        "org.apache.commons.math3.optim.nonlinear.vector$MultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])": 0.16238952975406262,
        "org.apache.commons.math3.optim.nonlinear.vector$Target#Target(double[])": -0.12405908743054467,
        "org.apache.commons.math3.optim.nonlinear.vector$Target#getTarget()": -0.12405908743054467,
        "org.apache.commons.math3.optim.nonlinear.vector$Weight#Weight(double[])": 0.16238952975406262,
        "org.apache.commons.math3.optim.nonlinear.vector$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)": 0.0,
        "org.apache.commons.math3.optim.nonlinear.vector$Weight#getWeight()": 0.16238952975406262,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#AbstractLeastSquaresOptimizer(org.apache.commons.math3.optim.ConvergenceChecker)": 0.15854918236186039,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#computeCost(double[])": 0.17227721412046587,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)": -0.043217830657893724,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#computeResiduals(double[])": 0.1653111813397748,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#computeSigma(double[],double)": -0.03020300161507012,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])": 0.1672796234789129,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#getChiSquare()": -0.11574924523976593,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#getRMS()": -0.11197529671109224,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#getWeightSquareRoot()": 0.09055402451092723,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#optimize(org.apache.commons.math3.optim.OptimizationData[])": 0.16238952975406262,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])": 0.16238952975406262,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#setCost(double)": -0.11417140306414159,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$AbstractLeastSquaresOptimizer#squareRoot(org.apache.commons.math3.linear.RealMatrix)": 0.16238952975406262,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$GaussNewtonOptimizer#GaussNewtonOptimizer(boolean,org.apache.commons.math3.optim.ConvergenceChecker)": 0.12991074552085696,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$GaussNewtonOptimizer#GaussNewtonOptimizer(org.apache.commons.math3.optim.ConvergenceChecker)": 0.14295770126779375,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$GaussNewtonOptimizer#checkParameters()": 0.13145428107187188,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$GaussNewtonOptimizer#doOptimize()": 0.13145428107187188,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer()": 0.11148088150997523,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double)": -0.06611817947801579,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double,double,double)": 0.08826026430368117,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,org.apache.commons.math3.optim.ConvergenceChecker,double,double,double,double)": -0.02117843749855513,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(org.apache.commons.math3.optim.ConvergenceChecker)": -0.02117843749855513,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$LevenbergMarquardtOptimizer#checkParameters()": 0.08940338760634933,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$LevenbergMarquardtOptimizer#determineLMDirection(double[],double[],double[],double[])": 0.1378639065504134,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$LevenbergMarquardtOptimizer#determineLMParameter(double[],double,double[],double[],double[],double[])": 0.09055402451092723,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$LevenbergMarquardtOptimizer#doOptimize()": 0.08940338760634933,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$LevenbergMarquardtOptimizer#qTy(double[])": 0.09055402451092723,
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)": 0.09055402451092723,
        "org.apache.commons.math3.optim.univariate$BracketFinder#BracketFinder()": 0.17505012013243415,
        "org.apache.commons.math3.optim.univariate$BracketFinder#BracketFinder(double,int)": 0.17505012013243415,
        "org.apache.commons.math3.optim.univariate$BracketFinder#eval(org.apache.commons.math3.analysis.UnivariateFunction,double)": 0.1779454001075211,
        "org.apache.commons.math3.optim.univariate$BracketFinder#getEvaluations()": 0.0,
        "org.apache.commons.math3.optim.univariate$BracketFinder#getFHi()": 0.0,
        "org.apache.commons.math3.optim.univariate$BracketFinder#getFLo()": 0.0,
        "org.apache.commons.math3.optim.univariate$BracketFinder#getFMid()": 0.0,
        "org.apache.commons.math3.optim.univariate$BracketFinder#getHi()": -0.02047920434173464,
        "org.apache.commons.math3.optim.univariate$BracketFinder#getLo()": -0.02047920434173464,
        "org.apache.commons.math3.optim.univariate$BracketFinder#getMaxEvaluations()": 0.0,
        "org.apache.commons.math3.optim.univariate$BracketFinder#getMid()": -0.014038252911261123,
        "org.apache.commons.math3.optim.univariate$BracketFinder#search(org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optim.nonlinear.scalar.GoalType,double,double)": 0.1779454001075211,
        "org.apache.commons.math3.optim.univariate$BrentOptimizer#<clinit>()": 0.15022890484587542,
        "org.apache.commons.math3.optim.univariate$BrentOptimizer#BrentOptimizer(double,double)": -0.057907286306700695,
        "org.apache.commons.math3.optim.univariate$BrentOptimizer#BrentOptimizer(double,double,org.apache.commons.math3.optim.ConvergenceChecker)": 0.15022890484587542,
        "org.apache.commons.math3.optim.univariate$BrentOptimizer#best(org.apache.commons.math3.optim.univariate.UnivariatePointValuePair,org.apache.commons.math3.optim.univariate.UnivariatePointValuePair,boolean)": 0.1582187394000874,
        "org.apache.commons.math3.optim.univariate$BrentOptimizer#doOptimize()": 0.1561400362386207,
        "org.apache.commons.math3.optim.univariate$SearchInterval#SearchInterval(double,double)": -0.05340478137319571,
        "org.apache.commons.math3.optim.univariate$SearchInterval#SearchInterval(double,double,double)": 0.15445780528570371,
        "org.apache.commons.math3.optim.univariate$SearchInterval#getMax()": -0.044305892587883505,
        "org.apache.commons.math3.optim.univariate$SearchInterval#getMin()": -0.044305892587883505,
        "org.apache.commons.math3.optim.univariate$SearchInterval#getStartValue()": -0.044305892587883505,
        "org.apache.commons.math3.optim.univariate$SimpleUnivariateValueChecker#SimpleUnivariateValueChecker(double,double)": 0.18103999700050377,
        "org.apache.commons.math3.optim.univariate$SimpleUnivariateValueChecker#SimpleUnivariateValueChecker(double,double,int)": -0.02117843749855513,
        "org.apache.commons.math3.optim.univariate$SimpleUnivariateValueChecker#converged(int,org.apache.commons.math3.optim.univariate.UnivariatePointValuePair,org.apache.commons.math3.optim.univariate.UnivariatePointValuePair)": 0.18103999700050377,
        "org.apache.commons.math3.optim.univariate$UnivariateObjectiveFunction#UnivariateObjectiveFunction(org.apache.commons.math3.analysis.UnivariateFunction)": -0.046274833136943666,
        "org.apache.commons.math3.optim.univariate$UnivariateObjectiveFunction#getObjectiveFunction()": -0.046274833136943666,
        "org.apache.commons.math3.optim.univariate$UnivariateOptimizer#UnivariateOptimizer(org.apache.commons.math3.optim.ConvergenceChecker)": 0.15022890484587542,
        "org.apache.commons.math3.optim.univariate$UnivariateOptimizer#computeObjectiveValue(double)": 0.1561400362386207,
        "org.apache.commons.math3.optim.univariate$UnivariateOptimizer#getGoalType()": -0.04228456821063528,
        "org.apache.commons.math3.optim.univariate$UnivariateOptimizer#getMax()": -0.04228456821063528,
        "org.apache.commons.math3.optim.univariate$UnivariateOptimizer#getMin()": -0.04228456821063528,
        "org.apache.commons.math3.optim.univariate$UnivariateOptimizer#getStartValue()": -0.04228456821063528,
        "org.apache.commons.math3.optim.univariate$UnivariateOptimizer#optimize(org.apache.commons.math3.optim.OptimizationData[])": 0.15214977131231208,
        "org.apache.commons.math3.optim.univariate$UnivariateOptimizer#parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])": 0.15214977131231208,
        "org.apache.commons.math3.optim.univariate$UnivariatePointValuePair#UnivariatePointValuePair(double,double)": -0.04228456821063528,
        "org.apache.commons.math3.optim.univariate$UnivariatePointValuePair#getPoint()": -0.04020586504916843,
        "org.apache.commons.math3.optim.univariate$UnivariatePointValuePair#getValue()": -0.04228456821063528,
        "org.apache.commons.math3.random$BitsStreamGenerator#BitsStreamGenerator()": -0.48291936238207844,
        "org.apache.commons.math3.random$BitsStreamGenerator#clear()": -0.48291936238207844,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextBoolean()": -0.08365844617835566,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextBytes(byte[])": -0.06991558765662498,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()": 0.8426599405409583,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextFloat()": -0.08365844617835566,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()": 1.0639788854458048,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextInt()": -0.12184126223888567,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextInt(int)": -0.1952564575714989,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextLong()": -0.11197529671109224,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextLong(long)": 0.0,
        "org.apache.commons.math3.random$MersenneTwister#<clinit>()": 0.08163297234001088,
        "org.apache.commons.math3.random$MersenneTwister#MersenneTwister()": 1.1346208906309616,
        "org.apache.commons.math3.random$MersenneTwister#MersenneTwister(int)": -0.1311434743896821,
        "org.apache.commons.math3.random$MersenneTwister#MersenneTwister(int[])": -0.014886261892339193,
        "org.apache.commons.math3.random$MersenneTwister#MersenneTwister(long)": -0.11069569518004782,
        "org.apache.commons.math3.random$MersenneTwister#next(int)": 1.0689323965634512,
        "org.apache.commons.math3.random$MersenneTwister#setSeed(int)": 1.0182812915881623,
        "org.apache.commons.math3.random$MersenneTwister#setSeed(int[])": 1.0610572338600925,
        "org.apache.commons.math3.random$MersenneTwister#setSeed(long)": 1.0620270714134916,
        "org.apache.commons.math3.util$CompositeFormat#CompositeFormat()": 0.0,
        "org.apache.commons.math3.util$CompositeFormat#formatDouble(double,java.text.NumberFormat,java.lang.StringBuffer,java.text.FieldPosition)": -0.1624733031763912,
        "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()": 0.773953581870489,
        "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)": -0.39095802810830427,
        "org.apache.commons.math3.util$CompositeFormat#parseAndIgnoreWhitespace(java.lang.String,java.text.ParsePosition)": -0.1775472677729006,
        "org.apache.commons.math3.util$CompositeFormat#parseFixedstring(java.lang.String,java.lang.String,java.text.ParsePosition)": -0.17571154601368955,
        "org.apache.commons.math3.util$CompositeFormat#parseNextCharacter(java.lang.String,java.text.ParsePosition)": -0.17754726777290064,
        "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,double,java.text.ParsePosition)": -0.0770387745619987,
        "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,java.text.NumberFormat,java.text.ParsePosition)": -0.17293333622861573,
        "org.apache.commons.math3.util$FastMath#<clinit>()": -1.1324686251859672,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0.0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": -0.04595021916819286,
        "org.apache.commons.math3.util$FastMath#abs(double)": -0.646488907491207,
        "org.apache.commons.math3.util$FastMath#abs(float)": -0.02117843749855508,
        "org.apache.commons.math3.util$FastMath#abs(int)": -0.3375412094849588,
        "org.apache.commons.math3.util$FastMath#abs(long)": -0.34250648867977695,
        "org.apache.commons.math3.util$FastMath#acos(double)": -0.09577473880991118,
        "org.apache.commons.math3.util$FastMath#acosh(double)": -0.03388159925233315,
        "org.apache.commons.math3.util$FastMath#asin(double)": -0.09720418870875874,
        "org.apache.commons.math3.util$FastMath#asinh(double)": -0.03388159925233315,
        "org.apache.commons.math3.util$FastMath#atan(double)": 0.6819945283921071,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": 0.579624295627092,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": -0.16247330317639122,
        "org.apache.commons.math3.util$FastMath#atanh(double)": -0.03388159925233315,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": -0.10940470912000881,
        "org.apache.commons.math3.util$FastMath#ceil(double)": -0.31868124651298674,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": -0.06991558765662509,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": -0.02117843749855508,
        "org.apache.commons.math3.util$FastMath#cos(double)": 0.9051807255514103,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": 0.9086778945127698,
        "org.apache.commons.math3.util$FastMath#cosh(double)": -0.09286415234455231,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": -0.16052148914407816,
        "org.apache.commons.math3.util$FastMath#exp(double)": -0.5814435055003063,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": -0.6943165515314199,
        "org.apache.commons.math3.util$FastMath#expm1(double)": -0.06611817947801579,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": -0.10139725303270936,
        "org.apache.commons.math3.util$FastMath#floor(double)": -0.5761912907405939,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": -0.1474027788222274,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": -0.02117843749855508,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": -0.14213259137413714,
        "org.apache.commons.math3.util$FastMath#log(double)": 0.6054376686408968,
        "org.apache.commons.math3.util$FastMath#log(double,double)": -0.014886261892339193,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": 0.49766668497923283,
        "org.apache.commons.math3.util$FastMath#log10(double)": -0.12184126223888567,
        "org.apache.commons.math3.util$FastMath#log1p(double)": -0.4421696792708984,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0.0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": -0.164773610443709,
        "org.apache.commons.math3.util$FastMath#max(float,float)": -0.02117843749855508,
        "org.apache.commons.math3.util$FastMath#max(int,int)": -0.2390960487364011,
        "org.apache.commons.math3.util$FastMath#max(long,long)": -0.05340478137319571,
        "org.apache.commons.math3.util$FastMath#min(double,double)": -0.40434710976198296,
        "org.apache.commons.math3.util$FastMath#min(float,float)": -0.02117843749855508,
        "org.apache.commons.math3.util$FastMath#min(int,int)": -0.2858135581046376,
        "org.apache.commons.math3.util$FastMath#min(long,long)": -0.10940470912000877,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": -0.06004921139024044,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": -0.02605667394101019,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": -0.026056673941010255,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": -0.014886261892339193,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": -0.08976747229002532,
        "org.apache.commons.math3.util$FastMath#polySine(double)": -0.08976747229002532,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": -0.5229623947376779,
        "org.apache.commons.math3.util$FastMath#pow(double,int)": -0.2262841831307431,
        "org.apache.commons.math3.util$FastMath#random()": -0.06803904594445243,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": -0.03388159925233315,
        "org.apache.commons.math3.util$FastMath#rint(double)": -0.13998495990308282,
        "org.apache.commons.math3.util$FastMath#round(double)": -0.07703877456199862,
        "org.apache.commons.math3.util$FastMath#round(float)": -0.014886261892339193,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": -0.131143474389682,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": -0.02117843749855508,
        "org.apache.commons.math3.util$FastMath#signum(double)": -0.05790728630670072,
        "org.apache.commons.math3.util$FastMath#signum(float)": -0.02117843749855508,
        "org.apache.commons.math3.util$FastMath#sin(double)": 0.9004506791266079,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": 0.8957908516530457,
        "org.apache.commons.math3.util$FastMath#sinh(double)": -0.09286415234455231,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": -0.709835818670516,
        "org.apache.commons.math3.util$FastMath#tan(double)": -0.086813669718456,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": -0.086813669718456,
        "org.apache.commons.math3.util$FastMath#tanh(double)": -0.06004921139024046,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": -0.03020300161507012,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": -0.03020300161507012,
        "org.apache.commons.math3.util$FastMath#ulp(double)": -0.09269637280404266,
        "org.apache.commons.math3.util$FastMath#ulp(float)": -0.014886261892339193,
        "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)": -0.02715973675216174,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getK()": -0.02715973675216174,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()": -0.02715973675216174,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()": -0.02715973675216174,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": -0.6872085218511502,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": -0.6849813658427786,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": 0.5063990158917743,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0.0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()": -0.48249319875014973,
        "org.apache.commons.math3.util$FastMathLiteralArrays#FastMathLiteralArrays()": 0.0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()": -0.6872085218511502,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()": -0.6872085218511502,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()": -0.6849813658427786,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()": -0.6849813658427786,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()": 0.5063990158917743,
        "org.apache.commons.math3.util$Incrementor#Incrementor()": -0.16627277225251885,
        "org.apache.commons.math3.util$Incrementor#Incrementor(int)": -0.19463176689332812,
        "org.apache.commons.math3.util$Incrementor#Incrementor(int,org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback)": 1.2012981333888262,
        "org.apache.commons.math3.util$Incrementor#canIncrement()": -0.02117843749855508,
        "org.apache.commons.math3.util$Incrementor#getCount()": 0.20854532594310637,
        "org.apache.commons.math3.util$Incrementor#getMaximalCount()": -0.08825861887180339,
        "org.apache.commons.math3.util$Incrementor#incrementCount()": 1.236735321279757,
        "org.apache.commons.math3.util$Incrementor#incrementCount(int)": -0.014886261892339193,
        "org.apache.commons.math3.util$Incrementor#resetCount()": -0.11578138682161299,
        "org.apache.commons.math3.util$Incrementor#setMaximalCount(int)": -0.10197772836749885,
        "org.apache.commons.math3.util$Incrementor$1#trigger(int)": -0.06611817947801568,
        "org.apache.commons.math3.util$MathArrays#MathArrays()": 0.0,
        "org.apache.commons.math3.util$MathArrays#buildArray(org.apache.commons.math3.Field,int)": -0.19782126653280918,
        "org.apache.commons.math3.util$MathArrays#buildArray(org.apache.commons.math3.Field,int,int)": -0.19611383089617487,
        "org.apache.commons.math3.util$MathArrays#checkNonNegative(long[])": -0.3818404340489247,
        "org.apache.commons.math3.util$MathArrays#checkNonNegative(long[][])": -0.03388159925233315,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[])": -0.11324386768460078,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": -0.11450174410061034,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)": -0.20869552673108174,
        "org.apache.commons.math3.util$MathArrays#checkPositive(double[])": -0.3766001862045144,
        "org.apache.commons.math3.util$MathArrays#checkRectangular(long[][])": -0.03388159925233315,
        "org.apache.commons.math3.util$MathArrays#copyOf(double[])": 0.09642668855144221,
        "org.apache.commons.math3.util$MathArrays#copyOf(double[],int)": 0.06674374045770676,
        "org.apache.commons.math3.util$MathArrays#copyOf(int[])": -0.03722795378982411,
        "org.apache.commons.math3.util$MathArrays#copyOf(int[],int)": 1.1457642868242695,
        "org.apache.commons.math3.util$MathArrays#distance(double[],double[])": -0.026056673941010255,
        "org.apache.commons.math3.util$MathArrays#distance(int[],int[])": -0.040322550682806754,
        "org.apache.commons.math3.util$MathArrays#distance1(double[],double[])": -0.014886261892339193,
        "org.apache.commons.math3.util$MathArrays#distance1(int[],int[])": -0.014886261892339193,
        "org.apache.commons.math3.util$MathArrays#distanceInf(double[],double[])": -0.014886261892339193,
        "org.apache.commons.math3.util$MathArrays#distanceInf(int[],int[])": -0.014886261892339193,
        "org.apache.commons.math3.util$MathArrays#ebeAdd(double[],double[])": -0.02117843749855513,
        "org.apache.commons.math3.util$MathArrays#ebeDivide(double[],double[])": -0.04595021916819279,
        "org.apache.commons.math3.util$MathArrays#ebeMultiply(double[],double[])": -0.02117843749855513,
        "org.apache.commons.math3.util$MathArrays#ebeSubtract(double[],double[])": -0.02117843749855513,
        "org.apache.commons.math3.util$MathArrays#equals(double[],double[])": -0.026056673941010255,
        "org.apache.commons.math3.util$MathArrays#equals(float[],float[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(double[],double[])": -0.03388159925233315,
        "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(float[],float[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": -0.014886261892339193,
        "org.apache.commons.math3.util$MathArrays#isMonotonic(java.lang.Comparable[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": -0.014886261892339325,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)": -0.14106171607365048,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)": -0.14319770461680315,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double,double,double)": -0.05340478137319571,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double[],double[])": -0.05102590657302178,
        "org.apache.commons.math3.util$MathArrays#normalizeArray(double[],double)": -0.07703877456199862,
        "org.apache.commons.math3.util$MathArrays#safeNorm(double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#scale(double,double[])": -0.014886261892339325,
        "org.apache.commons.math3.util$MathArrays#scaleInPlace(double,double[])": -0.014886261892339325,
        "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])": -0.04595021916819279,
        "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])": -0.04595021916819279,
        "org.apache.commons.math3.util$MathArrays$1#compare(org.apache.commons.math3.util.Pair,org.apache.commons.math3.util.Pair)": -0.04321783065789364,
        "org.apache.commons.math3.util$MathArrays$2#<clinit>()": -0.20869552673108172,
        "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()": -0.21278162476977858,
        "org.apache.commons.math3.util$MathArrays$OrderDirection#MathArrays$OrderDirection(java.lang.String,int)": -0.21278162476977847,
        "org.apache.commons.math3.util$MathUtils#MathUtils()": 0.0,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double)": -0.06414923892895535,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double[])": -0.014886261892339193,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)": 0.5913680460105107,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.15556797802643182,
        "org.apache.commons.math3.util$MathUtils#copySign(byte,byte)": -0.03020300161507012,
        "org.apache.commons.math3.util$MathUtils#copySign(int,int)": -0.03020300161507012,
        "org.apache.commons.math3.util$MathUtils#copySign(long,long)": -0.02117843749855513,
        "org.apache.commons.math3.util$MathUtils#copySign(short,short)": -0.02117843749855513,
        "org.apache.commons.math3.util$MathUtils#hash(double)": -0.11197529671109208,
        "org.apache.commons.math3.util$MathUtils#hash(double[])": -0.09861733825562488,
        "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)": -0.12064135874300876,
        "org.apache.commons.math3.util$MathUtils#reduce(double,double,double)": -0.03388159925233315,
        "org.apache.commons.math3.util$Pair#Pair(java.lang.Object,java.lang.Object)": 0.041805756454034504,
        "org.apache.commons.math3.util$Pair#Pair(org.apache.commons.math3.util.Pair)": 0.0,
        "org.apache.commons.math3.util$Pair#equals(java.lang.Object)": -0.014886261892339193,
        "org.apache.commons.math3.util$Pair#getFirst()": -0.1614994410112891,
        "org.apache.commons.math3.util$Pair#getKey()": 0.09951794794158048,
        "org.apache.commons.math3.util$Pair#getSecond()": -0.1614994410112891,
        "org.apache.commons.math3.util$Pair#getValue()": 0.1749681674583685,
        "org.apache.commons.math3.util$Pair#hashCode()": -0.014886261892339193,
        "org.apache.commons.math3.util$Precision#<clinit>()": -0.4918175471914918,
        "org.apache.commons.math3.util$Precision#Precision()": 0.0,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,double)": 1.021737210071959,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,int)": -0.11574924523976593,
        "org.apache.commons.math3.util$Precision#equals(double,double)": 0.09178428354086372,
        "org.apache.commons.math3.util$Precision#equals(double,double,double)": 0.7448214722063462,
        "org.apache.commons.math3.util$Precision#equals(double,double,int)": 0.6579881593821362,
        "org.apache.commons.math3.util$Precision#equals(float,float)": -0.014886261892339193,
        "org.apache.commons.math3.util$Precision#equals(float,float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(float,float,int)": -0.14844073192108465,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)": -0.19951913653834946,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)": -0.11698667480538633,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)": -0.014886261892339193,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)": -0.14740277882222758,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsWithRelativeTolerance(double,double,double)": -0.014886261892339193,
        "org.apache.commons.math3.util$Precision#representableDelta(double,double)": -0.014886261892339325,
        "org.apache.commons.math3.util$Precision#round(double,int)": -0.014886261892339193,
        "org.apache.commons.math3.util$Precision#round(double,int,int)": -0.014886261892339325,
        "org.apache.commons.math3.util$Precision#round(float,int)": -0.014886261892339193,
        "org.apache.commons.math3.util$Precision#round(float,int,int)": -0.014886261892339193,
        "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)": -0.014886261892339193
    },
    "Math-7": {
        "org.apache.commons.math3.analysis.solvers$AbstractUnivariateSolver#AbstractUnivariateSolver(double)": 1.547331227810893,
        "org.apache.commons.math3.analysis.solvers$AbstractUnivariateSolver#AbstractUnivariateSolver(double,double)": -0.054175699401863,
        "org.apache.commons.math3.analysis.solvers$AbstractUnivariateSolver#AbstractUnivariateSolver(double,double,double)": -0.048774547121904675,
        "org.apache.commons.math3.analysis.solvers$AllowedSolution#<clinit>()": 1.679073591552131,
        "org.apache.commons.math3.analysis.solvers$AllowedSolution#AllowedSolution(java.lang.String,int)": 0.3332871539252261,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#BaseAbstractUnivariateSolver(double)": 1.5395706176321196,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#BaseAbstractUnivariateSolver(double,double)": -0.054175699401863,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#BaseAbstractUnivariateSolver(double,double,double)": 1.5304187521610957,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#computeObjectiveValue(double)": 1.5395706176321196,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getAbsoluteAccuracy()": 0.2038981656952682,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getEvaluations()": -0.11920741208313787,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getFunctionValueAccuracy()": 0.2046852965552407,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMax()": 0.19455459155799104,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMaxEvaluations()": 0.0,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getMin()": 0.19455459155799104,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getRelativeAccuracy()": 0.21023366360757823,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#getStartValue()": 0.22814537686636094,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#incrementEvaluationCount()": 1.5372666894123515,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#isBracketing(double,double)": -0.027630038348969793,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#isSequence(double,double,double)": -0.03949884815526452,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#setup(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)": 1.5365011209839428,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)": -0.035942189605109226,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)": 1.5755989199927152,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)": 1.5372666894123515,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifyBracketing(double,double)": -0.10789969613899206,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifyInterval(double,double)": -0.04278893601552851,
        "org.apache.commons.math3.analysis.solvers$BaseAbstractUnivariateSolver#verifySequence(double,double,double)": 1.5772729727677568,
        "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#BracketingNthOrderBrentSolver()": -0.045867979446876615,
        "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#BracketingNthOrderBrentSolver(double,double,double,int)": -0.035942189605109226,
        "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#BracketingNthOrderBrentSolver(double,double,int)": -0.022451364240812823,
        "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#BracketingNthOrderBrentSolver(double,int)": 1.7327662556094612,
        "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#doSolve()": 1.7327662556094612,
        "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#getMaximalOrder()": -0.01577555689134269,
        "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#guessX(double,double[],double[],int,int)": 1.7362959607170314,
        "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)": -0.022451364240812823,
        "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver#solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)": 1.745702493376654,
        "org.apache.commons.math3.analysis.solvers$BracketingNthOrderBrentSolver$1#<clinit>()": 0.4039637167549036,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#UnivariateSolverUtils()": 0.0,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)": -0.035942189605109226,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#bracket(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,int)": -0.03949884815526452,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)": -0.035942189605109226,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#isBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)": -0.10789969613899206,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#isSequence(double,double,double)": -0.0394988481552645,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#midpoint(double,double)": -0.045867979446876816,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double)": -0.032033739265310966,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)": -0.17845373913222992,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)": -0.10789969613899206,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifyInterval(double,double)": 1.5137514412564725,
        "org.apache.commons.math3.analysis.solvers$UnivariateSolverUtils#verifySequence(double,double,double)": 1.573931814493266,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)": -0.24772846386142633,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)": -0.2647767153977173,
        "org.apache.commons.math3.exception$DimensionMismatchException#getDimension()": -0.0276300383489696,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": -0.05417569940186295,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.12718380315305225,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": -0.01577555689134269,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.6671268708615162,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": -0.04877454712190454,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": -0.022451364240812843,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.5836554517723764,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": -0.06150219775028787,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": -0.140926408447869,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.1712000077718724,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": -0.1360464025583039,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": -0.01577555689134269,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)": -0.09232394158702321,
        "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.09232394158702321,
        "org.apache.commons.math3.exception$MaxCountExceededException#getMax()": -0.05914657944557544,
        "org.apache.commons.math3.exception$NoBracketingException#NoBracketingException(double,double,double,double)": -0.054175699401863,
        "org.apache.commons.math3.exception$NoBracketingException#NoBracketingException(org.apache.commons.math3.exception.util.Localizable,double,double,double,double,java.lang.Object[])": -0.054175699401863,
        "org.apache.commons.math3.exception$NoBracketingException#getFHi()": 0.0,
        "org.apache.commons.math3.exception$NoBracketingException#getFLo()": 0.0,
        "org.apache.commons.math3.exception$NoBracketingException#getHi()": 0.0,
        "org.apache.commons.math3.exception$NoBracketingException#getLo()": 0.0,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])": -0.048774547121904675,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.07429750662334587,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)": -0.12056403337453434,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": -0.15935452939660205,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": -0.11920741208313787,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.15262895622361344,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)": -0.10341968968087822,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.22381567384819398,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getBoundIsAllowed()": -0.01577555689134269,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getMax()": -0.01577555689134269,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": -0.18048980844851317,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.2970830790671378,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": -0.0276300383489696,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": -0.0276300383489696,
        "org.apache.commons.math3.exception$TooManyEvaluationsException#TooManyEvaluationsException(java.lang.Number)": -0.08004981083574314,
        "org.apache.commons.math3.ode$AbstractIntegrator#AbstractIntegrator()": 0.0,
        "org.apache.commons.math3.ode$AbstractIntegrator#AbstractIntegrator(java.lang.String)": 1.5797973496680462,
        "org.apache.commons.math3.ode$AbstractIntegrator#acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)": 1.6006217076293199,
        "org.apache.commons.math3.ode$AbstractIntegrator#addEventHandler(org.apache.commons.math3.ode.events.EventHandler,double,double,int)": 1.7518483539529766,
        "org.apache.commons.math3.ode$AbstractIntegrator#addEventHandler(org.apache.commons.math3.ode.events.EventHandler,double,double,int,org.apache.commons.math3.analysis.solvers.UnivariateSolver)": 1.7437455827509951,
        "org.apache.commons.math3.ode$AbstractIntegrator#addStepHandler(org.apache.commons.math3.ode.sampling.StepHandler)": 0.2685048033759455,
        "org.apache.commons.math3.ode$AbstractIntegrator#clearEventHandlers()": -0.0681516460470235,
        "org.apache.commons.math3.ode$AbstractIntegrator#clearStepHandlers()": -0.056707953145816115,
        "org.apache.commons.math3.ode$AbstractIntegrator#computeDerivatives(double,double[],double[])": 1.5944247863786742,
        "org.apache.commons.math3.ode$AbstractIntegrator#getCurrentSignedStepsize()": -0.11366027911260623,
        "org.apache.commons.math3.ode$AbstractIntegrator#getCurrentStepStart()": -0.07429750662334578,
        "org.apache.commons.math3.ode$AbstractIntegrator#getEvaluations()": -0.048774547121904675,
        "org.apache.commons.math3.ode$AbstractIntegrator#getEventHandlers()": -0.035942189605109226,
        "org.apache.commons.math3.ode$AbstractIntegrator#getMaxEvaluations()": 0.0,
        "org.apache.commons.math3.ode$AbstractIntegrator#getName()": -0.07429750662334578,
        "org.apache.commons.math3.ode$AbstractIntegrator#getStepHandlers()": -0.05417569940186295,
        "org.apache.commons.math3.ode$AbstractIntegrator#initIntegration(double,double[],double)": 1.5944247863786742,
        "org.apache.commons.math3.ode$AbstractIntegrator#integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])": 1.5866101656866016,
        "org.apache.commons.math3.ode$AbstractIntegrator#sanityChecks(org.apache.commons.math3.ode.ExpandableStatefulODE,double)": 1.5909311622450297,
        "org.apache.commons.math3.ode$AbstractIntegrator#setEquations(org.apache.commons.math3.ode.ExpandableStatefulODE)": 0.2486383487517695,
        "org.apache.commons.math3.ode$AbstractIntegrator#setMaxEvaluations(int)": 1.5797973496680462,
        "org.apache.commons.math3.ode$AbstractIntegrator#setStateInitialized(boolean)": 0.2486383487517695,
        "org.apache.commons.math3.ode$AbstractIntegrator$1#compare(org.apache.commons.math3.ode.events.EventState,org.apache.commons.math3.ode.events.EventState)": 0.4060619163260716,
        "org.apache.commons.math3.ode$EquationsMapper#EquationsMapper(int,int)": 0.23740224945674504,
        "org.apache.commons.math3.ode$EquationsMapper#extractEquationData(double[],double[])": 1.5874703783086672,
        "org.apache.commons.math3.ode$EquationsMapper#getDimension()": 0.23996547090215492,
        "org.apache.commons.math3.ode$EquationsMapper#getFirstIndex()": -0.032033739265310945,
        "org.apache.commons.math3.ode$EquationsMapper#insertEquationData(double[],double[])": 1.5944247863786742,
        "org.apache.commons.math3.ode$ExpandableStatefulODE#ExpandableStatefulODE(org.apache.commons.math3.ode.FirstOrderDifferentialEquations)": 1.5909311622450297,
        "org.apache.commons.math3.ode$ExpandableStatefulODE#addSecondaryEquations(org.apache.commons.math3.ode.SecondaryEquations)": -0.032033739265310966,
        "org.apache.commons.math3.ode$ExpandableStatefulODE#computeDerivatives(double,double[],double[])": 1.5944247863786742,
        "org.apache.commons.math3.ode$ExpandableStatefulODE#getCompleteState()": 1.5944247863786742,
        "org.apache.commons.math3.ode$ExpandableStatefulODE#getPrimary()": -0.032033739265310945,
        "org.apache.commons.math3.ode$ExpandableStatefulODE#getPrimaryMapper()": 0.24776179263924358,
        "org.apache.commons.math3.ode$ExpandableStatefulODE#getPrimaryState()": -0.21397739354174683,
        "org.apache.commons.math3.ode$ExpandableStatefulODE#getPrimaryStateDot()": 0.0,
        "org.apache.commons.math3.ode$ExpandableStatefulODE#getSecondaryMappers()": 0.2486383487517695,
        "org.apache.commons.math3.ode$ExpandableStatefulODE#getSecondaryState(int)": -0.032033739265310945,
        "org.apache.commons.math3.ode$ExpandableStatefulODE#getSecondaryStateDot(int)": 0.0,
        "org.apache.commons.math3.ode$ExpandableStatefulODE#getTime()": 0.24514472461812475,
        "org.apache.commons.math3.ode$ExpandableStatefulODE#getTotalDimension()": 1.5944247863786742,
        "org.apache.commons.math3.ode$ExpandableStatefulODE#setCompleteState(double[])": -0.21578720790813044,
        "org.apache.commons.math3.ode$ExpandableStatefulODE#setPrimaryState(double[])": 1.5909311622450297,
        "org.apache.commons.math3.ode$ExpandableStatefulODE#setSecondaryState(int,double[])": -0.032033739265310966,
        "org.apache.commons.math3.ode$ExpandableStatefulODE#setTime(double)": 0.24514472461812475,
        "org.apache.commons.math3.ode$ExpandableStatefulODE$SecondaryComponent#ExpandableStatefulODE$SecondaryComponent(org.apache.commons.math3.ode.SecondaryEquations,int)": -0.032033739265310966,
        "org.apache.commons.math3.ode.events$EventHandler$Action#<clinit>()": 1.741829056112874,
        "org.apache.commons.math3.ode.events$EventHandler$Action#EventHandler$Action(java.lang.String,int)": 0.3960426184859692,
        "org.apache.commons.math3.ode.events$EventState#EventState(org.apache.commons.math3.ode.events.EventHandler,double,double,int,org.apache.commons.math3.analysis.solvers.UnivariateSolver)": 1.741829056112874,
        "org.apache.commons.math3.ode.events$EventState#evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)": 1.741829056112874,
        "org.apache.commons.math3.ode.events$EventState#getConvergence()": 0.0,
        "org.apache.commons.math3.ode.events$EventState#getEventHandler()": 0.39795914512409014,
        "org.apache.commons.math3.ode.events$EventState#getEventTime()": 0.4039637167549036,
        "org.apache.commons.math3.ode.events$EventState#getMaxCheckInterval()": 0.0,
        "org.apache.commons.math3.ode.events$EventState#getMaxIterationCount()": 0.0,
        "org.apache.commons.math3.ode.events$EventState#reinitializeBegin(org.apache.commons.math3.ode.sampling.StepInterpolator)": 1.741829056112874,
        "org.apache.commons.math3.ode.events$EventState#reset(double,double[])": 1.7562164399913227,
        "org.apache.commons.math3.ode.events$EventState#stepAccepted(double,double[])": 1.741829056112874,
        "org.apache.commons.math3.ode.events$EventState#stop()": 1.7437455827509951,
        "org.apache.commons.math3.ode.events$EventState$1#value(double)": 0.4019164198738844,
        "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#AdaptiveStepsizeIntegrator(java.lang.String,double,double,double,double)": 1.6395101915514867,
        "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#AdaptiveStepsizeIntegrator(java.lang.String,double,double,double[],double[])": -0.06150219775028802,
        "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#filterStep(double,boolean,boolean)": 1.6364846468036398,
        "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#getCurrentStepStart()": -0.08189344920628194,
        "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#getMaxStep()": 0.2927114872522453,
        "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#getMinStep()": 0.2927114872522453,
        "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#initializeStep(boolean,int,double[],double,double[],double[],double[],double[])": 1.635483527170409,
        "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#resetInternalState()": 1.6256628250827925,
        "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#sanityChecks(org.apache.commons.math3.ode.ExpandableStatefulODE,double)": 1.6315146408863472,
        "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#setInitialStepSize(double)": -0.0276300383489696,
        "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#setStepSizeControl(double,double,double,double)": 1.6395101915514867,
        "org.apache.commons.math3.ode.nonstiff$AdaptiveStepsizeIntegrator#setStepSizeControl(double,double,double[],double[])": -0.06150219775028802,
        "org.apache.commons.math3.ode.nonstiff$DormandPrince853Integrator#<clinit>()": 1.7227992408502153,
        "org.apache.commons.math3.ode.nonstiff$DormandPrince853Integrator#DormandPrince853Integrator(double,double,double,double)": 1.727676058412977,
        "org.apache.commons.math3.ode.nonstiff$DormandPrince853Integrator#DormandPrince853Integrator(double,double,double[],double[])": -0.027630038348969793,
        "org.apache.commons.math3.ode.nonstiff$DormandPrince853Integrator#estimateError(double[][],double[],double[],double)": 1.7293474655997538,
        "org.apache.commons.math3.ode.nonstiff$DormandPrince853Integrator#getOrder()": 0.3770128032233103,
        "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#<clinit>()": 0.3770128032233103,
        "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#DormandPrince853StepInterpolator()": 1.7227992408502153,
        "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#DormandPrince853StepInterpolator(org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator)": 1.7293474655997538,
        "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)": 1.7345164546759513,
        "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doCopy()": 1.7293474655997538,
        "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#doFinalize()": 1.7293474655997538,
        "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#readExternal(java.io.ObjectInput)": -0.015775556891342742,
        "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#reinitialize(org.apache.commons.math3.ode.AbstractIntegrator,double[],double[][],boolean,org.apache.commons.math3.ode.EquationsMapper,org.apache.commons.math3.ode.EquationsMapper[])": 1.7293474655997538,
        "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#storeTime(double)": 1.7293474655997538,
        "org.apache.commons.math3.ode.nonstiff$DormandPrince853StepInterpolator#writeExternal(java.io.ObjectOutput)": -0.015775556891342742,
        "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#EmbeddedRungeKuttaIntegrator(java.lang.String,boolean,double[],double[][],double[],org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator,double,double,double,double)": 1.6928161968469477,
        "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#EmbeddedRungeKuttaIntegrator(java.lang.String,boolean,double[],double[][],double[],org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator,double,double,double[],double[])": -0.05914657944557532,
        "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#getMaxGrowth()": -0.01577555689134269,
        "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#getMinReduction()": -0.01577555689134269,
        "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#getSafety()": -0.01577555689134269,
        "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)": 1.682721849284452,
        "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#setMaxGrowth(double)": 0.33089234029274983,
        "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#setMinReduction(double)": 0.33089234029274983,
        "org.apache.commons.math3.ode.nonstiff$EmbeddedRungeKuttaIntegrator#setSafety(double)": 0.33089234029274983,
        "org.apache.commons.math3.ode.nonstiff$RungeKuttaStepInterpolator#RungeKuttaStepInterpolator()": 1.6227800122266096,
        "org.apache.commons.math3.ode.nonstiff$RungeKuttaStepInterpolator#RungeKuttaStepInterpolator(org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator)": 1.6374894282204648,
        "org.apache.commons.math3.ode.nonstiff$RungeKuttaStepInterpolator#readExternal(java.io.ObjectInput)": -0.045867979446876615,
        "org.apache.commons.math3.ode.nonstiff$RungeKuttaStepInterpolator#reinitialize(org.apache.commons.math3.ode.AbstractIntegrator,double[],double[][],boolean,org.apache.commons.math3.ode.EquationsMapper,org.apache.commons.math3.ode.EquationsMapper[])": 1.6344860171323496,
        "org.apache.commons.math3.ode.nonstiff$RungeKuttaStepInterpolator#shift()": 1.6344860171323496,
        "org.apache.commons.math3.ode.nonstiff$RungeKuttaStepInterpolator#writeExternal(java.io.ObjectOutput)": -0.045867979446876615,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#AbstractStepInterpolator()": 1.6208733523471892,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#AbstractStepInterpolator(double[],boolean,org.apache.commons.math3.ode.EquationsMapper,org.apache.commons.math3.ode.EquationsMapper[])": -0.12456729016528191,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#AbstractStepInterpolator(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator)": 1.6344860171323496,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#allocateInterpolatedArrays(int)": 1.5772729727677568,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#copy()": 1.6344860171323496,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#doFinalize()": -0.15713508869522053,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#evaluateCompleteInterpolatedState()": 1.5935482302661486,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#finalizeStep()": 1.6325016231880345,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getCurrentTime()": 0.2620557783483174,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getGlobalCurrentTime()": 0.2548352700024149,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getGlobalPreviousTime()": 0.2548352700024149,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedDerivatives()": -0.12718380315305225,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedSecondaryDerivatives(int)": 0.0,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedSecondaryState(int)": 0.0,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedState()": 1.5935482302661486,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getInterpolatedTime()": -0.12718380315305233,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#getPreviousTime()": 0.26572527172889615,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#isForward()": 0.2530535978237004,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#readBaseExternal(java.io.ObjectInput)": -0.054175699401863,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#reinitialize(double[],boolean,org.apache.commons.math3.ode.EquationsMapper,org.apache.commons.math3.ode.EquationsMapper[])": 1.6344860171323496,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#setInterpolatedTime(double)": 0.24082372805969665,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#setSoftCurrentTime(double)": 0.4060619163260716,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#setSoftPreviousTime(double)": 0.4060619163260716,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#shift()": 0.24082372805969665,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#storeTime(double)": 1.5866101656866016,
        "org.apache.commons.math3.ode.sampling$AbstractStepInterpolator#writeBaseExternal(java.io.ObjectOutput)": -0.05670795314581604,
        "org.apache.commons.math3.util$FastMath#<clinit>()": -1.281570539402622,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0.0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": -0.04877454712190454,
        "org.apache.commons.math3.util$FastMath#abs(double)": -0.7328932188134524,
        "org.apache.commons.math3.util$FastMath#abs(float)": -0.022451364240812843,
        "org.apache.commons.math3.util$FastMath#abs(int)": -0.361826763442056,
        "org.apache.commons.math3.util$FastMath#abs(long)": -0.2288913214392284,
        "org.apache.commons.math3.util$FastMath#acos(double)": -0.10189272358743869,
        "org.apache.commons.math3.util$FastMath#acosh(double)": -0.035942189605109226,
        "org.apache.commons.math3.util$FastMath#asin(double)": -0.10341968968087822,
        "org.apache.commons.math3.util$FastMath#asinh(double)": -0.035942189605109226,
        "org.apache.commons.math3.util$FastMath#atan(double)": -0.10492939633386801,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": -0.20940952002864827,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": -0.17329348261597344,
        "org.apache.commons.math3.util$FastMath#atanh(double)": -0.035942189605109226,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": -0.11645875596432288,
        "org.apache.commons.math3.util$FastMath#ceil(double)": 1.4813101866590042,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": -0.07429750662334578,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": -0.022451364240812843,
        "org.apache.commons.math3.util$FastMath#cos(double)": 1.4676024094821458,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": 1.4146812197430663,
        "org.apache.commons.math3.util$FastMath#cosh(double)": -0.09878406356624016,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": -0.1712000077718724,
        "org.apache.commons.math3.util$FastMath#exp(double)": -0.6262214535301829,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": 1.0728978553345245,
        "org.apache.commons.math3.util$FastMath#expm1(double)": -0.07024984561819136,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": -0.10789969613899206,
        "org.apache.commons.math3.util$FastMath#floor(double)": -0.144217874579898,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": -0.15713508869522053,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": -0.022451364240812843,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": -0.15148776381335505,
        "org.apache.commons.math3.util$FastMath#log(double)": -0.675186746264416,
        "org.apache.commons.math3.util$FastMath#log(double,double)": -0.015775556891342742,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": 1.0298544848196933,
        "org.apache.commons.math3.util$FastMath#log10(double)": -0.1297611522573328,
        "org.apache.commons.math3.util$FastMath#log1p(double)": -0.475051943683121,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0.0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": -0.20899522930927217,
        "org.apache.commons.math3.util$FastMath#max(float,float)": -0.022451364240812843,
        "org.apache.commons.math3.util$FastMath#max(int,int)": -0.09926900779134973,
        "org.apache.commons.math3.util$FastMath#max(long,long)": -0.056707953145816115,
        "org.apache.commons.math3.util$FastMath#min(double,double)": 0.021029008178199526,
        "org.apache.commons.math3.util$FastMath#min(float,float)": -0.022451364240812843,
        "org.apache.commons.math3.util$FastMath#min(int,int)": -0.696662989469879,
        "org.apache.commons.math3.util$FastMath#min(long,long)": -0.11645875596432287,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": -0.06378356000867735,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": -0.0276300383489696,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": -0.027630038348969793,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": -0.015775556891342742,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": 0.04157551630354617,
        "org.apache.commons.math3.util$FastMath#polySine(double)": 0.04157551630354617,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": 1.259478869220262,
        "org.apache.commons.math3.util$FastMath#pow(double,int)": -0.28426325730209223,
        "org.apache.commons.math3.util$FastMath#random()": -0.07229714249921071,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": -0.035942189605109226,
        "org.apache.commons.math3.util$FastMath#rint(double)": -0.1491869499236414,
        "org.apache.commons.math3.util$FastMath#round(double)": -0.08189344920628194,
        "org.apache.commons.math3.util$FastMath#round(float)": -0.015775556891342742,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": -0.13971796864425534,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": -0.022451364240812843,
        "org.apache.commons.math3.util$FastMath#signum(double)": -0.06150219775028787,
        "org.apache.commons.math3.util$FastMath#signum(float)": -0.022451364240812843,
        "org.apache.commons.math3.util$FastMath#sin(double)": 1.405892635589193,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": 1.4009119140187023,
        "org.apache.commons.math3.util$FastMath#sinh(double)": -0.09878406356624016,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": -0.6643380227154884,
        "org.apache.commons.math3.util$FastMath#tan(double)": -0.09232394158702321,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": -0.09232394158702321,
        "org.apache.commons.math3.util$FastMath#tanh(double)": -0.06378356000867731,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": -0.032033739265310966,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": -0.032033739265310966,
        "org.apache.commons.math3.util$FastMath#ulp(double)": 1.4889776441863471,
        "org.apache.commons.math3.util$FastMath#ulp(float)": -0.015775556891342742,
        "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)": -0.3664932089883113,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getK()": -0.3664932089883113,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()": -0.3664932089883113,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()": -0.3664932089883113,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": 1.0806462481128354,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": 1.0830739013940753,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": 1.039343392081756,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0.0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()": -0.3632394431115714,
        "org.apache.commons.math3.util$FastMathLiteralArrays#FastMathLiteralArrays()": 0.0,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()": 1.0806462481128354,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()": 1.0806462481128354,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()": 1.0830739013940753,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()": 1.0830739013940753,
        "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()": 1.039343392081756,
        "org.apache.commons.math3.util$Incrementor#Incrementor()": 1.2919139066217906,
        "org.apache.commons.math3.util$Incrementor#Incrementor(int)": 1.26110809952783,
        "org.apache.commons.math3.util$Incrementor#Incrementor(int,org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback)": 1.1500478845587554,
        "org.apache.commons.math3.util$Incrementor#canIncrement()": -0.022451364240812843,
        "org.apache.commons.math3.util$Incrementor#getCount()": -0.29109040751625836,
        "org.apache.commons.math3.util$Incrementor#getMaximalCount()": -0.11645875596432287,
        "org.apache.commons.math3.util$Incrementor#incrementCount()": -0.15717921819797287,
        "org.apache.commons.math3.util$Incrementor#incrementCount(int)": -0.015775556891342742,
        "org.apache.commons.math3.util$Incrementor#resetCount()": -0.172591094147155,
        "org.apache.commons.math3.util$Incrementor#setMaximalCount(int)": -0.15769539799599241,
        "org.apache.commons.math3.util$Incrementor$1#trigger(int)": -0.07024984561819148,
        "org.apache.commons.math3.util$MathUtils#MathUtils()": 0.0,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double)": -0.06815164604702353,
        "org.apache.commons.math3.util$MathUtils#checkFinite(double[])": -0.015775556891342742,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)": 1.02151913838517,
        "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.16588799198476578,
        "org.apache.commons.math3.util$MathUtils#copySign(byte,byte)": -0.032033739265310966,
        "org.apache.commons.math3.util$MathUtils#copySign(int,int)": -0.032033739265310966,
        "org.apache.commons.math3.util$MathUtils#copySign(long,long)": -0.022451364240812823,
        "org.apache.commons.math3.util$MathUtils#copySign(short,short)": -0.022451364240812823,
        "org.apache.commons.math3.util$MathUtils#hash(double)": -0.1192074120831379,
        "org.apache.commons.math3.util$MathUtils#hash(double[])": -0.104929396333868,
        "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)": -0.12847723873582792,
        "org.apache.commons.math3.util$MathUtils#reduce(double,double,double)": -0.035942189605109226,
        "org.apache.commons.math3.util$Precision#<clinit>()": -0.408706373777426,
        "org.apache.commons.math3.util$Precision#Precision()": 0.0,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,double)": -0.17536990999557547,
        "org.apache.commons.math3.util$Precision#compareTo(double,double,int)": -0.12324364259589952,
        "org.apache.commons.math3.util$Precision#equals(double,double)": -0.2518500488275666,
        "org.apache.commons.math3.util$Precision#equals(double,double,double)": -0.46624505483079726,
        "org.apache.commons.math3.util$Precision#equals(double,double,int)": 1.1468246357902792,
        "org.apache.commons.math3.util$Precision#equals(float,float)": -0.015775556891342742,
        "org.apache.commons.math3.util$Precision#equals(float,float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equals(float,float,int)": -0.15824752289920138,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)": -0.21306882674417862,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)": -0.12456729016528191,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)": -0.015775556891342742,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)": -0.15713508869522058,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)": 0.0,
        "org.apache.commons.math3.util$Precision#equalsWithRelativeTolerance(double,double,double)": -0.015775556891342742,
        "org.apache.commons.math3.util$Precision#representableDelta(double,double)": -0.01577555689134269,
        "org.apache.commons.math3.util$Precision#round(double,int)": -0.015775556891342742,
        "org.apache.commons.math3.util$Precision#round(double,int,int)": -0.01577555689134269,
        "org.apache.commons.math3.util$Precision#round(float,int)": -0.015775556891342742,
        "org.apache.commons.math3.util$Precision#round(float,int,int)": -0.015775556891342742,
        "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)": -0.015775556891342742
    },
    "Math-8": {
        "org.apache.commons.math3.distribution$AbstractRealDistribution#AbstractRealDistribution()": 0.0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#AbstractRealDistribution(org.apache.commons.math3.random.RandomGenerator)": 1.0621156723701946,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#cumulativeProbability(double,double)": -0.14902642485427187,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#getSolverAbsoluteAccuracy()": -0.02853242952497559,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#inverseCumulativeProbability(double)": -0.24959469720112157,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double)": 0.0,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#probability(double,double)": -0.15450119001019877,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#reseedRandomGenerator(long)": -0.1054179622801638,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#sample()": -0.20192936853911872,
        "org.apache.commons.math3.distribution$AbstractRealDistribution#sample(int)": -0.07884558849904214,
        "org.apache.commons.math3.distribution$AbstractRealDistribution$1#value(double)": -0.23347127871722217,
        "org.apache.commons.math3.distribution$DiscreteDistribution#DiscreteDistribution(java.util.List)": 1.8199999999999998,
        "org.apache.commons.math3.distribution$DiscreteDistribution#DiscreteDistribution(org.apache.commons.math3.random.RandomGenerator,java.util.List)": 1.7219492710868876,
        "org.apache.commons.math3.distribution$DiscreteDistribution#getSamples()": -0.07262631754845199,
        "org.apache.commons.math3.distribution$DiscreteDistribution#probability(java.lang.Object)": -0.035157089410064145,
        "org.apache.commons.math3.distribution$DiscreteDistribution#reseedRandomGenerator(long)": 0.0,
        "org.apache.commons.math3.distribution$DiscreteDistribution#sample()": 1.7914675704750245,
        "org.apache.commons.math3.distribution$DiscreteDistribution#sample(int)": 1.8199999999999998,
        "org.apache.commons.math3.distribution$DiscreteRealDistribution#DiscreteRealDistribution(double[],double[])": 1.747373682451548,
        "org.apache.commons.math3.distribution$DiscreteRealDistribution#DiscreteRealDistribution(org.apache.commons.math3.random.RandomGenerator,double[],double[])": 1.747373682451548,
        "org.apache.commons.math3.distribution$DiscreteRealDistribution#cumulativeProbability(double)": -0.020015854530944167,
        "org.apache.commons.math3.distribution$DiscreteRealDistribution#density(double)": -0.020015854530944167,
        "org.apache.commons.math3.distribution$DiscreteRealDistribution#getNumericalMean()": -0.028532429524975533,
        "org.apache.commons.math3.distribution$DiscreteRealDistribution#getNumericalVariance()": -0.028532429524975533,
        "org.apache.commons.math3.distribution$DiscreteRealDistribution#getSupportLowerBound()": -0.020015854530944167,
        "org.apache.commons.math3.distribution$DiscreteRealDistribution#getSupportUpperBound()": -0.020015854530944167,
        "org.apache.commons.math3.distribution$DiscreteRealDistribution#isSupportConnected()": -0.020015854530944344,
        "org.apache.commons.math3.distribution$DiscreteRealDistribution#isSupportLowerBoundInclusive()": -0.020015854530944344,
        "org.apache.commons.math3.distribution$DiscreteRealDistribution#isSupportUpperBoundInclusive()": -0.020015854530944344,
        "org.apache.commons.math3.distribution$DiscreteRealDistribution#probability(double)": -0.028532429524975533,
        "org.apache.commons.math3.distribution$DiscreteRealDistribution#sample()": -0.020015854530944167,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)": -0.32486555641382775,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)": -0.3481803514959571,
        "org.apache.commons.math3.exception$DimensionMismatchException#getDimension()": -0.035157089410064124,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": -0.0693459175685538,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.1650633596052168,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": -0.020015854530944344,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.8969857813845952,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": -0.062359702321156174,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.7815469537147794,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": -0.078845588499042,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": -0.18331430477483318,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.22374191681886194,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": -0.17682583497566884,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": -0.020015854530944344,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int)": -0.020015854530944167,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int,org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": -0.08468769558042408,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getDirection()": -0.020015854530944344,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getIndex()": -0.020015854530944344,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getPrevious()": -0.020015854530944344,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getStrict()": -0.020015854530944344,
        "org.apache.commons.math3.exception$NotANumberException#NotANumberException()": -0.07578840128808922,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])": -0.0546349112050637,
        "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.090221566031574,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)": -0.09549738535564176,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": -0.07262631754845199,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)": -0.15629595281487507,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": -0.20788835551838192,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": -0.1526916678162948,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.19738430725505518,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)": -0.1275666094148137,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.2764043039863423,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getBoundIsAllowed()": -0.020015854530944344,
        "org.apache.commons.math3.exception$NumberIsTooLargeException#getMax()": -0.020015854530944344,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": -0.23620506597348187,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.39455941059046934,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": -0.035157089410064124,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": -0.035157089410064124,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(java.lang.Number,java.lang.Number,java.lang.Number)": -0.14149613266829122,
        "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)": -0.3492694959856503,
        "org.apache.commons.math3.exception$OutOfRangeException#getHi()": -0.020015854530944344,
        "org.apache.commons.math3.exception$OutOfRangeException#getLo()": -0.020015854530944344,
        "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int)": 1.0301201158764939,
        "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int,int)": -0.5255435074355874,
        "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int,int[])": 0.7573232585629203,
        "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int,long)": -0.8109483035493654,
        "org.apache.commons.math3.random$AbstractWell#setSeed(int)": -0.0503968424117582,
        "org.apache.commons.math3.random$AbstractWell#setSeed(int[])": 0.7573232585629203,
        "org.apache.commons.math3.random$AbstractWell#setSeed(long)": 0.7979112098350908,
        "org.apache.commons.math3.random$BitsStreamGenerator#BitsStreamGenerator()": -0.6534943866281687,
        "org.apache.commons.math3.random$BitsStreamGenerator#clear()": -0.6534943866281687,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextBoolean()": -0.11466481277621604,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextBytes(byte[])": -0.09549738535564176,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()": 1.175236871935033,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextFloat()": -0.11466481277621604,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()": -0.24562461738524036,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextInt()": -0.1316558208272835,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextInt(int)": -0.1336658469738067,
        "org.apache.commons.math3.random$BitsStreamGenerator#nextLong()": -0.11466481277621604,
        "org.apache.commons.math3.random$RandomDataGenerator#RandomDataGenerator()": -0.5547900934575328,
        "org.apache.commons.math3.random$RandomDataGenerator#RandomDataGenerator(org.apache.commons.math3.random.RandomGenerator)": -0.7191220472001985,
        "org.apache.commons.math3.random$RandomDataGenerator#getNatural(int)": -0.10541796228016387,
        "org.apache.commons.math3.random$RandomDataGenerator#getRan()": -0.7807878016328582,
        "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()": -0.09022156603157416,
        "org.apache.commons.math3.random$RandomDataGenerator#initRan()": -0.7785087148690175,
        "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)": -0.06934591756855381,
        "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)": -0.06934591756855381,
        "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)": -0.06934591756855381,
        "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)": -0.06934591756855381,
        "org.apache.commons.math3.random$RandomDataGenerator#nextExponential(double)": -0.07578840128808922,
        "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)": -0.06934591756855381,
        "org.apache.commons.math3.random$RandomDataGenerator#nextGamma(double,double)": -0.06934591756855381,
        "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)": -0.09549738535564176,
        "org.apache.commons.math3.random$RandomDataGenerator#nextHexString(int)": -0.06934591756855381,
        "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)": -0.06934591756855381,
        "org.apache.commons.math3.random$RandomDataGenerator#nextInt(int,int)": -0.18965275913664847,
        "org.apache.commons.math3.random$RandomDataGenerator#nextLong(long,long)": -0.18650143430773455,
        "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)": -0.06934591756855381,
        "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)": -0.1054179622801638,
        "org.apache.commons.math3.random$RandomDataGenerator#nextPoisson(double)": -0.10055303955375604,
        "org.apache.commons.math3.random$RandomDataGenerator#nextSample(java.util.Collection,int)": -0.07262631754845199,
        "org.apache.commons.math3.random$RandomDataGenerator#nextSecureHexString(int)": -0.07262631754845199,
        "org.apache.commons.math3.random$RandomDataGenerator#nextSecureInt(int,int)": -0.04080242197132957,
        "org.apache.commons.math3.random$RandomDataGenerator#nextSecureLong(long,long)": -0.0818089389477798,
        "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)": -0.06934591756855381,
        "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double)": -0.26128410679466213,
        "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)": -0.26128410679466213,
        "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)": -0.06934591756855381,
        "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)": -0.06934591756855381,
        "org.apache.commons.math3.random$RandomDataGenerator#reSeed()": -0.06934591756855381,
        "org.apache.commons.math3.random$RandomDataGenerator#reSeed(long)": -0.7762271698313398,
        "org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure()": -0.06934591756855381,
        "org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure(long)": -0.06934591756855381,
        "org.apache.commons.math3.random$RandomDataGenerator#setSecureAlgorithm(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.math3.random$RandomDataGenerator#shuffle(int[],int)": -0.1054179622801638,
        "org.apache.commons.math3.random$RandomDataImpl#RandomDataImpl()": 0.790996344169372,
        "org.apache.commons.math3.random$RandomDataImpl#RandomDataImpl(org.apache.commons.math3.random.RandomGenerator)": -0.718338793375447,
        "org.apache.commons.math3.random$RandomDataImpl#getDelegate()": -0.035157089410064124,
        "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)": -0.06934591756855381,
        "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)": -0.06934591756855381,
        "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)": -0.06934591756855381,
        "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)": -0.06934591756855381,
        "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)": -0.07578840128808922,
        "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)": -0.06934591756855381,
        "org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)": -0.06934591756855381,
        "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)": -0.07578840128808922,
        "org.apache.commons.math3.random$RandomDataImpl#nextHexString(int)": -0.06934591756855381,
        "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)": -0.06934591756855381,
        "org.apache.commons.math3.random$RandomDataImpl#nextInt(int,int)": -0.14902642485427187,
        "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)": -0.06934591756855381,
        "org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)": -0.18650143430773455,
        "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)": -0.06934591756855381,
        "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)": -0.07262631754845199,
        "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)": -0.10055303955375604,
        "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)": -0.07262631754845199,
        "org.apache.commons.math3.random$RandomDataImpl#nextSecureHexString(int)": -0.07262631754845199,
        "org.apache.commons.math3.random$RandomDataImpl#nextSecureInt(int,int)": -0.04080242197132957,
        "org.apache.commons.math3.random$RandomDataImpl#nextSecureLong(long,long)": -0.0818089389477798,
        "org.apache.commons.math3.random$RandomDataImpl#nextT(double)": -0.06934591756855381,
        "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)": -0.2509095870167866,
        "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)": 0.0,
        "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)": -0.06934591756855381,
        "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)": -0.06934591756855381,
        "org.apache.commons.math3.random$RandomDataImpl#reSeed()": -0.06934591756855381,
        "org.apache.commons.math3.random$RandomDataImpl#reSeed(long)": -0.7716566398976958,
        "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure()": -0.06934591756855381,
        "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure(long)": -0.06934591756855381,
        "org.apache.commons.math3.random$RandomDataImpl#setSecureAlgorithm(java.lang.String,java.lang.String)": 0.0,
        "org.apache.commons.math3.random$Well19937c#Well19937c()": 1.0301201158764939,
        "org.apache.commons.math3.random$Well19937c#Well19937c(int)": -0.20042180521002298,
        "org.apache.commons.math3.random$Well19937c#Well19937c(int[])": -0.020015854530944167,
        "org.apache.commons.math3.random$Well19937c#Well19937c(long)": -0.7785087148690175,
        "org.apache.commons.math3.random$Well19937c#next(int)": 0.1677431630938041,
        "org.apache.commons.math3.util$MathArrays#MathArrays()": 0.0,
        "org.apache.commons.math3.util$MathArrays#buildArray(org.apache.commons.math3.Field,int)": -0.27764235630645473,
        "org.apache.commons.math3.util$MathArrays#buildArray(org.apache.commons.math3.Field,int,int)": -0.27516301559389994,
        "org.apache.commons.math3.util$MathArrays#checkNonNegative(long[])": -0.5299928453479484,
        "org.apache.commons.math3.util$MathArrays#checkNonNegative(long[][])": -0.04582191040421779,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[])": -0.15629595281487507,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": -0.15807640581370233,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)": -0.29225918514813554,
        "org.apache.commons.math3.util$MathArrays#checkPositive(double[])": -0.5219719365789574,
        "org.apache.commons.math3.util$MathArrays#checkRectangular(long[][])": -0.04582191040421779,
        "org.apache.commons.math3.util$MathArrays#copyOf(double[])": -0.16848115773026154,
        "org.apache.commons.math3.util$MathArrays#copyOf(double[],int)": -0.2108269345907658,
        "org.apache.commons.math3.util$MathArrays#copyOf(int[])": -0.0503968424117582,
        "org.apache.commons.math3.util$MathArrays#copyOf(int[],int)": -0.14149613266829122,
        "org.apache.commons.math3.util$MathArrays#distance(double[],double[])": -0.035157089410064124,
        "org.apache.commons.math3.util$MathArrays#distance(int[],int[])": -0.054634911205063696,
        "org.apache.commons.math3.util$MathArrays#distance1(double[],double[])": -0.020015854530944344,
        "org.apache.commons.math3.util$MathArrays#distance1(int[],int[])": -0.020015854530944344,
        "org.apache.commons.math3.util$MathArrays#distanceInf(double[],double[])": -0.020015854530944344,
        "org.apache.commons.math3.util$MathArrays#distanceInf(int[],int[])": -0.020015854530944344,
        "org.apache.commons.math3.util$MathArrays#ebeAdd(double[],double[])": -0.028532429524975533,
        "org.apache.commons.math3.util$MathArrays#ebeDivide(double[],double[])": -0.0623597023211562,
        "org.apache.commons.math3.util$MathArrays#ebeMultiply(double[],double[])": -0.028532429524975533,
        "org.apache.commons.math3.util$MathArrays#ebeSubtract(double[],double[])": -0.028532429524975533,
        "org.apache.commons.math3.util$MathArrays#equals(double[],double[])": -0.035157089410064124,
        "org.apache.commons.math3.util$MathArrays#equals(float[],float[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(double[],double[])": -0.0458219104042179,
        "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(float[],float[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": -0.020015854530944167,
        "org.apache.commons.math3.util$MathArrays#isMonotonic(java.lang.Comparable[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": -0.020015854530944344,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)": -0.19585407028030777,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)": -0.19890683433355782,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double,double,double)": -0.07262631754845206,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double[],double[])": -0.06934591756855381,
        "org.apache.commons.math3.util$MathArrays#normalizeArray(double[],double)": 1.716992240049143,
        "org.apache.commons.math3.util$MathArrays#safeNorm(double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])": -0.0623597023211562,
        "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])": -0.0623597023211562,
        "org.apache.commons.math3.util$MathArrays$1#compare(org.apache.commons.math3.util.Pair,org.apache.commons.math3.util.Pair)": -0.05860628486883357,
        "org.apache.commons.math3.util$MathArrays$2#<clinit>()": -0.29225918514813554,
        "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()": -0.298226986625265,
        "org.apache.commons.math3.util$MathArrays$OrderDirection#MathArrays$OrderDirection(java.lang.String,int)": -0.29822698662526514,
        "org.apache.commons.math3.util$Pair#Pair(java.lang.Object,java.lang.Object)": -0.17218362732330628,
        "org.apache.commons.math3.util$Pair#Pair(org.apache.commons.math3.util.Pair)": 0.0,
        "org.apache.commons.math3.util$Pair#equals(java.lang.Object)": -0.020015854530944344,
        "org.apache.commons.math3.util$Pair#getFirst()": -0.2237419168188619,
        "org.apache.commons.math3.util$Pair#getKey()": -0.043278499188059594,
        "org.apache.commons.math3.util$Pair#getSecond()": -0.2237419168188619,
        "org.apache.commons.math3.util$Pair#getValue()": 0.04466219113487069,
        "org.apache.commons.math3.util$Pair#hashCode()": -0.020015854530944344
    },
    "Math-9": {
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)": -0.25006041734558504,
        "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)": -0.2676816514356058,
        "org.apache.commons.math3.exception$DimensionMismatchException#getDimension()": -0.02819044482342825,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()": -0.05529939696389641,
        "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.12728086205226896,
        "org.apache.commons.math3.exception$MathArithmeticException#getContext()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathArithmeticException#getMessage()": -0.01609205932455371,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.6720052977107536,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getContext()": -0.04978182414681043,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getLocalizedMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalArgumentException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])": -0.587603046053164,
        "org.apache.commons.math3.exception$MathIllegalNumberException#getArgument()": -0.06278521168986395,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()": -0.14278917221248988,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(java.lang.Throwable,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": 0.0,
        "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.17395027099156907,
        "org.apache.commons.math3.exception$MathIllegalStateException#getContext()": -0.1377612364205536,
        "org.apache.commons.math3.exception$MathIllegalStateException#getLocalizedMessage()": -0.01609205932455371,
        "org.apache.commons.math3.exception$MathIllegalStateException#getMessage()": 0.0,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int)": -0.016092059324553706,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#NonMonotonicSequenceException(java.lang.Number,java.lang.Number,int,org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": -0.06737952964451344,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getDirection()": -0.01609205932455371,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getIndex()": -0.01609205932455371,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getPrevious()": -0.01609205932455371,
        "org.apache.commons.math3.exception$NonMonotonicSequenceException#getStrict()": -0.01609205932455371,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)": -0.07172511153023531,
        "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": -0.057886535820005594,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)": -0.12179565633260843,
        "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)": -0.16289628799877506,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()": -0.12039546387571817,
        "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])": -0.15484008830878068,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)": -0.18141129118660929,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)": -0.301810886843484,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getBoundIsAllowed()": -0.02819044482342825,
        "org.apache.commons.math3.exception$NumberIsTooSmallException#getMin()": -0.02819044482342825,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#Line(org.apache.commons.math3.geometry.euclidean.threed.Line)": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 1.7327013619428033,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#closestPoint(org.apache.commons.math3.geometry.euclidean.threed.Line)": -0.046812976904723996,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": -0.05529939696389654,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Line)": -0.016092059324553706,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": -0.06037819765097764,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#getAbscissa(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": -0.043668246701573134,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#getDirection()": 0.42443173822628466,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#getOrigin()": 0.0,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)": -0.043668246701573134,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)": -0.016092059324553706,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#pointAt(double)": -0.057886535820005594,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 1.7327013619428033,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#revert()": 1.8199999999999998,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#toSpace(org.apache.commons.math3.geometry.Vector)": -0.057886535820005594,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#toSubSpace(org.apache.commons.math3.geometry.Vector)": -0.043668246701573134,
        "org.apache.commons.math3.geometry.euclidean.threed$Line#wholeLine()": -0.01609205932455371,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#<clinit>()": 1.578597236531461,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double)": -0.016092059324553706,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,double,double)": 0.23281079890455636,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 0.37013297556002633,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": 1.7240212141912472,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": -0.046812976904723996,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": -0.016092059324553706,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#Vector3D(double[])": -0.03667652249308182,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(double,org.apache.commons.math3.geometry.Vector)": -0.016092059324553706,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#add(org.apache.commons.math3.geometry.Vector)": -0.06958060145164663,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": -0.03667652249308182,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.Vector)": -0.09597878580875276,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": -0.08908827298973235,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance(org.apache.commons.math3.geometry.Vector)": -0.06511650277740352,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": -0.022904606394645564,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance1(org.apache.commons.math3.geometry.Vector)": -0.016092059324553706,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distance1(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": -0.016092059324553706,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceInf(org.apache.commons.math3.geometry.Vector)": -0.016092059324553706,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceInf(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": -0.016092059324553706,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceSq(org.apache.commons.math3.geometry.Vector)": -0.01609205932455371,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#distanceSq(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": -0.016092059324553706,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.Vector)": 1.6996045361242818,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#dotProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)": -0.043668246701573134,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#equals(java.lang.Object)": -0.08908827298973235,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getAlpha()": -0.02819044482342814,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getDelta()": -0.016092059324553706,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm()": -0.13648345914109988,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNorm1()": -0.022904606394645564,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNormInf()": -0.022904606394645564,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getNormSq()": 0.38512528938336266,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getSpace()": -0.01609205932455371,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getX()": -0.1662652937896394,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getY()": -0.1662652937896394,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZ()": -0.16737788183334867,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#getZero()": -0.016092059324553706,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#hashCode()": -0.016092059324553706,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isInfinite()": -0.016092059324553706,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#isNaN()": -0.09429360913234852,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#negate()": 1.7918095551765718,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#normalize()": -0.03667652249308182,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#orthogonal()": -0.07786288528879702,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#scalarMultiply(double)": -0.04978182414681043,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(double,org.apache.commons.math3.geometry.Vector)": -0.016092059324553706,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#subtract(org.apache.commons.math3.geometry.Vector)": 1.7024422016550078,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#toArray()": 0.4581215030485414,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#toString()": -0.01609205932455371,
        "org.apache.commons.math3.geometry.euclidean.threed$Vector3D#toString(java.text.NumberFormat)": -0.01609205932455371,
        "org.apache.commons.math3.util$FastMath#<clinit>()": -1.3208305533136597,
        "org.apache.commons.math3.util$FastMath#FastMath()": 0.0,
        "org.apache.commons.math3.util$FastMath#IEEEremainder(double,double)": -0.04978182414681043,
        "org.apache.commons.math3.util$FastMath#abs(double)": -1.2286840595440887,
        "org.apache.commons.math3.util$FastMath#abs(float)": -0.022904606394645644,
        "org.apache.commons.math3.util$FastMath#abs(int)": -0.37057874402678825,
        "org.apache.commons.math3.util$FastMath#abs(long)": -0.7159536016271788,
        "org.apache.commons.math3.util$FastMath#acos(double)": -0.10408058681306878,
        "org.apache.commons.math3.util$FastMath#acosh(double)": -0.03667652249308182,
        "org.apache.commons.math3.util$FastMath#asin(double)": -0.1056425788748322,
        "org.apache.commons.math3.util$FastMath#asinh(double)": -0.03667652249308182,
        "org.apache.commons.math3.util$FastMath#atan(double)": -0.1071869705412856,
        "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)": -0.21323887161997174,
        "org.apache.commons.math3.util$FastMath#atan2(double,double)": -0.17610372819107753,
        "org.apache.commons.math3.util$FastMath#atanh(double)": -0.03667652249308182,
        "org.apache.commons.math3.util$FastMath#cbrt(double)": -0.1189829789106078,
        "org.apache.commons.math3.util$FastMath#ceil(double)": -0.3453952599409635,
        "org.apache.commons.math3.util$FastMath#copySign(double,double)": -0.07586245527474578,
        "org.apache.commons.math3.util$FastMath#copySign(float,float)": -0.022904606394645644,
        "org.apache.commons.math3.util$FastMath#cos(double)": -0.3608952435188699,
        "org.apache.commons.math3.util$FastMath#cosQ(double,double)": -0.41460692130659127,
        "org.apache.commons.math3.util$FastMath#cosh(double)": -0.1009007937239336,
        "org.apache.commons.math3.util$FastMath#doubleHighPart(double)": -0.17395027099156923,
        "org.apache.commons.math3.util$FastMath#exp(double)": -0.6301135702177378,
        "org.apache.commons.math3.util$FastMath#exp(double,double,double[])": -0.7558884710838714,
        "org.apache.commons.math3.util$FastMath#expm1(double)": -0.07172511153023531,
        "org.apache.commons.math3.util$FastMath#expm1(double,double[])": -0.1102256701514536,
        "org.apache.commons.math3.util$FastMath#floor(double)": -0.656223957361405,
        "org.apache.commons.math3.util$FastMath#getExponent(double)": -0.16176255170382037,
        "org.apache.commons.math3.util$FastMath#getExponent(float)": -0.022904606394645644,
        "org.apache.commons.math3.util$FastMath#hypot(double,double)": -0.15484008830878068,
        "org.apache.commons.math3.util$FastMath#log(double)": -0.684525301346429,
        "org.apache.commons.math3.util$FastMath#log(double,double)": -0.016092059324553706,
        "org.apache.commons.math3.util$FastMath#log(double,double[])": -0.8038730087504136,
        "org.apache.commons.math3.util$FastMath#log10(double)": -0.13519694235694307,
        "org.apache.commons.math3.util$FastMath#log1p(double)": -0.4693489078721082,
        "org.apache.commons.math3.util$FastMath#main(java.lang.String[])": 0.0,
        "org.apache.commons.math3.util$FastMath#max(double,double)": -0.6959235032922222,
        "org.apache.commons.math3.util$FastMath#max(float,float)": -0.022904606394645644,
        "org.apache.commons.math3.util$FastMath#max(int,int)": -0.5787244945965435,
        "org.apache.commons.math3.util$FastMath#max(long,long)": -0.01609205932455371,
        "org.apache.commons.math3.util$FastMath#min(double,double)": -0.46260134718363055,
        "org.apache.commons.math3.util$FastMath#min(float,float)": -0.022904606394645644,
        "org.apache.commons.math3.util$FastMath#min(int,int)": -0.7000502618285767,
        "org.apache.commons.math3.util$FastMath#min(long,long)": -0.10250025570089116,
        "org.apache.commons.math3.util$FastMath#nextAfter(double,double)": -0.06511650277740366,
        "org.apache.commons.math3.util$FastMath#nextAfter(float,double)": -0.02819044482342825,
        "org.apache.commons.math3.util$FastMath#nextUp(double)": -0.02819044482342814,
        "org.apache.commons.math3.util$FastMath#nextUp(float)": -0.016092059324553706,
        "org.apache.commons.math3.util$FastMath#polyCosine(double)": -0.44332847793607955,
        "org.apache.commons.math3.util$FastMath#polySine(double)": -0.44332847793607955,
        "org.apache.commons.math3.util$FastMath#pow(double,double)": -0.5613543744577592,
        "org.apache.commons.math3.util$FastMath#pow(double,int)": -0.2893832282022317,
        "org.apache.commons.math3.util$FastMath#random()": -0.073817713351916,
        "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])": -0.03667652249308182,
        "org.apache.commons.math3.util$FastMath#rint(double)": -0.1512964483830679,
        "org.apache.commons.math3.util$FastMath#round(double)": -0.08362789825163931,
        "org.apache.commons.math3.util$FastMath#round(float)": -0.016092059324553706,
        "org.apache.commons.math3.util$FastMath#scalb(double,int)": -0.14402634559696903,
        "org.apache.commons.math3.util$FastMath#scalb(float,int)": -0.022904606394645644,
        "org.apache.commons.math3.util$FastMath#signum(double)": -0.06278521168986395,
        "org.apache.commons.math3.util$FastMath#signum(float)": -0.022904606394645644,
        "org.apache.commons.math3.util$FastMath#sin(double)": -0.42428589155443563,
        "org.apache.commons.math3.util$FastMath#sinQ(double,double)": -0.42940389556244557,
        "org.apache.commons.math3.util$FastMath#sinh(double)": -0.1009007937239336,
        "org.apache.commons.math3.util$FastMath#sqrt(double)": -0.6822414101574016,
        "org.apache.commons.math3.util$FastMath#tan(double)": -0.09429360913234866,
        "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)": -0.09429360913234866,
        "org.apache.commons.math3.util$FastMath#tanh(double)": -0.06511650277740352,
        "org.apache.commons.math3.util$FastMath#toDegrees(double)": -0.03268600070682385,
        "org.apache.commons.math3.util$FastMath#toRadians(double)": -0.03268600070682385,
        "org.apache.commons.math3.util$FastMath#ulp(double)": -0.33894704960436334,
        "org.apache.commons.math3.util$FastMath#ulp(float)": -0.016092059324553706,
        "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)": -0.3733213046570054,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getK()": -0.3733213046570054,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()": -0.3733213046570054,
        "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()": -0.3733213046570054,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()": -0.7488704462169249,
        "org.apache.commons.math3.util$FastMath$ExpFracTable#FastMath$ExpFracTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()": -0.7458551691942841,
        "org.apache.commons.math3.util$FastMath$ExpIntTable#FastMath$ExpIntTable()": 0.0,
        "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()": -0.7965225870822588,
        "org.apache.commons.math3.util$FastMath$lnMant#FastMath$lnMant()": 0.0,
        "org.apache.commons.math3.util$MathArrays#MathArrays()": 0.0,
        "org.apache.commons.math3.util$MathArrays#buildArray(org.apache.commons.math3.Field,int)": -0.21606384515283605,
        "org.apache.commons.math3.util$MathArrays#buildArray(org.apache.commons.math3.Field,int,int)": -0.2141831608330812,
        "org.apache.commons.math3.util$MathArrays#checkNonNegative(long[])": -0.40481482558387494,
        "org.apache.commons.math3.util$MathArrays#checkNonNegative(long[][])": -0.03667652249308182,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[])": -0.1231839384839211,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": -0.12456067312755656,
        "org.apache.commons.math3.util$MathArrays#checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)": -0.22713877337589589,
        "org.apache.commons.math3.util$MathArrays#checkPositive(double[])": -0.39888248774978363,
        "org.apache.commons.math3.util$MathArrays#checkRectangular(long[][])": -0.03667652249308182,
        "org.apache.commons.math3.util$MathArrays#copyOf(double[])": -0.13259677218775792,
        "org.apache.commons.math3.util$MathArrays#copyOf(double[],int)": -0.1651475614475334,
        "org.apache.commons.math3.util$MathArrays#copyOf(int[])": -0.04030830295267034,
        "org.apache.commons.math3.util$MathArrays#copyOf(int[],int)": -0.11172123069039568,
        "org.apache.commons.math3.util$MathArrays#distance(double[],double[])": -0.02819044482342814,
        "org.apache.commons.math3.util$MathArrays#distance(int[],int[])": -0.043668246701573134,
        "org.apache.commons.math3.util$MathArrays#distance1(double[],double[])": -0.016092059324553706,
        "org.apache.commons.math3.util$MathArrays#distance1(int[],int[])": -0.016092059324553706,
        "org.apache.commons.math3.util$MathArrays#distanceInf(double[],double[])": -0.016092059324553706,
        "org.apache.commons.math3.util$MathArrays#distanceInf(int[],int[])": -0.016092059324553706,
        "org.apache.commons.math3.util$MathArrays#ebeAdd(double[],double[])": -0.022904606394645564,
        "org.apache.commons.math3.util$MathArrays#ebeDivide(double[],double[])": -0.04978182414681043,
        "org.apache.commons.math3.util$MathArrays#ebeMultiply(double[],double[])": -0.022904606394645564,
        "org.apache.commons.math3.util$MathArrays#ebeSubtract(double[],double[])": -0.022904606394645564,
        "org.apache.commons.math3.util$MathArrays#equals(double[],double[])": -0.02819044482342825,
        "org.apache.commons.math3.util$MathArrays#equals(float[],float[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(double[],double[])": -0.03667652249308184,
        "org.apache.commons.math3.util$MathArrays#equalsIncludingNaN(float[],float[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#isMonotonic(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": -0.016092059324553706,
        "org.apache.commons.math3.util$MathArrays#isMonotonic(java.lang.Comparable[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)": -0.01609205932455371,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double)": 0.32172946227372845,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double)": 0.3193734740643145,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double,double,double,double,double,double,double,double)": -0.05788653582000558,
        "org.apache.commons.math3.util$MathArrays#linearCombination(double[],double[])": -0.05529939696389654,
        "org.apache.commons.math3.util$MathArrays#normalizeArray(double[],double)": -0.022904606394645564,
        "org.apache.commons.math3.util$MathArrays#safeNorm(double[])": 0.0,
        "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],double[][])": -0.04978182414681043,
        "org.apache.commons.math3.util$MathArrays#sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])": -0.04978182414681043,
        "org.apache.commons.math3.util$MathArrays$1#compare(org.apache.commons.math3.util.Pair,org.apache.commons.math3.util.Pair)": -0.04681297690472408,
        "org.apache.commons.math3.util$MathArrays$2#<clinit>()": -0.22713877337589583,
        "org.apache.commons.math3.util$MathArrays$OrderDirection#<clinit>()": -0.23165443822633794,
        "org.apache.commons.math3.util$MathArrays$OrderDirection#MathArrays$OrderDirection(java.lang.String,int)": -0.2316544382263379
    },
    "Time-1": {},
    "Time-10": {},
    "Time-11": {},
    "Time-12": {},
    "Time-13": {},
    "Time-14": {},
    "Time-15": {},
    "Time-17": {},
    "Time-18": {},
    "Time-19": {},
    "Time-2": {},
    "Time-20": {},
    "Time-3": {},
    "Time-4": {},
    "Time-6": {},
    "Time-7": {},
    "Time-8": {},
    "Time-9": {}
}