digraph G {
  "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])" [label="org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()" [label="org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()" [label="org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()" [label="org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)" [label="org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$NotANumberException#NotANumberException()" [label="org.apache.commons.math3.exception$NotANumberException#NotANumberException()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])" [label="org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" [label="org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$HypergeometricDistribution#HypergeometricDistribution(org.apache.commons.math3.random.RandomGenerator,int,int,int)" [label="org.apache.commons.math3.distribution$HypergeometricDistribution#HypergeometricDistribution(org.apache.commons.math3.random.RandomGenerator,int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" [label="org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" [label="org.apache.commons.math3.util$FastMath#hypot(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#scalb(double,int)" [label="org.apache.commons.math3.util$FastMath#scalb(double,int)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.util$FastMath#sqrt(double)" [label="org.apache.commons.math3.util$FastMath#sqrt(double)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.util$FastMath#abs(double)" [label="org.apache.commons.math3.util$FastMath#abs(double)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.util$FastMath#<clinit>()" [label="org.apache.commons.math3.util$FastMath#<clinit>()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.util$FastMath#getExponent(double)" [label="org.apache.commons.math3.util$FastMath#getExponent(double)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#initRan()" [label="org.apache.commons.math3.random$RandomDataGenerator#initRan()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#cumulativeProbability(int,int)" [label="org.apache.commons.math3.distribution$AbstractIntegerDistribution#cumulativeProbability(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)" [label="org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getDomain(int,int,int)" [label="org.apache.commons.math3.distribution$HypergeometricDistribution#getDomain(int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)" [label="org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#acosh(double)" [label="org.apache.commons.math3.util$FastMath#acosh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#log(double)" [label="org.apache.commons.math3.util$FastMath#log(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#log(double,double[])" [label="org.apache.commons.math3.util$FastMath#log(double,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" [label="org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" [label="org.apache.commons.math3.util$FastMath#exp(double,double,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()" [label="org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()" [label="org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()" [label="org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()" [label="org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()" [label="org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#sin(double)" [label="org.apache.commons.math3.util$FastMath#sin(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" [label="org.apache.commons.math3.util$FastMath#sinQ(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()" [label="org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()" [label="org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.util$FastMath$CodyWaite#getK()" [label="org.apache.commons.math3.util$FastMath$CodyWaite#getK()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)" [label="org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])" [label="org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" [label="org.apache.commons.math3.util$FastMath#cosQ(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#polyCosine(double)" [label="org.apache.commons.math3.util$FastMath#polyCosine(double)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.util$FastMath#polySine(double)" [label="org.apache.commons.math3.util$FastMath#polySine(double)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportUpperBound()" [label="org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportUpperBound()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getSampleSize()" [label="org.apache.commons.math3.distribution$HypergeometricDistribution#getSampleSize()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.util$FastMath#min(int,int)" [label="org.apache.commons.math3.util$FastMath#min(int,int)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumberOfSuccesses()" [label="org.apache.commons.math3.distribution$HypergeometricDistribution#getNumberOfSuccesses()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.util$FastMath#tan(double)" [label="org.apache.commons.math3.util$FastMath#tan(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" [label="org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#getNatural(int)" [label="org.apache.commons.math3.random$RandomDataGenerator#getNatural(int)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)" [label="org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$HypergeometricDistribution#HypergeometricDistribution(int,int,int)" [label="org.apache.commons.math3.distribution$HypergeometricDistribution#HypergeometricDistribution(int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$Well19937c#Well19937c()" [label="org.apache.commons.math3.random$Well19937c#Well19937c()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)" [label="org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#AbstractIntegerDistribution(org.apache.commons.math3.random.RandomGenerator)" [label="org.apache.commons.math3.distribution$AbstractIntegerDistribution#AbstractIntegerDistribution(org.apache.commons.math3.random.RandomGenerator)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextSample(java.util.Collection,int)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextSample(java.util.Collection,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#pow(double,double)" [label="org.apache.commons.math3.util$FastMath#pow(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()" [label="org.apache.commons.math3.util$FastMath$lnMant#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureLong(long,long)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextSecureLong(long,long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$BitsStreamGenerator#nextInt(int)" [label="org.apache.commons.math3.random$BitsStreamGenerator#nextInt(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()" [label="org.apache.commons.math3.random$RandomDataGenerator#getSecRan()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$BitsStreamGenerator#nextLong()" [label="org.apache.commons.math3.random$BitsStreamGenerator#nextLong()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextLong(org.apache.commons.math3.random.RandomGenerator,long)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextLong(org.apache.commons.math3.random.RandomGenerator,long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)" [label="org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$Well19937c#next(int)" [label="org.apache.commons.math3.random$Well19937c#next(int)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()" [label="org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#cbrt(double)" [label="org.apache.commons.math3.util$FastMath#cbrt(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" [label="org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalMean()" [label="org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalMean()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalVariance()" [label="org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalVariance()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportLowerBound()" [label="org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportLowerBound()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(java.lang.Number,java.lang.Number,java.lang.Number)" [label="org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(java.lang.Number,java.lang.Number,java.lang.Number)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)" [label="org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)" [label="org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#atan(double)" [label="org.apache.commons.math3.util$FastMath#atan(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)" [label="org.apache.commons.math3.util$FastMath#atan(double,double,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#cosh(double)" [label="org.apache.commons.math3.util$FastMath#cosh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#exp(double)" [label="org.apache.commons.math3.util$FastMath#exp(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$AbstractWell#setSeed(long)" [label="org.apache.commons.math3.random$AbstractWell#setSeed(long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$AbstractWell#setSeed(int[])" [label="org.apache.commons.math3.random$AbstractWell#setSeed(int[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#max(int,int)" [label="org.apache.commons.math3.util$FastMath#max(int,int)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getPopulationSize()" [label="org.apache.commons.math3.distribution$HypergeometricDistribution#getPopulationSize()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" [label="org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#cos(double)" [label="org.apache.commons.math3.util$FastMath#cos(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#tanh(double)" [label="org.apache.commons.math3.util$FastMath#tanh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" [label="org.apache.commons.math3.util$FastMath#expm1(double,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" [label="org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" [label="org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)" [label="org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$SaddlePointExpansion#getDeviancePart(double,double)" [label="org.apache.commons.math3.distribution$SaddlePointExpansion#getDeviancePart(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$SaddlePointExpansion#logBinomialProbability(int,int,double,double)" [label="org.apache.commons.math3.distribution$SaddlePointExpansion#logBinomialProbability(int,int,double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$SaddlePointExpansion#getStirlingError(double)" [label="org.apache.commons.math3.distribution$SaddlePointExpansion#getStirlingError(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$SaddlePointExpansion#<clinit>()" [label="org.apache.commons.math3.distribution$SaddlePointExpansion#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#floor(double)" [label="org.apache.commons.math3.util$FastMath#floor(double)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)" [label="org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextExponential(double)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextExponential(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)" [label="org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$BitsStreamGenerator#nextBytes(byte[])" [label="org.apache.commons.math3.random$BitsStreamGenerator#nextBytes(byte[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])" [label="org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.util$FastMath#copySign(double,double)" [label="org.apache.commons.math3.util$FastMath#copySign(double,double)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextT(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)" [label="org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextHexString(int)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextHexString(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getLowerDomain(int,int,int)" [label="org.apache.commons.math3.distribution$HypergeometricDistribution#getLowerDomain(int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getUpperDomain(int,int)" [label="org.apache.commons.math3.distribution$HypergeometricDistribution#getUpperDomain(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#reSeed()" [label="org.apache.commons.math3.random$RandomDataGenerator#reSeed()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$BitsStreamGenerator#nextLong(long)" [label="org.apache.commons.math3.random$BitsStreamGenerator#nextLong(long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int,int[])" [label="org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int,int[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$BitsStreamGenerator#BitsStreamGenerator()" [label="org.apache.commons.math3.random$BitsStreamGenerator#BitsStreamGenerator()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.random$BitsStreamGenerator#clear()" [label="org.apache.commons.math3.random$BitsStreamGenerator#clear()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)" [label="org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" [label="org.apache.commons.math3.util$FastMath#atan2(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#doubleHighPart(double)" [label="org.apache.commons.math3.util$FastMath#doubleHighPart(double)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()" [label="org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)" [label="org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextGamma(double,double)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextGamma(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int,int)" [label="org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$Well19937c#Well19937c(long)" [label="org.apache.commons.math3.random$Well19937c#Well19937c(long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int,long)" [label="org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int,long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureInt(int,int)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextSecureInt(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#reSeed(long)" [label="org.apache.commons.math3.random$RandomDataGenerator#reSeed(long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$BitsStreamGenerator#nextFloat()" [label="org.apache.commons.math3.random$BitsStreamGenerator#nextFloat()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#ulp(double)" [label="org.apache.commons.math3.util$FastMath#ulp(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#nextUp(double)" [label="org.apache.commons.math3.util$FastMath#nextUp(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#nextAfter(double,double)" [label="org.apache.commons.math3.util$FastMath#nextAfter(double,double)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()" [label="org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#atanh(double)" [label="org.apache.commons.math3.util$FastMath#atanh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)" [label="org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)" [label="org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$HypergeometricDistribution#calculateNumericalVariance()" [label="org.apache.commons.math3.distribution$HypergeometricDistribution#calculateNumericalVariance()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int)" [label="org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure(long)" [label="org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure(long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" [label="org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#toRadians(double)" [label="org.apache.commons.math3.util$FastMath#toRadians(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#ceil(double)" [label="org.apache.commons.math3.util$FastMath#ceil(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" [label="org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$Well19937c#Well19937c(int)" [label="org.apache.commons.math3.random$Well19937c#Well19937c(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#round(double)" [label="org.apache.commons.math3.util$FastMath#round(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)" [label="org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" [label="org.apache.commons.math3.util$FastMath#main(java.lang.String[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()" [label="org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])" [label="org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.util$FastMath#ulp(float)" [label="org.apache.commons.math3.util$FastMath#ulp(float)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#abs(float)" [label="org.apache.commons.math3.util$FastMath#abs(float)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure()" [label="org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#log10(double)" [label="org.apache.commons.math3.util$FastMath#log10(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" [label="org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextPoisson(double)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextPoisson(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure()" [label="org.apache.commons.math3.random$RandomDataImpl#reSeedSecure()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" [label="org.apache.commons.math3.random$RandomDataImpl#nextT(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#asin(double)" [label="org.apache.commons.math3.util$FastMath#asin(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextHexString(int)" [label="org.apache.commons.math3.random$RandomDataImpl#nextHexString(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextLong(long,long)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextLong(long,long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$Well19937c#Well19937c(int[])" [label="org.apache.commons.math3.random$Well19937c#Well19937c(int[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#reseedRandomGenerator(long)" [label="org.apache.commons.math3.distribution$AbstractIntegerDistribution#reseedRandomGenerator(long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#reSeed(long)" [label="org.apache.commons.math3.random$RandomDataImpl#reSeed(long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" [label="org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" [label="org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#toDegrees(double)" [label="org.apache.commons.math3.util$FastMath#toDegrees(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#log(double,double)" [label="org.apache.commons.math3.util$FastMath#log(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#sinh(double)" [label="org.apache.commons.math3.util$FastMath#sinh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureHexString(int)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextSecureHexString(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#nextUp(float)" [label="org.apache.commons.math3.util$FastMath#nextUp(float)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#nextAfter(float,double)" [label="org.apache.commons.math3.util$FastMath#nextAfter(float,double)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.random$RandomDataImpl#RandomDataImpl()" [label="org.apache.commons.math3.random$RandomDataImpl#RandomDataImpl()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$HypergeometricDistribution#upperCumulativeProbability(int)" [label="org.apache.commons.math3.distribution$HypergeometricDistribution#upperCumulativeProbability(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#acos(double)" [label="org.apache.commons.math3.util$FastMath#acos(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#RandomDataGenerator()" [label="org.apache.commons.math3.random$RandomDataGenerator#RandomDataGenerator()\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureHexString(int)" [label="org.apache.commons.math3.random$RandomDataImpl#nextSecureHexString(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)" [label="org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)" [label="org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#log1p(double)" [label="org.apache.commons.math3.util$FastMath#log1p(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#shuffle(int[],int)" [label="org.apache.commons.math3.random$RandomDataGenerator#shuffle(int[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextInt(int,int)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextInt(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#asinh(double)" [label="org.apache.commons.math3.util$FastMath#asinh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$BitsStreamGenerator#nextInt()" [label="org.apache.commons.math3.random$BitsStreamGenerator#nextInt()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)" [label="org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" [label="org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$AbstractWell#setSeed(int)" [label="org.apache.commons.math3.random$AbstractWell#setSeed(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure(long)" [label="org.apache.commons.math3.random$RandomDataImpl#reSeedSecure(long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])" [label="org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#rint(double)" [label="org.apache.commons.math3.util$FastMath#rint(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#expm1(double)" [label="org.apache.commons.math3.util$FastMath#expm1(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" [label="org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextInt(int,int)" [label="org.apache.commons.math3.random$RandomDataImpl#nextInt(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" [label="org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#RandomDataImpl(org.apache.commons.math3.random.RandomGenerator)" [label="org.apache.commons.math3.random$RandomDataImpl#RandomDataImpl(org.apache.commons.math3.random.RandomGenerator)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#RandomDataGenerator(org.apache.commons.math3.random.RandomGenerator)" [label="org.apache.commons.math3.random$RandomDataGenerator#RandomDataGenerator(org.apache.commons.math3.random.RandomGenerator)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)" [label="org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#AbstractIntegerDistribution()" [label="org.apache.commons.math3.distribution$AbstractIntegerDistribution#AbstractIntegerDistribution()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#reSeed()" [label="org.apache.commons.math3.random$RandomDataImpl#reSeed()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" [label="org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureInt(int,int)" [label="org.apache.commons.math3.random$RandomDataImpl#nextSecureInt(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" [label="org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#setSecureAlgorithm(java.lang.String,java.lang.String)" [label="org.apache.commons.math3.random$RandomDataImpl#setSecureAlgorithm(java.lang.String,java.lang.String)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#setSecureAlgorithm(java.lang.String,java.lang.String)" [label="org.apache.commons.math3.random$RandomDataGenerator#setSecureAlgorithm(java.lang.String,java.lang.String)\nP(Fail|Node)=1.00"];
  "org.apache.commons.math3.random$BitsStreamGenerator#nextBoolean()" [label="org.apache.commons.math3.random$BitsStreamGenerator#nextBoolean()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" [label="org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#round(float)" [label="org.apache.commons.math3.util$FastMath#round(float)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureLong(long,long)" [label="org.apache.commons.math3.random$RandomDataImpl#nextSecureLong(long,long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)" -> "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)" -> "org.apache.commons.math3.exception$NotANumberException#NotANumberException()";
  "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()" -> "org.apache.commons.math3.random$RandomDataGenerator#initRan()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$NotANumberException#NotANumberException()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#HypergeometricDistribution(org.apache.commons.math3.random.RandomGenerator,int,int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHypergeometric(int,int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#HypergeometricDistribution(org.apache.commons.math3.random.RandomGenerator,int,int,int)" -> "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#HypergeometricDistribution(org.apache.commons.math3.random.RandomGenerator,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#HypergeometricDistribution(org.apache.commons.math3.random.RandomGenerator,int,int,int)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#AbstractIntegerDistribution(org.apache.commons.math3.random.RandomGenerator)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#HypergeometricDistribution(org.apache.commons.math3.random.RandomGenerator,int,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#HypergeometricDistribution(org.apache.commons.math3.random.RandomGenerator,int,int,int)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#scalb(double,int)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#getExponent(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#initRan()" -> "org.apache.commons.math3.random$Well19937c#Well19937c(long)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#cumulativeProbability(int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#cumulativeProbability(int,int)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#cumulativeProbability(int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getDomain(int,int,int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getDomain(int,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getLowerDomain(int,int,int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getDomain(int,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getUpperDomain(int,int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#log(double,double[])" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextChiSquare(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextChiSquare(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()";
  "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()";
  "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()";
  "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()";
  "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntB()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpIntA()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportUpperBound()" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSampleSize()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportUpperBound()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportUpperBound()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportUpperBound()" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumberOfSuccesses()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getNatural(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#HypergeometricDistribution(int,int,int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#HypergeometricDistribution(org.apache.commons.math3.random.RandomGenerator,int,int,int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#HypergeometricDistribution(int,int,int)" -> "org.apache.commons.math3.random$Well19937c#Well19937c()";
  "org.apache.commons.math3.random$Well19937c#Well19937c()" -> "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int)";
  "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#AbstractIntegerDistribution(org.apache.commons.math3.random.RandomGenerator)" -> "org.apache.commons.math3.random$RandomDataImpl#RandomDataImpl()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureLong(long,long)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextInt(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureLong(long,long)" -> "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureLong(long,long)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureLong(long,long)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextLong()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureLong(long,long)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureLong(long,long)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextLong(org.apache.commons.math3.random.RandomGenerator,long)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextInt(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextInt(int)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextInt(int)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()" -> "org.apache.commons.math3.random$AbstractWell#setSeed(long)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextLong()" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextLong(org.apache.commons.math3.random.RandomGenerator,long)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextBytes(byte[])";
  "org.apache.commons.math3.random$RandomDataGenerator#nextLong(org.apache.commons.math3.random.RandomGenerator,long)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextLong(org.apache.commons.math3.random.RandomGenerator,long)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracA()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cbrt(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalMean()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalVariance()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportUpperBound()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportLowerBound()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalMean()" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumberOfSuccesses()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalMean()" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getPopulationSize()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalMean()" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSampleSize()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumericalVariance()" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#calculateNumericalVariance()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportLowerBound()" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSampleSize()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportLowerBound()" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumberOfSuccesses()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportLowerBound()" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportLowerBound()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getSupportLowerBound()" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getPopulationSize()";
  "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(java.lang.Number,java.lang.Number,java.lang.Number)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#checkedCumulativeProbability(int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#cumulativeProbability(int)";
  "org.apache.commons.math3.util$FastMath#atan(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atan(double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.random$AbstractWell#setSeed(long)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(int[])";
  "org.apache.commons.math3.random$AbstractWell#setSeed(int[])" -> "org.apache.commons.math3.random$AbstractWell#setSeed(long)";
  "org.apache.commons.math3.random$AbstractWell#setSeed(int[])" -> "org.apache.commons.math3.random$BitsStreamGenerator#clear()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextDouble()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextBeta(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextBeta(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextBinomial(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextBinomial(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#getDeviancePart(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#getDeviancePart(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#getDeviancePart(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#logBinomialProbability(int,int,double,double)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#getStirlingError(double)";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#logBinomialProbability(int,int,double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#logBinomialProbability(int,int,double,double)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#<clinit>()";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#logBinomialProbability(int,int,double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#logBinomialProbability(int,int,double,double)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#getDeviancePart(double,double)";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#getStirlingError(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#getStirlingError(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#getStirlingError(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#getStirlingError(double)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#<clinit>()";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#<clinit>()" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.distribution$SaddlePointExpansion#<clinit>()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextExponential(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextExponential(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextExponential(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextGaussian()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextBytes(byte[])" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHexString(int)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHexString(int)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextBytes(byte[])";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHexString(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextHexString(int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getLowerDomain(int,int,int)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getLowerDomain(int,int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getUpperDomain(int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#getUpperDomain(int,int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeed()" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeed()" -> "org.apache.commons.math3.random$AbstractWell#setSeed(long)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextLong(long)" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextLong(long)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextLong(long)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int,int[])" -> "org.apache.commons.math3.random$AbstractWell#setSeed(int[])";
  "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int,int[])" -> "org.apache.commons.math3.random$BitsStreamGenerator#BitsStreamGenerator()";
  "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double,boolean)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextUniform(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMathLiteralArrays#loadLnMant()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextGamma(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextGamma(double,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextGamma(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int,int)" -> "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int,int[])";
  "org.apache.commons.math3.random$Well19937c#Well19937c(long)" -> "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int,long)";
  "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int,long)" -> "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int,int[])";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureInt(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeed(long)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeed(long)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(long)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextFloat()" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.util$FastMath#ulp(double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$FastMath#ulp(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#nextUp(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#nextUp(double)" -> "org.apache.commons.math3.util$FastMath#nextAfter(double,double)";
  "org.apache.commons.math3.util$FastMathLiteralArrays#loadExpFracB()" -> "org.apache.commons.math3.util$FastMathLiteralArrays#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#calculateNumericalVariance()" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getSampleSize()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#calculateNumericalVariance()" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getPopulationSize()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#calculateNumericalVariance()" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getNumberOfSuccesses()";
  "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int)" -> "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int,int[])";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure(long)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(long)";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure(long)" -> "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample(int)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.util$FastMath#toRadians(double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#toRadians(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#ceil(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#ceil(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextCauchy(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextCauchy(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$Well19937c#Well19937c(int)" -> "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int,int)";
  "org.apache.commons.math3.util$FastMath#round(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#round(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#<clinit>()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)" -> "org.apache.commons.math3.distribution$SaddlePointExpansion#logBinomialProbability(int,int,double,double)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getDomain(int,int,int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#probability(int)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$FastMath#ulp(float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#ulp(float)" -> "org.apache.commons.math3.util$FastMath#abs(float)";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure()" -> "org.apache.commons.math3.random$AbstractWell#setSeed(long)";
  "org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure()" -> "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextPoisson(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextPoisson(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextPoisson(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure()" -> "org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure()";
  "org.apache.commons.math3.random$RandomDataImpl#nextT(double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextT(double)";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#sample()";
  "org.apache.commons.math3.random$RandomDataImpl#nextHexString(int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextHexString(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextLong(long,long)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextInt(int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextLong(long,long)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextLong(long,long)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextLong(long,long)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextLong(long,long)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextLong()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextLong(long,long)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextLong(org.apache.commons.math3.random.RandomGenerator,long)";
  "org.apache.commons.math3.random$Well19937c#Well19937c(int[])" -> "org.apache.commons.math3.random$AbstractWell#AbstractWell(int,int,int,int,int[])";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#reseedRandomGenerator(long)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(long)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#reseedRandomGenerator(long)" -> "org.apache.commons.math3.random$RandomDataImpl#reSeed(long)";
  "org.apache.commons.math3.random$RandomDataImpl#reSeed(long)" -> "org.apache.commons.math3.random$RandomDataGenerator#reSeed(long)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution)" -> "org.apache.commons.math3.distribution$AbstractIntegerDistribution#inverseCumulativeProbability(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution)" -> "org.apache.commons.math3.random$RandomDataImpl#nextUniform(double,double)";
  "org.apache.commons.math3.util$FastMath#toDegrees(double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#toDegrees(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureHexString(int)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureHexString(int)" -> "org.apache.commons.math3.random$BitsStreamGenerator#nextBytes(byte[])";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureHexString(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#nextSecureHexString(int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getSecRan()";
  "org.apache.commons.math3.util$FastMath#nextUp(float)" -> "org.apache.commons.math3.util$FastMath#nextAfter(float,double)";
  "org.apache.commons.math3.util$FastMath#nextUp(float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#RandomDataImpl()" -> "org.apache.commons.math3.random$RandomDataGenerator#RandomDataGenerator()";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#upperCumulativeProbability(int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#innerCumulativeProbability(int,int,int)";
  "org.apache.commons.math3.distribution$HypergeometricDistribution#upperCumulativeProbability(int)" -> "org.apache.commons.math3.distribution$HypergeometricDistribution#getDomain(int,int,int)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureHexString(int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextSecureHexString(int)";
  "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.random$RandomDataImpl#nextPermutation(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextPermutation(int,int)";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataGenerator#shuffle(int[],int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextInt(int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextInt(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextInt()" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextSample(java.util.Collection,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextSample(java.util.Collection,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextZipf(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextZipf(int,double)";
  "org.apache.commons.math3.random$AbstractWell#setSeed(int)" -> "org.apache.commons.math3.random$AbstractWell#setSeed(int[])";
  "org.apache.commons.math3.random$RandomDataImpl#reSeedSecure(long)" -> "org.apache.commons.math3.random$RandomDataGenerator#reSeedSecure(long)";
  "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])" -> "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$FastMath#rint(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#rint(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.random$RandomDataImpl#nextWeibull(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextWeibull(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextInt(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextInt(int,int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextGaussian(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextGaussian(double,double)";
  "org.apache.commons.math3.random$RandomDataImpl#RandomDataImpl(org.apache.commons.math3.random.RandomGenerator)" -> "org.apache.commons.math3.random$RandomDataGenerator#RandomDataGenerator(org.apache.commons.math3.random.RandomGenerator)";
  "org.apache.commons.math3.random$RandomDataImpl#nextLong(long,long)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextLong(long,long)";
  "org.apache.commons.math3.distribution$AbstractIntegerDistribution#AbstractIntegerDistribution()" -> "org.apache.commons.math3.random$RandomDataImpl#RandomDataImpl()";
  "org.apache.commons.math3.random$RandomDataImpl#reSeed()" -> "org.apache.commons.math3.random$RandomDataGenerator#reSeed()";
  "org.apache.commons.math3.random$RandomDataImpl#nextPascal(int,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextPascal(int,double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureInt(int,int)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextSecureInt(int,int)";
  "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#getRandomGenerator()";
  "org.apache.commons.math3.random$RandomDataImpl#setSecureAlgorithm(java.lang.String,java.lang.String)" -> "org.apache.commons.math3.random$RandomDataGenerator#setSecureAlgorithm(java.lang.String,java.lang.String)";
  "org.apache.commons.math3.random$BitsStreamGenerator#nextBoolean()" -> "org.apache.commons.math3.random$Well19937c#next(int)";
  "org.apache.commons.math3.random$RandomDataImpl#nextF(double,double)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextF(double,double)";
  "org.apache.commons.math3.util$FastMath#round(float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#round(float)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.random$RandomDataImpl#nextSecureLong(long,long)" -> "org.apache.commons.math3.random$RandomDataGenerator#nextSecureLong(long,long)";
}
