digraph G {
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" [label="org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)" [label="org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#min(int,int)" [label="org.apache.commons.math3.util$FastMath#min(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)" [label="org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" [label="org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()" [label="org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)" [label="org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()" [label="org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()" [label="org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(int)" [label="org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)" [label="org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixUtils#<clinit>()" [label="org.apache.commons.math3.linear$MatrixUtils#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])" [label="org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)" [label="org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)" [label="org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)" [label="org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)" [label="org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()" [label="org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()" [label="org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()" [label="org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)" [label="org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()" [label="org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()" [label="org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()" [label="org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" [label="org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)" [label="org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" [label="org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)" [label="org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()" [label="org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])" [label="org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)" [label="org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()" [label="org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)" [label="org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()" [label="org.apache.commons.math3.linear$RealMatrixFormat#getFormat()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)" [label="org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])" [label="org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])" [label="org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)" [label="org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()" [label="org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" [label="org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)" [label="org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" [label="org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)" [label="org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)" [label="org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$DiagonalMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" [label="org.apache.commons.math3.linear$DiagonalMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)" [label="org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)" [label="org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)" [label="org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()" [label="org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)" [label="org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#<clinit>()" [label="org.apache.commons.math3.util$FastMath#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)" [label="org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)" [label="org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)" [label="org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()" [label="org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()" [label="org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)" [label="org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)" [label="org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)" [label="org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)" [label="org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)" [label="org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)" [label="org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)" [label="org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()" [label="org.apache.commons.math3.linear$RealMatrixFormat#getInstance()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)" [label="org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()" [label="org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)" [label="org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()" [label="org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" [label="org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])" [label="org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)" [label="org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String)" [label="org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$MathIllegalStateException#getContext()" [label="org.apache.commons.math3.exception$MathIllegalStateException#getContext()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)" [label="org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)" [label="org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$CompositeFormat#parseNextCharacter(java.lang.String,java.text.ParsePosition)" [label="org.apache.commons.math3.util$CompositeFormat#parseNextCharacter(java.lang.String,java.text.ParsePosition)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVectorFormat#getInstance()" [label="org.apache.commons.math3.linear$RealVectorFormat#getInstance()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String,java.text.ParsePosition)" [label="org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String,java.text.ParsePosition)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)" [label="org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,double,java.text.ParsePosition)" [label="org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,double,java.text.ParsePosition)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#RealVector()" [label="org.apache.commons.math3.linear$RealVector#RealVector()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()" [label="org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$CompositeFormat#parseAndIgnoreWhitespace(java.lang.String,java.text.ParsePosition)" [label="org.apache.commons.math3.util$CompositeFormat#parseAndIgnoreWhitespace(java.lang.String,java.text.ParsePosition)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()" [label="org.apache.commons.math3.linear$ArrayRealVector#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)" [label="org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,java.text.NumberFormat,java.text.ParsePosition)" [label="org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,java.text.NumberFormat,java.text.ParsePosition)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$CompositeFormat#parseFixedstring(java.lang.String,java.lang.String,java.text.ParsePosition)" [label="org.apache.commons.math3.util$CompositeFormat#parseFixedstring(java.lang.String,java.lang.String,java.text.ParsePosition)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int,java.lang.Class)" [label="org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int,java.lang.Class)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])" [label="org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#checkParameters()" [label="org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#checkParameters()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#acosh(double)" [label="org.apache.commons.math3.util$FastMath#acosh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#sqrt(double)" [label="org.apache.commons.math3.util$FastMath#sqrt(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#log(double,double[])" [label="org.apache.commons.math3.util$FastMath#log(double,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#log(double)" [label="org.apache.commons.math3.util$FastMath#log(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()" [label="org.apache.commons.math3.util$FastMath$lnMant#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#asinh(double)" [label="org.apache.commons.math3.util$FastMath#asinh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" [label="org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)" [label="org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" [label="org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])" [label="org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)" [label="org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)" [label="org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixUtils#checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" [label="org.apache.commons.math3.linear$MatrixUtils#checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)" [label="org.apache.commons.math3.linear$Array2DRowFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" [label="org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#getLInfNorm()" [label="org.apache.commons.math3.linear$ArrayRealVector#getLInfNorm()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#abs(double)" [label="org.apache.commons.math3.util$FastMath#abs(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#max(double,double)" [label="org.apache.commons.math3.util$FastMath#max(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#getRow(int)" [label="org.apache.commons.math3.linear$BlockRealMatrix#getRow(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#PolynomialFitter(int,org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer)" [label="org.apache.commons.math3.optimization.fitting$PolynomialFitter#PolynomialFitter(int,org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.fitting$CurveFitter#CurveFitter(org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer)" [label="org.apache.commons.math3.optimization.fitting$CurveFitter#CurveFitter(org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" [label="org.apache.commons.math3.util$FastMath#exp(double,double,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()" [label="org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()" [label="org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,org.apache.commons.math3.linear.RealVector)" [label="org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,org.apache.commons.math3.linear.RealVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,double[])" [label="org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#getDimension()" [label="org.apache.commons.math3.linear$ArrayRealVector#getDimension()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)" [label="org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#checkIndex(int)" [label="org.apache.commons.math3.linear$RealVector#checkIndex(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)" [label="org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)" [label="org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)" [label="org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#sparseIterator()" [label="org.apache.commons.math3.linear$RealVector#sparseIterator()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)" [label="org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector$Entry#getIndex()" [label="org.apache.commons.math3.linear$RealVector$Entry#getIndex()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector$Entry#RealVector$Entry(org.apache.commons.math3.linear.RealVector)" [label="org.apache.commons.math3.linear$RealVector$Entry#RealVector$Entry(org.apache.commons.math3.linear.RealVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#RealVector$SparseEntryIterator(org.apache.commons.math3.linear.RealVector)" [label="org.apache.commons.math3.linear$RealVector$SparseEntryIterator#RealVector$SparseEntryIterator(org.apache.commons.math3.linear.RealVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)" [label="org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector$Entry#getValue()" [label="org.apache.commons.math3.linear$RealVector$Entry#getValue()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)" [label="org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)" [label="org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])" [label="org.apache.commons.math3.linear$BlockFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#blockHeight(int)" [label="org.apache.commons.math3.linear$BlockFieldMatrix#blockHeight(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#getMaxValue()" [label="org.apache.commons.math3.linear$RealVector#getMaxValue()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#iterator()" [label="org.apache.commons.math3.linear$RealVector#iterator()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()" [label="org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()" [label="org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#getMaxIndex()" [label="org.apache.commons.math3.linear$RealVector#getMaxIndex()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" [label="org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" [label="org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)" [label="org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)" [label="org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" [label="org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" [label="org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" [label="org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" [label="org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)" [label="org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" [label="org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)" [label="org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" [label="org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)" [label="org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)" [label="org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)" [label="org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])" [label="org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])" [label="org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[],boolean)" [label="org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[],boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])" [label="org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" [label="org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getTarget()" [label="org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getTarget()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()" [label="org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#max(int,int)" [label="org.apache.commons.math3.util$FastMath#max(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" [label="org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#subtract(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)" [label="org.apache.commons.math3.analysis.polynomials$PolynomialFunction#subtract(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#PolynomialFunction(double[])" [label="org.apache.commons.math3.analysis.polynomials$PolynomialFunction#PolynomialFunction(double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" [label="org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)" [label="org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#pow(double,double)" [label="org.apache.commons.math3.util$FastMath#pow(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException()" [label="org.apache.commons.math3.exception$ConvergenceException#ConvergenceException()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])" [label="org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" [label="org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit()" [label="org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization$PointVectorValuePair#getPointRef()" [label="org.apache.commons.math3.optimization$PointVectorValuePair#getPointRef()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#PolynomialFunction$Parametric()" [label="org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#PolynomialFunction$Parametric()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Pair#getKey()" [label="org.apache.commons.math3.util$Pair#getKey()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction#CurveFitter$OldTheoreticalValuesFunction(org.apache.commons.math3.optimization.fitting.CurveFitter,org.apache.commons.math3.analysis.ParametricUnivariateFunction)" [label="org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction#CurveFitter$OldTheoreticalValuesFunction(org.apache.commons.math3.optimization.fitting.CurveFitter,org.apache.commons.math3.analysis.ParametricUnivariateFunction)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#getWeight()" [label="org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#getWeight()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])" [label="org.apache.commons.math3.optimization.fitting$CurveFitter#fit(org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#getY()" [label="org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#getY()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(int,org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])" [label="org.apache.commons.math3.optimization.fitting$CurveFitter#fit(int,org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)" [label="org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)" [label="org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)" [label="org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#getLInfNorm()" [label="org.apache.commons.math3.linear$RealVector#getLInfNorm()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])" [label="org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" [label="org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#getField()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)" [label="org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(double)" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" [label="org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Pair#Pair(java.lang.Object,java.lang.Object)" [label="org.apache.commons.math3.util$Pair#Pair(java.lang.Object,java.lang.Object)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qTy(double[])" [label="org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qTy(double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()" [label="org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" [label="org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" [label="org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[])" [label="org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" [label="org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" [label="org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)" [label="org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$DiagonalMatrix#copy()" [label="org.apache.commons.math3.linear$DiagonalMatrix#copy()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#getX()" [label="org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#getX()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[])" [label="org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getConvergenceChecker()" [label="org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getConvergenceChecker()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#getDataRef()" [label="org.apache.commons.math3.linear$ArrayRealVector#getDataRef()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" [label="org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#min(double,double)" [label="org.apache.commons.math3.util$FastMath#min(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization$InitialGuess#getInitialGuess()" [label="org.apache.commons.math3.optimization$InitialGuess#getInitialGuess()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization$PointVectorValuePair#PointVectorValuePair(double[],double[],boolean)" [label="org.apache.commons.math3.optimization$PointVectorValuePair#PointVectorValuePair(double[],double[],boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$MaxCountExceededException#getMax()" [label="org.apache.commons.math3.exception$MaxCountExceededException#getMax()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)" [label="org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#getData()" [label="org.apache.commons.math3.linear$BlockRealMatrix#getData()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])" [label="org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#value(double,double[])" [label="org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#value(double,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" [label="org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#copy()" [label="org.apache.commons.math3.linear$BlockRealMatrix#copy()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$TooManyEvaluationsException#TooManyEvaluationsException(java.lang.Number)" [label="org.apache.commons.math3.exception$TooManyEvaluationsException#TooManyEvaluationsException(java.lang.Number)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#operate(double[])" [label="org.apache.commons.math3.linear$Array2DRowRealMatrix#operate(double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#getData()" [label="org.apache.commons.math3.linear$AbstractRealMatrix#getData()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#getData()" [label="org.apache.commons.math3.linear$Array2DRowRealMatrix#getData()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()" [label="org.apache.commons.math3.linear$OpenMapRealMatrix#copy()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setCost(double)" [label="org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setCost(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$DiagonalMatrix#getDataRef()" [label="org.apache.commons.math3.linear$DiagonalMatrix#getDataRef()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization$Weight#getWeight()" [label="org.apache.commons.math3.optimization$Weight#getWeight()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)" [label="org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#squareRoot(org.apache.commons.math3.linear.RealMatrix)" [label="org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#squareRoot(org.apache.commons.math3.linear.RealMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization$PointVectorValuePair#getPoint()" [label="org.apache.commons.math3.optimization$PointVectorValuePair#getPoint()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#determineLMDirection(double[],double[],double[],double[])" [label="org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#determineLMDirection(double[],double[],double[],double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction#value(double[])" [label="org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction#value(double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#gradient(double,double[])" [label="org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#gradient(double,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)" [label="org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getStartPoint()" [label="org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getStartPoint()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix)" [label="org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeResiduals(double[])" [label="org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeResiduals(double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)" [label="org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization$Target#Target(double[])" [label="org.apache.commons.math3.optimization$Target#Target(double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$DiagonalMatrix#getData()" [label="org.apache.commons.math3.linear$DiagonalMatrix#getData()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization$PointVectorValuePair#PointVectorValuePair(double[],double[])" [label="org.apache.commons.math3.optimization$PointVectorValuePair#PointVectorValuePair(double[],double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Incrementor#incrementCount()" [label="org.apache.commons.math3.util$Incrementor#incrementCount()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])" [label="org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization$Weight#Weight(double[])" [label="org.apache.commons.math3.optimization$Weight#Weight(double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])" [label="org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#evaluate(double[],double)" [label="org.apache.commons.math3.analysis.polynomials$PolynomialFunction#evaluate(double[],double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])" [label="org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" [label="org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" [label="org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#operate(double[])" [label="org.apache.commons.math3.linear$BlockRealMatrix#operate(double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" [label="org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)" [label="org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization$Target#getTarget()" [label="org.apache.commons.math3.optimization$Target#getTarget()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)" [label="org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" [label="org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Incrementor#resetCount()" [label="org.apache.commons.math3.util$Incrementor#resetCount()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis$FunctionUtils#toMultivariateDifferentiableVectorFunction(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction)" [label="org.apache.commons.math3.analysis$FunctionUtils#toMultivariateDifferentiableVectorFunction(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" [label="org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#determineLMParameter(double[],double,double[],double[],double[],double[])" [label="org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#determineLMParameter(double[],double,double[],double[],double[],double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#setUp()" [label="org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#setUp()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization$InitialGuess#InitialGuess(double[])" [label="org.apache.commons.math3.optimization$InitialGuess#InitialGuess(double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getObjectiveFunction()" [label="org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getObjectiveFunction()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)" [label="org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" [label="org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Incrementor#setMaximalCount(int)" [label="org.apache.commons.math3.util$Incrementor#setMaximalCount(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#compose(double[])" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#compose(double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getOrder()" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#getOrder()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getOrder()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getOrder()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" [label="org.apache.commons.math3.linear$AbstractRealMatrix#power(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#isSquare()" [label="org.apache.commons.math3.linear$AbstractRealMatrix#isSquare()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" [label="org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$NonSquareMatrixException#NonSquareMatrixException(int,int)" [label="org.apache.commons.math3.linear$NonSquareMatrixException#NonSquareMatrixException(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)" [label="org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" [label="org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#equals(java.lang.Object)" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#equals(java.lang.Object)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atanh()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atanh()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atanh(double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#atanh(double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#atanh(double)" [label="org.apache.commons.math3.util$FastMath#atanh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#cosh(double)" [label="org.apache.commons.math3.util$FastMath#cosh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#exp(double)" [label="org.apache.commons.math3.util$FastMath#exp(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getEvaluations()" [label="org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getEvaluations()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Incrementor#getCount()" [label="org.apache.commons.math3.util$Incrementor#getCount()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$ZeroException#ZeroException()" [label="org.apache.commons.math3.exception$ZeroException#ZeroException()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])" [label="org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" [label="org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.FieldElement[])" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.FieldElement[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" [label="org.apache.commons.math3.util$FastMath#hypot(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#getExponent(double)" [label="org.apache.commons.math3.util$FastMath#getExponent(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#scalb(double,int)" [label="org.apache.commons.math3.util$FastMath#scalb(double,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log(double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#log(double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$NoDataException#NoDataException()" [label="org.apache.commons.math3.exception$NoDataException#NoDataException()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#toDegrees(double)" [label="org.apache.commons.math3.util$FastMath#toDegrees(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Precision#<clinit>()" [label="org.apache.commons.math3.util$Precision#<clinit>()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#doubleHighPart(double)" [label="org.apache.commons.math3.util$FastMath#doubleHighPart(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#add(double)" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#add(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)" [label="org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#floor(double)" [label="org.apache.commons.math3.util$FastMath#floor(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#start(int,int,int,int,int,int)" [label="org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#start(int,int,int,int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" [label="org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" [label="org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#start(int,int,int,int,int,int)" [label="org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#start(int,int,int,int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" [label="org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()" [label="org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" [label="org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$DiagonalMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" [label="org.apache.commons.math3.linear$DiagonalMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" [label="org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],org.apache.commons.math3.linear.ArrayRealVector)" [label="org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],org.apache.commons.math3.linear.ArrayRealVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan(double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#atan(double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)" [label="org.apache.commons.math3.util$FastMath#atan(double,double,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#atan(double)" [label="org.apache.commons.math3.util$FastMath#atan(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#copySign(double,double)" [label="org.apache.commons.math3.util$FastMath#copySign(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#remainder(double)" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#remainder(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)" [label="org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,int,int)" [label="org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubtractionCompatible(org.apache.commons.math3.linear.FieldMatrix)" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubtractionCompatible(org.apache.commons.math3.linear.FieldMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#createMatrix(int,int)" [label="org.apache.commons.math3.linear$BlockFieldMatrix#createMatrix(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#createMatrix(int,int)" [label="org.apache.commons.math3.linear$Array2DRowFieldMatrix#createMatrix(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)" [label="org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)" [label="org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,double[])" [label="org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#reciprocal()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#reciprocal()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#pow(double,int)" [label="org.apache.commons.math3.util$FastMath#pow(double,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[])" [label="org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" [label="org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)" [label="org.apache.commons.math3.linear$BlockFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#polynomialDerivative()" [label="org.apache.commons.math3.analysis.polynomials$PolynomialFunction#polynomialDerivative()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#differentiate(double[])" [label="org.apache.commons.math3.analysis.polynomials$PolynomialFunction#differentiate(double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization$PointVectorValuePair#writeReplace()" [label="org.apache.commons.math3.optimization$PointVectorValuePair#writeReplace()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Pair#getValue()" [label="org.apache.commons.math3.util$Pair#getValue()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization$PointVectorValuePair#getValue()" [label="org.apache.commons.math3.optimization$PointVectorValuePair#getValue()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization$PointVectorValuePair$DataTransferObject#PointVectorValuePair$DataTransferObject(double[],double[])" [label="org.apache.commons.math3.optimization$PointVectorValuePair$DataTransferObject#PointVectorValuePair$DataTransferObject(double[],double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#hashCode()" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#hashCode()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#setRow(int,double[])" [label="org.apache.commons.math3.linear$BlockRealMatrix#setRow(int,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)" [label="org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)" [label="org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)" [label="org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)" [label="org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#checkIndices(int,int)" [label="org.apache.commons.math3.linear$RealVector#checkIndices(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#asin(double)" [label="org.apache.commons.math3.util$FastMath#asin(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" [label="org.apache.commons.math3.linear$ArrayRealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,boolean)" [label="org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#copy()" [label="org.apache.commons.math3.linear$ArrayRealVector#copy()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)" [label="org.apache.commons.math3.linear$ArrayRealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" [label="org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" [label="org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)" [label="org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#abs(long)" [label="org.apache.commons.math3.util$FastMath#abs(long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Precision#equals(double,double,int)" [label="org.apache.commons.math3.util$Precision#equals(double,double,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" [label="org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix()" [label="org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)" [label="org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$CompositeFormat#formatDouble(double,java.text.NumberFormat,java.lang.StringBuffer,java.text.FieldPosition)" [label="org.apache.commons.math3.util$CompositeFormat#formatDouble(double,java.text.NumberFormat,java.lang.StringBuffer,java.text.FieldPosition)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(int,double[])" [label="org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(int,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tanh(double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#tanh(double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#tanh(double)" [label="org.apache.commons.math3.util$FastMath#tanh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" [label="org.apache.commons.math3.util$FastMath#expm1(double,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])" [label="org.apache.commons.math3.linear$BlockFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)" [label="org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#getNorm()" [label="org.apache.commons.math3.linear$ArrayRealVector#getNorm()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])" [label="org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#getNorm()" [label="org.apache.commons.math3.linear$RealVector#getNorm()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#rint(double)" [label="org.apache.commons.math3.util$FastMath#rint(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Precision#compareTo(double,double,double)" [label="org.apache.commons.math3.util$Precision#compareTo(double,double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Precision#equals(double,double,double)" [label="org.apache.commons.math3.util$Precision#equals(double,double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" [label="org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#polySine(double)" [label="org.apache.commons.math3.util$FastMath#polySine(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#polyCosine(double)" [label="org.apache.commons.math3.util$FastMath#polyCosine(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])" [label="org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.Field,int,int)" [label="org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.Field,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getField()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getField()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkAdditionCompatible(org.apache.commons.math3.linear.FieldMatrix)" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#checkAdditionCompatible(org.apache.commons.math3.linear.FieldMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)" [label="org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#AbstractLeastSquaresOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)" [label="org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#AbstractLeastSquaresOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#BaseAbstractMultivariateVectorOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)" [label="org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#BaseAbstractMultivariateVectorOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Incrementor#Incrementor()" [label="org.apache.commons.math3.util$Incrementor#Incrementor()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,org.apache.commons.math3.optimization.ConvergenceChecker,double,double,double,double)" [label="org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,org.apache.commons.math3.optimization.ConvergenceChecker,double,double,double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Incrementor#Incrementor(int,org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback)" [label="org.apache.commons.math3.util$Incrementor#Incrementor(int,org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Incrementor#Incrementor(int)" [label="org.apache.commons.math3.util$Incrementor#Incrementor(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)" [label="org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)" [label="org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#scalb(int)" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#scalb(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#preMultiply(double[])" [label="org.apache.commons.math3.linear$Array2DRowRealMatrix#preMultiply(double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Precision#equals(float,float,float)" [label="org.apache.commons.math3.util$Precision#equals(float,float,float)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#abs(int)" [label="org.apache.commons.math3.util$FastMath#abs(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#abs(float)" [label="org.apache.commons.math3.util$FastMath#abs(float)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Precision#equals(float,float,int)" [label="org.apache.commons.math3.util$Precision#equals(float,float,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)" [label="org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)" [label="org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)" [label="org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int)" [label="org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)" [label="org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)" [label="org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#sin(double)" [label="org.apache.commons.math3.util$FastMath#sin(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])" [label="org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()" [label="org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" [label="org.apache.commons.math3.util$FastMath#sinQ(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" [label="org.apache.commons.math3.util$FastMath#cosQ(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()" [label="org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#cos(double)" [label="org.apache.commons.math3.util$FastMath#cos(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath$CodyWaite#getK()" [label="org.apache.commons.math3.util$FastMath$CodyWaite#getK()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" [label="org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#cbrt(double)" [label="org.apache.commons.math3.util$FastMath#cbrt(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#exp()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#exp()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#exp(double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#exp(double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" [label="org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" [label="org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$DiagonalMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" [label="org.apache.commons.math3.linear$DiagonalMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" [label="org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" [label="org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[])" [label="org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field)" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)" [label="org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector)" [label="org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])" [label="org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])" [label="org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[][])" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[][])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()" [label="org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathUtils#hash(double)" [label="org.apache.commons.math3.util$MathUtils#hash(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)" [label="org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#set(double)" [label="org.apache.commons.math3.linear$RealVector#set(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector$Entry#setValue(double)" [label="org.apache.commons.math3.linear$RealVector$Entry#setValue(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#ulp(double)" [label="org.apache.commons.math3.util$FastMath#ulp(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" [label="org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#getSubMatrix(int,int,int,int)" [label="org.apache.commons.math3.linear$BlockFieldMatrix#getSubMatrix(int,int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#copyBlockPart(org.apache.commons.math3.FieldElement[],int,int,int,int,int,org.apache.commons.math3.FieldElement[],int,int,int)" [label="org.apache.commons.math3.linear$BlockFieldMatrix#copyBlockPart(org.apache.commons.math3.FieldElement[],int,int,int,int,int,org.apache.commons.math3.FieldElement[],int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)" [label="org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)" [label="org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)" [label="org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)" [label="org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(int)" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(double)" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" [label="org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String)" [label="org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization$PointVectorValuePair$DataTransferObject#readResolve()" [label="org.apache.commons.math3.optimization$PointVectorValuePair$DataTransferObject#readResolve()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$DiagonalMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" [label="org.apache.commons.math3.linear$DiagonalMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)" [label="org.apache.commons.math3.linear$ArrayRealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#subtract(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#subtract(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#subtract(double[],int,double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#subtract(double[],int,double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$DiagonalMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" [label="org.apache.commons.math3.linear$DiagonalMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#getFrobeniusNorm()" [label="org.apache.commons.math3.linear$BlockRealMatrix#getFrobeniusNorm()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#scalarAdd(double)" [label="org.apache.commons.math3.linear$BlockRealMatrix#scalarAdd(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#getRowVector(int)" [label="org.apache.commons.math3.linear$BlockFieldMatrix#getRowVector(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()" [label="org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" [label="org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" [label="org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" [label="org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" [label="org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" [label="org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$DiagonalMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" [label="org.apache.commons.math3.linear$DiagonalMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#getColumn(int)" [label="org.apache.commons.math3.linear$BlockFieldMatrix#getColumn(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.FieldElement[][])" [label="org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.FieldElement[][])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(int,int,org.apache.commons.math3.FieldElement[][],boolean)" [label="org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(int,int,org.apache.commons.math3.FieldElement[][],boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#toBlocksLayout(org.apache.commons.math3.FieldElement[][])" [label="org.apache.commons.math3.linear$BlockFieldMatrix#toBlocksLayout(org.apache.commons.math3.FieldElement[][])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" [label="org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field)" [label="org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#transpose()" [label="org.apache.commons.math3.linear$BlockFieldMatrix#transpose()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis$FunctionUtils#sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)" [label="org.apache.commons.math3.analysis$FunctionUtils#sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(double)" [label="org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" [label="org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getData()" [label="org.apache.commons.math3.linear$Array2DRowFieldMatrix#getData()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyOut()" [label="org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyOut()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#ceil(double)" [label="org.apache.commons.math3.util$FastMath#ceil(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#asinh(double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#asinh(double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.ArrayRealVector)" [label="org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.ArrayRealVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)" [label="org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)" [label="org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)" [label="org.apache.commons.math3.linear$ArrayRealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis$FunctionUtils#fix2ndArgument(org.apache.commons.math3.analysis.BivariateFunction,double)" [label="org.apache.commons.math3.analysis$FunctionUtils#fix2ndArgument(org.apache.commons.math3.analysis.BivariateFunction,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" [label="org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" [label="org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" [label="org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" [label="org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])" [label="org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" [label="org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#transpose()" [label="org.apache.commons.math3.linear$BlockRealMatrix#transpose()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" [label="org.apache.commons.math3.linear$AbstractRealMatrix#transpose()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" [label="org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)" [label="org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)" [label="org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asinh()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asinh()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)" [label="org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" [label="org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#taylor(double[])" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#taylor(double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeOrders(int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeOrders(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#taylor(double[],int,double[])" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#taylor(double[],int,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getRMS()" [label="org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getRMS()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getChiSquare()" [label="org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getChiSquare()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)" [label="org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acos(double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#acos(double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#acos(double)" [label="org.apache.commons.math3.util$FastMath#acos(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Precision#round(double,int)" [label="org.apache.commons.math3.util$Precision#round(double,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Precision#round(double,int,int)" [label="org.apache.commons.math3.util$Precision#round(double,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#abs()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#abs()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#negate()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#negate()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" [label="org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" [label="org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" [label="org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)" [label="org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tanh()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tanh()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector)" [label="org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(double)" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)" [label="org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#asin(double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#asin(double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" [label="org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)" [label="org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" [label="org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" [label="org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" [label="org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)" [label="org.apache.commons.math3.linear$RealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Precision#equalsWithRelativeTolerance(double,double,double)" [label="org.apache.commons.math3.util$Precision#equalsWithRelativeTolerance(double,double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])" [label="org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#getDistance(org.apache.commons.math3.linear.RealVector)" [label="org.apache.commons.math3.linear$ArrayRealVector#getDistance(org.apache.commons.math3.linear.RealVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])" [label="org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[])" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector,java.lang.StringBuffer,java.text.FieldPosition)" [label="org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector,java.lang.StringBuffer,java.text.FieldPosition)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$NonSymmetricMatrixException#NonSymmetricMatrixException(int,int,double)" [label="org.apache.commons.math3.linear$NonSymmetricMatrixException#NonSymmetricMatrixException(int,int,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getTrace()" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#getTrace()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" [label="org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixUtils#checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" [label="org.apache.commons.math3.linear$MatrixUtils#checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathUtils#copySign(byte,byte)" [label="org.apache.commons.math3.util$MathUtils#copySign(byte,byte)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#getRow(int)" [label="org.apache.commons.math3.linear$BlockFieldMatrix#getRow(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" [label="org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)" [label="org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#mapMultiply(double)" [label="org.apache.commons.math3.linear$RealVector#mapMultiply(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#mapMultiplyToSelf(double)" [label="org.apache.commons.math3.linear$ArrayRealVector#mapMultiplyToSelf(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealVector(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" [label="org.apache.commons.math3.linear$MatrixUtils#deserializeRealVector(java.lang.Object,java.lang.String,java.io.ObjectInputStream)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#ulp(float)" [label="org.apache.commons.math3.util$FastMath#ulp(float)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowVector(int)" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#getRowVector(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRow(int)" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#getRow(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix()" [label="org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#mapSubtract(double)" [label="org.apache.commons.math3.linear$RealVector#mapSubtract(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#mapAddToSelf(double)" [label="org.apache.commons.math3.linear$ArrayRealVector#mapAddToSelf(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)" [label="org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)" [label="org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#mapSubtractToSelf(double)" [label="org.apache.commons.math3.linear$ArrayRealVector#mapSubtractToSelf(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" [label="org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" [label="org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)" [label="org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" [label="org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#expm1(double)" [label="org.apache.commons.math3.util$FastMath#expm1(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixUtils#serializeRealVector(org.apache.commons.math3.linear.RealVector,java.io.ObjectOutputStream)" [label="org.apache.commons.math3.linear$MatrixUtils#serializeRealVector(org.apache.commons.math3.linear.RealVector,java.io.ObjectOutputStream)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)" [label="org.apache.commons.math3.linear$BlockFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sinh(double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#sinh(double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#sinh(double)" [label="org.apache.commons.math3.util$FastMath#sinh(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.fitting$CurveFitter#addObservedPoint(double,double,double)" [label="org.apache.commons.math3.optimization.fitting$CurveFitter#addObservedPoint(double,double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#WeightedObservedPoint(double,double,double)" [label="org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#WeightedObservedPoint(double,double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getData()" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#getData()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Precision#compareTo(double,double,int)" [label="org.apache.commons.math3.util$Precision#compareTo(double,double,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tan(double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#tan(double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#tan(double)" [label="org.apache.commons.math3.util$FastMath#tan(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#preMultiply(double[])" [label="org.apache.commons.math3.linear$BlockRealMatrix#preMultiply(double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#round(double)" [label="org.apache.commons.math3.util$FastMath#round(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" [label="org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$DiagonalMatrix#addToEntry(int,int,double)" [label="org.apache.commons.math3.linear$DiagonalMatrix#addToEntry(int,int,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(java.lang.Integer[],java.lang.Integer[])" [label="org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(java.lang.Integer[],java.lang.Integer[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" [label="org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#copyBlockPart(double[],int,int,int,int,int,double[],int,int,int)" [label="org.apache.commons.math3.linear$BlockRealMatrix#copyBlockPart(double[],int,int,int,int,int,double[],int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" [label="org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)" [label="org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)" [label="org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" [label="org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" [label="org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)" [label="org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathUtils#checkFinite(double)" [label="org.apache.commons.math3.util$MathUtils#checkFinite(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])" [label="org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])" [label="org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" [label="org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#toString()" [label="org.apache.commons.math3.linear$ArrayRealVector#toString()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector)" [label="org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#add(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)" [label="org.apache.commons.math3.analysis.polynomials$PolynomialFunction#add(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" [label="org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#getSubVector(int,int)" [label="org.apache.commons.math3.linear$ArrayRealVector#getSubVector(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" [label="org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getFreeParameters()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getFreeParameters()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#multiply(double[],int,double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#multiply(double[],int,double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)" [label="org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#multiply(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)" [label="org.apache.commons.math3.analysis.polynomials$PolynomialFunction#multiply(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#toRadians()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#toRadians()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#toRadians(double)" [label="org.apache.commons.math3.util$FastMath#toRadians(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#round(float)" [label="org.apache.commons.math3.util$FastMath#round(float)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getMaxEvaluations()" [label="org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getMaxEvaluations()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Incrementor#getMaximalCount()" [label="org.apache.commons.math3.util$Incrementor#getMaximalCount()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#divide(double[],int,double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#divide(double[],int,double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#add(double[],int,double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#add(double[],int,double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log10()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log10()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#log10(double)" [label="org.apache.commons.math3.util$FastMath#log10(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log10(double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#log10(double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#getNorm()" [label="org.apache.commons.math3.linear$BlockRealMatrix#getNorm()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#nextUp(double)" [label="org.apache.commons.math3.util$FastMath#nextUp(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#nextAfter(double,double)" [label="org.apache.commons.math3.util$FastMath#nextAfter(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathUtils#copySign(short,short)" [label="org.apache.commons.math3.util$MathUtils#copySign(short,short)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$DiagonalMatrix#setSubMatrix(double[][],int,int)" [label="org.apache.commons.math3.linear$DiagonalMatrix#setSubMatrix(double[][],int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#BaseAbstractMultivariateVectorOptimizer()" [label="org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#BaseAbstractMultivariateVectorOptimizer()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" [label="org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)" [label="org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$DiagonalMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" [label="org.apache.commons.math3.linear$DiagonalMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acosh(double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#acosh(double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asin()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asin()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#toString()" [label="org.apache.commons.math3.analysis.polynomials$PolynomialFunction#toString()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#toString(double)" [label="org.apache.commons.math3.analysis.polynomials$PolynomialFunction#toString(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.BlockFieldMatrix)" [label="org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.BlockFieldMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" [label="org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getExpectedRowDimension()" [label="org.apache.commons.math3.linear$MatrixDimensionMismatchException#getExpectedRowDimension()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$MultiDimensionMismatchException#getExpectedDimension(int)" [label="org.apache.commons.math3.exception$MultiDimensionMismatchException#getExpectedDimension(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#linearCombination(double,double[],int,double,double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#linearCombination(double,double[],int,double,double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" [label="org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" [label="org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat()" [label="org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#getMinIndex()" [label="org.apache.commons.math3.linear$RealVector#getMinIndex()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkMultiplicationCompatible(org.apache.commons.math3.linear.FieldMatrix)" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#checkMultiplicationCompatible(org.apache.commons.math3.linear.FieldMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" [label="org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" [label="org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" [label="org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.BlockFieldMatrix)" [label="org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.BlockFieldMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" [label="org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumn(int)" [label="org.apache.commons.math3.linear$BlockRealMatrix#getColumn(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnVector(int)" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnVector(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumn(int)" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#getColumn(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)" [label="org.apache.commons.math3.linear$BlockFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" [label="org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)" [label="org.apache.commons.math3.linear$BlockFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])" [label="org.apache.commons.math3.linear$BlockFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])" [label="org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#hashCode()" [label="org.apache.commons.math3.linear$RealVector#hashCode()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[])" [label="org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#signum(double)" [label="org.apache.commons.math3.util$FastMath#signum(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)" [label="org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#isInfinite()" [label="org.apache.commons.math3.linear$ArrayRealVector#isInfinite()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#isNaN()" [label="org.apache.commons.math3.linear$ArrayRealVector#isNaN()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer()" [label="org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double,double,double)" [label="org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double,double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])" [label="org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.BlockFieldMatrix)" [label="org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.BlockFieldMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" [label="org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.linear.FieldVector)" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.linear.FieldVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#operate(org.apache.commons.math3.FieldElement[])" [label="org.apache.commons.math3.linear$BlockFieldMatrix#operate(org.apache.commons.math3.FieldElement[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#operate(org.apache.commons.math3.FieldElement[])" [label="org.apache.commons.math3.linear$Array2DRowFieldMatrix#operate(org.apache.commons.math3.FieldElement[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" [label="org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat()" [label="org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)" [label="org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" [label="org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$DiagonalMatrix#add(org.apache.commons.math3.linear.DiagonalMatrix)" [label="org.apache.commons.math3.linear$DiagonalMatrix#add(org.apache.commons.math3.linear.DiagonalMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" [label="org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getWrongRowDimension()" [label="org.apache.commons.math3.linear$MatrixDimensionMismatchException#getWrongRowDimension()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$MultiDimensionMismatchException#getWrongDimension(int)" [label="org.apache.commons.math3.exception$MultiDimensionMismatchException#getWrongDimension(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector()" [label="org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" [label="org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" [label="org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" [label="org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)" [label="org.apache.commons.math3.linear$RealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)" [label="org.apache.commons.math3.linear$ArrayRealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#toDegrees()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#toDegrees()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#toArray()" [label="org.apache.commons.math3.linear$RealVector#toArray()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#toArray()" [label="org.apache.commons.math3.linear$ArrayRealVector#toArray()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathUtils#copySign(int,int)" [label="org.apache.commons.math3.util$MathUtils#copySign(int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" [label="org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathUtils#copySign(long,long)" [label="org.apache.commons.math3.util$MathUtils#copySign(long,long)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#getData()" [label="org.apache.commons.math3.linear$BlockFieldMatrix#getData()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#writeReplace()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#writeReplace()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#DerivativeStructure$DataTransferObject(int,int,double[])" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#DerivativeStructure$DataTransferObject(int,int,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int[],int[])" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int[],int[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" [label="org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" [label="org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" [label="org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)" [label="org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)" [label="org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#equals(java.lang.Object)" [label="org.apache.commons.math3.linear$RealVector#equals(java.lang.Object)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)" [label="org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" [label="org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])" [label="org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" [label="org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)" [label="org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#isSquare()" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#isSquare()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#copy()" [label="org.apache.commons.math3.linear$BlockFieldMatrix#copy()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()" [label="org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)" [label="org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" [label="org.apache.commons.math3.linear$ArrayRealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(java.lang.Number,java.lang.Number,java.lang.Number)" [label="org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(java.lang.Number,java.lang.Number,java.lang.Number)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])" [label="org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#toString()" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#toString()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)" [label="org.apache.commons.math3.linear$BlockFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#log(double,double)" [label="org.apache.commons.math3.util$FastMath#log(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acosh()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acosh()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#addToEntry(int,double)" [label="org.apache.commons.math3.linear$ArrayRealVector#addToEntry(int,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)" [label="org.apache.commons.math3.linear$RealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#expm1()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#expm1()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#expm1(double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#expm1(double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathUtils#reduce(double,double,double)" [label="org.apache.commons.math3.util$MathUtils#reduce(double,double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Pair#hashCode()" [label="org.apache.commons.math3.util$Pair#hashCode()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#hashCode()" [label="org.apache.commons.math3.analysis.polynomials$PolynomialFunction#hashCode()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#hashCode()" [label="org.apache.commons.math3.linear$ArrayRealVector#hashCode()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathUtils#hash(double[])" [label="org.apache.commons.math3.util$MathUtils#hash(double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" [label="org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" [label="org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$DiagonalMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" [label="org.apache.commons.math3.linear$DiagonalMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" [label="org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" [label="org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Precision#equals(float,float)" [label="org.apache.commons.math3.util$Precision#equals(float,float)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" [label="org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)" [label="org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" [label="org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#append(double)" [label="org.apache.commons.math3.linear$ArrayRealVector#append(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#getDistance(org.apache.commons.math3.linear.RealVector)" [label="org.apache.commons.math3.linear$RealVector#getDistance(org.apache.commons.math3.linear.RealVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log1p(double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#log1p(double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#log1p(double)" [label="org.apache.commons.math3.util$FastMath#log1p(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double)" [label="org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#getL1Norm()" [label="org.apache.commons.math3.linear$ArrayRealVector#getL1Norm()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)" [label="org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(double[])" [label="org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" [label="org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$DiagonalMatrix#preMultiply(double[])" [label="org.apache.commons.math3.linear$DiagonalMatrix#preMultiply(double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" [label="org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" [label="org.apache.commons.math3.linear$BlockFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#toString()" [label="org.apache.commons.math3.linear$AbstractRealMatrix#toString()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)" [label="org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[],int,int)" [label="org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[],int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sinh()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sinh()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)" [label="org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#remove()" [label="org.apache.commons.math3.linear$RealVector$SparseEntryIterator#remove()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#round()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#round()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" [label="org.apache.commons.math3.util$FastMath#atan2(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#unitize()" [label="org.apache.commons.math3.linear$RealVector#unitize()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#mapDivideToSelf(double)" [label="org.apache.commons.math3.linear$ArrayRealVector#mapDivideToSelf(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" [label="org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#getMinValue()" [label="org.apache.commons.math3.linear$RealVector#getMinValue()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#copySign(double)" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#copySign(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#negate()" [label="org.apache.commons.math3.analysis.polynomials$PolynomialFunction#negate()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" [label="org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" [label="org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#linearCombination(double,double[],int,double,double[],int,double,double[],int,double,double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#linearCombination(double,double[],int,double,double[],int,double,double[],int,double,double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" [label="org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis$FunctionUtils#toDifferentiableMultivariateVectorFunction(org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction)" [label="org.apache.commons.math3.analysis$FunctionUtils#toDifferentiableMultivariateVectorFunction(org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" [label="org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int)" [label="org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cosh(double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#cosh(double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Incrementor#incrementCount(int)" [label="org.apache.commons.math3.util$Incrementor#incrementCount(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" [label="org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)" [label="org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#AbstractLeastSquaresOptimizer()" [label="org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#AbstractLeastSquaresOptimizer()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$MathUtils#checkFinite(double[])" [label="org.apache.commons.math3.util$MathUtils#checkFinite(double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.ArrayRealVector)" [label="org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.ArrayRealVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#ebeDivide(org.apache.commons.math3.linear.RealVector)" [label="org.apache.commons.math3.linear$ArrayRealVector#ebeDivide(org.apache.commons.math3.linear.RealVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()" [label="org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" [label="org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#ebeMultiply(org.apache.commons.math3.linear.RealVector)" [label="org.apache.commons.math3.linear$ArrayRealVector#ebeMultiply(org.apache.commons.math3.linear.RealVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#getL1Norm()" [label="org.apache.commons.math3.linear$RealVector#getL1Norm()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$DiagonalMatrix#multiplyEntry(int,int,double)" [label="org.apache.commons.math3.linear$DiagonalMatrix#multiplyEntry(int,int,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)" [label="org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.fitting$CurveFitter#addObservedPoint(double,double)" [label="org.apache.commons.math3.optimization.fitting$CurveFitter#addObservedPoint(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],double[])" [label="org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Precision#round(float,int,int)" [label="org.apache.commons.math3.util$Precision#round(float,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#copySign(float,float)" [label="org.apache.commons.math3.util$FastMath#copySign(float,float)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()" [label="org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)" [label="org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnMatrix(int)" [label="org.apache.commons.math3.linear$BlockFieldMatrix#getColumnMatrix(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#subtract(double)" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#subtract(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixUtils#createRealVector(double[])" [label="org.apache.commons.math3.linear$MatrixUtils#createRealVector(double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)" [label="org.apache.commons.math3.linear$BlockFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#derivative()" [label="org.apache.commons.math3.analysis.polynomials$PolynomialFunction#derivative()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)" [label="org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)" [label="org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" [label="org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.ArrayRealVector)" [label="org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.ArrayRealVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int,double)" [label="org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" [label="org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getWrongColumnDimension()" [label="org.apache.commons.math3.linear$MatrixDimensionMismatchException#getWrongColumnDimension()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Precision#equals(double,double)" [label="org.apache.commons.math3.util$Precision#equals(double,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" [label="org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#remainder(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#remainder(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#remainder(double[],int,double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#remainder(double[],int,double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" [label="org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#MatrixUtils$BigFractionMatrixConverter()" [label="org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#MatrixUtils$BigFractionMatrixConverter()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#getRowMatrix(int)" [label="org.apache.commons.math3.linear$BlockFieldMatrix#getRowMatrix(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldVector)" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])" [label="org.apache.commons.math3.linear$Array2DRowFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#linearCombination(double,double[],int,double,double[],int,double,double[],int,double[],int)" [label="org.apache.commons.math3.analysis.differentiation$DSCompiler#linearCombination(double,double[],int,double,double[],int,double,double[],int,double[],int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getExponent()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getExponent()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)" [label="org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)" [label="org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" [label="org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" [label="org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixUtils#createFieldVector(org.apache.commons.math3.FieldElement[])" [label="org.apache.commons.math3.linear$MatrixUtils#createFieldVector(org.apache.commons.math3.FieldElement[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getExpectedColumnDimension()" [label="org.apache.commons.math3.linear$MatrixDimensionMismatchException#getExpectedColumnDimension()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])" [label="org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#equals(java.lang.Object)" [label="org.apache.commons.math3.linear$ArrayRealVector#equals(java.lang.Object)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#mapDivide(double)" [label="org.apache.commons.math3.linear$RealVector#mapDivide(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$DiagonalMatrix#subtract(org.apache.commons.math3.linear.DiagonalMatrix)" [label="org.apache.commons.math3.linear$DiagonalMatrix#subtract(org.apache.commons.math3.linear.DiagonalMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#addToEntry(int,double)" [label="org.apache.commons.math3.linear$RealVector#addToEntry(int,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)" [label="org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.RealVector)" [label="org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.RealVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#unitVector()" [label="org.apache.commons.math3.linear$RealVector#unitVector()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],int,int)" [label="org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" [label="org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization$PointVectorValuePair#getValueRef()" [label="org.apache.commons.math3.optimization$PointVectorValuePair#getValueRef()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" [label="org.apache.commons.math3.util$Pair#equals(java.lang.Object)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#equals(java.lang.Object)" [label="org.apache.commons.math3.analysis.polynomials$PolynomialFunction#equals(java.lang.Object)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" [label="org.apache.commons.math3.util$FastMath#main(java.lang.String[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#nextUp(float)" [label="org.apache.commons.math3.util$FastMath#nextUp(float)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$FastMath#nextAfter(float,double)" [label="org.apache.commons.math3.util$FastMath#nextAfter(float,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#mapAdd(double)" [label="org.apache.commons.math3.linear$RealVector#mapAdd(double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)" [label="org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)" [label="org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnVector(int)" [label="org.apache.commons.math3.linear$BlockFieldMatrix#getColumnVector(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cosh()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cosh()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" [label="org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.RealVector)" [label="org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.RealVector)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Precision#round(float,int)" [label="org.apache.commons.math3.util$Precision#round(float,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int[],int[],org.apache.commons.math3.FieldElement[][])" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int[],int[],org.apache.commons.math3.FieldElement[][])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acos()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acos()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.util$Pair#Pair(org.apache.commons.math3.util.Pair)" [label="org.apache.commons.math3.util$Pair#Pair(org.apache.commons.math3.util.Pair)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" [label="org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#PolynomialFitter(org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer)" [label="org.apache.commons.math3.optimization.fitting$PolynomialFitter#PolynomialFitter(org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" [label="org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#MatrixUtils$FractionMatrixConverter()" [label="org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#MatrixUtils$FractionMatrixConverter()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" [label="org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[])" [label="org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis$FunctionUtils#collector(org.apache.commons.math3.analysis.BivariateFunction,double)" [label="org.apache.commons.math3.analysis$FunctionUtils#collector(org.apache.commons.math3.analysis.BivariateFunction,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis$FunctionUtils#collector(org.apache.commons.math3.analysis.BivariateFunction,org.apache.commons.math3.analysis.UnivariateFunction,double)" [label="org.apache.commons.math3.analysis$FunctionUtils#collector(org.apache.commons.math3.analysis.BivariateFunction,org.apache.commons.math3.analysis.UnivariateFunction,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" [label="org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(int)" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])" [label="org.apache.commons.math3.linear$AbstractFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)" [label="org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" [label="org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)" [label="org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" [label="org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log1p()" [label="org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log1p()\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" [label="org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)\nP(Fail|Node)=0.00"];
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(int)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(int)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#<clinit>()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#<clinit>()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$MatrixUtils#<clinit>()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$MatrixUtils#<clinit>()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#<clinit>()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$MatrixUtils#<clinit>()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$MatrixUtils#<clinit>()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(int)";
  "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$DiagonalMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$DiagonalMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$DiagonalMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String)" -> "org.apache.commons.math3.exception$MathIllegalStateException#getContext()";
  "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String)" -> "org.apache.commons.math3.util$CompositeFormat#parseNextCharacter(java.lang.String,java.text.ParsePosition)";
  "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance()";
  "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String,java.text.ParsePosition)";
  "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String)" -> "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,double,java.text.ParsePosition)";
  "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()";
  "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String)" -> "org.apache.commons.math3.util$CompositeFormat#parseAndIgnoreWhitespace(java.lang.String,java.text.ParsePosition)";
  "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()";
  "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)";
  "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String)" -> "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,java.text.NumberFormat,java.text.ParsePosition)";
  "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String)" -> "org.apache.commons.math3.util$CompositeFormat#parseFixedstring(java.lang.String,java.lang.String,java.text.ParsePosition)";
  "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String)" -> "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int,java.lang.Class)";
  "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$RealVectorFormat#getInstance()" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$RealVectorFormat#getInstance()" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealVectorFormat#getInstance()" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealVectorFormat#getInstance()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.util$CompositeFormat#parseNextCharacter(java.lang.String,java.text.ParsePosition)";
  "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance()";
  "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,double,java.text.ParsePosition)";
  "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.util$CompositeFormat#parseAndIgnoreWhitespace(java.lang.String,java.text.ParsePosition)";
  "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()";
  "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)";
  "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,java.text.NumberFormat,java.text.ParsePosition)";
  "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.util$CompositeFormat#parseFixedstring(java.lang.String,java.lang.String,java.text.ParsePosition)";
  "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$RealVectorFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$CompositeFormat#parseAndIgnoreWhitespace(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.util$CompositeFormat#parseNextCharacter(java.lang.String,java.text.ParsePosition)";
  "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance()";
  "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,java.text.NumberFormat,java.text.ParsePosition)" -> "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,double,java.text.ParsePosition)";
  "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int,java.lang.Class)" -> "org.apache.commons.math3.exception$MathIllegalStateException#getContext()";
  "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int,java.lang.Class)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()";
  "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int,java.lang.Class)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#checkParameters()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#checkParameters()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#checkParameters()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#checkParameters()" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#checkParameters()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#checkParameters()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#checkParameters()" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#checkParameters()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#checkParameters()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#acosh(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double[])" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#asinh(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$ArrayRealVector#getLInfNorm()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.linear$ArrayRealVector#getLInfNorm()" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.linear$ArrayRealVector#getLInfNorm()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRow(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRow(int)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRow(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRow(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRow(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRow(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRow(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRow(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRow(int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRow(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRow(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRow(int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRow(int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRow(int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRow(int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRow(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRow(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRow(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRow(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#PolynomialFitter(int,org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer)" -> "org.apache.commons.math3.optimization.fitting$CurveFitter#CurveFitter(org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer)";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double,double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,double[])";
  "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#checkIndex(int)";
  "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,double[])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$ArrayRealVector#setSubVector(int,double[])" -> "org.apache.commons.math3.linear$RealVector#checkIndex(int)";
  "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#checkIndex(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#checkIndex(int)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#checkIndex(int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#checkIndex(int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#sparseIterator()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#sparseIterator()" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.linear$RealVector#sparseIterator()" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.linear$RealVector#sparseIterator()" -> "org.apache.commons.math3.linear$RealVector$Entry#RealVector$Entry(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$RealVector#sparseIterator()" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#sparseIterator()" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#RealVector$SparseEntryIterator(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$RealVector#sparseIterator()" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector#sparseIterator()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#sparseIterator()" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.linear$RealVector#sparseIterator()" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.linear$RealVector#sparseIterator()" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector$Entry#RealVector$Entry(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#RealVector$SparseEntryIterator(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#RealVector$SparseEntryIterator(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#RealVector$SparseEntryIterator(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#RealVector$SparseEntryIterator(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$Entry#RealVector$Entry(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#RealVector$SparseEntryIterator(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#RealVector$SparseEntryIterator(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#RealVector$SparseEntryIterator(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#RealVector$SparseEntryIterator(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#RealVector$SparseEntryIterator(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#RealVector$SparseEntryIterator(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector$Entry#getValue()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector$Entry#getValue()" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.linear$RealVector$Entry#getValue()" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector$Entry#getValue()" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector$Entry#getValue()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector$Entry#getValue()" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)" -> "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockHeight(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#getMaxValue()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#getMaxValue()" -> "org.apache.commons.math3.linear$RealVector#iterator()";
  "org.apache.commons.math3.linear$RealVector#getMaxValue()" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.linear$RealVector#getMaxValue()" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.linear$RealVector#getMaxValue()" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#getMaxValue()" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.linear$RealVector#getMaxValue()" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.linear$RealVector#getMaxValue()" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector#getMaxValue()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#getMaxValue()" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.linear$RealVector#getMaxValue()" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.linear$RealVector#getMaxValue()" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#getMaxValue()" -> "org.apache.commons.math3.linear$RealVector#getMaxIndex()";
  "org.apache.commons.math3.linear$RealVector#iterator()" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.linear$RealVector#getMaxIndex()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#getMaxIndex()" -> "org.apache.commons.math3.linear$RealVector#iterator()";
  "org.apache.commons.math3.linear$RealVector#getMaxIndex()" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.linear$RealVector#getMaxIndex()" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.linear$RealVector#getMaxIndex()" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#getMaxIndex()" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.linear$RealVector#getMaxIndex()" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.linear$RealVector#getMaxIndex()" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector#getMaxIndex()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#getMaxIndex()" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.linear$RealVector#getMaxIndex()" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.linear$RealVector#getMaxIndex()" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[],boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getTarget()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[],boolean)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[],boolean)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])" -> "org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[],boolean)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[],boolean)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#subtract(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#subtract(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#subtract(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#subtract(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#PolynomialFunction(double[])";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#subtract(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#subtract(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#subtract(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#subtract(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#subtract(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#PolynomialFunction(double[])" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#PolynomialFunction(double[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#PolynomialFunction(double[])" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#PolynomialFunction(double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#PolynomialFunction(double[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnRealMatrix(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#pow(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException()" -> "org.apache.commons.math3.exception$MathIllegalStateException#getContext()";
  "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException()" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()";
  "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException()" -> "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException()" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])" -> "org.apache.commons.math3.exception$MathIllegalStateException#getContext()";
  "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()";
  "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit()" -> "org.apache.commons.math3.optimization$PointVectorValuePair#getPointRef()";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit()" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit()" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit()" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit()" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit()" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit()" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit()" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#PolynomialFunction$Parametric()";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit()" -> "org.apache.commons.math3.util$Pair#getKey()";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit()" -> "org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction#CurveFitter$OldTheoreticalValuesFunction(org.apache.commons.math3.optimization.fitting.CurveFitter,org.apache.commons.math3.analysis.ParametricUnivariateFunction)";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit()" -> "org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#getWeight()";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit()" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit()" -> "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit()" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit()" -> "org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#getY()";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit()" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit()" -> "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(int,org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])";
  "org.apache.commons.math3.optimization$PointVectorValuePair#getPointRef()" -> "org.apache.commons.math3.util$Pair#getKey()";
  "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])" -> "org.apache.commons.math3.optimization$PointVectorValuePair#getPointRef()";
  "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])" -> "org.apache.commons.math3.util$Pair#getKey()";
  "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])" -> "org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction#CurveFitter$OldTheoreticalValuesFunction(org.apache.commons.math3.optimization.fitting.CurveFitter,org.apache.commons.math3.analysis.ParametricUnivariateFunction)";
  "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])" -> "org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#getWeight()";
  "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])" -> "org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#getY()";
  "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])" -> "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(int,org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])";
  "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(int,org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(int,org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])" -> "org.apache.commons.math3.optimization$PointVectorValuePair#getPointRef()";
  "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(int,org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(int,org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(int,org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(int,org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(int,org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(int,org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(int,org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(int,org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])" -> "org.apache.commons.math3.util$Pair#getKey()";
  "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(int,org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])" -> "org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction#CurveFitter$OldTheoreticalValuesFunction(org.apache.commons.math3.optimization.fitting.CurveFitter,org.apache.commons.math3.analysis.ParametricUnivariateFunction)";
  "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(int,org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])" -> "org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#getWeight()";
  "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(int,org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(int,org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(int,org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])" -> "org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#getY()";
  "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(int,org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#getLInfNorm()" -> "org.apache.commons.math3.linear$ArrayRealVector#getLInfNorm()";
  "org.apache.commons.math3.linear$RealVector#getLInfNorm()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#getLInfNorm()" -> "org.apache.commons.math3.linear$RealVector#iterator()";
  "org.apache.commons.math3.linear$RealVector#getLInfNorm()" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.linear$RealVector#getLInfNorm()" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.linear$RealVector#getLInfNorm()" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#getLInfNorm()" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.linear$RealVector#getLInfNorm()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.linear$RealVector#getLInfNorm()" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.linear$RealVector#getLInfNorm()" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector#getLInfNorm()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#getLInfNorm()" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.linear$RealVector#getLInfNorm()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$RealVector#getLInfNorm()" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.linear$RealVector#getLInfNorm()" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.linear$RealVector#getLInfNorm()" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#checkParameters()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$Pair#Pair(java.lang.Object,java.lang.Object)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qTy(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$MathIllegalStateException#getContext()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#copy()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#getX()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getConvergenceChecker()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#getDataRef()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath#min(double,double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization$InitialGuess#getInitialGuess()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization$PointVectorValuePair#PointVectorValuePair(double[],double[],boolean)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$MaxCountExceededException#getMax()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getData()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#value(double,double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#copy()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$TooManyEvaluationsException#TooManyEvaluationsException(java.lang.Number)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#operate(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#getData()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getData()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setCost(double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getDataRef()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization$Weight#getWeight()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#squareRoot(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$Pair#getKey()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization$PointVectorValuePair#getPoint()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#determineLMDirection(double[],double[],double[],double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction#value(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#gradient(double,double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getStartPoint()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeResiduals(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization$Target#Target(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getData()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization$PointVectorValuePair#PointVectorValuePair(double[],double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[],boolean)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization$Weight#Weight(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getTarget()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#evaluate(double[],double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#operate(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization$Target#getTarget()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$Incrementor#resetCount()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis$FunctionUtils#toMultivariateDifferentiableVectorFunction(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#determineLMParameter(double[],double,double[],double[],double[],double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#setUp()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization$InitialGuess#InitialGuess(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getObjectiveFunction()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$Incrementor#setMaximalCount(int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$DiagonalMatrix#copy()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$BlockRealMatrix#copy()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#squareRoot(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getStartPoint()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getTarget()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.analysis$FunctionUtils#toMultivariateDifferentiableVectorFunction(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#setUp()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getObjectiveFunction()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#checkParameters()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$Pair#Pair(java.lang.Object,java.lang.Object)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qTy(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$MathIllegalStateException#getContext()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#copy()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#getX()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getConvergenceChecker()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$ArrayRealVector#getDataRef()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$FastMath#min(double,double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization$InitialGuess#getInitialGuess()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization$PointVectorValuePair#PointVectorValuePair(double[],double[],boolean)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$MaxCountExceededException#getMax()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getData()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#value(double,double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#copy()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$TooManyEvaluationsException#TooManyEvaluationsException(java.lang.Number)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#operate(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#getData()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getData()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setCost(double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getDataRef()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization$Weight#getWeight()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#squareRoot(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$Pair#getKey()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization$PointVectorValuePair#getPoint()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#determineLMDirection(double[],double[],double[],double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction#value(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#gradient(double,double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getStartPoint()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeResiduals(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getData()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization$PointVectorValuePair#PointVectorValuePair(double[],double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[],boolean)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getTarget()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#evaluate(double[],double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#operate(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization$Target#getTarget()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$Incrementor#resetCount()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis$FunctionUtils#toMultivariateDifferentiableVectorFunction(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#determineLMParameter(double[],double,double[],double[],double[],double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#setUp()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getObjectiveFunction()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$Incrementor#setMaximalCount(int)";
  "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[])" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$DiagonalMatrix#copy()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$BlockRealMatrix#copy()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.linear$DiagonalMatrix#copy()" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[])";
  "org.apache.commons.math3.linear$DiagonalMatrix#copy()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$DiagonalMatrix#copy()" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$DiagonalMatrix#copy()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$DiagonalMatrix#copy()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$DiagonalMatrix#copy()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$DiagonalMatrix#copy()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$DiagonalMatrix#copy()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.linear$DiagonalMatrix#copy()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[])" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#checkParameters()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$Pair#Pair(java.lang.Object,java.lang.Object)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qTy(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$MathIllegalStateException#getContext()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#copy()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#getX()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getConvergenceChecker()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#getDataRef()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath#min(double,double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization$InitialGuess#getInitialGuess()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization$PointVectorValuePair#PointVectorValuePair(double[],double[],boolean)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$MaxCountExceededException#getMax()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getData()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#value(double,double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#copy()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$TooManyEvaluationsException#TooManyEvaluationsException(java.lang.Number)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#operate(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#getData()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getData()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setCost(double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getDataRef()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization$Weight#getWeight()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#squareRoot(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$Pair#getKey()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization$PointVectorValuePair#getPoint()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#determineLMDirection(double[],double[],double[],double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction#value(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#gradient(double,double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getStartPoint()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeResiduals(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization$Target#Target(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getData()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization$PointVectorValuePair#PointVectorValuePair(double[],double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[],boolean)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization$Weight#Weight(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getTarget()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#evaluate(double[],double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#operate(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization$Target#getTarget()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$Incrementor#resetCount()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis$FunctionUtils#toMultivariateDifferentiableVectorFunction(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#determineLMParameter(double[],double,double[],double[],double[],double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#setUp()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization$InitialGuess#InitialGuess(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getObjectiveFunction()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$Incrementor#setMaximalCount(int)";
  "org.apache.commons.math3.optimization$PointVectorValuePair#PointVectorValuePair(double[],double[],boolean)" -> "org.apache.commons.math3.util$Pair#Pair(java.lang.Object,java.lang.Object)";
  "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getData()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getData()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getData()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getData()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])" -> "org.apache.commons.math3.exception$MathIllegalStateException#getContext()";
  "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()";
  "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#value(double,double[])" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#value(double,double[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#value(double,double[])" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#value(double,double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#value(double,double[])" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#evaluate(double[],double)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#value(double,double[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalStateException#getContext()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getData()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#getData()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getData()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getData()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#copy()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#copy()" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#copy()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#copy()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#copy()" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockRealMatrix#copy()" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$BlockRealMatrix#copy()" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#copy()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#copy()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#copy()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#copy()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#copy()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#copy()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#copy()" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockRealMatrix#copy()" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#copy()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#copy()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.exception$TooManyEvaluationsException#TooManyEvaluationsException(java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalStateException#getContext()";
  "org.apache.commons.math3.exception$TooManyEvaluationsException#TooManyEvaluationsException(java.lang.Number)" -> "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$TooManyEvaluationsException#TooManyEvaluationsException(java.lang.Number)" -> "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)";
  "org.apache.commons.math3.exception$TooManyEvaluationsException#TooManyEvaluationsException(java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()";
  "org.apache.commons.math3.exception$TooManyEvaluationsException#TooManyEvaluationsException(java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#operate(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#operate(double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#operate(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#operate(double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#operate(double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#operate(double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getData()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getData()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getData()" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getData()" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getData()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getData()" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getData()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getData()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getData()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getData()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getData()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getData()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getData()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getData()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getData()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getData()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getData()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getData()" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getData()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getData()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getData()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getData()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getData()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getData()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getData()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getData()" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getData()" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getData()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getData()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getData()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getData()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getData()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#getData()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#getData()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#getData()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[])";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$DiagonalMatrix#copy()";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$BlockRealMatrix#copy()";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix)";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization$Weight#getWeight()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalStateException#getContext()";
  "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)" -> "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()";
  "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization$PointVectorValuePair#getPoint()" -> "org.apache.commons.math3.util$Pair#getKey()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#determineLMDirection(double[],double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#determineLMDirection(double[],double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#determineLMDirection(double[],double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction#value(double[])" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction#value(double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction#value(double[])" -> "org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#getX()";
  "org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction#value(double[])" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction#value(double[])" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction#value(double[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction#value(double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction#value(double[])" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#value(double,double[])";
  "org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction#value(double[])" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction#value(double[])" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction#value(double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction#value(double[])" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction#value(double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction#value(double[])" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#gradient(double,double[])";
  "org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction#value(double[])" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#evaluate(double[],double)";
  "org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction#value(double[])" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction#value(double[])" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction#value(double[])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction#value(double[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeResiduals(double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeResiduals(double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeResiduals(double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeResiduals(double[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getTarget()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeResiduals(double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$DiagonalMatrix#getData()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization$PointVectorValuePair#PointVectorValuePair(double[],double[])" -> "org.apache.commons.math3.util$Pair#Pair(java.lang.Object,java.lang.Object)";
  "org.apache.commons.math3.optimization$PointVectorValuePair#PointVectorValuePair(double[],double[])" -> "org.apache.commons.math3.optimization$PointVectorValuePair#PointVectorValuePair(double[],double[],boolean)";
  "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)";
  "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getDataRef()";
  "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[],boolean)";
  "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.optimization$Weight#Weight(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[])";
  "org.apache.commons.math3.optimization$Weight#Weight(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.optimization$Weight#Weight(double[])" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.optimization$Weight#Weight(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.optimization$Weight#Weight(double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.optimization$Weight#Weight(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.optimization$Weight#Weight(double[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.optimization$Weight#Weight(double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.optimization$Weight#Weight(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#evaluate(double[],double)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#evaluate(double[],double)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#evaluate(double[],double)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#evaluate(double[],double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#evaluate(double[],double)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])" -> "org.apache.commons.math3.exception$MathIllegalStateException#getContext()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])" -> "org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#getX()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])" -> "org.apache.commons.math3.exception$MaxCountExceededException#getMax()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])" -> "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#value(double,double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])" -> "org.apache.commons.math3.exception$TooManyEvaluationsException#TooManyEvaluationsException(java.lang.Number)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])" -> "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])" -> "org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction#value(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#gradient(double,double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#evaluate(double[],double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDataRef()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#operate(double[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getDataRef()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[],boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#operate(double[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#operate(double[])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#operate(double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#operate(double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#operate(double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#operate(double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#operate(double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$DiagonalMatrix#copy()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$BlockRealMatrix#copy()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#copy()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization$InitialGuess#getInitialGuess()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#copy()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization$Weight#getWeight()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization$Target#getTarget()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.util$Pair#Pair(java.lang.Object,java.lang.Object)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qTy(double[])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.exception$MathIllegalStateException#getContext()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$DiagonalMatrix#copy()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#getX()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getConvergenceChecker()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$ArrayRealVector#getDataRef()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.util$FastMath#min(double,double)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.optimization$PointVectorValuePair#PointVectorValuePair(double[],double[],boolean)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.exception$MaxCountExceededException#getMax()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getData()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#value(double,double[])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$BlockRealMatrix#copy()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.exception$TooManyEvaluationsException#TooManyEvaluationsException(java.lang.Number)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#operate(double[])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#getData()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getData()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setCost(double)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getDataRef()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.util$Pair#getKey()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.optimization$PointVectorValuePair#getPoint()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#determineLMDirection(double[],double[],double[],double[])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction#value(double[])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#gradient(double,double[])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getStartPoint()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeResiduals(double[])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getData()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.optimization$PointVectorValuePair#PointVectorValuePair(double[],double[])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[],boolean)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getTarget()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#evaluate(double[],double)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$BlockRealMatrix#operate(double[])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#determineLMParameter(double[],double,double[],double[],double[],double[])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#determineLMParameter(double[],double,double[],double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath#min(double,double)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#determineLMParameter(double[],double,double[],double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#determineLMParameter(double[],double,double[],double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#determineLMParameter(double[],double,double[],double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#determineLMDirection(double[],double[],double[],double[])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#determineLMParameter(double[],double,double[],double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#determineLMParameter(double[],double,double[],double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#setUp()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#setUp()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#setUp()" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#setUp()" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#setUp()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#setUp()" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#setUp()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#setUp()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#setUp()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#setUp()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#setUp()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#setUp()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#setUp()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#setUp()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#setUp()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#setUp()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#setUp()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#setUp()" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#setUp()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#setUp()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#setUp()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#setUp()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#setUp()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#setUp()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#setUp()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#setUp()" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#setUp()" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#setUp()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#setUp()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#setUp()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#setUp()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#setUp()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#copy()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#getDataRef()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#copy()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#operate(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getDataRef()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[],boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#operate(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#compose(double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#compose(double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#compose(double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#compose(double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getOrder()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#compose(double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#compose(double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#compose(double[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#compose(double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#compose(double[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getOrder()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getOrder()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getOrder()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#copy()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#isSquare()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#copy()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[],boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$NonSquareMatrixException#NonSquareMatrixException(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#power(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#isSquare()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#isSquare()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#isSquare()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#isSquare()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#isSquare()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#isSquare()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#isSquare()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#isSquare()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealIdentityMatrix(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$NonSquareMatrixException#NonSquareMatrixException(int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$NonSquareMatrixException#NonSquareMatrixException(int,int)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$NonSquareMatrixException#NonSquareMatrixException(int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#equals(java.lang.Object)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#equals(java.lang.Object)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#equals(java.lang.Object)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atanh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#atanh(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atanh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atanh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atanh()" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atanh()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atanh()" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atanh()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atanh()" -> "org.apache.commons.math3.util$FastMath#atanh(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atanh()" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atanh(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atanh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atanh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atanh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atanh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#atanh(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atanh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atanh(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosh(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#exp(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getEvaluations()" -> "org.apache.commons.math3.util$Incrementor#getCount()";
  "org.apache.commons.math3.exception$ZeroException#ZeroException()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$ZeroException#ZeroException()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$ZeroException#ZeroException()" -> "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#checkParameters()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$Pair#Pair(java.lang.Object,java.lang.Object)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qTy(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$MathIllegalStateException#getContext()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#copy()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#getX()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getConvergenceChecker()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$ArrayRealVector#getDataRef()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$FastMath#min(double,double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization$InitialGuess#getInitialGuess()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization$PointVectorValuePair#PointVectorValuePair(double[],double[],boolean)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$MaxCountExceededException#getMax()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getData()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#value(double,double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#copy()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$TooManyEvaluationsException#TooManyEvaluationsException(java.lang.Number)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#operate(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#getData()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getData()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setCost(double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getDataRef()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization$Weight#getWeight()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#squareRoot(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$Pair#getKey()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization$PointVectorValuePair#getPoint()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#determineLMDirection(double[],double[],double[],double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction#value(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#gradient(double,double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getStartPoint()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeResiduals(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getData()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization$PointVectorValuePair#PointVectorValuePair(double[],double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[],boolean)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getTarget()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#evaluate(double[],double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#operate(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization$Target#getTarget()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$Incrementor#resetCount()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis$FunctionUtils#toMultivariateDifferentiableVectorFunction(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#determineLMParameter(double[],double,double[],double[],double[],double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#setUp()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getObjectiveFunction()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$Incrementor#setMaximalCount(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#getExponent(double)";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#hypot(double,double)" -> "org.apache.commons.math3.util$FastMath#scalb(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.exception$NoDataException#NoDataException()" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.exception$NoDataException#NoDataException()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$FastMath#toDegrees(double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$FastMath#toDegrees(double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#toDegrees(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#doubleHighPart(double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#add(double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$MathUtils#normalizeAngle(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#start(int,int,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#start(int,int,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int,int,int,int,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#start(int,int,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#start(int,int,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#start(int,int,int,int,int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#start(int,int,int,int,int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#start(int,int,int,int,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#start(int,int,int,int,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#start(int,int,int,int,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#start(int,int,int,int,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#start(int,int,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#start(int,int,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math3.linear$DiagonalMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getNorm()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$DiagonalMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],org.apache.commons.math3.linear.ArrayRealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],org.apache.commons.math3.linear.ArrayRealVector)" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#atan(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$FastMath#atan(double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#atan(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atan(double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#remainder(double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubtractionCompatible(org.apache.commons.math3.linear.FieldMatrix)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,int,int)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubtractionCompatible(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubtractionCompatible(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubtractionCompatible(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubtractionCompatible(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubtractionCompatible(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubtractionCompatible(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubtractionCompatible(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#createMatrix(int,int)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,double[])" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#reciprocal()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#reciprocal()" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#reciprocal()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#reciprocal()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#reciprocal()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#reciprocal()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#reciprocal()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,int,double[],int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,int,double[],int)" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[])" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[],boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiplyEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#polynomialDerivative()" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#polynomialDerivative()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#polynomialDerivative()" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#PolynomialFunction(double[])";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#polynomialDerivative()" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#differentiate(double[])";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#polynomialDerivative()" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#polynomialDerivative()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#polynomialDerivative()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#differentiate(double[])" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#differentiate(double[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#differentiate(double[])" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#differentiate(double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#differentiate(double[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization$PointVectorValuePair#writeReplace()" -> "org.apache.commons.math3.util$Pair#getValue()";
  "org.apache.commons.math3.optimization$PointVectorValuePair#writeReplace()" -> "org.apache.commons.math3.optimization$PointVectorValuePair#getValue()";
  "org.apache.commons.math3.optimization$PointVectorValuePair#writeReplace()" -> "org.apache.commons.math3.util$Pair#getKey()";
  "org.apache.commons.math3.optimization$PointVectorValuePair#writeReplace()" -> "org.apache.commons.math3.optimization$PointVectorValuePair$DataTransferObject#PointVectorValuePair$DataTransferObject(double[],double[])";
  "org.apache.commons.math3.optimization$PointVectorValuePair#getValue()" -> "org.apache.commons.math3.util$Pair#getValue()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#hashCode()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#hashCode()" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#hashCode()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#hashCode()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#hashCode()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#hashCode()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#hashCode()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#hashCode()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#hashCode()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#hashCode()" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#hashCode()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#hashCode()" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)" -> "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)";
  "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)" -> "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)";
  "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)" -> "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)";
  "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)" -> "org.apache.commons.math3.linear$RealVector#checkIndices(int,int)";
  "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)" -> "org.apache.commons.math3.linear$RealVector#checkIndex(int)";
  "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)" -> "org.apache.commons.math3.linear$RealVector#checkIndices(int,int)";
  "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)" -> "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)";
  "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)" -> "org.apache.commons.math3.linear$RealVector#checkIndices(int,int)";
  "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)" -> "org.apache.commons.math3.linear$RealVector#checkIndex(int)";
  "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)" -> "org.apache.commons.math3.linear$RealVector#checkIndex(int)";
  "org.apache.commons.math3.linear$RealVector#checkIndices(int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#checkIndices(int,int)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#checkIndices(int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#checkIndices(int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$RealVector#checkIndices(int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#asin(double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.linear$ArrayRealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$ArrayRealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$ArrayRealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$ArrayRealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,boolean)";
  "org.apache.commons.math3.linear$ArrayRealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$ArrayRealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance()";
  "org.apache.commons.math3.linear$ArrayRealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$ArrayRealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$ArrayRealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$ArrayRealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.linear$ArrayRealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()";
  "org.apache.commons.math3.linear$ArrayRealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#copy()";
  "org.apache.commons.math3.linear$ArrayRealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$ArrayRealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$ArrayRealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$ArrayRealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.linear$ArrayRealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,boolean)" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.linear$ArrayRealVector#copy()" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$ArrayRealVector#copy()" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$ArrayRealVector#copy()" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,boolean)";
  "org.apache.commons.math3.linear$ArrayRealVector#copy()" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance()";
  "org.apache.commons.math3.linear$ArrayRealVector#copy()" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$ArrayRealVector#copy()" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.linear$ArrayRealVector#copy()" -> "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()";
  "org.apache.commons.math3.linear$ArrayRealVector#copy()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$ArrayRealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$ArrayRealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$ArrayRealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$ArrayRealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$ArrayRealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$ArrayRealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.linear$ArrayRealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.exception$MathIllegalStateException#getContext()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.util$CompositeFormat#parseNextCharacter(java.lang.String,java.text.ParsePosition)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,double,java.text.ParsePosition)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.util$CompositeFormat#parseAndIgnoreWhitespace(java.lang.String,java.text.ParsePosition)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,java.text.NumberFormat,java.text.ParsePosition)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.util$CompositeFormat#parseFixedstring(java.lang.String,java.lang.String,java.text.ParsePosition)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int,java.lang.Class)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.util$CompositeFormat#parseNextCharacter(java.lang.String,java.text.ParsePosition)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,double,java.text.ParsePosition)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.util$CompositeFormat#parseAndIgnoreWhitespace(java.lang.String,java.text.ParsePosition)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.util$CompositeFormat#parseNumber(java.lang.String,java.text.NumberFormat,java.text.ParsePosition)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.util$CompositeFormat#parseFixedstring(java.lang.String,java.lang.String,java.text.ParsePosition)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealMatrixFormat#parse(java.lang.String,java.text.ParsePosition)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.util$Precision#equals(double,double,int)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.util$Precision#equals(double,double,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix()" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)" -> "org.apache.commons.math3.util$CompositeFormat#formatDouble(double,java.text.NumberFormat,java.lang.StringBuffer,java.text.FieldPosition)";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(int,double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(int,double[])" -> "org.apache.commons.math3.optimization$PointVectorValuePair#getPointRef()";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(int,double[])" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(int,double[])" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(int,double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(int,double[])" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(int,double[])" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(int,double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(int,double[])" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#PolynomialFunction$Parametric()";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(int,double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(int,double[])" -> "org.apache.commons.math3.util$Pair#getKey()";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(int,double[])" -> "org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction#CurveFitter$OldTheoreticalValuesFunction(org.apache.commons.math3.optimization.fitting.CurveFitter,org.apache.commons.math3.analysis.ParametricUnivariateFunction)";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(int,double[])" -> "org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#getWeight()";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(int,double[])" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(int,double[])" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(int,double[])" -> "org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#getY()";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(int,double[])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(int,double[])" -> "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(int,org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tanh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tanh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tanh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#tanh(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tanh(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tanh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tanh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tanh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tanh(double)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double,double[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#iterator()";
  "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getNorm()";
  "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#getNorm()";
  "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.linear$RealVector#cosine(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$ArrayRealVector#getNorm()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.linear$ArrayRealVector#getNorm()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$RealVector#getNorm()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#getNorm()" -> "org.apache.commons.math3.linear$RealVector#iterator()";
  "org.apache.commons.math3.linear$RealVector#getNorm()" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.linear$RealVector#getNorm()" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.linear$RealVector#getNorm()" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#getNorm()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.linear$RealVector#getNorm()" -> "org.apache.commons.math3.linear$ArrayRealVector#getNorm()";
  "org.apache.commons.math3.linear$RealVector#getNorm()" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.linear$RealVector#getNorm()" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.linear$RealVector#getNorm()" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector#getNorm()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#getNorm()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$RealVector#getNorm()" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.linear$RealVector#getNorm()" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.linear$RealVector#getNorm()" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.util$FastMath#rint(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getOrder()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rint()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)";
  "org.apache.commons.math3.util$FastMath#rint(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#rint(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,double)" -> "org.apache.commons.math3.util$Precision#equals(double,double,double)";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,double)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.util$Precision#equals(double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.util$Precision#equals(double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$Precision#equals(double,double,double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(double,double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(double,double,double)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getField()";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#createColumnFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.Field,int,int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.Field,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.Field,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.Field,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.Field,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.Field,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.Field,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.Field,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.Field,int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.Field,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.Field,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.Field,int,int)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getField()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkAdditionCompatible(org.apache.commons.math3.linear.FieldMatrix)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkAdditionCompatible(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkAdditionCompatible(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkAdditionCompatible(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkAdditionCompatible(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkAdditionCompatible(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkAdditionCompatible(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkAdditionCompatible(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#AbstractLeastSquaresOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#BaseAbstractMultivariateVectorOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)" -> "org.apache.commons.math3.util$Incrementor#Incrementor()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)" -> "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,org.apache.commons.math3.optimization.ConvergenceChecker,double,double,double,double)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)" -> "org.apache.commons.math3.util$Incrementor#Incrementor(int,org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)" -> "org.apache.commons.math3.util$Incrementor#Incrementor(int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#AbstractLeastSquaresOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#AbstractLeastSquaresOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#AbstractLeastSquaresOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#BaseAbstractMultivariateVectorOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#AbstractLeastSquaresOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)" -> "org.apache.commons.math3.util$Incrementor#Incrementor()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#AbstractLeastSquaresOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)" -> "org.apache.commons.math3.util$Incrementor#Incrementor(int,org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#AbstractLeastSquaresOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)" -> "org.apache.commons.math3.util$Incrementor#Incrementor(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#AbstractLeastSquaresOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#BaseAbstractMultivariateVectorOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#BaseAbstractMultivariateVectorOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#BaseAbstractMultivariateVectorOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)" -> "org.apache.commons.math3.util$Incrementor#Incrementor()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#BaseAbstractMultivariateVectorOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)" -> "org.apache.commons.math3.util$Incrementor#Incrementor(int,org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#BaseAbstractMultivariateVectorOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)" -> "org.apache.commons.math3.util$Incrementor#Incrementor(int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#BaseAbstractMultivariateVectorOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$Incrementor#Incrementor()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.util$Incrementor#Incrementor()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$Incrementor#Incrementor()" -> "org.apache.commons.math3.util$Incrementor#Incrementor(int,org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback)";
  "org.apache.commons.math3.util$Incrementor#Incrementor()" -> "org.apache.commons.math3.util$Incrementor#Incrementor(int)";
  "org.apache.commons.math3.util$Incrementor#Incrementor()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,org.apache.commons.math3.optimization.ConvergenceChecker,double,double,double,double)" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#AbstractLeastSquaresOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,org.apache.commons.math3.optimization.ConvergenceChecker,double,double,double,double)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,org.apache.commons.math3.optimization.ConvergenceChecker,double,double,double,double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,org.apache.commons.math3.optimization.ConvergenceChecker,double,double,double,double)" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#BaseAbstractMultivariateVectorOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,org.apache.commons.math3.optimization.ConvergenceChecker,double,double,double,double)" -> "org.apache.commons.math3.util$Incrementor#Incrementor()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,org.apache.commons.math3.optimization.ConvergenceChecker,double,double,double,double)" -> "org.apache.commons.math3.util$Incrementor#Incrementor(int,org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,org.apache.commons.math3.optimization.ConvergenceChecker,double,double,double,double)" -> "org.apache.commons.math3.util$Incrementor#Incrementor(int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,org.apache.commons.math3.optimization.ConvergenceChecker,double,double,double,double)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$Incrementor#Incrementor(int,org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.util$Incrementor#Incrementor(int,org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$Incrementor#Incrementor(int,org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$Incrementor#Incrementor(int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.util$Incrementor#Incrementor(int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$Incrementor#Incrementor(int)" -> "org.apache.commons.math3.util$Incrementor#Incrementor()";
  "org.apache.commons.math3.util$Incrementor#Incrementor(int)" -> "org.apache.commons.math3.util$Incrementor#Incrementor(int,org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback)";
  "org.apache.commons.math3.util$Incrementor#Incrementor(int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)" -> "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)";
  "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)" -> "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)";
  "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#scalb(int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#scalb(int)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#scalb(int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#scalb(int)" -> "org.apache.commons.math3.util$FastMath#scalb(double,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.util$Precision#equals(float,float,float)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$Precision#equals(float,float,float)" -> "org.apache.commons.math3.util$FastMath#abs(float)";
  "org.apache.commons.math3.util$Precision#equals(float,float,float)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(float,float,float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(float,float,float)" -> "org.apache.commons.math3.util$Precision#equals(float,float,int)";
  "org.apache.commons.math3.util$Precision#equals(float,float,int)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$Precision#equals(float,float,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math3.util$FastMath#abs(float)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,float)" -> "org.apache.commons.math3.util$Precision#equals(float,float,int)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float)" -> "org.apache.commons.math3.util$Precision#equals(float,float,int)";
  "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#iterator()";
  "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,boolean)";
  "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance()";
  "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)";
  "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int)";
  "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()";
  "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)";
  "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#copy()";
  "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#checkIndex(int)";
  "org.apache.commons.math3.linear$RealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int)" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#iterator()";
  "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance()";
  "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int)";
  "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()";
  "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)";
  "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$ArrayRealVector#add(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.util$FastMath#sin(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#sinQ(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.util$FastMath#cosQ(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.util$FastMath#cos(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" -> "org.apache.commons.math3.util$FastMath#pow(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" -> "org.apache.commons.math3.util$FastMath#cbrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cbrt()" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)" -> "org.apache.commons.math3.util$FastMath#pow(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)" -> "org.apache.commons.math3.util$FastMath#cbrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#cbrt(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)" -> "org.apache.commons.math3.util$FastMath#pow(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)" -> "org.apache.commons.math3.util$FastMath#cbrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#exp()" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#exp()" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#exp()" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#exp()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#exp()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#exp()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#exp(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#exp()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#exp()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#exp()" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#exp(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#exp(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#exp(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#exp(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#exp(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#exp(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$DiagonalMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$DiagonalMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$DiagonalMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#log(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log()" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log()" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log()" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,boolean)";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector)" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#start(int,int,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#start(int,int,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getField()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[][])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getField()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math3.util$MathUtils#hash(double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#set(double)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$RealVector#set(double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#set(double)" -> "org.apache.commons.math3.linear$RealVector#iterator()";
  "org.apache.commons.math3.linear$RealVector#set(double)" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.linear$RealVector#set(double)" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.linear$RealVector#set(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#set(double)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.linear$RealVector#set(double)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.linear$RealVector#set(double)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#set(double)" -> "org.apache.commons.math3.linear$RealVector$Entry#setValue(double)";
  "org.apache.commons.math3.linear$RealVector#set(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector#set(double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#set(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)";
  "org.apache.commons.math3.linear$RealVector#set(double)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.linear$RealVector#set(double)" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.linear$RealVector#set(double)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#set(double)" -> "org.apache.commons.math3.linear$RealVector#checkIndex(int)";
  "org.apache.commons.math3.linear$RealVector$Entry#setValue(double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector$Entry#setValue(double)" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.linear$RealVector$Entry#setValue(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector$Entry#setValue(double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector$Entry#setValue(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)";
  "org.apache.commons.math3.linear$RealVector$Entry#setValue(double)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector$Entry#setValue(double)" -> "org.apache.commons.math3.linear$RealVector#checkIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.util$FastMath#ulp(double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$FastMath#ulp(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#createRowRealMatrix(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockHeight(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#copyBlockPart(org.apache.commons.math3.FieldElement[],int,int,int,int,int,org.apache.commons.math3.FieldElement[],int,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)" -> "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)";
  "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)" -> "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)";
  "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)" -> "org.apache.commons.math3.linear$RealVector#checkIndices(int,int)";
  "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)" -> "org.apache.commons.math3.linear$RealVector#checkIndices(int,int)";
  "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)" -> "org.apache.commons.math3.linear$RealVector#checkIndices(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(int)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(int)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubtractionCompatible(org.apache.commons.math3.linear.FieldMatrix)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.optimization$PointVectorValuePair$DataTransferObject#readResolve()" -> "org.apache.commons.math3.util$Pair#Pair(java.lang.Object,java.lang.Object)";
  "org.apache.commons.math3.optimization$PointVectorValuePair$DataTransferObject#readResolve()" -> "org.apache.commons.math3.optimization$PointVectorValuePair#PointVectorValuePair(double[],double[],boolean)";
  "org.apache.commons.math3.linear$DiagonalMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$DiagonalMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$ArrayRealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$ArrayRealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$ArrayRealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.linear$ArrayRealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$ArrayRealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.linear$ArrayRealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$ArrayRealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$ArrayRealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.linear$ArrayRealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#subtract(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#subtract(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#subtract(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#subtract(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#subtract(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#subtract(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#subtract(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#subtract(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#subtract(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#subtract(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$DiagonalMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$DiagonalMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$BlockRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#cos(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cos()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getRowVector(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getRowVector(int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getRowVector(int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math3.linear$DiagonalMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getFrobeniusNorm()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#start(int,int,int,int,int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#start(int,int,int,int,int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int[],int[],double[][])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$DiagonalMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$DiagonalMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getColumn(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockHeight(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getColumn(int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getColumn(int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockHeight(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(int,int,org.apache.commons.math3.FieldElement[][],boolean)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getField()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[][])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#toBlocksLayout(org.apache.commons.math3.FieldElement[][])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(int,int,org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(int,int,org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(int,int,org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(int,int,org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockHeight(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(int,int,org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(int,int,org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(int,int,org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(int,int,org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(int,int,org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(int,int,org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(int,int,org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(int,int,org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(int,int,org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getField()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(int,int,org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(int,int,org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[][])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(int,int,org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(int,int,org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#toBlocksLayout(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#toBlocksLayout(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#toBlocksLayout(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#toBlocksLayout(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#toBlocksLayout(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#toBlocksLayout(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#toBlocksLayout(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#toBlocksLayout(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#toBlocksLayout(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#toBlocksLayout(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#toBlocksLayout(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#toBlocksLayout(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getField()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#toBlocksLayout(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[][])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#toBlocksLayout(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#transpose()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#transpose()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#transpose()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#transpose()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#transpose()" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#transpose()" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#transpose()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#transpose()" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#transpose()" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#transpose()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#transpose()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#transpose()" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#transpose()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#transpose()" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.analysis$FunctionUtils#sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.analysis$FunctionUtils#sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis$FunctionUtils#sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(double)";
  "org.apache.commons.math3.analysis$FunctionUtils#sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.analysis$FunctionUtils#sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.analysis$FunctionUtils#sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis$FunctionUtils#sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis$FunctionUtils#sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#evaluate(double[],double)";
  "org.apache.commons.math3.analysis$FunctionUtils#sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis$FunctionUtils#sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis$FunctionUtils#sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.analysis$FunctionUtils#sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(double)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(double)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(double)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(double)" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#evaluate(double[],double)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(double)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getData()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getData()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getData()" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getData()" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getData()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyOut()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyOut()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyOut()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyOut()" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyOut()" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.util$FastMath#ceil(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#ceil(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#asinh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#asinh(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#asinh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#asinh(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#asinh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#asinh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#asinh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#asinh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.ArrayRealVector)" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(double)";
  "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)" -> "org.apache.commons.math3.linear$RealVector#iterator()";
  "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)" -> "org.apache.commons.math3.linear$RealVector$Entry#setValue(double)";
  "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)" -> "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)";
  "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)";
  "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#evaluate(double[],double)";
  "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)";
  "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)" -> "org.apache.commons.math3.analysis$FunctionUtils#fix2ndArgument(org.apache.commons.math3.analysis.BivariateFunction,double)";
  "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)" -> "org.apache.commons.math3.linear$RealVector#checkIndex(int)";
  "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(double)";
  "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.linear$RealVector#iterator()";
  "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.linear$RealVector$Entry#setValue(double)";
  "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)";
  "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#evaluate(double[],double)";
  "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.linear$RealVector#checkIndex(int)";
  "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$ArrayRealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(double)";
  "org.apache.commons.math3.linear$ArrayRealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$ArrayRealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$ArrayRealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#evaluate(double[],double)";
  "org.apache.commons.math3.linear$ArrayRealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getData()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#getData()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getData()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getData()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[],boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#transpose()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getTarget()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeSigma(double[],double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#transpose()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#transpose()" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#transpose()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#transpose()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#transpose()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#transpose()" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockRealMatrix#transpose()" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$BlockRealMatrix#transpose()" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#transpose()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#transpose()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#transpose()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#transpose()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#transpose()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#transpose()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#transpose()" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockRealMatrix#transpose()" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#transpose()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#transpose()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#transpose()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$DiagonalMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getData()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#getData()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getData()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getData()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[],boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#transpose()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getTarget()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)" -> "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asinh()" -> "org.apache.commons.math3.util$FastMath#asinh(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asinh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#asinh(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asinh()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asinh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asinh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asinh()" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asinh()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asinh()" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asinh()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asinh()" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#taylor(double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeOrders(int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#taylor(double[])" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#taylor(double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#taylor(double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#taylor(double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#taylor(double[],int,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#taylor(double[],int,double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeOrders(int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#taylor(double[],int,double[])" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#taylor(double[],int,double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#taylor(double[],int,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getRMS()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getRMS()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getRMS()" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getChiSquare()";
  "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)" -> "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)";
  "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)" -> "org.apache.commons.math3.linear$RealVector#checkIndices(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acos(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acos(double[],int,double[],int)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acos(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#acos(double)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#acos(double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.util$Precision#round(double,int)" -> "org.apache.commons.math3.util$Precision#round(double,int,int)";
  "org.apache.commons.math3.util$Precision#round(double,int)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#abs()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#abs()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#negate()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#abs()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#negate()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#negate()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#start(int,int,int,int,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#start(int,int,int,int,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$MatrixUtils#serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tanh()" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tanh()" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tanh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#tanh(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tanh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tanh()" -> "org.apache.commons.math3.util$FastMath#tanh(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tanh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tanh()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tanh()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tanh()" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tanh()" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(double)" -> "org.apache.commons.math3.util$FastMath#pow(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double,double[],int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double,double[],int)" -> "org.apache.commons.math3.util$FastMath#pow(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double,double[],int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)" -> "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)";
  "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)" -> "org.apache.commons.math3.linear$RealVector#checkIndex(int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#asin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#asin(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#asin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#asin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#asin(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#asin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#asin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setRow(int,double[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDataRef()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRowVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,boolean)";
  "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance()";
  "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)";
  "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()";
  "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#copy()";
  "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.linear$RealVector#combine(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#checkIndex(int)";
  "org.apache.commons.math3.linear$RealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$RealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$RealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$RealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$RealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)";
  "org.apache.commons.math3.linear$RealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$RealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.linear$RealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.linear$RealVector#combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#checkIndex(int)";
  "org.apache.commons.math3.util$Precision#equalsWithRelativeTolerance(double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.util$Precision#equalsWithRelativeTolerance(double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$Precision#equalsWithRelativeTolerance(double,double,double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsWithRelativeTolerance(double,double,double)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.util$Precision#equalsWithRelativeTolerance(double,double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsWithRelativeTolerance(double,double,double)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setRow(int,double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$ArrayRealVector#getDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#getDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$ArrayRealVector#getDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$ArrayRealVector#getDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.linear$ArrayRealVector#getDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$ArrayRealVector#getDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$ArrayRealVector#getDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#getDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$ArrayRealVector#getDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$ArrayRealVector#getDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.linear$ArrayRealVector#getDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getField()";
  "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector,java.lang.StringBuffer,java.text.FieldPosition)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector,java.lang.StringBuffer,java.text.FieldPosition)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector,java.lang.StringBuffer,java.text.FieldPosition)" -> "org.apache.commons.math3.util$CompositeFormat#formatDouble(double,java.text.NumberFormat,java.lang.StringBuffer,java.text.FieldPosition)";
  "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector,java.lang.StringBuffer,java.text.FieldPosition)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector,java.lang.StringBuffer,java.text.FieldPosition)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector,java.lang.StringBuffer,java.text.FieldPosition)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$NonSymmetricMatrixException#NonSymmetricMatrixException(int,int,double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getTrace()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getTrace()" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getTrace()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getTrace()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getTrace()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getTrace()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getTrace()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getTrace()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getTrace()" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getTrace()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getTrace()" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getTrace()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getTrace()" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getTrace()" -> "org.apache.commons.math3.linear$NonSquareMatrixException#NonSquareMatrixException(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$MatrixUtils#checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$MatrixUtils#checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.util$MathUtils#copySign(byte,byte)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#start(int,int,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#start(int,int,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getRow(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getRow(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getRow(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getRow(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getRow(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getRow(int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getRow(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getRow(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getRow(int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(double)";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#iterator()";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,boolean)";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance()";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$Entry#setValue(double)";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#mapMultiply(double)";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#copy()";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#evaluate(double[],double)";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#mapMultiplyToSelf(double)";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.analysis$FunctionUtils#fix2ndArgument(org.apache.commons.math3.analysis.BivariateFunction,double)";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#checkIndex(int)";
  "org.apache.commons.math3.linear$RealVector#projection(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(double)";
  "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math3.linear$RealVector#iterator()";
  "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math3.linear$RealVector$Entry#setValue(double)";
  "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)";
  "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)";
  "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#evaluate(double[],double)";
  "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)";
  "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math3.analysis$FunctionUtils#fix2ndArgument(org.apache.commons.math3.analysis.BivariateFunction,double)";
  "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math3.linear$RealVector#checkIndex(int)";
  "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#mapMultiply(double)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$RealVector#mapMultiply(double)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$RealVector#mapMultiply(double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#mapMultiply(double)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$RealVector#mapMultiply(double)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealVector#mapMultiply(double)" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(double)";
  "org.apache.commons.math3.linear$RealVector#mapMultiply(double)" -> "org.apache.commons.math3.linear$RealVector#iterator()";
  "org.apache.commons.math3.linear$RealVector#mapMultiply(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,boolean)";
  "org.apache.commons.math3.linear$RealVector#mapMultiply(double)" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.linear$RealVector#mapMultiply(double)" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.linear$RealVector#mapMultiply(double)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$RealVector#mapMultiply(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#mapMultiply(double)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance()";
  "org.apache.commons.math3.linear$RealVector#mapMultiply(double)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.linear$RealVector#mapMultiply(double)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealVector#mapMultiply(double)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.linear$RealVector#mapMultiply(double)" -> "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)";
  "org.apache.commons.math3.linear$RealVector#mapMultiply(double)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#mapMultiply(double)" -> "org.apache.commons.math3.linear$RealVector$Entry#setValue(double)";
  "org.apache.commons.math3.linear$RealVector#mapMultiply(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector#mapMultiply(double)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$RealVector#mapMultiply(double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#mapMultiply(double)" -> "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)";
  "org.apache.commons.math3.linear$RealVector#mapMultiply(double)" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.linear$RealVector#mapMultiply(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)";
  "org.apache.commons.math3.linear$RealVector#mapMultiply(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()";
  "org.apache.commons.math3.linear$RealVector#mapMultiply(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#copy()";
  "org.apache.commons.math3.linear$RealVector#mapMultiply(double)" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#evaluate(double[],double)";
  "org.apache.commons.math3.linear$RealVector#mapMultiply(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#mapMultiplyToSelf(double)";
  "org.apache.commons.math3.linear$RealVector#mapMultiply(double)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.linear$RealVector#mapMultiply(double)" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.linear$RealVector#mapMultiply(double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$RealVector#mapMultiply(double)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#mapMultiply(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)";
  "org.apache.commons.math3.linear$RealVector#mapMultiply(double)" -> "org.apache.commons.math3.analysis$FunctionUtils#fix2ndArgument(org.apache.commons.math3.analysis.BivariateFunction,double)";
  "org.apache.commons.math3.linear$RealVector#mapMultiply(double)" -> "org.apache.commons.math3.linear$RealVector#checkIndex(int)";
  "org.apache.commons.math3.linear$RealVector#mapMultiply(double)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealVector(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealVector(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealVector(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealVector(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance()";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealVector(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealVector(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealVector(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealVector(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealVector(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealVector(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealVector(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$FastMath#ulp(float)" -> "org.apache.commons.math3.util$FastMath#abs(float)";
  "org.apache.commons.math3.util$FastMath#ulp(float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowVector(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRow(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowVector(int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getRow(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRowVector(int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRow(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRow(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRow(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRow(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRow(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRow(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRow(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRow(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRow(int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRow(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRow(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRow(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getRow(int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix()" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.linear$RealVector#mapSubtract(double)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$RealVector#mapSubtract(double)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$RealVector#mapSubtract(double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#mapSubtract(double)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$RealVector#mapSubtract(double)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealVector#mapSubtract(double)" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(double)";
  "org.apache.commons.math3.linear$RealVector#mapSubtract(double)" -> "org.apache.commons.math3.linear$RealVector#iterator()";
  "org.apache.commons.math3.linear$RealVector#mapSubtract(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,boolean)";
  "org.apache.commons.math3.linear$RealVector#mapSubtract(double)" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.linear$RealVector#mapSubtract(double)" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.linear$RealVector#mapSubtract(double)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$RealVector#mapSubtract(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#mapSubtract(double)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance()";
  "org.apache.commons.math3.linear$RealVector#mapSubtract(double)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.linear$RealVector#mapSubtract(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#mapAddToSelf(double)";
  "org.apache.commons.math3.linear$RealVector#mapSubtract(double)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealVector#mapSubtract(double)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.linear$RealVector#mapSubtract(double)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#mapSubtract(double)" -> "org.apache.commons.math3.linear$RealVector$Entry#setValue(double)";
  "org.apache.commons.math3.linear$RealVector#mapSubtract(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector#mapSubtract(double)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$RealVector#mapSubtract(double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#mapSubtract(double)" -> "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)";
  "org.apache.commons.math3.linear$RealVector#mapSubtract(double)" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.linear$RealVector#mapSubtract(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)";
  "org.apache.commons.math3.linear$RealVector#mapSubtract(double)" -> "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)";
  "org.apache.commons.math3.linear$RealVector#mapSubtract(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()";
  "org.apache.commons.math3.linear$RealVector#mapSubtract(double)" -> "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)";
  "org.apache.commons.math3.linear$RealVector#mapSubtract(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#copy()";
  "org.apache.commons.math3.linear$RealVector#mapSubtract(double)" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#evaluate(double[],double)";
  "org.apache.commons.math3.linear$RealVector#mapSubtract(double)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.linear$RealVector#mapSubtract(double)" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.linear$RealVector#mapSubtract(double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$RealVector#mapSubtract(double)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#mapSubtract(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#mapSubtractToSelf(double)";
  "org.apache.commons.math3.linear$RealVector#mapSubtract(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)";
  "org.apache.commons.math3.linear$RealVector#mapSubtract(double)" -> "org.apache.commons.math3.analysis$FunctionUtils#fix2ndArgument(org.apache.commons.math3.analysis.BivariateFunction,double)";
  "org.apache.commons.math3.linear$RealVector#mapSubtract(double)" -> "org.apache.commons.math3.linear$RealVector#checkIndex(int)";
  "org.apache.commons.math3.linear$RealVector#mapSubtract(double)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(double)";
  "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)" -> "org.apache.commons.math3.linear$RealVector#iterator()";
  "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)" -> "org.apache.commons.math3.linear$RealVector$Entry#setValue(double)";
  "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)" -> "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)";
  "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)";
  "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#evaluate(double[],double)";
  "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)";
  "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)" -> "org.apache.commons.math3.analysis$FunctionUtils#fix2ndArgument(org.apache.commons.math3.analysis.BivariateFunction,double)";
  "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)" -> "org.apache.commons.math3.linear$RealVector#checkIndex(int)";
  "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(double)";
  "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math3.linear$RealVector#iterator()";
  "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#mapAddToSelf(double)";
  "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math3.linear$RealVector$Entry#setValue(double)";
  "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)";
  "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)";
  "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)";
  "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#evaluate(double[],double)";
  "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)";
  "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math3.analysis$FunctionUtils#fix2ndArgument(org.apache.commons.math3.analysis.BivariateFunction,double)";
  "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math3.linear$RealVector#checkIndex(int)";
  "org.apache.commons.math3.linear$RealVector#mapSubtractToSelf(double)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan()" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan()" -> "org.apache.commons.math3.util$FastMath#atan(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan()" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#expm1(double)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.linear$MatrixUtils#serializeRealVector(org.apache.commons.math3.linear.RealVector,java.io.ObjectOutputStream)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#serializeRealVector(org.apache.commons.math3.linear.RealVector,java.io.ObjectOutputStream)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#serializeRealVector(org.apache.commons.math3.linear.RealVector,java.io.ObjectOutputStream)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$MatrixUtils#serializeRealVector(org.apache.commons.math3.linear.RealVector,java.io.ObjectOutputStream)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#serializeRealVector(org.apache.commons.math3.linear.RealVector,java.io.ObjectOutputStream)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockHeight(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sinh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sinh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#cosh(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sinh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sinh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sinh(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sinh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sinh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sinh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sinh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#sinh(double)";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#sinh(double)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.optimization.fitting$CurveFitter#addObservedPoint(double,double,double)" -> "org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#WeightedObservedPoint(double,double,double)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getData()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getData()" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getData()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getData()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getData()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getData()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getData()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getData()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getData()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getData()" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getData()" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getData()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getData()" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,int)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,int)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#compareTo(double,double,int)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tan(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tan(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tan(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tan(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tan(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tan(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tan(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#tan(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tan(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tan(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tan(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#tan(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.util$FastMath#tan(double)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.linear$BlockRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.util$FastMath#round(double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#round(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)";
  "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$NonSquareMatrixException#NonSquareMatrixException(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#checkIndex(int)";
  "org.apache.commons.math3.linear$MatrixUtils#solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$DiagonalMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$DiagonalMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$DiagonalMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$DiagonalMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$DiagonalMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$DiagonalMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$DiagonalMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$DiagonalMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$DiagonalMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$DiagonalMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$DiagonalMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$DiagonalMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$DiagonalMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$DiagonalMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$DiagonalMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$DiagonalMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(java.lang.Integer[],java.lang.Integer[])" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(java.lang.Integer[],java.lang.Integer[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(int)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#copyBlockPart(double[],int,int,int,int,int,double[],int,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getData()";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#getData()";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getData()";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#subtract(org.apache.commons.math3.linear.BlockRealMatrix)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getData()";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[],boolean)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$NonSquareMatrixException#NonSquareMatrixException(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.linear$MatrixUtils#blockInverse(org.apache.commons.math3.linear.RealMatrix,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#copyBlockPart(double[],int,int,int,int,int,double[],int,int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#subtract(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$BlockRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.util$MathUtils#checkFinite(double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$MathUtils#checkFinite(double)" -> "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$MathUtils#checkFinite(double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathUtils#checkFinite(double)" -> "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])" -> "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(java.lang.Number,java.lang.Object[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#setColumn(int,double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$ArrayRealVector#toString()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#toString()" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$ArrayRealVector#toString()" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$ArrayRealVector#toString()" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$ArrayRealVector#toString()" -> "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector,java.lang.StringBuffer,java.text.FieldPosition)";
  "org.apache.commons.math3.linear$ArrayRealVector#toString()" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance()";
  "org.apache.commons.math3.linear$ArrayRealVector#toString()" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$ArrayRealVector#toString()" -> "org.apache.commons.math3.util$CompositeFormat#formatDouble(double,java.text.NumberFormat,java.lang.StringBuffer,java.text.FieldPosition)";
  "org.apache.commons.math3.linear$ArrayRealVector#toString()" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$ArrayRealVector#toString()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#toString()" -> "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()";
  "org.apache.commons.math3.linear$ArrayRealVector#toString()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$ArrayRealVector#toString()" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$ArrayRealVector#toString()" -> "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector,java.lang.StringBuffer,java.text.FieldPosition)";
  "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$CompositeFormat#formatDouble(double,java.text.NumberFormat,java.lang.StringBuffer,java.text.FieldPosition)";
  "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVectorFormat#format(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#add(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#add(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#add(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#add(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#PolynomialFunction(double[])";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#add(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#add(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#add(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#add(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#add(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$ArrayRealVector#getSubVector(int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#getSubVector(int,int)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$ArrayRealVector#getSubVector(int,int)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$ArrayRealVector#getSubVector(int,int)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$ArrayRealVector#getSubVector(int,int)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance()";
  "org.apache.commons.math3.linear$ArrayRealVector#getSubVector(int,int)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$ArrayRealVector#getSubVector(int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#getSubVector(int,int)" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.linear$ArrayRealVector#getSubVector(int,int)" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int)";
  "org.apache.commons.math3.linear$ArrayRealVector#getSubVector(int,int)" -> "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()";
  "org.apache.commons.math3.linear$ArrayRealVector#getSubVector(int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$ArrayRealVector#getSubVector(int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$ArrayRealVector#getSubVector(int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$ArrayRealVector#getSubVector(int,int)" -> "org.apache.commons.math3.linear$RealVector#checkIndex(int)";
  "org.apache.commons.math3.linear$ArrayRealVector#getSubVector(int,int)" -> "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#add(double)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getOrder()";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getFreeParameters()";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#multiply(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getOrder()";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#multiply(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getFreeParameters()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getField()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[][])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][],boolean)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#multiply(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#multiply(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#multiply(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#multiply(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#PolynomialFunction(double[])";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#multiply(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#multiply(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#multiply(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#multiply(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#multiply(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#toRadians()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#toRadians()" -> "org.apache.commons.math3.util$FastMath#toRadians(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#toRadians()" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#toRadians()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#toRadians()" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#toRadians()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#toRadians(double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$FastMath#toRadians(double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#toRadians(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#round(float)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$FastMath#round(float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getMaxEvaluations()" -> "org.apache.commons.math3.util$Incrementor#getMaximalCount()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#pow(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#atan(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#subtract(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#divide(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#add(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#cbrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#multiply(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#divide(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#divide(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#divide(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#divide(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#divide(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#divide(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#divide(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#multiply(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#add(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log10()" -> "org.apache.commons.math3.util$FastMath#log10(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log10()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log10()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log10()" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log10()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log10()" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log10()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log10()" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log10()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#log10(double[],int,double[],int)";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log10(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log10(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log10(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log10(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log10(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log10(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log10(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log10(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getNorm()" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getNorm()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getNorm()" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getNorm()" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getNorm()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#nextUp(double)" -> "org.apache.commons.math3.util$FastMath#nextAfter(double,double)";
  "org.apache.commons.math3.util$FastMath#nextUp(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$MathUtils#copySign(short,short)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$DiagonalMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$DiagonalMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#BaseAbstractMultivariateVectorOptimizer()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#BaseAbstractMultivariateVectorOptimizer()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#BaseAbstractMultivariateVectorOptimizer()" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#BaseAbstractMultivariateVectorOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#BaseAbstractMultivariateVectorOptimizer()" -> "org.apache.commons.math3.util$Incrementor#Incrementor()";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#BaseAbstractMultivariateVectorOptimizer()" -> "org.apache.commons.math3.util$Incrementor#Incrementor(int,org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#BaseAbstractMultivariateVectorOptimizer()" -> "org.apache.commons.math3.util$Incrementor#Incrementor(int)";
  "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#BaseAbstractMultivariateVectorOptimizer()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#log(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#exp(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#multiply(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$NonSymmetricMatrixException#NonSymmetricMatrixException(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)";
  "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$NonSquareMatrixException#NonSquareMatrixException(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$MatrixUtils#checkSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)" -> "org.apache.commons.math3.linear$NonSymmetricMatrixException#NonSymmetricMatrixException(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)" -> "org.apache.commons.math3.linear$NonSquareMatrixException#NonSquareMatrixException(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$DiagonalMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$DiagonalMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acosh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#acosh(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acosh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acosh(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acosh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acosh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acosh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#acosh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asin()" -> "org.apache.commons.math3.util$FastMath#asin(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asin()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#asin(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asin()" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asin()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asin()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asin()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asin()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asin()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#asin()" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#toString()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#toString()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#toString()" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#toString(double)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubtractionCompatible(org.apache.commons.math3.linear.FieldMatrix)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getExpectedRowDimension()" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#getExpectedDimension(int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#linearCombination(double,double[],int,double,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#linearCombination(double,double[],int,double,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.BlockFieldMatrix)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubtractionCompatible(org.apache.commons.math3.linear.FieldMatrix)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#subtract(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealVector#getMinIndex()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#getMinIndex()" -> "org.apache.commons.math3.linear$RealVector#iterator()";
  "org.apache.commons.math3.linear$RealVector#getMinIndex()" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.linear$RealVector#getMinIndex()" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.linear$RealVector#getMinIndex()" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#getMinIndex()" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.linear$RealVector#getMinIndex()" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.linear$RealVector#getMinIndex()" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector#getMinIndex()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#getMinIndex()" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.linear$RealVector#getMinIndex()" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.linear$RealVector#getMinIndex()" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkMultiplicationCompatible(org.apache.commons.math3.linear.FieldMatrix)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkMultiplicationCompatible(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkMultiplicationCompatible(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkMultiplicationCompatible(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkMultiplicationCompatible(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkMultiplicationCompatible(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkMultiplicationCompatible(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkMultiplicationCompatible(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkMultiplicationCompatible(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getOrder()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#floor()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sin()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#sin(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#sinQ(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#cosQ(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#cos(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#sin(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.BlockFieldMatrix)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkMultiplicationCompatible(org.apache.commons.math3.linear.FieldMatrix)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkMultiplicationCompatible(org.apache.commons.math3.linear.FieldMatrix)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#getColumn(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumn(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumn(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumn(int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumn(int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumn(int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumn(int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnVector(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockHeight(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumn(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnVector(int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumn(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumnVector(int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumn(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumn(int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumn(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getColumn(int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumn(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#scalarMultiply(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRowVector(int,org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getField()";
  "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#createRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealVector#hashCode()" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$RealVector#hashCode()" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[])" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getOrder()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.util$FastMath#signum(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#signum()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,int)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.linear$ArrayRealVector#isInfinite()" -> "org.apache.commons.math3.linear$ArrayRealVector#isNaN()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer()" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#AbstractLeastSquaresOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer()" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#BaseAbstractMultivariateVectorOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer()" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer()" -> "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double,double,double)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer()" -> "org.apache.commons.math3.util$Incrementor#Incrementor()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer()" -> "org.apache.commons.math3.util$Incrementor#Incrementor(int,org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer()" -> "org.apache.commons.math3.util$Incrementor#Incrementor(int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double,double,double)" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#AbstractLeastSquaresOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double,double,double)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double,double,double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double,double,double)" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#BaseAbstractMultivariateVectorOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double,double,double)" -> "org.apache.commons.math3.util$Incrementor#Incrementor()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double,double,double)" -> "org.apache.commons.math3.util$Incrementor#Incrementor(int,org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double,double,double)" -> "org.apache.commons.math3.util$Incrementor#Incrementor(int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double,double,double)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkAdditionCompatible(org.apache.commons.math3.linear.FieldMatrix)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getData()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#getData()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getData()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$DiagonalMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getData()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[],boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$BlockRealMatrix#transpose()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getTarget()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getChiSquare()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#guessParametersErrors()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.FieldElement[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#operate(org.apache.commons.math3.FieldElement[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#operate(org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#operate(org.apache.commons.math3.FieldElement[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#operate(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#operate(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#operate(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#operate(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#operate(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#operate(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#operate(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#operate(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#operate(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#operate(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#operate(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#operate(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#operate(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#operate(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#operate(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#operate(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#scalarAdd(double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat()" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#iterator()";
  "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance()";
  "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int)";
  "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()";
  "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)";
  "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#start(int,int,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#start(int,int,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$DiagonalMatrix#add(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#add(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#add(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$DiagonalMatrix#add(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$DiagonalMatrix#add(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#add(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#add(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#add(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#add(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#add(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$DiagonalMatrix#add(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#add(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$DiagonalMatrix#add(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$DiagonalMatrix#add(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$DiagonalMatrix#add(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#add(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$DiagonalMatrix#add(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.linear$DiagonalMatrix#add(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[],boolean)";
  "org.apache.commons.math3.linear$DiagonalMatrix#add(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$DiagonalMatrix#add(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$DiagonalMatrix#add(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#add(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$DiagonalMatrix#add(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$DiagonalMatrix#add(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$DiagonalMatrix#add(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#add(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.linear$DiagonalMatrix#add(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#add(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$DiagonalMatrix#add(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getWrongRowDimension()" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#getWrongDimension(int)";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector()" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getData()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#getData()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getData()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getData()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[],boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getTarget()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateJacobian()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#start(int,int,int,int,int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#start(int,int,int,int,int,int)";
  "org.apache.commons.math3.linear$RealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$RealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#iterator()";
  "org.apache.commons.math3.linear$RealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.linear$RealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.linear$RealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$RealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.linear$RealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$RealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.linear$RealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.linear$RealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$RealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$RealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$RealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.linear$RealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.linear$RealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.linear$RealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.linear$ArrayRealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$ArrayRealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$ArrayRealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$ArrayRealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.linear$ArrayRealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$ArrayRealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$ArrayRealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$ArrayRealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.linear$ArrayRealVector#getL1Distance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#toDegrees()" -> "org.apache.commons.math3.util$FastMath#toDegrees(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#toDegrees()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#toDegrees()" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#toDegrees()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#toDegrees()" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#toDegrees()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$RealVector#toArray()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#toArray()" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#toArray()" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector#toArray()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#toArray()" -> "org.apache.commons.math3.linear$ArrayRealVector#toArray()";
  "org.apache.commons.math3.linear$RealVector#toArray()" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.util$MathUtils#copySign(int,int)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#add(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.util$MathUtils#copySign(long,long)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getData()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getData()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getData()" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getData()" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getData()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getData()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#writeReplace()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#DerivativeStructure$DataTransferObject(int,int,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#writeReplace()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getOrder()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#writeReplace()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.exception$NoDataException#NoDataException()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int[],int[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int[],int[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int[],int[])" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int[],int[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int[],int[])" -> "org.apache.commons.math3.exception$NoDataException#NoDataException()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int[],int[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int[],int[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int[],int[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int[],int[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int[],int[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int[],int[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int[],int[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int[],int[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int[],int[])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int[],int[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#start(int,int,int,int,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#start(int,int,int,int,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$NonSymmetricMatrixException#NonSymmetricMatrixException(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$MatrixUtils#isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$NonSquareMatrixException#NonSquareMatrixException(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$MatrixUtils#isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealVector#equals(java.lang.Object)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$RealVector#equals(java.lang.Object)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(double,double,double)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkAdditionCompatible(org.apache.commons.math3.linear.FieldMatrix)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.BlockFieldMatrix)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#add(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getField()";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.BlockFieldMatrix)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#isSquare()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkMultiplicationCompatible(org.apache.commons.math3.linear.FieldMatrix)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#copy()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyOut()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$NonSquareMatrixException#NonSquareMatrixException(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#power(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$NotPositiveException#NotPositiveException(java.lang.Number)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#isSquare()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#isSquare()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#isSquare()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#isSquare()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#copy()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#copy()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#copy()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#copy()" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#copy()" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#copy()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#copy()" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#copy()" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#copy()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#copy()" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#copy()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#copy()" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyOut()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copy()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldIdentityMatrix(org.apache.commons.math3.Field,int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure$DataTransferObject#readResolve()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#FastMath$CodyWaite(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()" -> "org.apache.commons.math3.util$FastMath#tanQ(double,double,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()" -> "org.apache.commons.math3.util$FastMath#polySine(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()" -> "org.apache.commons.math3.util$FastMath#reducePayneHanek(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemA()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#tan(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()" -> "org.apache.commons.math3.util$FastMath#polyCosine(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()" -> "org.apache.commons.math3.util$FastMath#tan(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getRemB()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#tan()" -> "org.apache.commons.math3.util$FastMath$CodyWaite#getK()";
  "org.apache.commons.math3.linear$ArrayRealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$ArrayRealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$ArrayRealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$ArrayRealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(double)";
  "org.apache.commons.math3.linear$ArrayRealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,boolean)";
  "org.apache.commons.math3.linear$ArrayRealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$ArrayRealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance()";
  "org.apache.commons.math3.linear$ArrayRealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$ArrayRealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$ArrayRealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.linear$ArrayRealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()";
  "org.apache.commons.math3.linear$ArrayRealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.linear$ArrayRealVector#copy()";
  "org.apache.commons.math3.linear$ArrayRealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#evaluate(double[],double)";
  "org.apache.commons.math3.linear$ArrayRealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$ArrayRealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.linear$ArrayRealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)";
  "org.apache.commons.math3.linear$ArrayRealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(java.lang.Number,java.lang.Number,java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(java.lang.Number,java.lang.Number,java.lang.Number)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(java.lang.Number,java.lang.Number,java.lang.Number)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#toString()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#toString()" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#toString()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#toString()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#toString()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#toString()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#toString()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#toString()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#toString()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#toString()" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#toString()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#toString()" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#addToEntry(int,int,org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log(double,double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acosh()" -> "org.apache.commons.math3.util$FastMath#acosh(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acosh()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acosh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acosh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#acosh(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acosh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acosh()" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acosh()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acosh()" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acosh()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acosh()" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.linear$ArrayRealVector#addToEntry(int,double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#addToEntry(int,double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#addToEntry(int,double)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$RealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$RealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#iterator()";
  "org.apache.commons.math3.linear$RealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.linear$RealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.linear$RealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$RealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.linear$RealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$RealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.linear$RealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.linear$RealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.linear$RealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$RealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$RealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.linear$RealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.linear$RealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.linear$RealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#getLInfDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#expm1()" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#expm1()" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#expm1()" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#expm1()" -> "org.apache.commons.math3.util$FastMath#expm1(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#expm1()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#expm1()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#expm1()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#expm1()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#expm1()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#expm1(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#expm1()" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#expm1()" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#expm1(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#expm1(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#expm1(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#expm1(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#expm1(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#expm1(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#expm1(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#expm1(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#expm1(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$MathUtils#reduce(double,double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#hashCode()";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#hashCode()";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.util$MathUtils#hash(double)";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.linear$RealVector#hashCode()";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#hashCode()";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.linear$ArrayRealVector#hashCode()";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.linear$ArrayRealVector#isNaN()";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.util$Pair#hashCode()" -> "org.apache.commons.math3.util$MathUtils#hash(double[])";
  "org.apache.commons.math3.linear$ArrayRealVector#hashCode()" -> "org.apache.commons.math3.linear$ArrayRealVector#isNaN()";
  "org.apache.commons.math3.linear$ArrayRealVector#hashCode()" -> "org.apache.commons.math3.util$MathUtils#hash(double[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$DiagonalMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$DiagonalMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkAdditionCompatible(org.apache.commons.math3.linear.FieldMatrix)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#add(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$Precision#equals(float,float)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$Precision#equals(float,float)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(float,float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(float,float)" -> "org.apache.commons.math3.util$Precision#equals(float,float,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#setSubMatrix(double[][],int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$ArrayRealVector#append(double)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$ArrayRealVector#append(double)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$ArrayRealVector#append(double)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$ArrayRealVector#append(double)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance()";
  "org.apache.commons.math3.linear$ArrayRealVector#append(double)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$ArrayRealVector#append(double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#append(double)" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.linear$ArrayRealVector#append(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()";
  "org.apache.commons.math3.linear$ArrayRealVector#append(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)";
  "org.apache.commons.math3.linear$ArrayRealVector#append(double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$ArrayRealVector#append(double)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()" -> "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#start(int,int,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()" -> "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#start(int,int,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#transpose()" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#start(int,int,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#start(int,int,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#getDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#getDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$RealVector#getDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#iterator()";
  "org.apache.commons.math3.linear$RealVector#getDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.linear$RealVector#getDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.linear$RealVector#getDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$RealVector#getDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#getDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDistance(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$RealVector#getDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.linear$RealVector#getDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.linear$RealVector#getDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$RealVector#getDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.linear$RealVector#getDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector#getDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#getDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$RealVector#getDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$RealVector#getDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.linear$RealVector#getDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.linear$RealVector#getDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.linear$RealVector#getDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#getDistance(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log1p(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log1p(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log1p(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log1p(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#log1p(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#log1p(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#log1p(double)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double)" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#AbstractLeastSquaresOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double)" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#BaseAbstractMultivariateVectorOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double)" -> "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double,double,double)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double)" -> "org.apache.commons.math3.util$Incrementor#Incrementor()";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double)" -> "org.apache.commons.math3.util$Incrementor#Incrementor(int,org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double)" -> "org.apache.commons.math3.util$Incrementor#Incrementor(int)";
  "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#getL1Norm()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.linear$ArrayRealVector#getL1Norm()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math3.util$FastMath#abs(int)";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equalsIncludingNaN(float,float,int)" -> "org.apache.commons.math3.util$Precision#equals(float,float,int)";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(double[])" -> "org.apache.commons.math3.optimization$PointVectorValuePair#getPointRef()";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(double[])" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(double[])" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(double[])" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(double[])" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(double[])" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#PolynomialFunction$Parametric()";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(double[])" -> "org.apache.commons.math3.util$Pair#getKey()";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(double[])" -> "org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction#CurveFitter$OldTheoreticalValuesFunction(org.apache.commons.math3.optimization.fitting.CurveFitter,org.apache.commons.math3.analysis.ParametricUnivariateFunction)";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(double[])" -> "org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#getWeight()";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(double[])" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(double[])" -> "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(double[])" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(double[])" -> "org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#getY()";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(double[])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#fit(double[])" -> "org.apache.commons.math3.optimization.fitting$CurveFitter#fit(int,org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#preMultiply(double[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDataRef()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#preMultiply(double[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getDataRef()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(double[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$DiagonalMatrix#preMultiply(double[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[],boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#preMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$DiagonalMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.linear$DiagonalMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$DiagonalMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)";
  "org.apache.commons.math3.linear$DiagonalMatrix#preMultiply(double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$DiagonalMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$DiagonalMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#preMultiply(double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$DiagonalMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getDataRef()";
  "org.apache.commons.math3.linear$DiagonalMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$DiagonalMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$DiagonalMatrix#preMultiply(double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$DiagonalMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])";
  "org.apache.commons.math3.linear$DiagonalMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[],boolean)";
  "org.apache.commons.math3.linear$DiagonalMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$DiagonalMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$DiagonalMatrix#preMultiply(double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$DiagonalMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#preMultiply(double[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$DiagonalMatrix#preMultiply(double[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$DiagonalMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$DiagonalMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.linear$DiagonalMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$DiagonalMatrix#preMultiply(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getData()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#getData()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getData()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getData()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[],boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#transpose()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getTarget()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockHeight(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math3.util$CompositeFormat#formatDouble(double,java.text.NumberFormat,java.lang.StringBuffer,java.text.FieldPosition)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#toString()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#formatDouble(double,java.text.NumberFormat,java.lang.StringBuffer,java.text.FieldPosition)";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$RealMatrixFormat#format(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[],int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[],int,int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[],int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[],int,int)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[],int,int)" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[],int,int)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(java.lang.Double[],int,int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sinh()" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sinh()" -> "org.apache.commons.math3.util$FastMath#cosh(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sinh()" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sinh()" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sinh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#sinh(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sinh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sinh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sinh()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sinh()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sinh()" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sinh()" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sinh()" -> "org.apache.commons.math3.util$FastMath#sinh(double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#remove()" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#remove()" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#round()" -> "org.apache.commons.math3.util$FastMath#round(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#round()" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#round()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#log(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#exp(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#log(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#multiply(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#atan2(double,double)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.linear$RealVector#unitize()" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$RealVector#unitize()" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$RealVector#unitize()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#unitize()" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(double)";
  "org.apache.commons.math3.linear$RealVector#unitize()" -> "org.apache.commons.math3.linear$RealVector#iterator()";
  "org.apache.commons.math3.linear$RealVector#unitize()" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.linear$RealVector#unitize()" -> "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)";
  "org.apache.commons.math3.linear$RealVector#unitize()" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.linear$RealVector#unitize()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$RealVector#unitize()" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#unitize()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.linear$RealVector#unitize()" -> "org.apache.commons.math3.linear$ArrayRealVector#getNorm()";
  "org.apache.commons.math3.linear$RealVector#unitize()" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.linear$RealVector#unitize()" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.linear$RealVector#unitize()" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#unitize()" -> "org.apache.commons.math3.linear$RealVector$Entry#setValue(double)";
  "org.apache.commons.math3.linear$RealVector#unitize()" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector#unitize()" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$RealVector#unitize()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#unitize()" -> "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)";
  "org.apache.commons.math3.linear$RealVector#unitize()" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#unitize()" -> "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)";
  "org.apache.commons.math3.linear$RealVector#unitize()" -> "org.apache.commons.math3.linear$ArrayRealVector#mapDivideToSelf(double)";
  "org.apache.commons.math3.linear$RealVector#unitize()" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#evaluate(double[],double)";
  "org.apache.commons.math3.linear$RealVector#unitize()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$RealVector#unitize()" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.linear$RealVector#unitize()" -> "org.apache.commons.math3.linear$RealVector#getNorm()";
  "org.apache.commons.math3.linear$RealVector#unitize()" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.linear$RealVector#unitize()" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#unitize()" -> "org.apache.commons.math3.linear$ArrayRealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)";
  "org.apache.commons.math3.linear$RealVector#unitize()" -> "org.apache.commons.math3.analysis$FunctionUtils#fix2ndArgument(org.apache.commons.math3.analysis.BivariateFunction,double)";
  "org.apache.commons.math3.linear$RealVector#unitize()" -> "org.apache.commons.math3.linear$RealVector#checkIndex(int)";
  "org.apache.commons.math3.linear$RealVector#unitize()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#start(int,int,int,int,int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#start(int,int,int,int,int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#getMinValue()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#getMinValue()" -> "org.apache.commons.math3.linear$RealVector#iterator()";
  "org.apache.commons.math3.linear$RealVector#getMinValue()" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.linear$RealVector#getMinValue()" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.linear$RealVector#getMinValue()" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#getMinValue()" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.linear$RealVector#getMinValue()" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.linear$RealVector#getMinValue()" -> "org.apache.commons.math3.linear$RealVector#getMinIndex()";
  "org.apache.commons.math3.linear$RealVector#getMinValue()" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector#getMinValue()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#getMinValue()" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.linear$RealVector#getMinValue()" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.linear$RealVector#getMinValue()" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#copySign(double)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#copySign(double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#negate()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#copySign(double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#negate()" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#negate()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#negate()" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#PolynomialFunction(double[])";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#negate()" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#negate()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#negate()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.BlockRealMatrix)";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$BlockRealMatrix#add(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getData()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#getData()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getData()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$DiagonalMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances(double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getData()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[],boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$BlockRealMatrix#transpose()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#transpose()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getTarget()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCovariances(double[],double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getCovariances()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#linearCombination(double,double[],int,double,double[],int,double,double[],int,double,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#linearCombination(double,double[],int,double,double[],int,double,double[],int,double,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#checkParameters()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$Pair#Pair(java.lang.Object,java.lang.Object)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qTy(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$MathIllegalStateException#getContext()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#copy()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#getX()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getConvergenceChecker()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#getDataRef()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath#min(double,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis$FunctionUtils#toDifferentiableMultivariateVectorFunction(org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization$InitialGuess#getInitialGuess()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization$PointVectorValuePair#PointVectorValuePair(double[],double[],boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$MaxCountExceededException#getMax()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getData()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#value(double,double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#copy()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$TooManyEvaluationsException#TooManyEvaluationsException(java.lang.Number)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#operate(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#getData()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getData()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setCost(double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getDataRef()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization$Weight#getWeight()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#squareRoot(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$Pair#getKey()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization$PointVectorValuePair#getPoint()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#determineLMDirection(double[],double[],double[],double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction#value(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#gradient(double,double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getStartPoint()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeResiduals(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization$Target#Target(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getData()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization$PointVectorValuePair#PointVectorValuePair(double[],double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[],boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization$Weight#Weight(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getTarget()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#evaluate(double[],double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#operate(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization$Target#getTarget()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$Incrementor#resetCount()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis$FunctionUtils#toMultivariateDifferentiableVectorFunction(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#determineLMParameter(double[],double,double[],double[],double[],double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#setUp()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization$InitialGuess#InitialGuess(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getObjectiveFunction()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$Incrementor#setMaximalCount(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#checkParameters()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$Pair#Pair(java.lang.Object,java.lang.Object)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qTy(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$MathIllegalStateException#getContext()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#copy()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#getX()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getConvergenceChecker()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$ArrayRealVector#getDataRef()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$FastMath#min(double,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis$FunctionUtils#toDifferentiableMultivariateVectorFunction(org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization$InitialGuess#getInitialGuess()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization$PointVectorValuePair#PointVectorValuePair(double[],double[],boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$MaxCountExceededException#getMax()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getData()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#value(double,double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#copy()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$TooManyEvaluationsException#TooManyEvaluationsException(java.lang.Number)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#operate(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#getData()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getData()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setCost(double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getDataRef()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization$Weight#getWeight()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#squareRoot(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$Pair#getKey()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization$PointVectorValuePair#getPoint()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#determineLMDirection(double[],double[],double[],double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction#value(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#gradient(double,double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getStartPoint()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeResiduals(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getData()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization$PointVectorValuePair#PointVectorValuePair(double[],double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[],boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getTarget()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#evaluate(double[],double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#operate(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization$Target#getTarget()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$Incrementor#resetCount()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis$FunctionUtils#toMultivariateDifferentiableVectorFunction(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#determineLMParameter(double[],double,double[],double[],double[],double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#setUp()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getObjectiveFunction()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])" -> "org.apache.commons.math3.util$Incrementor#setMaximalCount(int)";
  "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int)" -> "org.apache.commons.math3.exception$MathIllegalStateException#getContext()";
  "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()";
  "org.apache.commons.math3.exception$MathParseException#MathParseException(java.lang.String,int)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cosh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cosh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#cosh(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cosh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cosh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cosh(double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cosh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cosh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cosh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#cosh(double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#sinh(double)";
  "org.apache.commons.math3.util$Incrementor#incrementCount(int)" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockHeight(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockHeight(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#setColumnMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#AbstractLeastSquaresOptimizer()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#AbstractLeastSquaresOptimizer()" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#BaseAbstractMultivariateVectorOptimizer()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#AbstractLeastSquaresOptimizer()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#AbstractLeastSquaresOptimizer()" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#BaseAbstractMultivariateVectorOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#AbstractLeastSquaresOptimizer()" -> "org.apache.commons.math3.util$Incrementor#Incrementor()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#AbstractLeastSquaresOptimizer()" -> "org.apache.commons.math3.util$Incrementor#Incrementor(int,org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#AbstractLeastSquaresOptimizer()" -> "org.apache.commons.math3.util$Incrementor#Incrementor(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#AbstractLeastSquaresOptimizer()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$MathUtils#checkFinite(double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$MathUtils#checkFinite(double[])" -> "org.apache.commons.math3.exception$NotFiniteNumberException#NotFiniteNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$MathUtils#checkFinite(double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.ArrayRealVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.ArrayRealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.ArrayRealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.ArrayRealVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.ArrayRealVector)" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.ArrayRealVector)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$ArrayRealVector#ebeDivide(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#ebeDivide(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$ArrayRealVector#ebeDivide(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$ArrayRealVector#ebeDivide(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$ArrayRealVector#ebeDivide(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$ArrayRealVector#ebeDivide(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$ArrayRealVector#ebeDivide(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance()";
  "org.apache.commons.math3.linear$ArrayRealVector#ebeDivide(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$ArrayRealVector#ebeDivide(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$ArrayRealVector#ebeDivide(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$ArrayRealVector#ebeDivide(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#ebeDivide(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.linear$ArrayRealVector#ebeDivide(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int)";
  "org.apache.commons.math3.linear$ArrayRealVector#ebeDivide(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()";
  "org.apache.commons.math3.linear$ArrayRealVector#ebeDivide(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)";
  "org.apache.commons.math3.linear$ArrayRealVector#ebeDivide(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$ArrayRealVector#ebeDivide(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$ArrayRealVector#ebeDivide(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.linear$ArrayRealVector#ebeDivide(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$ArrayRealVector#ebeDivide(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#pow(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#atan(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#atan2(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#subtract(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#divide(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#add(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#cbrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#multiply(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math3.linear$NonSquareMatrixException#NonSquareMatrixException(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getTrace()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.FieldMatrix)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#multiply(org.apache.commons.math3.linear.BlockFieldMatrix)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkMultiplicationCompatible(org.apache.commons.math3.linear.FieldMatrix)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#outerProduct(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$RealVector#outerProduct(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$ArrayRealVector#ebeMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#ebeMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$ArrayRealVector#ebeMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$ArrayRealVector#ebeMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$ArrayRealVector#ebeMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$ArrayRealVector#ebeMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$ArrayRealVector#ebeMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance()";
  "org.apache.commons.math3.linear$ArrayRealVector#ebeMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$ArrayRealVector#ebeMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$ArrayRealVector#ebeMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$ArrayRealVector#ebeMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#ebeMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.linear$ArrayRealVector#ebeMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int)";
  "org.apache.commons.math3.linear$ArrayRealVector#ebeMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()";
  "org.apache.commons.math3.linear$ArrayRealVector#ebeMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)";
  "org.apache.commons.math3.linear$ArrayRealVector#ebeMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$ArrayRealVector#ebeMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$ArrayRealVector#ebeMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.linear$ArrayRealVector#ebeMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$ArrayRealVector#ebeMultiply(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#getL1Norm()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#getL1Norm()" -> "org.apache.commons.math3.linear$RealVector#iterator()";
  "org.apache.commons.math3.linear$RealVector#getL1Norm()" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.linear$RealVector#getL1Norm()" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.linear$RealVector#getL1Norm()" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#getL1Norm()" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.linear$RealVector#getL1Norm()" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.linear$RealVector#getL1Norm()" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.linear$RealVector#getL1Norm()" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector#getL1Norm()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#getL1Norm()" -> "org.apache.commons.math3.linear$ArrayRealVector#getL1Norm()";
  "org.apache.commons.math3.linear$RealVector#getL1Norm()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$RealVector#getL1Norm()" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.linear$RealVector#getL1Norm()" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.linear$RealVector#getL1Norm()" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$DiagonalMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.fitting$CurveFitter#addObservedPoint(double,double)" -> "org.apache.commons.math3.optimization.fitting$CurveFitter#addObservedPoint(double,double,double)";
  "org.apache.commons.math3.optimization.fitting$CurveFitter#addObservedPoint(double,double)" -> "org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#WeightedObservedPoint(double,double,double)";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],double[])" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$FastMath#copySign(float,float)";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$FastMath#ceil(double)";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$FastMath#nextAfter(double,double)";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#round(float,int,int)" -> "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)";
  "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)" -> "org.apache.commons.math3.util$FastMath#ceil(double)";
  "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()";
  "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)" -> "org.apache.commons.math3.util$FastMath#nextAfter(double,double)";
  "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockHeight(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#subtract(double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#add(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#subtract(double)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealVector(double[])" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealVector(double[])" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealVector(double[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealVector(double[])" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealVector(double[])" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealVector(double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#createRealVector(double[])" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealVector(double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealVector(double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealVector(double[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealVector(double[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#derivative()" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#derivative()" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#polynomialDerivative()";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#derivative()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#derivative()" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#PolynomialFunction(double[])";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#derivative()" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#differentiate(double[])";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#derivative()" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#derivative()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#derivative()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#scalarAdd(org.apache.commons.math3.FieldElement)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#add(org.apache.commons.math3.linear.OpenMapRealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$OpenMapRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.ArrayRealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.ArrayRealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.ArrayRealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.ArrayRealVector)";
  "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.ArrayRealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance()";
  "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.ArrayRealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.ArrayRealVector)" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.ArrayRealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()";
  "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.ArrayRealVector)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int,double)" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setColumn(int,double[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDataRef()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$BlockRealMatrix#setColumnVector(int,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getWrongColumnDimension()" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#getWrongDimension(int)";
  "org.apache.commons.math3.util$Precision#equals(double,double)" -> "org.apache.commons.math3.util$FastMath#abs(long)";
  "org.apache.commons.math3.util$Precision#equals(double,double)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(double,double)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#equals(double,double)" -> "org.apache.commons.math3.util$Precision#equals(double,double,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.exception$MathIllegalStateException#getContext()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$DiagonalMatrix#copy()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#getX()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$ArrayRealVector#getDataRef()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.exception$MaxCountExceededException#getMax()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#value(double,double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$BlockRealMatrix#copy()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.exception$TooManyEvaluationsException#TooManyEvaluationsException(java.lang.Number)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#operate(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getDataRef()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$RealVector#toArray()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction#value(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#gradient(double,double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeResiduals(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$ArrayRealVector#toArray()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[],boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getTarget()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#evaluate(double[],double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$BlockRealMatrix#operate(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#updateResidualsAndCost()" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#remainder(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#remainder(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#rint(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#remainder(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#remainder(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#remainder(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#remainder(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#remainder(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#remainder(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#remainder(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#remainder(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#remainder(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#remainder(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#remainder(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#rint(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#remainder(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#remainder(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#remainder(double[],int,double[],int,double[],int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#start(int,int,int,int,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#start(int,int,int,int,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#MatrixUtils$BigFractionMatrixConverter()";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#getConvertedMatrix()";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getRowMatrix(int)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.util$FastMath#ceil(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getOrder()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#ceil()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#preMultiply(org.apache.commons.math3.linear.FieldVector)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#preMultiply(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DSCompiler#linearCombination(double,double[],int,double,double[],int,double,double[],int,double[],int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#pow(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#scalb(int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#abs()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#negate()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#getExponent(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#add(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#scalb(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#cbrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getExponent()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#multiply(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getExponent()" -> "org.apache.commons.math3.util$FastMath#getExponent(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getExponent()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#add(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" -> "org.apache.commons.math3.util$FastMath#pow(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#rootN(int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" -> "org.apache.commons.math3.util$FastMath#cbrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#rootN(double[],int,int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#sqrt()" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#addToEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)" -> "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)";
  "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)" -> "org.apache.commons.math3.linear$RealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)";
  "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)" -> "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)";
  "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)" -> "org.apache.commons.math3.linear$RealVector#checkIndex(int)";
  "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)";
  "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$NonSquareMatrixException#NonSquareMatrixException(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#checkIndex(int)";
  "org.apache.commons.math3.linear$MatrixUtils#solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkMultiplicationCompatible(org.apache.commons.math3.linear.FieldMatrix)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldVector(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldVector(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldVector(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldVector(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldVector(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getField()";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldVector(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$ZeroException#ZeroException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldVector(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixDimensionMismatchException#getExpectedColumnDimension()" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#getExpectedDimension(int)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#copyIn(org.apache.commons.math3.FieldElement[][])";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][])";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockHeight(int)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.FieldElement[][])";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(int,int,org.apache.commons.math3.FieldElement[][],boolean)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getField()";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[][])";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#toBlocksLayout(org.apache.commons.math3.FieldElement[][])";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.linear$MatrixUtils#createFieldMatrix(org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#equals(java.lang.Object)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$ArrayRealVector#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$ArrayRealVector#equals(java.lang.Object)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#equals(java.lang.Object)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$ArrayRealVector#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$ArrayRealVector#isNaN()";
  "org.apache.commons.math3.linear$RealVector#mapDivide(double)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$RealVector#mapDivide(double)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$RealVector#mapDivide(double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#mapDivide(double)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$RealVector#mapDivide(double)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealVector#mapDivide(double)" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(double)";
  "org.apache.commons.math3.linear$RealVector#mapDivide(double)" -> "org.apache.commons.math3.linear$RealVector#iterator()";
  "org.apache.commons.math3.linear$RealVector#mapDivide(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,boolean)";
  "org.apache.commons.math3.linear$RealVector#mapDivide(double)" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.linear$RealVector#mapDivide(double)" -> "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)";
  "org.apache.commons.math3.linear$RealVector#mapDivide(double)" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.linear$RealVector#mapDivide(double)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$RealVector#mapDivide(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#mapDivide(double)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance()";
  "org.apache.commons.math3.linear$RealVector#mapDivide(double)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.linear$RealVector#mapDivide(double)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealVector#mapDivide(double)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.linear$RealVector#mapDivide(double)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#mapDivide(double)" -> "org.apache.commons.math3.linear$RealVector$Entry#setValue(double)";
  "org.apache.commons.math3.linear$RealVector#mapDivide(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector#mapDivide(double)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$RealVector#mapDivide(double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#mapDivide(double)" -> "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)";
  "org.apache.commons.math3.linear$RealVector#mapDivide(double)" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.linear$RealVector#mapDivide(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)";
  "org.apache.commons.math3.linear$RealVector#mapDivide(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()";
  "org.apache.commons.math3.linear$RealVector#mapDivide(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#copy()";
  "org.apache.commons.math3.linear$RealVector#mapDivide(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#mapDivideToSelf(double)";
  "org.apache.commons.math3.linear$RealVector#mapDivide(double)" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#evaluate(double[],double)";
  "org.apache.commons.math3.linear$RealVector#mapDivide(double)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.linear$RealVector#mapDivide(double)" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.linear$RealVector#mapDivide(double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$RealVector#mapDivide(double)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#mapDivide(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)";
  "org.apache.commons.math3.linear$RealVector#mapDivide(double)" -> "org.apache.commons.math3.analysis$FunctionUtils#fix2ndArgument(org.apache.commons.math3.analysis.BivariateFunction,double)";
  "org.apache.commons.math3.linear$RealVector#mapDivide(double)" -> "org.apache.commons.math3.linear$RealVector#checkIndex(int)";
  "org.apache.commons.math3.linear$RealVector#mapDivide(double)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$DiagonalMatrix#subtract(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#subtract(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#subtract(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$DiagonalMatrix#subtract(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$DiagonalMatrix#subtract(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#subtract(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#subtract(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#subtract(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#subtract(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#subtract(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$DiagonalMatrix#subtract(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#subtract(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$DiagonalMatrix#subtract(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$DiagonalMatrix#subtract(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$DiagonalMatrix#subtract(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#subtract(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$DiagonalMatrix#subtract(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[],boolean)";
  "org.apache.commons.math3.linear$DiagonalMatrix#subtract(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$DiagonalMatrix#subtract(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$DiagonalMatrix#subtract(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#subtract(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$DiagonalMatrix#subtract(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$DiagonalMatrix#subtract(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$DiagonalMatrix#subtract(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.linear$DiagonalMatrix#subtract(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#subtract(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.linear$DiagonalMatrix#subtract(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$DiagonalMatrix#subtract(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$DiagonalMatrix#subtract(org.apache.commons.math3.linear.DiagonalMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#divide(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#multiply(double[],int,double[],int,double[],int)";
  "org.apache.commons.math3.linear$RealVector#addToEntry(int,double)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$RealVector#addToEntry(int,double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#addToEntry(int,double)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#addToEntry(int,double)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#addToEntry(int,double)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector#addToEntry(int,double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#addToEntry(int,double)" -> "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)";
  "org.apache.commons.math3.linear$RealVector#addToEntry(int,double)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#addToEntry(int,double)" -> "org.apache.commons.math3.linear$RealVector#checkIndex(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#unitVector()" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$RealVector#unitVector()" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$RealVector#unitVector()" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#unitVector()" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$RealVector#unitVector()" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealVector#unitVector()" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(double)";
  "org.apache.commons.math3.linear$RealVector#unitVector()" -> "org.apache.commons.math3.linear$RealVector#iterator()";
  "org.apache.commons.math3.linear$RealVector#unitVector()" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,boolean)";
  "org.apache.commons.math3.linear$RealVector#unitVector()" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.linear$RealVector#unitVector()" -> "org.apache.commons.math3.linear$RealVector#mapDivideToSelf(double)";
  "org.apache.commons.math3.linear$RealVector#unitVector()" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.linear$RealVector#unitVector()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$RealVector#unitVector()" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#unitVector()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.linear$RealVector#unitVector()" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance()";
  "org.apache.commons.math3.linear$RealVector#unitVector()" -> "org.apache.commons.math3.linear$ArrayRealVector#getNorm()";
  "org.apache.commons.math3.linear$RealVector#unitVector()" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.linear$RealVector#unitVector()" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealVector#unitVector()" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.linear$RealVector#unitVector()" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#unitVector()" -> "org.apache.commons.math3.linear$RealVector$Entry#setValue(double)";
  "org.apache.commons.math3.linear$RealVector#unitVector()" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector#unitVector()" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$RealVector#unitVector()" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#unitVector()" -> "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)";
  "org.apache.commons.math3.linear$RealVector#unitVector()" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#unitVector()" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.linear$RealVector#unitVector()" -> "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)";
  "org.apache.commons.math3.linear$RealVector#unitVector()" -> "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()";
  "org.apache.commons.math3.linear$RealVector#unitVector()" -> "org.apache.commons.math3.linear$ArrayRealVector#copy()";
  "org.apache.commons.math3.linear$RealVector#unitVector()" -> "org.apache.commons.math3.linear$ArrayRealVector#mapDivideToSelf(double)";
  "org.apache.commons.math3.linear$RealVector#unitVector()" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#evaluate(double[],double)";
  "org.apache.commons.math3.linear$RealVector#unitVector()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$RealVector#unitVector()" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.linear$RealVector#unitVector()" -> "org.apache.commons.math3.linear$RealVector#getNorm()";
  "org.apache.commons.math3.linear$RealVector#unitVector()" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.linear$RealVector#unitVector()" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$RealVector#unitVector()" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#unitVector()" -> "org.apache.commons.math3.linear$RealVector#mapDivide(double)";
  "org.apache.commons.math3.linear$RealVector#unitVector()" -> "org.apache.commons.math3.linear$ArrayRealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)";
  "org.apache.commons.math3.linear$RealVector#unitVector()" -> "org.apache.commons.math3.analysis$FunctionUtils#fix2ndArgument(org.apache.commons.math3.analysis.BivariateFunction,double)";
  "org.apache.commons.math3.linear$RealVector#unitVector()" -> "org.apache.commons.math3.linear$RealVector#checkIndex(int)";
  "org.apache.commons.math3.linear$RealVector#unitVector()" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],int,int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],int,int)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],int,int)" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],int,int)" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],int,int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(double)";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#iterator()";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,boolean)";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance()";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#mapMultiplyToSelf(double)";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$Entry#setValue(double)";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#subtract(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(int)";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#mapMultiply(double)";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#copy()";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#evaluate(double[],double)";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#mapMultiplyToSelf(double)";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.analysis$FunctionUtils#fix2ndArgument(org.apache.commons.math3.analysis.BivariateFunction,double)";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#checkIndex(int)";
  "org.apache.commons.math3.linear$RealVector#subtract(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization$PointVectorValuePair#getValueRef()" -> "org.apache.commons.math3.util$Pair#getValue()";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#equals(java.lang.Object)";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#equals(java.lang.Object)";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#equals(java.lang.Object)";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$RealVector#equals(java.lang.Object)";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$ArrayRealVector#equals(java.lang.Object)";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$ArrayRealVector#isNaN()";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.util$Pair#equals(java.lang.Object)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.util$FastMath#main(java.lang.String[])" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.util$FastMath#nextUp(float)" -> "org.apache.commons.math3.util$FastMath#nextAfter(float,double)";
  "org.apache.commons.math3.util$FastMath#nextUp(float)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$RealVector#mapAdd(double)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$RealVector#mapAdd(double)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$RealVector#mapAdd(double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#mapAdd(double)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$RealVector#mapAdd(double)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealVector#mapAdd(double)" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(double)";
  "org.apache.commons.math3.linear$RealVector#mapAdd(double)" -> "org.apache.commons.math3.linear$RealVector#iterator()";
  "org.apache.commons.math3.linear$RealVector#mapAdd(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,boolean)";
  "org.apache.commons.math3.linear$RealVector#mapAdd(double)" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.linear$RealVector#mapAdd(double)" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.linear$RealVector#mapAdd(double)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$RealVector#mapAdd(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#mapAdd(double)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance()";
  "org.apache.commons.math3.linear$RealVector#mapAdd(double)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.linear$RealVector#mapAdd(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#mapAddToSelf(double)";
  "org.apache.commons.math3.linear$RealVector#mapAdd(double)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealVector#mapAdd(double)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.linear$RealVector#mapAdd(double)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#mapAdd(double)" -> "org.apache.commons.math3.linear$RealVector$Entry#setValue(double)";
  "org.apache.commons.math3.linear$RealVector#mapAdd(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector#mapAdd(double)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$RealVector#mapAdd(double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#mapAdd(double)" -> "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)";
  "org.apache.commons.math3.linear$RealVector#mapAdd(double)" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.linear$RealVector#mapAdd(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)";
  "org.apache.commons.math3.linear$RealVector#mapAdd(double)" -> "org.apache.commons.math3.linear$RealVector#mapAddToSelf(double)";
  "org.apache.commons.math3.linear$RealVector#mapAdd(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()";
  "org.apache.commons.math3.linear$RealVector#mapAdd(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#copy()";
  "org.apache.commons.math3.linear$RealVector#mapAdd(double)" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#evaluate(double[],double)";
  "org.apache.commons.math3.linear$RealVector#mapAdd(double)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.linear$RealVector#mapAdd(double)" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.linear$RealVector#mapAdd(double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$RealVector#mapAdd(double)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#mapAdd(double)" -> "org.apache.commons.math3.linear$ArrayRealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)";
  "org.apache.commons.math3.linear$RealVector#mapAdd(double)" -> "org.apache.commons.math3.analysis$FunctionUtils#fix2ndArgument(org.apache.commons.math3.analysis.BivariateFunction,double)";
  "org.apache.commons.math3.linear$RealVector#mapAdd(double)" -> "org.apache.commons.math3.linear$RealVector#checkIndex(int)";
  "org.apache.commons.math3.linear$RealVector#mapAdd(double)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRow(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#getRow(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#getRowVector(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)" -> "org.apache.commons.math3.linear$ArrayRealVector#walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)";
  "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$ArrayRealVector#walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)" -> "org.apache.commons.math3.linear$RealVector#checkIndices(int,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnVector(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockHeight(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnVector(int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnVector(int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnVector(int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cosh()" -> "org.apache.commons.math3.util$FastMath#exp(double,double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cosh()" -> "org.apache.commons.math3.util$FastMath#cosh(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cosh()" -> "org.apache.commons.math3.util$FastMath$ExpIntTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cosh()" -> "org.apache.commons.math3.util$FastMath#exp(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cosh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cosh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cosh()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cosh()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cosh()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#cosh(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cosh()" -> "org.apache.commons.math3.util$FastMath$ExpFracTable#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cosh()" -> "org.apache.commons.math3.util$FastMath#expm1(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#cosh()" -> "org.apache.commons.math3.util$FastMath#sinh(double)";
  "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#value(double)";
  "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.linear$RealVector#iterator()";
  "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,boolean)";
  "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance()";
  "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.linear$RealVector$Entry#setValue(double)";
  "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.linear$RealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)";
  "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.linear$ArrayRealVector#setEntry(int,double)";
  "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.linear$ArrayRealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)";
  "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()";
  "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.linear$ArrayRealVector#copy()";
  "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#evaluate(double[],double)";
  "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.linear$ArrayRealVector#mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)";
  "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.linear$RealVector#checkIndex(int)";
  "org.apache.commons.math3.linear$RealVector#map(org.apache.commons.math3.analysis.UnivariateFunction)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.ArrayRealVector)";
  "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance()";
  "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()";
  "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$ArrayRealVector#append(org.apache.commons.math3.linear.RealVector)" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$FastMath#copySign(float,float)";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$FastMath#ceil(double)";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.exception$MathArithmeticException#MathArithmeticException()";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$FastMath#nextAfter(double,double)";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$FastMath#floor(double)";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$Precision#round(float,int,int)";
  "org.apache.commons.math3.util$Precision#round(float,int)" -> "org.apache.commons.math3.util$Precision#roundUnscaled(double,double,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int[],int[],org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int[],int[],org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int[],int[],org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$NoDataException#NoDataException()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int[],int[],org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int[],int[],org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int[],int[],org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int[],int[],org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int[],int[],org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int[],int[],org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int[],int[],org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int[],int[],org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int[],int[],org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int[],int[],org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int[],int[],org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int[],int[],org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int[],int[],org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int[],int[],org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int[],int[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int[],int[],org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#copySubMatrix(int[],int[],org.apache.commons.math3.FieldElement[][])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acos()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#acos(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acos()" -> "org.apache.commons.math3.util$FastMath#atan(double,double,boolean)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acos()" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acos()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acos()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acos()" -> "org.apache.commons.math3.util$Precision#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acos()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acos()" -> "org.apache.commons.math3.util$FastMath#doubleHighPart(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acos()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acos()" -> "org.apache.commons.math3.util$FastMath#copySign(double,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#acos()" -> "org.apache.commons.math3.util$FastMath#acos(double)";
  "org.apache.commons.math3.util$Pair#Pair(org.apache.commons.math3.util.Pair)" -> "org.apache.commons.math3.util$Pair#Pair(java.lang.Object,java.lang.Object)";
  "org.apache.commons.math3.util$Pair#Pair(org.apache.commons.math3.util.Pair)" -> "org.apache.commons.math3.util$Pair#getValue()";
  "org.apache.commons.math3.util$Pair#Pair(org.apache.commons.math3.util.Pair)" -> "org.apache.commons.math3.optimization$PointVectorValuePair#getValue()";
  "org.apache.commons.math3.util$Pair#Pair(org.apache.commons.math3.util.Pair)" -> "org.apache.commons.math3.util$Pair#getKey()";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[])";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#copy()";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#copy()";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix)";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$NonSquareMatrixException#NonSquareMatrixException(int,int)";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization$Weight#Weight(org.apache.commons.math3.linear.RealMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.fitting$PolynomialFitter#PolynomialFitter(org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer)" -> "org.apache.commons.math3.optimization.fitting$CurveFitter#CurveFitter(org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer)";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#getConvertedMatrix()";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#start(int,int,int,int,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils$FractionMatrixConverter#MatrixUtils$FractionMatrixConverter()";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils$BigFractionMatrixConverter#start(int,int,int,int,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#extractField(org.apache.commons.math3.FieldElement[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getField()";
  "org.apache.commons.math3.analysis$FunctionUtils#collector(org.apache.commons.math3.analysis.BivariateFunction,double)" -> "org.apache.commons.math3.analysis$FunctionUtils#collector(org.apache.commons.math3.analysis.BivariateFunction,org.apache.commons.math3.analysis.UnivariateFunction,double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#linearCombination(double,double[],int,double,double[],int,double,double[],int,double[],int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#createBlocksLayout(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#Array2DRowFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#AbstractFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#getField()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#buildArray(org.apache.commons.math3.Field,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#BlockFieldMatrix(org.apache.commons.math3.Field,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#getSubMatrix(int,int,int,int)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#checkParameters()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$NoDataException#NoDataException(org.apache.commons.math3.exception.util.Localizable)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$Pair#Pair(java.lang.Object,java.lang.Object)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qTy(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyOut()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setUp()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$MathIllegalStateException#getContext()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.DiagonalMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getWeight()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copy()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getPartialDerivativeIndex(int,int,int[][],int[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#copy()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.fitting$WeightedObservedPoint#getX()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVector$Entry#setIndex(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getConvergenceChecker()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#getDataRef()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVector$Entry#getIndex()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath#min(double,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis$FunctionUtils#toDifferentiableMultivariateVectorFunction(org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization$InitialGuess#getInitialGuess()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization$PointVectorValuePair#PointVectorValuePair(double[],double[],boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$MaxCountExceededException#getMax()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#getDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath#sqrt(double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getData()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVectorFormat#getInstance()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#value(double,double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#qrDecomposition(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#next()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#copy()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.BlockRealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setSubMatrix(double[][],int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$TooManyEvaluationsException#TooManyEvaluationsException(java.lang.Number)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#operate(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#getData()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVectorFormat#RealVectorFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath#abs(double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#hasNext()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getData()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#copy()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#setCost(double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getDataRef()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#addToEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#DSCompiler(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#getEntry(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$MathUtils#checkNotNull(java.lang.Object)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization$Weight#getWeight()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$MaxCountExceededException#MaxCountExceededException(java.lang.Number)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#squareRoot(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVector#RealVector()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$Pair#getKey()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization$PointVectorValuePair#getPoint()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#determineLMDirection(double[],double[],double[],double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.fitting$CurveFitter$OldTheoreticalValuesFunction#value(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction$Parametric#gradient(double,double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#convertIndex(int,int,int[][],int,int,int[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getFreeParameters()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVector#dotProduct(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getStartPoint()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#OpenMapRealMatrix(org.apache.commons.math3.linear.OpenMapRealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeResiduals(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#scalarMultiply(double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath#max(double,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#getPartialDerivative(int[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization$Target#Target(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#toBlocksLayout(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getData()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization$PointVectorValuePair#PointVectorValuePair(double[],double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#ArrayRealVector(double[],boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$ConvergenceException#ConvergenceException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$Incrementor#incrementCount()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#operate(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#DiagonalMatrix(double[],boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#copyIn(double[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization$Weight#Weight(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#operate(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getTarget()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.polynomials$PolynomialFunction#evaluate(double[],double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$DimensionMismatchException#DimensionMismatchException(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$NumberIsTooLargeException#NumberIsTooLargeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVector$SparseEntryIterator#advance(org.apache.commons.math3.linear.RealVector$Entry)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#operate(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#scalarMultiply(double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#operate(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#createMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#getWeightSquareRoot()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVector$Entry#getValue()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization$Target#getTarget()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealVector#checkVectorDimensions(int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$Incrementor#resetCount()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis$FunctionUtils#toMultivariateDifferentiableVectorFunction(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#doOptimize()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$LevenbergMarquardtOptimizer#determineLMParameter(double[],double,double[],double[],double[],double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#setUp()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization$InitialGuess#InitialGuess(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.direct$BaseAbstractMultivariateVectorOptimizer#getObjectiveFunction()";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$MathIllegalStateException#MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$ArrayRealVector#dotProduct(org.apache.commons.math3.linear.RealVector)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#computeCost(double[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getCompiler(int,int)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#multiply(org.apache.commons.math3.linear.RealMatrix)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.exception$NullArgumentException#NullArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.optimization.general$AbstractLeastSquaresOptimizer#optimize(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,double[],double[],double[])" -> "org.apache.commons.math3.util$Incrementor#setMaximalCount(int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(int)" -> "org.apache.commons.math3.util$FastMath#pow(double,int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(int)" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#pow(double[],int,int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(int)" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#pow(int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#setEntry(int,int,org.apache.commons.math3.FieldElement)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractFieldMatrix#setRow(int,org.apache.commons.math3.FieldElement[])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockHeight(int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$BlockRealMatrix#getColumnMatrix(int)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.exception$MultiDimensionMismatchException#MultiDimensionMismatchException(org.apache.commons.math3.exception.util.Localizable,java.lang.Integer[],java.lang.Integer[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.linear$MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.linear$BlockRealMatrix#walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.linear$DiagonalMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getEntry(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.linear$MatrixUtils#checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.util$FastMath#max(int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.linear$BlockRealMatrix#walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)";
  "org.apache.commons.math3.linear$AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$Array2DRowRealMatrix#multiplyEntry(int,int,double)" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.util$FastMath#min(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#BlockRealMatrix(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.linear$MatrixUtils#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#blockWidth(int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.linear$MatrixUtils#createRealMatrix(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.exception$MathUnsupportedOperationException#MathUnsupportedOperationException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.linear$RealLinearOperator#RealLinearOperator()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#createBlocksLayout(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getFormat()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.linear$Array2DRowRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.text.NumberFormat)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.util$CompositeFormat#getDefaultNumberFormat(java.util.Locale)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.linear$OpenMapRealMatrix#computeKey(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.linear$MatrixUtils#checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.exception$NotStrictlyPositiveException#NotStrictlyPositiveException(java.lang.Number)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#getInstance()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.linear$AbstractRealMatrix#AbstractRealMatrix(int,int)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.linear$BlockRealMatrix#setEntry(int,int,double)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.linear$DiagonalMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)";
  "org.apache.commons.math3.linear$MatrixUtils#createRealDiagonalMatrix(double[])" -> "org.apache.commons.math3.linear$RealMatrixFormat#RealMatrixFormat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log1p()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#getSize()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log1p()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#compose(double[],int,double[],double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log1p()" -> "org.apache.commons.math3.util$FastMath#log(double,double[])";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log1p()" -> "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#DerivativeStructure(org.apache.commons.math3.analysis.differentiation.DSCompiler)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log1p()" -> "org.apache.commons.math3.analysis.differentiation$DSCompiler#log1p(double[],int,double[],int)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log1p()" -> "org.apache.commons.math3.util$FastMath#<clinit>()";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log1p()" -> "org.apache.commons.math3.util$FastMath#log1p(double)";
  "org.apache.commons.math3.analysis.differentiation$DerivativeStructure#log1p()" -> "org.apache.commons.math3.util$FastMath$lnMant#<clinit>()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkRowIndex(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalNumberException#MathIllegalNumberException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$Array2DRowFieldMatrix#getColumnDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$MathIllegalArgumentException#MathIllegalArgumentException(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$AbstractFieldMatrix#checkColumnIndex(int)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.linear$BlockFieldMatrix#getRowDimension()";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$NumberIsTooSmallException#NumberIsTooSmallException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)";
  "org.apache.commons.math3.linear$Array2DRowFieldMatrix#walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)" -> "org.apache.commons.math3.exception$OutOfRangeException#OutOfRangeException(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)";
}
